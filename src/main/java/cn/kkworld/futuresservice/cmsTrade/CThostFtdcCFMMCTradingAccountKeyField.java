/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcCFMMCTradingAccountKeyField implements org.apache.thrift.TBase<CThostFtdcCFMMCTradingAccountKeyField, CThostFtdcCFMMCTradingAccountKeyField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcCFMMCTradingAccountKeyField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcCFMMCTradingAccountKeyField");

  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PARTICIPANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("participantID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField KEY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("keyID", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CURRENT_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("currentKey", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcCFMMCTradingAccountKeyFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcCFMMCTradingAccountKeyFieldTupleSchemeFactory());
  }

  public String brokerID; // required
  public String participantID; // required
  public String accountID; // required
  public int keyID; // required
  public String currentKey; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BROKER_ID((short)1, "brokerID"),
    PARTICIPANT_ID((short)2, "participantID"),
    ACCOUNT_ID((short)3, "accountID"),
    KEY_ID((short)4, "keyID"),
    CURRENT_KEY((short)5, "currentKey");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BROKER_ID
          return BROKER_ID;
        case 2: // PARTICIPANT_ID
          return PARTICIPANT_ID;
        case 3: // ACCOUNT_ID
          return ACCOUNT_ID;
        case 4: // KEY_ID
          return KEY_ID;
        case 5: // CURRENT_KEY
          return CURRENT_KEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __KEYID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.PARTICIPANT_ID, new org.apache.thrift.meta_data.FieldMetaData("participantID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcParticipantIDType")));
    tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcAccountIDType")));
    tmpMap.put(_Fields.KEY_ID, new org.apache.thrift.meta_data.FieldMetaData("keyID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcSequenceNoType")));
    tmpMap.put(_Fields.CURRENT_KEY, new org.apache.thrift.meta_data.FieldMetaData("currentKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcCFMMCKeyType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcCFMMCTradingAccountKeyField.class, metaDataMap);
  }

  public CThostFtdcCFMMCTradingAccountKeyField() {
  }

  public CThostFtdcCFMMCTradingAccountKeyField(
    String brokerID,
    String participantID,
    String accountID,
    int keyID,
    String currentKey)
  {
    this();
    this.brokerID = brokerID;
    this.participantID = participantID;
    this.accountID = accountID;
    this.keyID = keyID;
    setKeyIDIsSet(true);
    this.currentKey = currentKey;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcCFMMCTradingAccountKeyField(CThostFtdcCFMMCTradingAccountKeyField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetParticipantID()) {
      this.participantID = other.participantID;
    }
    if (other.isSetAccountID()) {
      this.accountID = other.accountID;
    }
    this.keyID = other.keyID;
    if (other.isSetCurrentKey()) {
      this.currentKey = other.currentKey;
    }
  }

  public CThostFtdcCFMMCTradingAccountKeyField deepCopy() {
    return new CThostFtdcCFMMCTradingAccountKeyField(this);
  }

  @Override
  public void clear() {
    this.brokerID = null;
    this.participantID = null;
    this.accountID = null;
    setKeyIDIsSet(false);
    this.keyID = 0;
    this.currentKey = null;
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcCFMMCTradingAccountKeyField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getParticipantID() {
    return this.participantID;
  }

  public CThostFtdcCFMMCTradingAccountKeyField setParticipantID(String participantID) {
    this.participantID = participantID;
    return this;
  }

  public void unsetParticipantID() {
    this.participantID = null;
  }

  /** Returns true if field participantID is set (has been assigned a value) and false otherwise */
  public boolean isSetParticipantID() {
    return this.participantID != null;
  }

  public void setParticipantIDIsSet(boolean value) {
    if (!value) {
      this.participantID = null;
    }
  }

  public String getAccountID() {
    return this.accountID;
  }

  public CThostFtdcCFMMCTradingAccountKeyField setAccountID(String accountID) {
    this.accountID = accountID;
    return this;
  }

  public void unsetAccountID() {
    this.accountID = null;
  }

  /** Returns true if field accountID is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountID() {
    return this.accountID != null;
  }

  public void setAccountIDIsSet(boolean value) {
    if (!value) {
      this.accountID = null;
    }
  }

  public int getKeyID() {
    return this.keyID;
  }

  public CThostFtdcCFMMCTradingAccountKeyField setKeyID(int keyID) {
    this.keyID = keyID;
    setKeyIDIsSet(true);
    return this;
  }

  public void unsetKeyID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KEYID_ISSET_ID);
  }

  /** Returns true if field keyID is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyID() {
    return EncodingUtils.testBit(__isset_bitfield, __KEYID_ISSET_ID);
  }

  public void setKeyIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KEYID_ISSET_ID, value);
  }

  public String getCurrentKey() {
    return this.currentKey;
  }

  public CThostFtdcCFMMCTradingAccountKeyField setCurrentKey(String currentKey) {
    this.currentKey = currentKey;
    return this;
  }

  public void unsetCurrentKey() {
    this.currentKey = null;
  }

  /** Returns true if field currentKey is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentKey() {
    return this.currentKey != null;
  }

  public void setCurrentKeyIsSet(boolean value) {
    if (!value) {
      this.currentKey = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case PARTICIPANT_ID:
      if (value == null) {
        unsetParticipantID();
      } else {
        setParticipantID((String)value);
      }
      break;

    case ACCOUNT_ID:
      if (value == null) {
        unsetAccountID();
      } else {
        setAccountID((String)value);
      }
      break;

    case KEY_ID:
      if (value == null) {
        unsetKeyID();
      } else {
        setKeyID((Integer)value);
      }
      break;

    case CURRENT_KEY:
      if (value == null) {
        unsetCurrentKey();
      } else {
        setCurrentKey((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BROKER_ID:
      return getBrokerID();

    case PARTICIPANT_ID:
      return getParticipantID();

    case ACCOUNT_ID:
      return getAccountID();

    case KEY_ID:
      return Integer.valueOf(getKeyID());

    case CURRENT_KEY:
      return getCurrentKey();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BROKER_ID:
      return isSetBrokerID();
    case PARTICIPANT_ID:
      return isSetParticipantID();
    case ACCOUNT_ID:
      return isSetAccountID();
    case KEY_ID:
      return isSetKeyID();
    case CURRENT_KEY:
      return isSetCurrentKey();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcCFMMCTradingAccountKeyField)
      return this.equals((CThostFtdcCFMMCTradingAccountKeyField)that);
    return false;
  }

  public boolean equals(CThostFtdcCFMMCTradingAccountKeyField that) {
    if (that == null)
      return false;

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_participantID = true && this.isSetParticipantID();
    boolean that_present_participantID = true && that.isSetParticipantID();
    if (this_present_participantID || that_present_participantID) {
      if (!(this_present_participantID && that_present_participantID))
        return false;
      if (!this.participantID.equals(that.participantID))
        return false;
    }

    boolean this_present_accountID = true && this.isSetAccountID();
    boolean that_present_accountID = true && that.isSetAccountID();
    if (this_present_accountID || that_present_accountID) {
      if (!(this_present_accountID && that_present_accountID))
        return false;
      if (!this.accountID.equals(that.accountID))
        return false;
    }

    boolean this_present_keyID = true;
    boolean that_present_keyID = true;
    if (this_present_keyID || that_present_keyID) {
      if (!(this_present_keyID && that_present_keyID))
        return false;
      if (this.keyID != that.keyID)
        return false;
    }

    boolean this_present_currentKey = true && this.isSetCurrentKey();
    boolean that_present_currentKey = true && that.isSetCurrentKey();
    if (this_present_currentKey || that_present_currentKey) {
      if (!(this_present_currentKey && that_present_currentKey))
        return false;
      if (!this.currentKey.equals(that.currentKey))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcCFMMCTradingAccountKeyField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParticipantID()).compareTo(other.isSetParticipantID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParticipantID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.participantID, other.participantID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountID()).compareTo(other.isSetAccountID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountID, other.accountID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeyID()).compareTo(other.isSetKeyID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyID, other.keyID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentKey()).compareTo(other.isSetCurrentKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentKey, other.currentKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcCFMMCTradingAccountKeyField(");
    boolean first = true;

    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("participantID:");
    if (this.participantID == null) {
      sb.append("null");
    } else {
      sb.append(this.participantID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountID:");
    if (this.accountID == null) {
      sb.append("null");
    } else {
      sb.append(this.accountID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("keyID:");
    sb.append(this.keyID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentKey:");
    if (this.currentKey == null) {
      sb.append("null");
    } else {
      sb.append(this.currentKey);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcCFMMCTradingAccountKeyFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcCFMMCTradingAccountKeyFieldStandardScheme getScheme() {
      return new CThostFtdcCFMMCTradingAccountKeyFieldStandardScheme();
    }
  }

  private static class CThostFtdcCFMMCTradingAccountKeyFieldStandardScheme extends StandardScheme<CThostFtdcCFMMCTradingAccountKeyField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcCFMMCTradingAccountKeyField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTICIPANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.participantID = iprot.readString();
              struct.setParticipantIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountID = iprot.readString();
              struct.setAccountIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // KEY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.keyID = iprot.readI32();
              struct.setKeyIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CURRENT_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currentKey = iprot.readString();
              struct.setCurrentKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcCFMMCTradingAccountKeyField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.participantID != null) {
        oprot.writeFieldBegin(PARTICIPANT_ID_FIELD_DESC);
        oprot.writeString(struct.participantID);
        oprot.writeFieldEnd();
      }
      if (struct.accountID != null) {
        oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
        oprot.writeString(struct.accountID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(KEY_ID_FIELD_DESC);
      oprot.writeI32(struct.keyID);
      oprot.writeFieldEnd();
      if (struct.currentKey != null) {
        oprot.writeFieldBegin(CURRENT_KEY_FIELD_DESC);
        oprot.writeString(struct.currentKey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcCFMMCTradingAccountKeyFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcCFMMCTradingAccountKeyFieldTupleScheme getScheme() {
      return new CThostFtdcCFMMCTradingAccountKeyFieldTupleScheme();
    }
  }

  private static class CThostFtdcCFMMCTradingAccountKeyFieldTupleScheme extends TupleScheme<CThostFtdcCFMMCTradingAccountKeyField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcCFMMCTradingAccountKeyField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBrokerID()) {
        optionals.set(0);
      }
      if (struct.isSetParticipantID()) {
        optionals.set(1);
      }
      if (struct.isSetAccountID()) {
        optionals.set(2);
      }
      if (struct.isSetKeyID()) {
        optionals.set(3);
      }
      if (struct.isSetCurrentKey()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetParticipantID()) {
        oprot.writeString(struct.participantID);
      }
      if (struct.isSetAccountID()) {
        oprot.writeString(struct.accountID);
      }
      if (struct.isSetKeyID()) {
        oprot.writeI32(struct.keyID);
      }
      if (struct.isSetCurrentKey()) {
        oprot.writeString(struct.currentKey);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcCFMMCTradingAccountKeyField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.participantID = iprot.readString();
        struct.setParticipantIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.accountID = iprot.readString();
        struct.setAccountIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.keyID = iprot.readI32();
        struct.setKeyIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.currentKey = iprot.readString();
        struct.setCurrentKeyIsSet(true);
      }
    }
  }

}

