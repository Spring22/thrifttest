/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcRspUserLoginField implements org.apache.thrift.TBase<CThostFtdcRspUserLoginField, CThostFtdcRspUserLoginField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcRspUserLoginField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcRspUserLoginField");

  private static final org.apache.thrift.protocol.TField TRADING_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("tradingDay", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LOGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("loginTime", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SYSTEM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("systemName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RONT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rontID", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField MAX_ORDER_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("maxOrderRef", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SHFE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("shfeTime", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DCE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("dceTime", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CZCE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("czceTime", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField FFEX_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("ffexTime", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField INE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("ineTime", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcRspUserLoginFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcRspUserLoginFieldTupleSchemeFactory());
  }

  public String tradingDay; // required
  public String loginTime; // required
  public String brokerID; // required
  public String userID; // required
  public String systemName; // required
  public int rontID; // required
  public int sessionID; // required
  public String maxOrderRef; // required
  public String shfeTime; // required
  public String dceTime; // required
  public String czceTime; // required
  public String ffexTime; // required
  public String ineTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRADING_DAY((short)1, "tradingDay"),
    LOGIN_TIME((short)2, "loginTime"),
    BROKER_ID((short)3, "brokerID"),
    USER_ID((short)4, "userID"),
    SYSTEM_NAME((short)5, "systemName"),
    RONT_ID((short)6, "rontID"),
    SESSION_ID((short)7, "sessionID"),
    MAX_ORDER_REF((short)8, "maxOrderRef"),
    SHFE_TIME((short)9, "shfeTime"),
    DCE_TIME((short)10, "dceTime"),
    CZCE_TIME((short)11, "czceTime"),
    FFEX_TIME((short)12, "ffexTime"),
    INE_TIME((short)13, "ineTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRADING_DAY
          return TRADING_DAY;
        case 2: // LOGIN_TIME
          return LOGIN_TIME;
        case 3: // BROKER_ID
          return BROKER_ID;
        case 4: // USER_ID
          return USER_ID;
        case 5: // SYSTEM_NAME
          return SYSTEM_NAME;
        case 6: // RONT_ID
          return RONT_ID;
        case 7: // SESSION_ID
          return SESSION_ID;
        case 8: // MAX_ORDER_REF
          return MAX_ORDER_REF;
        case 9: // SHFE_TIME
          return SHFE_TIME;
        case 10: // DCE_TIME
          return DCE_TIME;
        case 11: // CZCE_TIME
          return CZCE_TIME;
        case 12: // FFEX_TIME
          return FFEX_TIME;
        case 13: // INE_TIME
          return INE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RONTID_ISSET_ID = 0;
  private static final int __SESSIONID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRADING_DAY, new org.apache.thrift.meta_data.FieldMetaData("tradingDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    tmpMap.put(_Fields.LOGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("loginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeType")));
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcUserIDType")));
    tmpMap.put(_Fields.SYSTEM_NAME, new org.apache.thrift.meta_data.FieldMetaData("systemName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcSystemNameType")));
    tmpMap.put(_Fields.RONT_ID, new org.apache.thrift.meta_data.FieldMetaData("rontID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcFrontIDType")));
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcSessionIDType")));
    tmpMap.put(_Fields.MAX_ORDER_REF, new org.apache.thrift.meta_data.FieldMetaData("maxOrderRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderRefType")));
    tmpMap.put(_Fields.SHFE_TIME, new org.apache.thrift.meta_data.FieldMetaData("shfeTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeType")));
    tmpMap.put(_Fields.DCE_TIME, new org.apache.thrift.meta_data.FieldMetaData("dceTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeType")));
    tmpMap.put(_Fields.CZCE_TIME, new org.apache.thrift.meta_data.FieldMetaData("czceTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeType")));
    tmpMap.put(_Fields.FFEX_TIME, new org.apache.thrift.meta_data.FieldMetaData("ffexTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeType")));
    tmpMap.put(_Fields.INE_TIME, new org.apache.thrift.meta_data.FieldMetaData("ineTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcRspUserLoginField.class, metaDataMap);
  }

  public CThostFtdcRspUserLoginField() {
  }

  public CThostFtdcRspUserLoginField(
    String tradingDay,
    String loginTime,
    String brokerID,
    String userID,
    String systemName,
    int rontID,
    int sessionID,
    String maxOrderRef,
    String shfeTime,
    String dceTime,
    String czceTime,
    String ffexTime,
    String ineTime)
  {
    this();
    this.tradingDay = tradingDay;
    this.loginTime = loginTime;
    this.brokerID = brokerID;
    this.userID = userID;
    this.systemName = systemName;
    this.rontID = rontID;
    setRontIDIsSet(true);
    this.sessionID = sessionID;
    setSessionIDIsSet(true);
    this.maxOrderRef = maxOrderRef;
    this.shfeTime = shfeTime;
    this.dceTime = dceTime;
    this.czceTime = czceTime;
    this.ffexTime = ffexTime;
    this.ineTime = ineTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcRspUserLoginField(CThostFtdcRspUserLoginField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTradingDay()) {
      this.tradingDay = other.tradingDay;
    }
    if (other.isSetLoginTime()) {
      this.loginTime = other.loginTime;
    }
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetUserID()) {
      this.userID = other.userID;
    }
    if (other.isSetSystemName()) {
      this.systemName = other.systemName;
    }
    this.rontID = other.rontID;
    this.sessionID = other.sessionID;
    if (other.isSetMaxOrderRef()) {
      this.maxOrderRef = other.maxOrderRef;
    }
    if (other.isSetShfeTime()) {
      this.shfeTime = other.shfeTime;
    }
    if (other.isSetDceTime()) {
      this.dceTime = other.dceTime;
    }
    if (other.isSetCzceTime()) {
      this.czceTime = other.czceTime;
    }
    if (other.isSetFfexTime()) {
      this.ffexTime = other.ffexTime;
    }
    if (other.isSetIneTime()) {
      this.ineTime = other.ineTime;
    }
  }

  public CThostFtdcRspUserLoginField deepCopy() {
    return new CThostFtdcRspUserLoginField(this);
  }

  @Override
  public void clear() {
    this.tradingDay = null;
    this.loginTime = null;
    this.brokerID = null;
    this.userID = null;
    this.systemName = null;
    setRontIDIsSet(false);
    this.rontID = 0;
    setSessionIDIsSet(false);
    this.sessionID = 0;
    this.maxOrderRef = null;
    this.shfeTime = null;
    this.dceTime = null;
    this.czceTime = null;
    this.ffexTime = null;
    this.ineTime = null;
  }

  public String getTradingDay() {
    return this.tradingDay;
  }

  public CThostFtdcRspUserLoginField setTradingDay(String tradingDay) {
    this.tradingDay = tradingDay;
    return this;
  }

  public void unsetTradingDay() {
    this.tradingDay = null;
  }

  /** Returns true if field tradingDay is set (has been assigned a value) and false otherwise */
  public boolean isSetTradingDay() {
    return this.tradingDay != null;
  }

  public void setTradingDayIsSet(boolean value) {
    if (!value) {
      this.tradingDay = null;
    }
  }

  public String getLoginTime() {
    return this.loginTime;
  }

  public CThostFtdcRspUserLoginField setLoginTime(String loginTime) {
    this.loginTime = loginTime;
    return this;
  }

  public void unsetLoginTime() {
    this.loginTime = null;
  }

  /** Returns true if field loginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginTime() {
    return this.loginTime != null;
  }

  public void setLoginTimeIsSet(boolean value) {
    if (!value) {
      this.loginTime = null;
    }
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcRspUserLoginField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getUserID() {
    return this.userID;
  }

  public CThostFtdcRspUserLoginField setUserID(String userID) {
    this.userID = userID;
    return this;
  }

  public void unsetUserID() {
    this.userID = null;
  }

  /** Returns true if field userID is set (has been assigned a value) and false otherwise */
  public boolean isSetUserID() {
    return this.userID != null;
  }

  public void setUserIDIsSet(boolean value) {
    if (!value) {
      this.userID = null;
    }
  }

  public String getSystemName() {
    return this.systemName;
  }

  public CThostFtdcRspUserLoginField setSystemName(String systemName) {
    this.systemName = systemName;
    return this;
  }

  public void unsetSystemName() {
    this.systemName = null;
  }

  /** Returns true if field systemName is set (has been assigned a value) and false otherwise */
  public boolean isSetSystemName() {
    return this.systemName != null;
  }

  public void setSystemNameIsSet(boolean value) {
    if (!value) {
      this.systemName = null;
    }
  }

  public int getRontID() {
    return this.rontID;
  }

  public CThostFtdcRspUserLoginField setRontID(int rontID) {
    this.rontID = rontID;
    setRontIDIsSet(true);
    return this;
  }

  public void unsetRontID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RONTID_ISSET_ID);
  }

  /** Returns true if field rontID is set (has been assigned a value) and false otherwise */
  public boolean isSetRontID() {
    return EncodingUtils.testBit(__isset_bitfield, __RONTID_ISSET_ID);
  }

  public void setRontIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RONTID_ISSET_ID, value);
  }

  public int getSessionID() {
    return this.sessionID;
  }

  public CThostFtdcRspUserLoginField setSessionID(int sessionID) {
    this.sessionID = sessionID;
    setSessionIDIsSet(true);
    return this;
  }

  public void unsetSessionID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionID() {
    return EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  public void setSessionIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
  }

  public String getMaxOrderRef() {
    return this.maxOrderRef;
  }

  public CThostFtdcRspUserLoginField setMaxOrderRef(String maxOrderRef) {
    this.maxOrderRef = maxOrderRef;
    return this;
  }

  public void unsetMaxOrderRef() {
    this.maxOrderRef = null;
  }

  /** Returns true if field maxOrderRef is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxOrderRef() {
    return this.maxOrderRef != null;
  }

  public void setMaxOrderRefIsSet(boolean value) {
    if (!value) {
      this.maxOrderRef = null;
    }
  }

  public String getShfeTime() {
    return this.shfeTime;
  }

  public CThostFtdcRspUserLoginField setShfeTime(String shfeTime) {
    this.shfeTime = shfeTime;
    return this;
  }

  public void unsetShfeTime() {
    this.shfeTime = null;
  }

  /** Returns true if field shfeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetShfeTime() {
    return this.shfeTime != null;
  }

  public void setShfeTimeIsSet(boolean value) {
    if (!value) {
      this.shfeTime = null;
    }
  }

  public String getDceTime() {
    return this.dceTime;
  }

  public CThostFtdcRspUserLoginField setDceTime(String dceTime) {
    this.dceTime = dceTime;
    return this;
  }

  public void unsetDceTime() {
    this.dceTime = null;
  }

  /** Returns true if field dceTime is set (has been assigned a value) and false otherwise */
  public boolean isSetDceTime() {
    return this.dceTime != null;
  }

  public void setDceTimeIsSet(boolean value) {
    if (!value) {
      this.dceTime = null;
    }
  }

  public String getCzceTime() {
    return this.czceTime;
  }

  public CThostFtdcRspUserLoginField setCzceTime(String czceTime) {
    this.czceTime = czceTime;
    return this;
  }

  public void unsetCzceTime() {
    this.czceTime = null;
  }

  /** Returns true if field czceTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCzceTime() {
    return this.czceTime != null;
  }

  public void setCzceTimeIsSet(boolean value) {
    if (!value) {
      this.czceTime = null;
    }
  }

  public String getFfexTime() {
    return this.ffexTime;
  }

  public CThostFtdcRspUserLoginField setFfexTime(String ffexTime) {
    this.ffexTime = ffexTime;
    return this;
  }

  public void unsetFfexTime() {
    this.ffexTime = null;
  }

  /** Returns true if field ffexTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFfexTime() {
    return this.ffexTime != null;
  }

  public void setFfexTimeIsSet(boolean value) {
    if (!value) {
      this.ffexTime = null;
    }
  }

  public String getIneTime() {
    return this.ineTime;
  }

  public CThostFtdcRspUserLoginField setIneTime(String ineTime) {
    this.ineTime = ineTime;
    return this;
  }

  public void unsetIneTime() {
    this.ineTime = null;
  }

  /** Returns true if field ineTime is set (has been assigned a value) and false otherwise */
  public boolean isSetIneTime() {
    return this.ineTime != null;
  }

  public void setIneTimeIsSet(boolean value) {
    if (!value) {
      this.ineTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRADING_DAY:
      if (value == null) {
        unsetTradingDay();
      } else {
        setTradingDay((String)value);
      }
      break;

    case LOGIN_TIME:
      if (value == null) {
        unsetLoginTime();
      } else {
        setLoginTime((String)value);
      }
      break;

    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserID();
      } else {
        setUserID((String)value);
      }
      break;

    case SYSTEM_NAME:
      if (value == null) {
        unsetSystemName();
      } else {
        setSystemName((String)value);
      }
      break;

    case RONT_ID:
      if (value == null) {
        unsetRontID();
      } else {
        setRontID((Integer)value);
      }
      break;

    case SESSION_ID:
      if (value == null) {
        unsetSessionID();
      } else {
        setSessionID((Integer)value);
      }
      break;

    case MAX_ORDER_REF:
      if (value == null) {
        unsetMaxOrderRef();
      } else {
        setMaxOrderRef((String)value);
      }
      break;

    case SHFE_TIME:
      if (value == null) {
        unsetShfeTime();
      } else {
        setShfeTime((String)value);
      }
      break;

    case DCE_TIME:
      if (value == null) {
        unsetDceTime();
      } else {
        setDceTime((String)value);
      }
      break;

    case CZCE_TIME:
      if (value == null) {
        unsetCzceTime();
      } else {
        setCzceTime((String)value);
      }
      break;

    case FFEX_TIME:
      if (value == null) {
        unsetFfexTime();
      } else {
        setFfexTime((String)value);
      }
      break;

    case INE_TIME:
      if (value == null) {
        unsetIneTime();
      } else {
        setIneTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRADING_DAY:
      return getTradingDay();

    case LOGIN_TIME:
      return getLoginTime();

    case BROKER_ID:
      return getBrokerID();

    case USER_ID:
      return getUserID();

    case SYSTEM_NAME:
      return getSystemName();

    case RONT_ID:
      return Integer.valueOf(getRontID());

    case SESSION_ID:
      return Integer.valueOf(getSessionID());

    case MAX_ORDER_REF:
      return getMaxOrderRef();

    case SHFE_TIME:
      return getShfeTime();

    case DCE_TIME:
      return getDceTime();

    case CZCE_TIME:
      return getCzceTime();

    case FFEX_TIME:
      return getFfexTime();

    case INE_TIME:
      return getIneTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRADING_DAY:
      return isSetTradingDay();
    case LOGIN_TIME:
      return isSetLoginTime();
    case BROKER_ID:
      return isSetBrokerID();
    case USER_ID:
      return isSetUserID();
    case SYSTEM_NAME:
      return isSetSystemName();
    case RONT_ID:
      return isSetRontID();
    case SESSION_ID:
      return isSetSessionID();
    case MAX_ORDER_REF:
      return isSetMaxOrderRef();
    case SHFE_TIME:
      return isSetShfeTime();
    case DCE_TIME:
      return isSetDceTime();
    case CZCE_TIME:
      return isSetCzceTime();
    case FFEX_TIME:
      return isSetFfexTime();
    case INE_TIME:
      return isSetIneTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcRspUserLoginField)
      return this.equals((CThostFtdcRspUserLoginField)that);
    return false;
  }

  public boolean equals(CThostFtdcRspUserLoginField that) {
    if (that == null)
      return false;

    boolean this_present_tradingDay = true && this.isSetTradingDay();
    boolean that_present_tradingDay = true && that.isSetTradingDay();
    if (this_present_tradingDay || that_present_tradingDay) {
      if (!(this_present_tradingDay && that_present_tradingDay))
        return false;
      if (!this.tradingDay.equals(that.tradingDay))
        return false;
    }

    boolean this_present_loginTime = true && this.isSetLoginTime();
    boolean that_present_loginTime = true && that.isSetLoginTime();
    if (this_present_loginTime || that_present_loginTime) {
      if (!(this_present_loginTime && that_present_loginTime))
        return false;
      if (!this.loginTime.equals(that.loginTime))
        return false;
    }

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_userID = true && this.isSetUserID();
    boolean that_present_userID = true && that.isSetUserID();
    if (this_present_userID || that_present_userID) {
      if (!(this_present_userID && that_present_userID))
        return false;
      if (!this.userID.equals(that.userID))
        return false;
    }

    boolean this_present_systemName = true && this.isSetSystemName();
    boolean that_present_systemName = true && that.isSetSystemName();
    if (this_present_systemName || that_present_systemName) {
      if (!(this_present_systemName && that_present_systemName))
        return false;
      if (!this.systemName.equals(that.systemName))
        return false;
    }

    boolean this_present_rontID = true;
    boolean that_present_rontID = true;
    if (this_present_rontID || that_present_rontID) {
      if (!(this_present_rontID && that_present_rontID))
        return false;
      if (this.rontID != that.rontID)
        return false;
    }

    boolean this_present_sessionID = true;
    boolean that_present_sessionID = true;
    if (this_present_sessionID || that_present_sessionID) {
      if (!(this_present_sessionID && that_present_sessionID))
        return false;
      if (this.sessionID != that.sessionID)
        return false;
    }

    boolean this_present_maxOrderRef = true && this.isSetMaxOrderRef();
    boolean that_present_maxOrderRef = true && that.isSetMaxOrderRef();
    if (this_present_maxOrderRef || that_present_maxOrderRef) {
      if (!(this_present_maxOrderRef && that_present_maxOrderRef))
        return false;
      if (!this.maxOrderRef.equals(that.maxOrderRef))
        return false;
    }

    boolean this_present_shfeTime = true && this.isSetShfeTime();
    boolean that_present_shfeTime = true && that.isSetShfeTime();
    if (this_present_shfeTime || that_present_shfeTime) {
      if (!(this_present_shfeTime && that_present_shfeTime))
        return false;
      if (!this.shfeTime.equals(that.shfeTime))
        return false;
    }

    boolean this_present_dceTime = true && this.isSetDceTime();
    boolean that_present_dceTime = true && that.isSetDceTime();
    if (this_present_dceTime || that_present_dceTime) {
      if (!(this_present_dceTime && that_present_dceTime))
        return false;
      if (!this.dceTime.equals(that.dceTime))
        return false;
    }

    boolean this_present_czceTime = true && this.isSetCzceTime();
    boolean that_present_czceTime = true && that.isSetCzceTime();
    if (this_present_czceTime || that_present_czceTime) {
      if (!(this_present_czceTime && that_present_czceTime))
        return false;
      if (!this.czceTime.equals(that.czceTime))
        return false;
    }

    boolean this_present_ffexTime = true && this.isSetFfexTime();
    boolean that_present_ffexTime = true && that.isSetFfexTime();
    if (this_present_ffexTime || that_present_ffexTime) {
      if (!(this_present_ffexTime && that_present_ffexTime))
        return false;
      if (!this.ffexTime.equals(that.ffexTime))
        return false;
    }

    boolean this_present_ineTime = true && this.isSetIneTime();
    boolean that_present_ineTime = true && that.isSetIneTime();
    if (this_present_ineTime || that_present_ineTime) {
      if (!(this_present_ineTime && that_present_ineTime))
        return false;
      if (!this.ineTime.equals(that.ineTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcRspUserLoginField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTradingDay()).compareTo(other.isSetTradingDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradingDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradingDay, other.tradingDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginTime()).compareTo(other.isSetLoginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginTime, other.loginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserID()).compareTo(other.isSetUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, other.userID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSystemName()).compareTo(other.isSetSystemName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSystemName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemName, other.systemName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRontID()).compareTo(other.isSetRontID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRontID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rontID, other.rontID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxOrderRef()).compareTo(other.isSetMaxOrderRef());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxOrderRef()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxOrderRef, other.maxOrderRef);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShfeTime()).compareTo(other.isSetShfeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShfeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shfeTime, other.shfeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDceTime()).compareTo(other.isSetDceTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDceTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dceTime, other.dceTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCzceTime()).compareTo(other.isSetCzceTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCzceTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.czceTime, other.czceTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFfexTime()).compareTo(other.isSetFfexTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFfexTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ffexTime, other.ffexTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIneTime()).compareTo(other.isSetIneTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIneTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ineTime, other.ineTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcRspUserLoginField(");
    boolean first = true;

    sb.append("tradingDay:");
    if (this.tradingDay == null) {
      sb.append("null");
    } else {
      sb.append(this.tradingDay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginTime:");
    if (this.loginTime == null) {
      sb.append("null");
    } else {
      sb.append(this.loginTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userID:");
    if (this.userID == null) {
      sb.append("null");
    } else {
      sb.append(this.userID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("systemName:");
    if (this.systemName == null) {
      sb.append("null");
    } else {
      sb.append(this.systemName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rontID:");
    sb.append(this.rontID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sessionID:");
    sb.append(this.sessionID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxOrderRef:");
    if (this.maxOrderRef == null) {
      sb.append("null");
    } else {
      sb.append(this.maxOrderRef);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shfeTime:");
    if (this.shfeTime == null) {
      sb.append("null");
    } else {
      sb.append(this.shfeTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dceTime:");
    if (this.dceTime == null) {
      sb.append("null");
    } else {
      sb.append(this.dceTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("czceTime:");
    if (this.czceTime == null) {
      sb.append("null");
    } else {
      sb.append(this.czceTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ffexTime:");
    if (this.ffexTime == null) {
      sb.append("null");
    } else {
      sb.append(this.ffexTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ineTime:");
    if (this.ineTime == null) {
      sb.append("null");
    } else {
      sb.append(this.ineTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcRspUserLoginFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcRspUserLoginFieldStandardScheme getScheme() {
      return new CThostFtdcRspUserLoginFieldStandardScheme();
    }
  }

  private static class CThostFtdcRspUserLoginFieldStandardScheme extends StandardScheme<CThostFtdcRspUserLoginField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcRspUserLoginField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRADING_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradingDay = iprot.readString();
              struct.setTradingDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginTime = iprot.readString();
              struct.setLoginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userID = iprot.readString();
              struct.setUserIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SYSTEM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.systemName = iprot.readString();
              struct.setSystemNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RONT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rontID = iprot.readI32();
              struct.setRontIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sessionID = iprot.readI32();
              struct.setSessionIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MAX_ORDER_REF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.maxOrderRef = iprot.readString();
              struct.setMaxOrderRefIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SHFE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shfeTime = iprot.readString();
              struct.setShfeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DCE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dceTime = iprot.readString();
              struct.setDceTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CZCE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.czceTime = iprot.readString();
              struct.setCzceTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FFEX_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ffexTime = iprot.readString();
              struct.setFfexTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // INE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ineTime = iprot.readString();
              struct.setIneTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcRspUserLoginField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tradingDay != null) {
        oprot.writeFieldBegin(TRADING_DAY_FIELD_DESC);
        oprot.writeString(struct.tradingDay);
        oprot.writeFieldEnd();
      }
      if (struct.loginTime != null) {
        oprot.writeFieldBegin(LOGIN_TIME_FIELD_DESC);
        oprot.writeString(struct.loginTime);
        oprot.writeFieldEnd();
      }
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.userID != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userID);
        oprot.writeFieldEnd();
      }
      if (struct.systemName != null) {
        oprot.writeFieldBegin(SYSTEM_NAME_FIELD_DESC);
        oprot.writeString(struct.systemName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RONT_ID_FIELD_DESC);
      oprot.writeI32(struct.rontID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeI32(struct.sessionID);
      oprot.writeFieldEnd();
      if (struct.maxOrderRef != null) {
        oprot.writeFieldBegin(MAX_ORDER_REF_FIELD_DESC);
        oprot.writeString(struct.maxOrderRef);
        oprot.writeFieldEnd();
      }
      if (struct.shfeTime != null) {
        oprot.writeFieldBegin(SHFE_TIME_FIELD_DESC);
        oprot.writeString(struct.shfeTime);
        oprot.writeFieldEnd();
      }
      if (struct.dceTime != null) {
        oprot.writeFieldBegin(DCE_TIME_FIELD_DESC);
        oprot.writeString(struct.dceTime);
        oprot.writeFieldEnd();
      }
      if (struct.czceTime != null) {
        oprot.writeFieldBegin(CZCE_TIME_FIELD_DESC);
        oprot.writeString(struct.czceTime);
        oprot.writeFieldEnd();
      }
      if (struct.ffexTime != null) {
        oprot.writeFieldBegin(FFEX_TIME_FIELD_DESC);
        oprot.writeString(struct.ffexTime);
        oprot.writeFieldEnd();
      }
      if (struct.ineTime != null) {
        oprot.writeFieldBegin(INE_TIME_FIELD_DESC);
        oprot.writeString(struct.ineTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcRspUserLoginFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcRspUserLoginFieldTupleScheme getScheme() {
      return new CThostFtdcRspUserLoginFieldTupleScheme();
    }
  }

  private static class CThostFtdcRspUserLoginFieldTupleScheme extends TupleScheme<CThostFtdcRspUserLoginField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcRspUserLoginField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTradingDay()) {
        optionals.set(0);
      }
      if (struct.isSetLoginTime()) {
        optionals.set(1);
      }
      if (struct.isSetBrokerID()) {
        optionals.set(2);
      }
      if (struct.isSetUserID()) {
        optionals.set(3);
      }
      if (struct.isSetSystemName()) {
        optionals.set(4);
      }
      if (struct.isSetRontID()) {
        optionals.set(5);
      }
      if (struct.isSetSessionID()) {
        optionals.set(6);
      }
      if (struct.isSetMaxOrderRef()) {
        optionals.set(7);
      }
      if (struct.isSetShfeTime()) {
        optionals.set(8);
      }
      if (struct.isSetDceTime()) {
        optionals.set(9);
      }
      if (struct.isSetCzceTime()) {
        optionals.set(10);
      }
      if (struct.isSetFfexTime()) {
        optionals.set(11);
      }
      if (struct.isSetIneTime()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetTradingDay()) {
        oprot.writeString(struct.tradingDay);
      }
      if (struct.isSetLoginTime()) {
        oprot.writeString(struct.loginTime);
      }
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetUserID()) {
        oprot.writeString(struct.userID);
      }
      if (struct.isSetSystemName()) {
        oprot.writeString(struct.systemName);
      }
      if (struct.isSetRontID()) {
        oprot.writeI32(struct.rontID);
      }
      if (struct.isSetSessionID()) {
        oprot.writeI32(struct.sessionID);
      }
      if (struct.isSetMaxOrderRef()) {
        oprot.writeString(struct.maxOrderRef);
      }
      if (struct.isSetShfeTime()) {
        oprot.writeString(struct.shfeTime);
      }
      if (struct.isSetDceTime()) {
        oprot.writeString(struct.dceTime);
      }
      if (struct.isSetCzceTime()) {
        oprot.writeString(struct.czceTime);
      }
      if (struct.isSetFfexTime()) {
        oprot.writeString(struct.ffexTime);
      }
      if (struct.isSetIneTime()) {
        oprot.writeString(struct.ineTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcRspUserLoginField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.tradingDay = iprot.readString();
        struct.setTradingDayIsSet(true);
      }
      if (incoming.get(1)) {
        struct.loginTime = iprot.readString();
        struct.setLoginTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.userID = iprot.readString();
        struct.setUserIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.systemName = iprot.readString();
        struct.setSystemNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.rontID = iprot.readI32();
        struct.setRontIDIsSet(true);
      }
      if (incoming.get(6)) {
        struct.sessionID = iprot.readI32();
        struct.setSessionIDIsSet(true);
      }
      if (incoming.get(7)) {
        struct.maxOrderRef = iprot.readString();
        struct.setMaxOrderRefIsSet(true);
      }
      if (incoming.get(8)) {
        struct.shfeTime = iprot.readString();
        struct.setShfeTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.dceTime = iprot.readString();
        struct.setDceTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.czceTime = iprot.readString();
        struct.setCzceTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.ffexTime = iprot.readString();
        struct.setFfexTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.ineTime = iprot.readString();
        struct.setIneTimeIsSet(true);
      }
    }
  }

}

