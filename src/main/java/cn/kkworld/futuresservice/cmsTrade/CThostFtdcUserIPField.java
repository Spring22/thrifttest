/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcUserIPField implements org.apache.thrift.TBase<CThostFtdcUserIPField, CThostFtdcUserIPField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcUserIPField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcUserIPField");

  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField I_PADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("iPAddress", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField I_PMASK_FIELD_DESC = new org.apache.thrift.protocol.TField("iPMask", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MAC_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("macAddress", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcUserIPFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcUserIPFieldTupleSchemeFactory());
  }

  public String brokerID; // required
  public String userID; // required
  public String iPAddress; // required
  public String iPMask; // required
  public String macAddress; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BROKER_ID((short)1, "brokerID"),
    USER_ID((short)2, "userID"),
    I_PADDRESS((short)3, "iPAddress"),
    I_PMASK((short)4, "iPMask"),
    MAC_ADDRESS((short)5, "macAddress");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BROKER_ID
          return BROKER_ID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // I_PADDRESS
          return I_PADDRESS;
        case 4: // I_PMASK
          return I_PMASK;
        case 5: // MAC_ADDRESS
          return MAC_ADDRESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcUserIDType")));
    tmpMap.put(_Fields.I_PADDRESS, new org.apache.thrift.meta_data.FieldMetaData("iPAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcIPAddressType")));
    tmpMap.put(_Fields.I_PMASK, new org.apache.thrift.meta_data.FieldMetaData("iPMask", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcIPAddressType")));
    tmpMap.put(_Fields.MAC_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("macAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcMacAddressType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcUserIPField.class, metaDataMap);
  }

  public CThostFtdcUserIPField() {
  }

  public CThostFtdcUserIPField(
    String brokerID,
    String userID,
    String iPAddress,
    String iPMask,
    String macAddress)
  {
    this();
    this.brokerID = brokerID;
    this.userID = userID;
    this.iPAddress = iPAddress;
    this.iPMask = iPMask;
    this.macAddress = macAddress;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcUserIPField(CThostFtdcUserIPField other) {
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetUserID()) {
      this.userID = other.userID;
    }
    if (other.isSetIPAddress()) {
      this.iPAddress = other.iPAddress;
    }
    if (other.isSetIPMask()) {
      this.iPMask = other.iPMask;
    }
    if (other.isSetMacAddress()) {
      this.macAddress = other.macAddress;
    }
  }

  public CThostFtdcUserIPField deepCopy() {
    return new CThostFtdcUserIPField(this);
  }

  @Override
  public void clear() {
    this.brokerID = null;
    this.userID = null;
    this.iPAddress = null;
    this.iPMask = null;
    this.macAddress = null;
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcUserIPField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getUserID() {
    return this.userID;
  }

  public CThostFtdcUserIPField setUserID(String userID) {
    this.userID = userID;
    return this;
  }

  public void unsetUserID() {
    this.userID = null;
  }

  /** Returns true if field userID is set (has been assigned a value) and false otherwise */
  public boolean isSetUserID() {
    return this.userID != null;
  }

  public void setUserIDIsSet(boolean value) {
    if (!value) {
      this.userID = null;
    }
  }

  public String getIPAddress() {
    return this.iPAddress;
  }

  public CThostFtdcUserIPField setIPAddress(String iPAddress) {
    this.iPAddress = iPAddress;
    return this;
  }

  public void unsetIPAddress() {
    this.iPAddress = null;
  }

  /** Returns true if field iPAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetIPAddress() {
    return this.iPAddress != null;
  }

  public void setIPAddressIsSet(boolean value) {
    if (!value) {
      this.iPAddress = null;
    }
  }

  public String getIPMask() {
    return this.iPMask;
  }

  public CThostFtdcUserIPField setIPMask(String iPMask) {
    this.iPMask = iPMask;
    return this;
  }

  public void unsetIPMask() {
    this.iPMask = null;
  }

  /** Returns true if field iPMask is set (has been assigned a value) and false otherwise */
  public boolean isSetIPMask() {
    return this.iPMask != null;
  }

  public void setIPMaskIsSet(boolean value) {
    if (!value) {
      this.iPMask = null;
    }
  }

  public String getMacAddress() {
    return this.macAddress;
  }

  public CThostFtdcUserIPField setMacAddress(String macAddress) {
    this.macAddress = macAddress;
    return this;
  }

  public void unsetMacAddress() {
    this.macAddress = null;
  }

  /** Returns true if field macAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetMacAddress() {
    return this.macAddress != null;
  }

  public void setMacAddressIsSet(boolean value) {
    if (!value) {
      this.macAddress = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserID();
      } else {
        setUserID((String)value);
      }
      break;

    case I_PADDRESS:
      if (value == null) {
        unsetIPAddress();
      } else {
        setIPAddress((String)value);
      }
      break;

    case I_PMASK:
      if (value == null) {
        unsetIPMask();
      } else {
        setIPMask((String)value);
      }
      break;

    case MAC_ADDRESS:
      if (value == null) {
        unsetMacAddress();
      } else {
        setMacAddress((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BROKER_ID:
      return getBrokerID();

    case USER_ID:
      return getUserID();

    case I_PADDRESS:
      return getIPAddress();

    case I_PMASK:
      return getIPMask();

    case MAC_ADDRESS:
      return getMacAddress();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BROKER_ID:
      return isSetBrokerID();
    case USER_ID:
      return isSetUserID();
    case I_PADDRESS:
      return isSetIPAddress();
    case I_PMASK:
      return isSetIPMask();
    case MAC_ADDRESS:
      return isSetMacAddress();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcUserIPField)
      return this.equals((CThostFtdcUserIPField)that);
    return false;
  }

  public boolean equals(CThostFtdcUserIPField that) {
    if (that == null)
      return false;

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_userID = true && this.isSetUserID();
    boolean that_present_userID = true && that.isSetUserID();
    if (this_present_userID || that_present_userID) {
      if (!(this_present_userID && that_present_userID))
        return false;
      if (!this.userID.equals(that.userID))
        return false;
    }

    boolean this_present_iPAddress = true && this.isSetIPAddress();
    boolean that_present_iPAddress = true && that.isSetIPAddress();
    if (this_present_iPAddress || that_present_iPAddress) {
      if (!(this_present_iPAddress && that_present_iPAddress))
        return false;
      if (!this.iPAddress.equals(that.iPAddress))
        return false;
    }

    boolean this_present_iPMask = true && this.isSetIPMask();
    boolean that_present_iPMask = true && that.isSetIPMask();
    if (this_present_iPMask || that_present_iPMask) {
      if (!(this_present_iPMask && that_present_iPMask))
        return false;
      if (!this.iPMask.equals(that.iPMask))
        return false;
    }

    boolean this_present_macAddress = true && this.isSetMacAddress();
    boolean that_present_macAddress = true && that.isSetMacAddress();
    if (this_present_macAddress || that_present_macAddress) {
      if (!(this_present_macAddress && that_present_macAddress))
        return false;
      if (!this.macAddress.equals(that.macAddress))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcUserIPField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserID()).compareTo(other.isSetUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, other.userID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIPAddress()).compareTo(other.isSetIPAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIPAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iPAddress, other.iPAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIPMask()).compareTo(other.isSetIPMask());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIPMask()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iPMask, other.iPMask);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMacAddress()).compareTo(other.isSetMacAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMacAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.macAddress, other.macAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcUserIPField(");
    boolean first = true;

    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userID:");
    if (this.userID == null) {
      sb.append("null");
    } else {
      sb.append(this.userID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iPAddress:");
    if (this.iPAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.iPAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iPMask:");
    if (this.iPMask == null) {
      sb.append("null");
    } else {
      sb.append(this.iPMask);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("macAddress:");
    if (this.macAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.macAddress);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcUserIPFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcUserIPFieldStandardScheme getScheme() {
      return new CThostFtdcUserIPFieldStandardScheme();
    }
  }

  private static class CThostFtdcUserIPFieldStandardScheme extends StandardScheme<CThostFtdcUserIPField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcUserIPField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userID = iprot.readString();
              struct.setUserIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // I_PADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.iPAddress = iprot.readString();
              struct.setIPAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // I_PMASK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.iPMask = iprot.readString();
              struct.setIPMaskIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MAC_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.macAddress = iprot.readString();
              struct.setMacAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcUserIPField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.userID != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userID);
        oprot.writeFieldEnd();
      }
      if (struct.iPAddress != null) {
        oprot.writeFieldBegin(I_PADDRESS_FIELD_DESC);
        oprot.writeString(struct.iPAddress);
        oprot.writeFieldEnd();
      }
      if (struct.iPMask != null) {
        oprot.writeFieldBegin(I_PMASK_FIELD_DESC);
        oprot.writeString(struct.iPMask);
        oprot.writeFieldEnd();
      }
      if (struct.macAddress != null) {
        oprot.writeFieldBegin(MAC_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.macAddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcUserIPFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcUserIPFieldTupleScheme getScheme() {
      return new CThostFtdcUserIPFieldTupleScheme();
    }
  }

  private static class CThostFtdcUserIPFieldTupleScheme extends TupleScheme<CThostFtdcUserIPField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcUserIPField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBrokerID()) {
        optionals.set(0);
      }
      if (struct.isSetUserID()) {
        optionals.set(1);
      }
      if (struct.isSetIPAddress()) {
        optionals.set(2);
      }
      if (struct.isSetIPMask()) {
        optionals.set(3);
      }
      if (struct.isSetMacAddress()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetUserID()) {
        oprot.writeString(struct.userID);
      }
      if (struct.isSetIPAddress()) {
        oprot.writeString(struct.iPAddress);
      }
      if (struct.isSetIPMask()) {
        oprot.writeString(struct.iPMask);
      }
      if (struct.isSetMacAddress()) {
        oprot.writeString(struct.macAddress);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcUserIPField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userID = iprot.readString();
        struct.setUserIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.iPAddress = iprot.readString();
        struct.setIPAddressIsSet(true);
      }
      if (incoming.get(3)) {
        struct.iPMask = iprot.readString();
        struct.setIPMaskIsSet(true);
      }
      if (incoming.get(4)) {
        struct.macAddress = iprot.readString();
        struct.setMacAddressIsSet(true);
      }
    }
  }

}

