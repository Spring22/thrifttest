/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcMarketDataBid23Field implements org.apache.thrift.TBase<CThostFtdcMarketDataBid23Field, CThostFtdcMarketDataBid23Field._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcMarketDataBid23Field> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcMarketDataBid23Field");

  private static final org.apache.thrift.protocol.TField BID_PRICE2_FIELD_DESC = new org.apache.thrift.protocol.TField("bidPrice2", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField BID_VOLUME2_FIELD_DESC = new org.apache.thrift.protocol.TField("bidVolume2", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField BID_PRICE3_FIELD_DESC = new org.apache.thrift.protocol.TField("bidPrice3", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField BID_VOLUME3_FIELD_DESC = new org.apache.thrift.protocol.TField("bidVolume3", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcMarketDataBid23FieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcMarketDataBid23FieldTupleSchemeFactory());
  }

  public double bidPrice2; // required
  public int bidVolume2; // required
  public double bidPrice3; // required
  public int bidVolume3; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BID_PRICE2((short)1, "bidPrice2"),
    BID_VOLUME2((short)2, "bidVolume2"),
    BID_PRICE3((short)3, "bidPrice3"),
    BID_VOLUME3((short)4, "bidVolume3");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BID_PRICE2
          return BID_PRICE2;
        case 2: // BID_VOLUME2
          return BID_VOLUME2;
        case 3: // BID_PRICE3
          return BID_PRICE3;
        case 4: // BID_VOLUME3
          return BID_VOLUME3;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BIDPRICE2_ISSET_ID = 0;
  private static final int __BIDVOLUME2_ISSET_ID = 1;
  private static final int __BIDPRICE3_ISSET_ID = 2;
  private static final int __BIDVOLUME3_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BID_PRICE2, new org.apache.thrift.meta_data.FieldMetaData("bidPrice2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.BID_VOLUME2, new org.apache.thrift.meta_data.FieldMetaData("bidVolume2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcVolumeType")));
    tmpMap.put(_Fields.BID_PRICE3, new org.apache.thrift.meta_data.FieldMetaData("bidPrice3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.BID_VOLUME3, new org.apache.thrift.meta_data.FieldMetaData("bidVolume3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcVolumeType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcMarketDataBid23Field.class, metaDataMap);
  }

  public CThostFtdcMarketDataBid23Field() {
  }

  public CThostFtdcMarketDataBid23Field(
    double bidPrice2,
    int bidVolume2,
    double bidPrice3,
    int bidVolume3)
  {
    this();
    this.bidPrice2 = bidPrice2;
    setBidPrice2IsSet(true);
    this.bidVolume2 = bidVolume2;
    setBidVolume2IsSet(true);
    this.bidPrice3 = bidPrice3;
    setBidPrice3IsSet(true);
    this.bidVolume3 = bidVolume3;
    setBidVolume3IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcMarketDataBid23Field(CThostFtdcMarketDataBid23Field other) {
    __isset_bitfield = other.__isset_bitfield;
    this.bidPrice2 = other.bidPrice2;
    this.bidVolume2 = other.bidVolume2;
    this.bidPrice3 = other.bidPrice3;
    this.bidVolume3 = other.bidVolume3;
  }

  public CThostFtdcMarketDataBid23Field deepCopy() {
    return new CThostFtdcMarketDataBid23Field(this);
  }

  @Override
  public void clear() {
    setBidPrice2IsSet(false);
    this.bidPrice2 = 0.0;
    setBidVolume2IsSet(false);
    this.bidVolume2 = 0;
    setBidPrice3IsSet(false);
    this.bidPrice3 = 0.0;
    setBidVolume3IsSet(false);
    this.bidVolume3 = 0;
  }

  public double getBidPrice2() {
    return this.bidPrice2;
  }

  public CThostFtdcMarketDataBid23Field setBidPrice2(double bidPrice2) {
    this.bidPrice2 = bidPrice2;
    setBidPrice2IsSet(true);
    return this;
  }

  public void unsetBidPrice2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIDPRICE2_ISSET_ID);
  }

  /** Returns true if field bidPrice2 is set (has been assigned a value) and false otherwise */
  public boolean isSetBidPrice2() {
    return EncodingUtils.testBit(__isset_bitfield, __BIDPRICE2_ISSET_ID);
  }

  public void setBidPrice2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIDPRICE2_ISSET_ID, value);
  }

  public int getBidVolume2() {
    return this.bidVolume2;
  }

  public CThostFtdcMarketDataBid23Field setBidVolume2(int bidVolume2) {
    this.bidVolume2 = bidVolume2;
    setBidVolume2IsSet(true);
    return this;
  }

  public void unsetBidVolume2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIDVOLUME2_ISSET_ID);
  }

  /** Returns true if field bidVolume2 is set (has been assigned a value) and false otherwise */
  public boolean isSetBidVolume2() {
    return EncodingUtils.testBit(__isset_bitfield, __BIDVOLUME2_ISSET_ID);
  }

  public void setBidVolume2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIDVOLUME2_ISSET_ID, value);
  }

  public double getBidPrice3() {
    return this.bidPrice3;
  }

  public CThostFtdcMarketDataBid23Field setBidPrice3(double bidPrice3) {
    this.bidPrice3 = bidPrice3;
    setBidPrice3IsSet(true);
    return this;
  }

  public void unsetBidPrice3() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIDPRICE3_ISSET_ID);
  }

  /** Returns true if field bidPrice3 is set (has been assigned a value) and false otherwise */
  public boolean isSetBidPrice3() {
    return EncodingUtils.testBit(__isset_bitfield, __BIDPRICE3_ISSET_ID);
  }

  public void setBidPrice3IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIDPRICE3_ISSET_ID, value);
  }

  public int getBidVolume3() {
    return this.bidVolume3;
  }

  public CThostFtdcMarketDataBid23Field setBidVolume3(int bidVolume3) {
    this.bidVolume3 = bidVolume3;
    setBidVolume3IsSet(true);
    return this;
  }

  public void unsetBidVolume3() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIDVOLUME3_ISSET_ID);
  }

  /** Returns true if field bidVolume3 is set (has been assigned a value) and false otherwise */
  public boolean isSetBidVolume3() {
    return EncodingUtils.testBit(__isset_bitfield, __BIDVOLUME3_ISSET_ID);
  }

  public void setBidVolume3IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIDVOLUME3_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BID_PRICE2:
      if (value == null) {
        unsetBidPrice2();
      } else {
        setBidPrice2((Double)value);
      }
      break;

    case BID_VOLUME2:
      if (value == null) {
        unsetBidVolume2();
      } else {
        setBidVolume2((Integer)value);
      }
      break;

    case BID_PRICE3:
      if (value == null) {
        unsetBidPrice3();
      } else {
        setBidPrice3((Double)value);
      }
      break;

    case BID_VOLUME3:
      if (value == null) {
        unsetBidVolume3();
      } else {
        setBidVolume3((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BID_PRICE2:
      return Double.valueOf(getBidPrice2());

    case BID_VOLUME2:
      return Integer.valueOf(getBidVolume2());

    case BID_PRICE3:
      return Double.valueOf(getBidPrice3());

    case BID_VOLUME3:
      return Integer.valueOf(getBidVolume3());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BID_PRICE2:
      return isSetBidPrice2();
    case BID_VOLUME2:
      return isSetBidVolume2();
    case BID_PRICE3:
      return isSetBidPrice3();
    case BID_VOLUME3:
      return isSetBidVolume3();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcMarketDataBid23Field)
      return this.equals((CThostFtdcMarketDataBid23Field)that);
    return false;
  }

  public boolean equals(CThostFtdcMarketDataBid23Field that) {
    if (that == null)
      return false;

    boolean this_present_bidPrice2 = true;
    boolean that_present_bidPrice2 = true;
    if (this_present_bidPrice2 || that_present_bidPrice2) {
      if (!(this_present_bidPrice2 && that_present_bidPrice2))
        return false;
      if (this.bidPrice2 != that.bidPrice2)
        return false;
    }

    boolean this_present_bidVolume2 = true;
    boolean that_present_bidVolume2 = true;
    if (this_present_bidVolume2 || that_present_bidVolume2) {
      if (!(this_present_bidVolume2 && that_present_bidVolume2))
        return false;
      if (this.bidVolume2 != that.bidVolume2)
        return false;
    }

    boolean this_present_bidPrice3 = true;
    boolean that_present_bidPrice3 = true;
    if (this_present_bidPrice3 || that_present_bidPrice3) {
      if (!(this_present_bidPrice3 && that_present_bidPrice3))
        return false;
      if (this.bidPrice3 != that.bidPrice3)
        return false;
    }

    boolean this_present_bidVolume3 = true;
    boolean that_present_bidVolume3 = true;
    if (this_present_bidVolume3 || that_present_bidVolume3) {
      if (!(this_present_bidVolume3 && that_present_bidVolume3))
        return false;
      if (this.bidVolume3 != that.bidVolume3)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcMarketDataBid23Field other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBidPrice2()).compareTo(other.isSetBidPrice2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidPrice2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidPrice2, other.bidPrice2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidVolume2()).compareTo(other.isSetBidVolume2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidVolume2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidVolume2, other.bidVolume2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidPrice3()).compareTo(other.isSetBidPrice3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidPrice3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidPrice3, other.bidPrice3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidVolume3()).compareTo(other.isSetBidVolume3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidVolume3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidVolume3, other.bidVolume3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcMarketDataBid23Field(");
    boolean first = true;

    sb.append("bidPrice2:");
    sb.append(this.bidPrice2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bidVolume2:");
    sb.append(this.bidVolume2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bidPrice3:");
    sb.append(this.bidPrice3);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bidVolume3:");
    sb.append(this.bidVolume3);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcMarketDataBid23FieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcMarketDataBid23FieldStandardScheme getScheme() {
      return new CThostFtdcMarketDataBid23FieldStandardScheme();
    }
  }

  private static class CThostFtdcMarketDataBid23FieldStandardScheme extends StandardScheme<CThostFtdcMarketDataBid23Field> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcMarketDataBid23Field struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BID_PRICE2
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bidPrice2 = iprot.readDouble();
              struct.setBidPrice2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BID_VOLUME2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bidVolume2 = iprot.readI32();
              struct.setBidVolume2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BID_PRICE3
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bidPrice3 = iprot.readDouble();
              struct.setBidPrice3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BID_VOLUME3
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bidVolume3 = iprot.readI32();
              struct.setBidVolume3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcMarketDataBid23Field struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BID_PRICE2_FIELD_DESC);
      oprot.writeDouble(struct.bidPrice2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BID_VOLUME2_FIELD_DESC);
      oprot.writeI32(struct.bidVolume2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BID_PRICE3_FIELD_DESC);
      oprot.writeDouble(struct.bidPrice3);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BID_VOLUME3_FIELD_DESC);
      oprot.writeI32(struct.bidVolume3);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcMarketDataBid23FieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcMarketDataBid23FieldTupleScheme getScheme() {
      return new CThostFtdcMarketDataBid23FieldTupleScheme();
    }
  }

  private static class CThostFtdcMarketDataBid23FieldTupleScheme extends TupleScheme<CThostFtdcMarketDataBid23Field> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcMarketDataBid23Field struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBidPrice2()) {
        optionals.set(0);
      }
      if (struct.isSetBidVolume2()) {
        optionals.set(1);
      }
      if (struct.isSetBidPrice3()) {
        optionals.set(2);
      }
      if (struct.isSetBidVolume3()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetBidPrice2()) {
        oprot.writeDouble(struct.bidPrice2);
      }
      if (struct.isSetBidVolume2()) {
        oprot.writeI32(struct.bidVolume2);
      }
      if (struct.isSetBidPrice3()) {
        oprot.writeDouble(struct.bidPrice3);
      }
      if (struct.isSetBidVolume3()) {
        oprot.writeI32(struct.bidVolume3);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcMarketDataBid23Field struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.bidPrice2 = iprot.readDouble();
        struct.setBidPrice2IsSet(true);
      }
      if (incoming.get(1)) {
        struct.bidVolume2 = iprot.readI32();
        struct.setBidVolume2IsSet(true);
      }
      if (incoming.get(2)) {
        struct.bidPrice3 = iprot.readDouble();
        struct.setBidPrice3IsSet(true);
      }
      if (incoming.get(3)) {
        struct.bidVolume3 = iprot.readI32();
        struct.setBidVolume3IsSet(true);
      }
    }
  }

}

