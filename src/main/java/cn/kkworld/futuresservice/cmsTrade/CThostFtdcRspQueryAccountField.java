/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcRspQueryAccountField implements org.apache.thrift.TBase<CThostFtdcRspQueryAccountField, CThostFtdcRspQueryAccountField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcRspQueryAccountField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcRspQueryAccountField");

  private static final org.apache.thrift.protocol.TField TRADE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BANK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BANK_BRANCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankBranchID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BROKER_BRANCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerBranchID", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TRADE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeDate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TRADE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BANK_SERIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("bankSerial", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TRADING_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("tradingDay", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PLATE_SERIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("plateSerial", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField LAST_FRAGMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("lastFragment", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField CUSTOMER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("customerName", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField IDCARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("idcardType", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField IDENTIFIED_CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("identifiedCardNo", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField CUST_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("custType", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField BANK_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("bankAccount", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField BANK_PASS_WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("bankPassWord", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountID", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField FUTURE_SERIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("futureSerial", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField INSTALL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("installID", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField VERIFY_CERT_NO_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("verifyCertNoFlag", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField CURRENCY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("currencyID", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField DIGEST_FIELD_DESC = new org.apache.thrift.protocol.TField("digest", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField BANK_ACC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankAccType", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceID", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField BANK_SECU_ACC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankSecuAccType", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField BROKER_IDBY_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerIDByBank", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField BANK_SECU_ACC_FIELD_DESC = new org.apache.thrift.protocol.TField("bankSecuAcc", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField BANK_PWD_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("bankPwdFlag", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField SECU_PWD_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("secuPwdFlag", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField OPER_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("operNo", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestID", org.apache.thrift.protocol.TType.I32, (short)35);
  private static final org.apache.thrift.protocol.TField T_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tID", org.apache.thrift.protocol.TType.I32, (short)36);
  private static final org.apache.thrift.protocol.TField BANK_USE_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("bankUseAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)37);
  private static final org.apache.thrift.protocol.TField BANK_FETCH_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("bankFetchAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)38);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcRspQueryAccountFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcRspQueryAccountFieldTupleSchemeFactory());
  }

  public String tradeCode; // required
  public String bankID; // required
  public String bankBranchID; // required
  public String brokerID; // required
  public String brokerBranchID; // required
  public String tradeDate; // required
  public String tradeTime; // required
  public String bankSerial; // required
  public String tradingDay; // required
  public int plateSerial; // required
  public String lastFragment; // required
  public int sessionID; // required
  public String customerName; // required
  public String idcardType; // required
  public String identifiedCardNo; // required
  public String custType; // required
  public String bankAccount; // required
  public String bankPassWord; // required
  public String accountID; // required
  public String password; // required
  public int futureSerial; // required
  public int installID; // required
  public String userID; // required
  public String verifyCertNoFlag; // required
  public String currencyID; // required
  public String digest; // required
  public String bankAccType; // required
  public String deviceID; // required
  public String bankSecuAccType; // required
  public String brokerIDByBank; // required
  public String bankSecuAcc; // required
  public String bankPwdFlag; // required
  public String secuPwdFlag; // required
  public String operNo; // required
  public int requestID; // required
  public int tID; // required
  public double bankUseAmount; // required
  public double bankFetchAmount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRADE_CODE((short)1, "tradeCode"),
    BANK_ID((short)2, "bankID"),
    BANK_BRANCH_ID((short)3, "bankBranchID"),
    BROKER_ID((short)4, "brokerID"),
    BROKER_BRANCH_ID((short)5, "brokerBranchID"),
    TRADE_DATE((short)6, "tradeDate"),
    TRADE_TIME((short)7, "tradeTime"),
    BANK_SERIAL((short)8, "bankSerial"),
    TRADING_DAY((short)9, "tradingDay"),
    PLATE_SERIAL((short)10, "plateSerial"),
    LAST_FRAGMENT((short)11, "lastFragment"),
    SESSION_ID((short)12, "sessionID"),
    CUSTOMER_NAME((short)13, "customerName"),
    IDCARD_TYPE((short)14, "idcardType"),
    IDENTIFIED_CARD_NO((short)15, "identifiedCardNo"),
    CUST_TYPE((short)16, "custType"),
    BANK_ACCOUNT((short)17, "bankAccount"),
    BANK_PASS_WORD((short)18, "bankPassWord"),
    ACCOUNT_ID((short)19, "accountID"),
    PASSWORD((short)20, "password"),
    FUTURE_SERIAL((short)21, "futureSerial"),
    INSTALL_ID((short)22, "installID"),
    USER_ID((short)23, "userID"),
    VERIFY_CERT_NO_FLAG((short)24, "verifyCertNoFlag"),
    CURRENCY_ID((short)25, "currencyID"),
    DIGEST((short)26, "digest"),
    BANK_ACC_TYPE((short)27, "bankAccType"),
    DEVICE_ID((short)28, "deviceID"),
    BANK_SECU_ACC_TYPE((short)29, "bankSecuAccType"),
    BROKER_IDBY_BANK((short)30, "brokerIDByBank"),
    BANK_SECU_ACC((short)31, "bankSecuAcc"),
    BANK_PWD_FLAG((short)32, "bankPwdFlag"),
    SECU_PWD_FLAG((short)33, "secuPwdFlag"),
    OPER_NO((short)34, "operNo"),
    REQUEST_ID((short)35, "requestID"),
    T_ID((short)36, "tID"),
    BANK_USE_AMOUNT((short)37, "bankUseAmount"),
    BANK_FETCH_AMOUNT((short)38, "bankFetchAmount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRADE_CODE
          return TRADE_CODE;
        case 2: // BANK_ID
          return BANK_ID;
        case 3: // BANK_BRANCH_ID
          return BANK_BRANCH_ID;
        case 4: // BROKER_ID
          return BROKER_ID;
        case 5: // BROKER_BRANCH_ID
          return BROKER_BRANCH_ID;
        case 6: // TRADE_DATE
          return TRADE_DATE;
        case 7: // TRADE_TIME
          return TRADE_TIME;
        case 8: // BANK_SERIAL
          return BANK_SERIAL;
        case 9: // TRADING_DAY
          return TRADING_DAY;
        case 10: // PLATE_SERIAL
          return PLATE_SERIAL;
        case 11: // LAST_FRAGMENT
          return LAST_FRAGMENT;
        case 12: // SESSION_ID
          return SESSION_ID;
        case 13: // CUSTOMER_NAME
          return CUSTOMER_NAME;
        case 14: // IDCARD_TYPE
          return IDCARD_TYPE;
        case 15: // IDENTIFIED_CARD_NO
          return IDENTIFIED_CARD_NO;
        case 16: // CUST_TYPE
          return CUST_TYPE;
        case 17: // BANK_ACCOUNT
          return BANK_ACCOUNT;
        case 18: // BANK_PASS_WORD
          return BANK_PASS_WORD;
        case 19: // ACCOUNT_ID
          return ACCOUNT_ID;
        case 20: // PASSWORD
          return PASSWORD;
        case 21: // FUTURE_SERIAL
          return FUTURE_SERIAL;
        case 22: // INSTALL_ID
          return INSTALL_ID;
        case 23: // USER_ID
          return USER_ID;
        case 24: // VERIFY_CERT_NO_FLAG
          return VERIFY_CERT_NO_FLAG;
        case 25: // CURRENCY_ID
          return CURRENCY_ID;
        case 26: // DIGEST
          return DIGEST;
        case 27: // BANK_ACC_TYPE
          return BANK_ACC_TYPE;
        case 28: // DEVICE_ID
          return DEVICE_ID;
        case 29: // BANK_SECU_ACC_TYPE
          return BANK_SECU_ACC_TYPE;
        case 30: // BROKER_IDBY_BANK
          return BROKER_IDBY_BANK;
        case 31: // BANK_SECU_ACC
          return BANK_SECU_ACC;
        case 32: // BANK_PWD_FLAG
          return BANK_PWD_FLAG;
        case 33: // SECU_PWD_FLAG
          return SECU_PWD_FLAG;
        case 34: // OPER_NO
          return OPER_NO;
        case 35: // REQUEST_ID
          return REQUEST_ID;
        case 36: // T_ID
          return T_ID;
        case 37: // BANK_USE_AMOUNT
          return BANK_USE_AMOUNT;
        case 38: // BANK_FETCH_AMOUNT
          return BANK_FETCH_AMOUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PLATESERIAL_ISSET_ID = 0;
  private static final int __SESSIONID_ISSET_ID = 1;
  private static final int __FUTURESERIAL_ISSET_ID = 2;
  private static final int __INSTALLID_ISSET_ID = 3;
  private static final int __REQUESTID_ISSET_ID = 4;
  private static final int __TID_ISSET_ID = 5;
  private static final int __BANKUSEAMOUNT_ISSET_ID = 6;
  private static final int __BANKFETCHAMOUNT_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRADE_CODE, new org.apache.thrift.meta_data.FieldMetaData("tradeCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeCodeType")));
    tmpMap.put(_Fields.BANK_ID, new org.apache.thrift.meta_data.FieldMetaData("bankID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankIDType")));
    tmpMap.put(_Fields.BANK_BRANCH_ID, new org.apache.thrift.meta_data.FieldMetaData("bankBranchID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankBrchIDType")));
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.BROKER_BRANCH_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerBranchID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcFutureBranchIDType")));
    tmpMap.put(_Fields.TRADE_DATE, new org.apache.thrift.meta_data.FieldMetaData("tradeDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeDateType")));
    tmpMap.put(_Fields.TRADE_TIME, new org.apache.thrift.meta_data.FieldMetaData("tradeTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeTimeType")));
    tmpMap.put(_Fields.BANK_SERIAL, new org.apache.thrift.meta_data.FieldMetaData("bankSerial", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankSerialType")));
    tmpMap.put(_Fields.TRADING_DAY, new org.apache.thrift.meta_data.FieldMetaData("tradingDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeDateType")));
    tmpMap.put(_Fields.PLATE_SERIAL, new org.apache.thrift.meta_data.FieldMetaData("plateSerial", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcSerialType")));
    tmpMap.put(_Fields.LAST_FRAGMENT, new org.apache.thrift.meta_data.FieldMetaData("lastFragment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcLastFragmentType")));
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcSessionIDType")));
    tmpMap.put(_Fields.CUSTOMER_NAME, new org.apache.thrift.meta_data.FieldMetaData("customerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcIndividualNameType")));
    tmpMap.put(_Fields.IDCARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("idcardType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcIdCardTypeType")));
    tmpMap.put(_Fields.IDENTIFIED_CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("identifiedCardNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcIdentifiedCardNoType")));
    tmpMap.put(_Fields.CUST_TYPE, new org.apache.thrift.meta_data.FieldMetaData("custType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcCustTypeType")));
    tmpMap.put(_Fields.BANK_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("bankAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankAccountType")));
    tmpMap.put(_Fields.BANK_PASS_WORD, new org.apache.thrift.meta_data.FieldMetaData("bankPassWord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcPasswordType")));
    tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcAccountIDType")));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcPasswordType")));
    tmpMap.put(_Fields.FUTURE_SERIAL, new org.apache.thrift.meta_data.FieldMetaData("futureSerial", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcFutureSerialType")));
    tmpMap.put(_Fields.INSTALL_ID, new org.apache.thrift.meta_data.FieldMetaData("installID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcInstallIDType")));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcUserIDType")));
    tmpMap.put(_Fields.VERIFY_CERT_NO_FLAG, new org.apache.thrift.meta_data.FieldMetaData("verifyCertNoFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcYesNoIndicatorType")));
    tmpMap.put(_Fields.CURRENCY_ID, new org.apache.thrift.meta_data.FieldMetaData("currencyID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcCurrencyIDType")));
    tmpMap.put(_Fields.DIGEST, new org.apache.thrift.meta_data.FieldMetaData("digest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDigestType")));
    tmpMap.put(_Fields.BANK_ACC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bankAccType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankAccTypeType")));
    tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDeviceIDType")));
    tmpMap.put(_Fields.BANK_SECU_ACC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bankSecuAccType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankAccTypeType")));
    tmpMap.put(_Fields.BROKER_IDBY_BANK, new org.apache.thrift.meta_data.FieldMetaData("brokerIDByBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankCodingForFutureType")));
    tmpMap.put(_Fields.BANK_SECU_ACC, new org.apache.thrift.meta_data.FieldMetaData("bankSecuAcc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankAccountType")));
    tmpMap.put(_Fields.BANK_PWD_FLAG, new org.apache.thrift.meta_data.FieldMetaData("bankPwdFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcPwdFlagType")));
    tmpMap.put(_Fields.SECU_PWD_FLAG, new org.apache.thrift.meta_data.FieldMetaData("secuPwdFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcPwdFlagType")));
    tmpMap.put(_Fields.OPER_NO, new org.apache.thrift.meta_data.FieldMetaData("operNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOperNoType")));
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcRequestIDType")));
    tmpMap.put(_Fields.T_ID, new org.apache.thrift.meta_data.FieldMetaData("tID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcTIDType")));
    tmpMap.put(_Fields.BANK_USE_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("bankUseAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcTradeAmountType")));
    tmpMap.put(_Fields.BANK_FETCH_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("bankFetchAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcTradeAmountType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcRspQueryAccountField.class, metaDataMap);
  }

  public CThostFtdcRspQueryAccountField() {
  }

  public CThostFtdcRspQueryAccountField(
    String tradeCode,
    String bankID,
    String bankBranchID,
    String brokerID,
    String brokerBranchID,
    String tradeDate,
    String tradeTime,
    String bankSerial,
    String tradingDay,
    int plateSerial,
    String lastFragment,
    int sessionID,
    String customerName,
    String idcardType,
    String identifiedCardNo,
    String custType,
    String bankAccount,
    String bankPassWord,
    String accountID,
    String password,
    int futureSerial,
    int installID,
    String userID,
    String verifyCertNoFlag,
    String currencyID,
    String digest,
    String bankAccType,
    String deviceID,
    String bankSecuAccType,
    String brokerIDByBank,
    String bankSecuAcc,
    String bankPwdFlag,
    String secuPwdFlag,
    String operNo,
    int requestID,
    int tID,
    double bankUseAmount,
    double bankFetchAmount)
  {
    this();
    this.tradeCode = tradeCode;
    this.bankID = bankID;
    this.bankBranchID = bankBranchID;
    this.brokerID = brokerID;
    this.brokerBranchID = brokerBranchID;
    this.tradeDate = tradeDate;
    this.tradeTime = tradeTime;
    this.bankSerial = bankSerial;
    this.tradingDay = tradingDay;
    this.plateSerial = plateSerial;
    setPlateSerialIsSet(true);
    this.lastFragment = lastFragment;
    this.sessionID = sessionID;
    setSessionIDIsSet(true);
    this.customerName = customerName;
    this.idcardType = idcardType;
    this.identifiedCardNo = identifiedCardNo;
    this.custType = custType;
    this.bankAccount = bankAccount;
    this.bankPassWord = bankPassWord;
    this.accountID = accountID;
    this.password = password;
    this.futureSerial = futureSerial;
    setFutureSerialIsSet(true);
    this.installID = installID;
    setInstallIDIsSet(true);
    this.userID = userID;
    this.verifyCertNoFlag = verifyCertNoFlag;
    this.currencyID = currencyID;
    this.digest = digest;
    this.bankAccType = bankAccType;
    this.deviceID = deviceID;
    this.bankSecuAccType = bankSecuAccType;
    this.brokerIDByBank = brokerIDByBank;
    this.bankSecuAcc = bankSecuAcc;
    this.bankPwdFlag = bankPwdFlag;
    this.secuPwdFlag = secuPwdFlag;
    this.operNo = operNo;
    this.requestID = requestID;
    setRequestIDIsSet(true);
    this.tID = tID;
    setTIDIsSet(true);
    this.bankUseAmount = bankUseAmount;
    setBankUseAmountIsSet(true);
    this.bankFetchAmount = bankFetchAmount;
    setBankFetchAmountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcRspQueryAccountField(CThostFtdcRspQueryAccountField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTradeCode()) {
      this.tradeCode = other.tradeCode;
    }
    if (other.isSetBankID()) {
      this.bankID = other.bankID;
    }
    if (other.isSetBankBranchID()) {
      this.bankBranchID = other.bankBranchID;
    }
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetBrokerBranchID()) {
      this.brokerBranchID = other.brokerBranchID;
    }
    if (other.isSetTradeDate()) {
      this.tradeDate = other.tradeDate;
    }
    if (other.isSetTradeTime()) {
      this.tradeTime = other.tradeTime;
    }
    if (other.isSetBankSerial()) {
      this.bankSerial = other.bankSerial;
    }
    if (other.isSetTradingDay()) {
      this.tradingDay = other.tradingDay;
    }
    this.plateSerial = other.plateSerial;
    if (other.isSetLastFragment()) {
      this.lastFragment = other.lastFragment;
    }
    this.sessionID = other.sessionID;
    if (other.isSetCustomerName()) {
      this.customerName = other.customerName;
    }
    if (other.isSetIdcardType()) {
      this.idcardType = other.idcardType;
    }
    if (other.isSetIdentifiedCardNo()) {
      this.identifiedCardNo = other.identifiedCardNo;
    }
    if (other.isSetCustType()) {
      this.custType = other.custType;
    }
    if (other.isSetBankAccount()) {
      this.bankAccount = other.bankAccount;
    }
    if (other.isSetBankPassWord()) {
      this.bankPassWord = other.bankPassWord;
    }
    if (other.isSetAccountID()) {
      this.accountID = other.accountID;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    this.futureSerial = other.futureSerial;
    this.installID = other.installID;
    if (other.isSetUserID()) {
      this.userID = other.userID;
    }
    if (other.isSetVerifyCertNoFlag()) {
      this.verifyCertNoFlag = other.verifyCertNoFlag;
    }
    if (other.isSetCurrencyID()) {
      this.currencyID = other.currencyID;
    }
    if (other.isSetDigest()) {
      this.digest = other.digest;
    }
    if (other.isSetBankAccType()) {
      this.bankAccType = other.bankAccType;
    }
    if (other.isSetDeviceID()) {
      this.deviceID = other.deviceID;
    }
    if (other.isSetBankSecuAccType()) {
      this.bankSecuAccType = other.bankSecuAccType;
    }
    if (other.isSetBrokerIDByBank()) {
      this.brokerIDByBank = other.brokerIDByBank;
    }
    if (other.isSetBankSecuAcc()) {
      this.bankSecuAcc = other.bankSecuAcc;
    }
    if (other.isSetBankPwdFlag()) {
      this.bankPwdFlag = other.bankPwdFlag;
    }
    if (other.isSetSecuPwdFlag()) {
      this.secuPwdFlag = other.secuPwdFlag;
    }
    if (other.isSetOperNo()) {
      this.operNo = other.operNo;
    }
    this.requestID = other.requestID;
    this.tID = other.tID;
    this.bankUseAmount = other.bankUseAmount;
    this.bankFetchAmount = other.bankFetchAmount;
  }

  public CThostFtdcRspQueryAccountField deepCopy() {
    return new CThostFtdcRspQueryAccountField(this);
  }

  @Override
  public void clear() {
    this.tradeCode = null;
    this.bankID = null;
    this.bankBranchID = null;
    this.brokerID = null;
    this.brokerBranchID = null;
    this.tradeDate = null;
    this.tradeTime = null;
    this.bankSerial = null;
    this.tradingDay = null;
    setPlateSerialIsSet(false);
    this.plateSerial = 0;
    this.lastFragment = null;
    setSessionIDIsSet(false);
    this.sessionID = 0;
    this.customerName = null;
    this.idcardType = null;
    this.identifiedCardNo = null;
    this.custType = null;
    this.bankAccount = null;
    this.bankPassWord = null;
    this.accountID = null;
    this.password = null;
    setFutureSerialIsSet(false);
    this.futureSerial = 0;
    setInstallIDIsSet(false);
    this.installID = 0;
    this.userID = null;
    this.verifyCertNoFlag = null;
    this.currencyID = null;
    this.digest = null;
    this.bankAccType = null;
    this.deviceID = null;
    this.bankSecuAccType = null;
    this.brokerIDByBank = null;
    this.bankSecuAcc = null;
    this.bankPwdFlag = null;
    this.secuPwdFlag = null;
    this.operNo = null;
    setRequestIDIsSet(false);
    this.requestID = 0;
    setTIDIsSet(false);
    this.tID = 0;
    setBankUseAmountIsSet(false);
    this.bankUseAmount = 0.0;
    setBankFetchAmountIsSet(false);
    this.bankFetchAmount = 0.0;
  }

  public String getTradeCode() {
    return this.tradeCode;
  }

  public CThostFtdcRspQueryAccountField setTradeCode(String tradeCode) {
    this.tradeCode = tradeCode;
    return this;
  }

  public void unsetTradeCode() {
    this.tradeCode = null;
  }

  /** Returns true if field tradeCode is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeCode() {
    return this.tradeCode != null;
  }

  public void setTradeCodeIsSet(boolean value) {
    if (!value) {
      this.tradeCode = null;
    }
  }

  public String getBankID() {
    return this.bankID;
  }

  public CThostFtdcRspQueryAccountField setBankID(String bankID) {
    this.bankID = bankID;
    return this;
  }

  public void unsetBankID() {
    this.bankID = null;
  }

  /** Returns true if field bankID is set (has been assigned a value) and false otherwise */
  public boolean isSetBankID() {
    return this.bankID != null;
  }

  public void setBankIDIsSet(boolean value) {
    if (!value) {
      this.bankID = null;
    }
  }

  public String getBankBranchID() {
    return this.bankBranchID;
  }

  public CThostFtdcRspQueryAccountField setBankBranchID(String bankBranchID) {
    this.bankBranchID = bankBranchID;
    return this;
  }

  public void unsetBankBranchID() {
    this.bankBranchID = null;
  }

  /** Returns true if field bankBranchID is set (has been assigned a value) and false otherwise */
  public boolean isSetBankBranchID() {
    return this.bankBranchID != null;
  }

  public void setBankBranchIDIsSet(boolean value) {
    if (!value) {
      this.bankBranchID = null;
    }
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcRspQueryAccountField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getBrokerBranchID() {
    return this.brokerBranchID;
  }

  public CThostFtdcRspQueryAccountField setBrokerBranchID(String brokerBranchID) {
    this.brokerBranchID = brokerBranchID;
    return this;
  }

  public void unsetBrokerBranchID() {
    this.brokerBranchID = null;
  }

  /** Returns true if field brokerBranchID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerBranchID() {
    return this.brokerBranchID != null;
  }

  public void setBrokerBranchIDIsSet(boolean value) {
    if (!value) {
      this.brokerBranchID = null;
    }
  }

  public String getTradeDate() {
    return this.tradeDate;
  }

  public CThostFtdcRspQueryAccountField setTradeDate(String tradeDate) {
    this.tradeDate = tradeDate;
    return this;
  }

  public void unsetTradeDate() {
    this.tradeDate = null;
  }

  /** Returns true if field tradeDate is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeDate() {
    return this.tradeDate != null;
  }

  public void setTradeDateIsSet(boolean value) {
    if (!value) {
      this.tradeDate = null;
    }
  }

  public String getTradeTime() {
    return this.tradeTime;
  }

  public CThostFtdcRspQueryAccountField setTradeTime(String tradeTime) {
    this.tradeTime = tradeTime;
    return this;
  }

  public void unsetTradeTime() {
    this.tradeTime = null;
  }

  /** Returns true if field tradeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeTime() {
    return this.tradeTime != null;
  }

  public void setTradeTimeIsSet(boolean value) {
    if (!value) {
      this.tradeTime = null;
    }
  }

  public String getBankSerial() {
    return this.bankSerial;
  }

  public CThostFtdcRspQueryAccountField setBankSerial(String bankSerial) {
    this.bankSerial = bankSerial;
    return this;
  }

  public void unsetBankSerial() {
    this.bankSerial = null;
  }

  /** Returns true if field bankSerial is set (has been assigned a value) and false otherwise */
  public boolean isSetBankSerial() {
    return this.bankSerial != null;
  }

  public void setBankSerialIsSet(boolean value) {
    if (!value) {
      this.bankSerial = null;
    }
  }

  public String getTradingDay() {
    return this.tradingDay;
  }

  public CThostFtdcRspQueryAccountField setTradingDay(String tradingDay) {
    this.tradingDay = tradingDay;
    return this;
  }

  public void unsetTradingDay() {
    this.tradingDay = null;
  }

  /** Returns true if field tradingDay is set (has been assigned a value) and false otherwise */
  public boolean isSetTradingDay() {
    return this.tradingDay != null;
  }

  public void setTradingDayIsSet(boolean value) {
    if (!value) {
      this.tradingDay = null;
    }
  }

  public int getPlateSerial() {
    return this.plateSerial;
  }

  public CThostFtdcRspQueryAccountField setPlateSerial(int plateSerial) {
    this.plateSerial = plateSerial;
    setPlateSerialIsSet(true);
    return this;
  }

  public void unsetPlateSerial() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLATESERIAL_ISSET_ID);
  }

  /** Returns true if field plateSerial is set (has been assigned a value) and false otherwise */
  public boolean isSetPlateSerial() {
    return EncodingUtils.testBit(__isset_bitfield, __PLATESERIAL_ISSET_ID);
  }

  public void setPlateSerialIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLATESERIAL_ISSET_ID, value);
  }

  public String getLastFragment() {
    return this.lastFragment;
  }

  public CThostFtdcRspQueryAccountField setLastFragment(String lastFragment) {
    this.lastFragment = lastFragment;
    return this;
  }

  public void unsetLastFragment() {
    this.lastFragment = null;
  }

  /** Returns true if field lastFragment is set (has been assigned a value) and false otherwise */
  public boolean isSetLastFragment() {
    return this.lastFragment != null;
  }

  public void setLastFragmentIsSet(boolean value) {
    if (!value) {
      this.lastFragment = null;
    }
  }

  public int getSessionID() {
    return this.sessionID;
  }

  public CThostFtdcRspQueryAccountField setSessionID(int sessionID) {
    this.sessionID = sessionID;
    setSessionIDIsSet(true);
    return this;
  }

  public void unsetSessionID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionID() {
    return EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  public void setSessionIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
  }

  public String getCustomerName() {
    return this.customerName;
  }

  public CThostFtdcRspQueryAccountField setCustomerName(String customerName) {
    this.customerName = customerName;
    return this;
  }

  public void unsetCustomerName() {
    this.customerName = null;
  }

  /** Returns true if field customerName is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomerName() {
    return this.customerName != null;
  }

  public void setCustomerNameIsSet(boolean value) {
    if (!value) {
      this.customerName = null;
    }
  }

  public String getIdcardType() {
    return this.idcardType;
  }

  public CThostFtdcRspQueryAccountField setIdcardType(String idcardType) {
    this.idcardType = idcardType;
    return this;
  }

  public void unsetIdcardType() {
    this.idcardType = null;
  }

  /** Returns true if field idcardType is set (has been assigned a value) and false otherwise */
  public boolean isSetIdcardType() {
    return this.idcardType != null;
  }

  public void setIdcardTypeIsSet(boolean value) {
    if (!value) {
      this.idcardType = null;
    }
  }

  public String getIdentifiedCardNo() {
    return this.identifiedCardNo;
  }

  public CThostFtdcRspQueryAccountField setIdentifiedCardNo(String identifiedCardNo) {
    this.identifiedCardNo = identifiedCardNo;
    return this;
  }

  public void unsetIdentifiedCardNo() {
    this.identifiedCardNo = null;
  }

  /** Returns true if field identifiedCardNo is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentifiedCardNo() {
    return this.identifiedCardNo != null;
  }

  public void setIdentifiedCardNoIsSet(boolean value) {
    if (!value) {
      this.identifiedCardNo = null;
    }
  }

  public String getCustType() {
    return this.custType;
  }

  public CThostFtdcRspQueryAccountField setCustType(String custType) {
    this.custType = custType;
    return this;
  }

  public void unsetCustType() {
    this.custType = null;
  }

  /** Returns true if field custType is set (has been assigned a value) and false otherwise */
  public boolean isSetCustType() {
    return this.custType != null;
  }

  public void setCustTypeIsSet(boolean value) {
    if (!value) {
      this.custType = null;
    }
  }

  public String getBankAccount() {
    return this.bankAccount;
  }

  public CThostFtdcRspQueryAccountField setBankAccount(String bankAccount) {
    this.bankAccount = bankAccount;
    return this;
  }

  public void unsetBankAccount() {
    this.bankAccount = null;
  }

  /** Returns true if field bankAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetBankAccount() {
    return this.bankAccount != null;
  }

  public void setBankAccountIsSet(boolean value) {
    if (!value) {
      this.bankAccount = null;
    }
  }

  public String getBankPassWord() {
    return this.bankPassWord;
  }

  public CThostFtdcRspQueryAccountField setBankPassWord(String bankPassWord) {
    this.bankPassWord = bankPassWord;
    return this;
  }

  public void unsetBankPassWord() {
    this.bankPassWord = null;
  }

  /** Returns true if field bankPassWord is set (has been assigned a value) and false otherwise */
  public boolean isSetBankPassWord() {
    return this.bankPassWord != null;
  }

  public void setBankPassWordIsSet(boolean value) {
    if (!value) {
      this.bankPassWord = null;
    }
  }

  public String getAccountID() {
    return this.accountID;
  }

  public CThostFtdcRspQueryAccountField setAccountID(String accountID) {
    this.accountID = accountID;
    return this;
  }

  public void unsetAccountID() {
    this.accountID = null;
  }

  /** Returns true if field accountID is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountID() {
    return this.accountID != null;
  }

  public void setAccountIDIsSet(boolean value) {
    if (!value) {
      this.accountID = null;
    }
  }

  public String getPassword() {
    return this.password;
  }

  public CThostFtdcRspQueryAccountField setPassword(String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public int getFutureSerial() {
    return this.futureSerial;
  }

  public CThostFtdcRspQueryAccountField setFutureSerial(int futureSerial) {
    this.futureSerial = futureSerial;
    setFutureSerialIsSet(true);
    return this;
  }

  public void unsetFutureSerial() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FUTURESERIAL_ISSET_ID);
  }

  /** Returns true if field futureSerial is set (has been assigned a value) and false otherwise */
  public boolean isSetFutureSerial() {
    return EncodingUtils.testBit(__isset_bitfield, __FUTURESERIAL_ISSET_ID);
  }

  public void setFutureSerialIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FUTURESERIAL_ISSET_ID, value);
  }

  public int getInstallID() {
    return this.installID;
  }

  public CThostFtdcRspQueryAccountField setInstallID(int installID) {
    this.installID = installID;
    setInstallIDIsSet(true);
    return this;
  }

  public void unsetInstallID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSTALLID_ISSET_ID);
  }

  /** Returns true if field installID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstallID() {
    return EncodingUtils.testBit(__isset_bitfield, __INSTALLID_ISSET_ID);
  }

  public void setInstallIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSTALLID_ISSET_ID, value);
  }

  public String getUserID() {
    return this.userID;
  }

  public CThostFtdcRspQueryAccountField setUserID(String userID) {
    this.userID = userID;
    return this;
  }

  public void unsetUserID() {
    this.userID = null;
  }

  /** Returns true if field userID is set (has been assigned a value) and false otherwise */
  public boolean isSetUserID() {
    return this.userID != null;
  }

  public void setUserIDIsSet(boolean value) {
    if (!value) {
      this.userID = null;
    }
  }

  public String getVerifyCertNoFlag() {
    return this.verifyCertNoFlag;
  }

  public CThostFtdcRspQueryAccountField setVerifyCertNoFlag(String verifyCertNoFlag) {
    this.verifyCertNoFlag = verifyCertNoFlag;
    return this;
  }

  public void unsetVerifyCertNoFlag() {
    this.verifyCertNoFlag = null;
  }

  /** Returns true if field verifyCertNoFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetVerifyCertNoFlag() {
    return this.verifyCertNoFlag != null;
  }

  public void setVerifyCertNoFlagIsSet(boolean value) {
    if (!value) {
      this.verifyCertNoFlag = null;
    }
  }

  public String getCurrencyID() {
    return this.currencyID;
  }

  public CThostFtdcRspQueryAccountField setCurrencyID(String currencyID) {
    this.currencyID = currencyID;
    return this;
  }

  public void unsetCurrencyID() {
    this.currencyID = null;
  }

  /** Returns true if field currencyID is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencyID() {
    return this.currencyID != null;
  }

  public void setCurrencyIDIsSet(boolean value) {
    if (!value) {
      this.currencyID = null;
    }
  }

  public String getDigest() {
    return this.digest;
  }

  public CThostFtdcRspQueryAccountField setDigest(String digest) {
    this.digest = digest;
    return this;
  }

  public void unsetDigest() {
    this.digest = null;
  }

  /** Returns true if field digest is set (has been assigned a value) and false otherwise */
  public boolean isSetDigest() {
    return this.digest != null;
  }

  public void setDigestIsSet(boolean value) {
    if (!value) {
      this.digest = null;
    }
  }

  public String getBankAccType() {
    return this.bankAccType;
  }

  public CThostFtdcRspQueryAccountField setBankAccType(String bankAccType) {
    this.bankAccType = bankAccType;
    return this;
  }

  public void unsetBankAccType() {
    this.bankAccType = null;
  }

  /** Returns true if field bankAccType is set (has been assigned a value) and false otherwise */
  public boolean isSetBankAccType() {
    return this.bankAccType != null;
  }

  public void setBankAccTypeIsSet(boolean value) {
    if (!value) {
      this.bankAccType = null;
    }
  }

  public String getDeviceID() {
    return this.deviceID;
  }

  public CThostFtdcRspQueryAccountField setDeviceID(String deviceID) {
    this.deviceID = deviceID;
    return this;
  }

  public void unsetDeviceID() {
    this.deviceID = null;
  }

  /** Returns true if field deviceID is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceID() {
    return this.deviceID != null;
  }

  public void setDeviceIDIsSet(boolean value) {
    if (!value) {
      this.deviceID = null;
    }
  }

  public String getBankSecuAccType() {
    return this.bankSecuAccType;
  }

  public CThostFtdcRspQueryAccountField setBankSecuAccType(String bankSecuAccType) {
    this.bankSecuAccType = bankSecuAccType;
    return this;
  }

  public void unsetBankSecuAccType() {
    this.bankSecuAccType = null;
  }

  /** Returns true if field bankSecuAccType is set (has been assigned a value) and false otherwise */
  public boolean isSetBankSecuAccType() {
    return this.bankSecuAccType != null;
  }

  public void setBankSecuAccTypeIsSet(boolean value) {
    if (!value) {
      this.bankSecuAccType = null;
    }
  }

  public String getBrokerIDByBank() {
    return this.brokerIDByBank;
  }

  public CThostFtdcRspQueryAccountField setBrokerIDByBank(String brokerIDByBank) {
    this.brokerIDByBank = brokerIDByBank;
    return this;
  }

  public void unsetBrokerIDByBank() {
    this.brokerIDByBank = null;
  }

  /** Returns true if field brokerIDByBank is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerIDByBank() {
    return this.brokerIDByBank != null;
  }

  public void setBrokerIDByBankIsSet(boolean value) {
    if (!value) {
      this.brokerIDByBank = null;
    }
  }

  public String getBankSecuAcc() {
    return this.bankSecuAcc;
  }

  public CThostFtdcRspQueryAccountField setBankSecuAcc(String bankSecuAcc) {
    this.bankSecuAcc = bankSecuAcc;
    return this;
  }

  public void unsetBankSecuAcc() {
    this.bankSecuAcc = null;
  }

  /** Returns true if field bankSecuAcc is set (has been assigned a value) and false otherwise */
  public boolean isSetBankSecuAcc() {
    return this.bankSecuAcc != null;
  }

  public void setBankSecuAccIsSet(boolean value) {
    if (!value) {
      this.bankSecuAcc = null;
    }
  }

  public String getBankPwdFlag() {
    return this.bankPwdFlag;
  }

  public CThostFtdcRspQueryAccountField setBankPwdFlag(String bankPwdFlag) {
    this.bankPwdFlag = bankPwdFlag;
    return this;
  }

  public void unsetBankPwdFlag() {
    this.bankPwdFlag = null;
  }

  /** Returns true if field bankPwdFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetBankPwdFlag() {
    return this.bankPwdFlag != null;
  }

  public void setBankPwdFlagIsSet(boolean value) {
    if (!value) {
      this.bankPwdFlag = null;
    }
  }

  public String getSecuPwdFlag() {
    return this.secuPwdFlag;
  }

  public CThostFtdcRspQueryAccountField setSecuPwdFlag(String secuPwdFlag) {
    this.secuPwdFlag = secuPwdFlag;
    return this;
  }

  public void unsetSecuPwdFlag() {
    this.secuPwdFlag = null;
  }

  /** Returns true if field secuPwdFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetSecuPwdFlag() {
    return this.secuPwdFlag != null;
  }

  public void setSecuPwdFlagIsSet(boolean value) {
    if (!value) {
      this.secuPwdFlag = null;
    }
  }

  public String getOperNo() {
    return this.operNo;
  }

  public CThostFtdcRspQueryAccountField setOperNo(String operNo) {
    this.operNo = operNo;
    return this;
  }

  public void unsetOperNo() {
    this.operNo = null;
  }

  /** Returns true if field operNo is set (has been assigned a value) and false otherwise */
  public boolean isSetOperNo() {
    return this.operNo != null;
  }

  public void setOperNoIsSet(boolean value) {
    if (!value) {
      this.operNo = null;
    }
  }

  public int getRequestID() {
    return this.requestID;
  }

  public CThostFtdcRspQueryAccountField setRequestID(int requestID) {
    this.requestID = requestID;
    setRequestIDIsSet(true);
    return this;
  }

  public void unsetRequestID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  /** Returns true if field requestID is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestID() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  public void setRequestIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
  }

  public int getTID() {
    return this.tID;
  }

  public CThostFtdcRspQueryAccountField setTID(int tID) {
    this.tID = tID;
    setTIDIsSet(true);
    return this;
  }

  public void unsetTID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TID_ISSET_ID);
  }

  /** Returns true if field tID is set (has been assigned a value) and false otherwise */
  public boolean isSetTID() {
    return EncodingUtils.testBit(__isset_bitfield, __TID_ISSET_ID);
  }

  public void setTIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TID_ISSET_ID, value);
  }

  public double getBankUseAmount() {
    return this.bankUseAmount;
  }

  public CThostFtdcRspQueryAccountField setBankUseAmount(double bankUseAmount) {
    this.bankUseAmount = bankUseAmount;
    setBankUseAmountIsSet(true);
    return this;
  }

  public void unsetBankUseAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANKUSEAMOUNT_ISSET_ID);
  }

  /** Returns true if field bankUseAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetBankUseAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __BANKUSEAMOUNT_ISSET_ID);
  }

  public void setBankUseAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANKUSEAMOUNT_ISSET_ID, value);
  }

  public double getBankFetchAmount() {
    return this.bankFetchAmount;
  }

  public CThostFtdcRspQueryAccountField setBankFetchAmount(double bankFetchAmount) {
    this.bankFetchAmount = bankFetchAmount;
    setBankFetchAmountIsSet(true);
    return this;
  }

  public void unsetBankFetchAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANKFETCHAMOUNT_ISSET_ID);
  }

  /** Returns true if field bankFetchAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetBankFetchAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __BANKFETCHAMOUNT_ISSET_ID);
  }

  public void setBankFetchAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANKFETCHAMOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRADE_CODE:
      if (value == null) {
        unsetTradeCode();
      } else {
        setTradeCode((String)value);
      }
      break;

    case BANK_ID:
      if (value == null) {
        unsetBankID();
      } else {
        setBankID((String)value);
      }
      break;

    case BANK_BRANCH_ID:
      if (value == null) {
        unsetBankBranchID();
      } else {
        setBankBranchID((String)value);
      }
      break;

    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case BROKER_BRANCH_ID:
      if (value == null) {
        unsetBrokerBranchID();
      } else {
        setBrokerBranchID((String)value);
      }
      break;

    case TRADE_DATE:
      if (value == null) {
        unsetTradeDate();
      } else {
        setTradeDate((String)value);
      }
      break;

    case TRADE_TIME:
      if (value == null) {
        unsetTradeTime();
      } else {
        setTradeTime((String)value);
      }
      break;

    case BANK_SERIAL:
      if (value == null) {
        unsetBankSerial();
      } else {
        setBankSerial((String)value);
      }
      break;

    case TRADING_DAY:
      if (value == null) {
        unsetTradingDay();
      } else {
        setTradingDay((String)value);
      }
      break;

    case PLATE_SERIAL:
      if (value == null) {
        unsetPlateSerial();
      } else {
        setPlateSerial((Integer)value);
      }
      break;

    case LAST_FRAGMENT:
      if (value == null) {
        unsetLastFragment();
      } else {
        setLastFragment((String)value);
      }
      break;

    case SESSION_ID:
      if (value == null) {
        unsetSessionID();
      } else {
        setSessionID((Integer)value);
      }
      break;

    case CUSTOMER_NAME:
      if (value == null) {
        unsetCustomerName();
      } else {
        setCustomerName((String)value);
      }
      break;

    case IDCARD_TYPE:
      if (value == null) {
        unsetIdcardType();
      } else {
        setIdcardType((String)value);
      }
      break;

    case IDENTIFIED_CARD_NO:
      if (value == null) {
        unsetIdentifiedCardNo();
      } else {
        setIdentifiedCardNo((String)value);
      }
      break;

    case CUST_TYPE:
      if (value == null) {
        unsetCustType();
      } else {
        setCustType((String)value);
      }
      break;

    case BANK_ACCOUNT:
      if (value == null) {
        unsetBankAccount();
      } else {
        setBankAccount((String)value);
      }
      break;

    case BANK_PASS_WORD:
      if (value == null) {
        unsetBankPassWord();
      } else {
        setBankPassWord((String)value);
      }
      break;

    case ACCOUNT_ID:
      if (value == null) {
        unsetAccountID();
      } else {
        setAccountID((String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    case FUTURE_SERIAL:
      if (value == null) {
        unsetFutureSerial();
      } else {
        setFutureSerial((Integer)value);
      }
      break;

    case INSTALL_ID:
      if (value == null) {
        unsetInstallID();
      } else {
        setInstallID((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserID();
      } else {
        setUserID((String)value);
      }
      break;

    case VERIFY_CERT_NO_FLAG:
      if (value == null) {
        unsetVerifyCertNoFlag();
      } else {
        setVerifyCertNoFlag((String)value);
      }
      break;

    case CURRENCY_ID:
      if (value == null) {
        unsetCurrencyID();
      } else {
        setCurrencyID((String)value);
      }
      break;

    case DIGEST:
      if (value == null) {
        unsetDigest();
      } else {
        setDigest((String)value);
      }
      break;

    case BANK_ACC_TYPE:
      if (value == null) {
        unsetBankAccType();
      } else {
        setBankAccType((String)value);
      }
      break;

    case DEVICE_ID:
      if (value == null) {
        unsetDeviceID();
      } else {
        setDeviceID((String)value);
      }
      break;

    case BANK_SECU_ACC_TYPE:
      if (value == null) {
        unsetBankSecuAccType();
      } else {
        setBankSecuAccType((String)value);
      }
      break;

    case BROKER_IDBY_BANK:
      if (value == null) {
        unsetBrokerIDByBank();
      } else {
        setBrokerIDByBank((String)value);
      }
      break;

    case BANK_SECU_ACC:
      if (value == null) {
        unsetBankSecuAcc();
      } else {
        setBankSecuAcc((String)value);
      }
      break;

    case BANK_PWD_FLAG:
      if (value == null) {
        unsetBankPwdFlag();
      } else {
        setBankPwdFlag((String)value);
      }
      break;

    case SECU_PWD_FLAG:
      if (value == null) {
        unsetSecuPwdFlag();
      } else {
        setSecuPwdFlag((String)value);
      }
      break;

    case OPER_NO:
      if (value == null) {
        unsetOperNo();
      } else {
        setOperNo((String)value);
      }
      break;

    case REQUEST_ID:
      if (value == null) {
        unsetRequestID();
      } else {
        setRequestID((Integer)value);
      }
      break;

    case T_ID:
      if (value == null) {
        unsetTID();
      } else {
        setTID((Integer)value);
      }
      break;

    case BANK_USE_AMOUNT:
      if (value == null) {
        unsetBankUseAmount();
      } else {
        setBankUseAmount((Double)value);
      }
      break;

    case BANK_FETCH_AMOUNT:
      if (value == null) {
        unsetBankFetchAmount();
      } else {
        setBankFetchAmount((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRADE_CODE:
      return getTradeCode();

    case BANK_ID:
      return getBankID();

    case BANK_BRANCH_ID:
      return getBankBranchID();

    case BROKER_ID:
      return getBrokerID();

    case BROKER_BRANCH_ID:
      return getBrokerBranchID();

    case TRADE_DATE:
      return getTradeDate();

    case TRADE_TIME:
      return getTradeTime();

    case BANK_SERIAL:
      return getBankSerial();

    case TRADING_DAY:
      return getTradingDay();

    case PLATE_SERIAL:
      return Integer.valueOf(getPlateSerial());

    case LAST_FRAGMENT:
      return getLastFragment();

    case SESSION_ID:
      return Integer.valueOf(getSessionID());

    case CUSTOMER_NAME:
      return getCustomerName();

    case IDCARD_TYPE:
      return getIdcardType();

    case IDENTIFIED_CARD_NO:
      return getIdentifiedCardNo();

    case CUST_TYPE:
      return getCustType();

    case BANK_ACCOUNT:
      return getBankAccount();

    case BANK_PASS_WORD:
      return getBankPassWord();

    case ACCOUNT_ID:
      return getAccountID();

    case PASSWORD:
      return getPassword();

    case FUTURE_SERIAL:
      return Integer.valueOf(getFutureSerial());

    case INSTALL_ID:
      return Integer.valueOf(getInstallID());

    case USER_ID:
      return getUserID();

    case VERIFY_CERT_NO_FLAG:
      return getVerifyCertNoFlag();

    case CURRENCY_ID:
      return getCurrencyID();

    case DIGEST:
      return getDigest();

    case BANK_ACC_TYPE:
      return getBankAccType();

    case DEVICE_ID:
      return getDeviceID();

    case BANK_SECU_ACC_TYPE:
      return getBankSecuAccType();

    case BROKER_IDBY_BANK:
      return getBrokerIDByBank();

    case BANK_SECU_ACC:
      return getBankSecuAcc();

    case BANK_PWD_FLAG:
      return getBankPwdFlag();

    case SECU_PWD_FLAG:
      return getSecuPwdFlag();

    case OPER_NO:
      return getOperNo();

    case REQUEST_ID:
      return Integer.valueOf(getRequestID());

    case T_ID:
      return Integer.valueOf(getTID());

    case BANK_USE_AMOUNT:
      return Double.valueOf(getBankUseAmount());

    case BANK_FETCH_AMOUNT:
      return Double.valueOf(getBankFetchAmount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRADE_CODE:
      return isSetTradeCode();
    case BANK_ID:
      return isSetBankID();
    case BANK_BRANCH_ID:
      return isSetBankBranchID();
    case BROKER_ID:
      return isSetBrokerID();
    case BROKER_BRANCH_ID:
      return isSetBrokerBranchID();
    case TRADE_DATE:
      return isSetTradeDate();
    case TRADE_TIME:
      return isSetTradeTime();
    case BANK_SERIAL:
      return isSetBankSerial();
    case TRADING_DAY:
      return isSetTradingDay();
    case PLATE_SERIAL:
      return isSetPlateSerial();
    case LAST_FRAGMENT:
      return isSetLastFragment();
    case SESSION_ID:
      return isSetSessionID();
    case CUSTOMER_NAME:
      return isSetCustomerName();
    case IDCARD_TYPE:
      return isSetIdcardType();
    case IDENTIFIED_CARD_NO:
      return isSetIdentifiedCardNo();
    case CUST_TYPE:
      return isSetCustType();
    case BANK_ACCOUNT:
      return isSetBankAccount();
    case BANK_PASS_WORD:
      return isSetBankPassWord();
    case ACCOUNT_ID:
      return isSetAccountID();
    case PASSWORD:
      return isSetPassword();
    case FUTURE_SERIAL:
      return isSetFutureSerial();
    case INSTALL_ID:
      return isSetInstallID();
    case USER_ID:
      return isSetUserID();
    case VERIFY_CERT_NO_FLAG:
      return isSetVerifyCertNoFlag();
    case CURRENCY_ID:
      return isSetCurrencyID();
    case DIGEST:
      return isSetDigest();
    case BANK_ACC_TYPE:
      return isSetBankAccType();
    case DEVICE_ID:
      return isSetDeviceID();
    case BANK_SECU_ACC_TYPE:
      return isSetBankSecuAccType();
    case BROKER_IDBY_BANK:
      return isSetBrokerIDByBank();
    case BANK_SECU_ACC:
      return isSetBankSecuAcc();
    case BANK_PWD_FLAG:
      return isSetBankPwdFlag();
    case SECU_PWD_FLAG:
      return isSetSecuPwdFlag();
    case OPER_NO:
      return isSetOperNo();
    case REQUEST_ID:
      return isSetRequestID();
    case T_ID:
      return isSetTID();
    case BANK_USE_AMOUNT:
      return isSetBankUseAmount();
    case BANK_FETCH_AMOUNT:
      return isSetBankFetchAmount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcRspQueryAccountField)
      return this.equals((CThostFtdcRspQueryAccountField)that);
    return false;
  }

  public boolean equals(CThostFtdcRspQueryAccountField that) {
    if (that == null)
      return false;

    boolean this_present_tradeCode = true && this.isSetTradeCode();
    boolean that_present_tradeCode = true && that.isSetTradeCode();
    if (this_present_tradeCode || that_present_tradeCode) {
      if (!(this_present_tradeCode && that_present_tradeCode))
        return false;
      if (!this.tradeCode.equals(that.tradeCode))
        return false;
    }

    boolean this_present_bankID = true && this.isSetBankID();
    boolean that_present_bankID = true && that.isSetBankID();
    if (this_present_bankID || that_present_bankID) {
      if (!(this_present_bankID && that_present_bankID))
        return false;
      if (!this.bankID.equals(that.bankID))
        return false;
    }

    boolean this_present_bankBranchID = true && this.isSetBankBranchID();
    boolean that_present_bankBranchID = true && that.isSetBankBranchID();
    if (this_present_bankBranchID || that_present_bankBranchID) {
      if (!(this_present_bankBranchID && that_present_bankBranchID))
        return false;
      if (!this.bankBranchID.equals(that.bankBranchID))
        return false;
    }

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_brokerBranchID = true && this.isSetBrokerBranchID();
    boolean that_present_brokerBranchID = true && that.isSetBrokerBranchID();
    if (this_present_brokerBranchID || that_present_brokerBranchID) {
      if (!(this_present_brokerBranchID && that_present_brokerBranchID))
        return false;
      if (!this.brokerBranchID.equals(that.brokerBranchID))
        return false;
    }

    boolean this_present_tradeDate = true && this.isSetTradeDate();
    boolean that_present_tradeDate = true && that.isSetTradeDate();
    if (this_present_tradeDate || that_present_tradeDate) {
      if (!(this_present_tradeDate && that_present_tradeDate))
        return false;
      if (!this.tradeDate.equals(that.tradeDate))
        return false;
    }

    boolean this_present_tradeTime = true && this.isSetTradeTime();
    boolean that_present_tradeTime = true && that.isSetTradeTime();
    if (this_present_tradeTime || that_present_tradeTime) {
      if (!(this_present_tradeTime && that_present_tradeTime))
        return false;
      if (!this.tradeTime.equals(that.tradeTime))
        return false;
    }

    boolean this_present_bankSerial = true && this.isSetBankSerial();
    boolean that_present_bankSerial = true && that.isSetBankSerial();
    if (this_present_bankSerial || that_present_bankSerial) {
      if (!(this_present_bankSerial && that_present_bankSerial))
        return false;
      if (!this.bankSerial.equals(that.bankSerial))
        return false;
    }

    boolean this_present_tradingDay = true && this.isSetTradingDay();
    boolean that_present_tradingDay = true && that.isSetTradingDay();
    if (this_present_tradingDay || that_present_tradingDay) {
      if (!(this_present_tradingDay && that_present_tradingDay))
        return false;
      if (!this.tradingDay.equals(that.tradingDay))
        return false;
    }

    boolean this_present_plateSerial = true;
    boolean that_present_plateSerial = true;
    if (this_present_plateSerial || that_present_plateSerial) {
      if (!(this_present_plateSerial && that_present_plateSerial))
        return false;
      if (this.plateSerial != that.plateSerial)
        return false;
    }

    boolean this_present_lastFragment = true && this.isSetLastFragment();
    boolean that_present_lastFragment = true && that.isSetLastFragment();
    if (this_present_lastFragment || that_present_lastFragment) {
      if (!(this_present_lastFragment && that_present_lastFragment))
        return false;
      if (!this.lastFragment.equals(that.lastFragment))
        return false;
    }

    boolean this_present_sessionID = true;
    boolean that_present_sessionID = true;
    if (this_present_sessionID || that_present_sessionID) {
      if (!(this_present_sessionID && that_present_sessionID))
        return false;
      if (this.sessionID != that.sessionID)
        return false;
    }

    boolean this_present_customerName = true && this.isSetCustomerName();
    boolean that_present_customerName = true && that.isSetCustomerName();
    if (this_present_customerName || that_present_customerName) {
      if (!(this_present_customerName && that_present_customerName))
        return false;
      if (!this.customerName.equals(that.customerName))
        return false;
    }

    boolean this_present_idcardType = true && this.isSetIdcardType();
    boolean that_present_idcardType = true && that.isSetIdcardType();
    if (this_present_idcardType || that_present_idcardType) {
      if (!(this_present_idcardType && that_present_idcardType))
        return false;
      if (!this.idcardType.equals(that.idcardType))
        return false;
    }

    boolean this_present_identifiedCardNo = true && this.isSetIdentifiedCardNo();
    boolean that_present_identifiedCardNo = true && that.isSetIdentifiedCardNo();
    if (this_present_identifiedCardNo || that_present_identifiedCardNo) {
      if (!(this_present_identifiedCardNo && that_present_identifiedCardNo))
        return false;
      if (!this.identifiedCardNo.equals(that.identifiedCardNo))
        return false;
    }

    boolean this_present_custType = true && this.isSetCustType();
    boolean that_present_custType = true && that.isSetCustType();
    if (this_present_custType || that_present_custType) {
      if (!(this_present_custType && that_present_custType))
        return false;
      if (!this.custType.equals(that.custType))
        return false;
    }

    boolean this_present_bankAccount = true && this.isSetBankAccount();
    boolean that_present_bankAccount = true && that.isSetBankAccount();
    if (this_present_bankAccount || that_present_bankAccount) {
      if (!(this_present_bankAccount && that_present_bankAccount))
        return false;
      if (!this.bankAccount.equals(that.bankAccount))
        return false;
    }

    boolean this_present_bankPassWord = true && this.isSetBankPassWord();
    boolean that_present_bankPassWord = true && that.isSetBankPassWord();
    if (this_present_bankPassWord || that_present_bankPassWord) {
      if (!(this_present_bankPassWord && that_present_bankPassWord))
        return false;
      if (!this.bankPassWord.equals(that.bankPassWord))
        return false;
    }

    boolean this_present_accountID = true && this.isSetAccountID();
    boolean that_present_accountID = true && that.isSetAccountID();
    if (this_present_accountID || that_present_accountID) {
      if (!(this_present_accountID && that_present_accountID))
        return false;
      if (!this.accountID.equals(that.accountID))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_futureSerial = true;
    boolean that_present_futureSerial = true;
    if (this_present_futureSerial || that_present_futureSerial) {
      if (!(this_present_futureSerial && that_present_futureSerial))
        return false;
      if (this.futureSerial != that.futureSerial)
        return false;
    }

    boolean this_present_installID = true;
    boolean that_present_installID = true;
    if (this_present_installID || that_present_installID) {
      if (!(this_present_installID && that_present_installID))
        return false;
      if (this.installID != that.installID)
        return false;
    }

    boolean this_present_userID = true && this.isSetUserID();
    boolean that_present_userID = true && that.isSetUserID();
    if (this_present_userID || that_present_userID) {
      if (!(this_present_userID && that_present_userID))
        return false;
      if (!this.userID.equals(that.userID))
        return false;
    }

    boolean this_present_verifyCertNoFlag = true && this.isSetVerifyCertNoFlag();
    boolean that_present_verifyCertNoFlag = true && that.isSetVerifyCertNoFlag();
    if (this_present_verifyCertNoFlag || that_present_verifyCertNoFlag) {
      if (!(this_present_verifyCertNoFlag && that_present_verifyCertNoFlag))
        return false;
      if (!this.verifyCertNoFlag.equals(that.verifyCertNoFlag))
        return false;
    }

    boolean this_present_currencyID = true && this.isSetCurrencyID();
    boolean that_present_currencyID = true && that.isSetCurrencyID();
    if (this_present_currencyID || that_present_currencyID) {
      if (!(this_present_currencyID && that_present_currencyID))
        return false;
      if (!this.currencyID.equals(that.currencyID))
        return false;
    }

    boolean this_present_digest = true && this.isSetDigest();
    boolean that_present_digest = true && that.isSetDigest();
    if (this_present_digest || that_present_digest) {
      if (!(this_present_digest && that_present_digest))
        return false;
      if (!this.digest.equals(that.digest))
        return false;
    }

    boolean this_present_bankAccType = true && this.isSetBankAccType();
    boolean that_present_bankAccType = true && that.isSetBankAccType();
    if (this_present_bankAccType || that_present_bankAccType) {
      if (!(this_present_bankAccType && that_present_bankAccType))
        return false;
      if (!this.bankAccType.equals(that.bankAccType))
        return false;
    }

    boolean this_present_deviceID = true && this.isSetDeviceID();
    boolean that_present_deviceID = true && that.isSetDeviceID();
    if (this_present_deviceID || that_present_deviceID) {
      if (!(this_present_deviceID && that_present_deviceID))
        return false;
      if (!this.deviceID.equals(that.deviceID))
        return false;
    }

    boolean this_present_bankSecuAccType = true && this.isSetBankSecuAccType();
    boolean that_present_bankSecuAccType = true && that.isSetBankSecuAccType();
    if (this_present_bankSecuAccType || that_present_bankSecuAccType) {
      if (!(this_present_bankSecuAccType && that_present_bankSecuAccType))
        return false;
      if (!this.bankSecuAccType.equals(that.bankSecuAccType))
        return false;
    }

    boolean this_present_brokerIDByBank = true && this.isSetBrokerIDByBank();
    boolean that_present_brokerIDByBank = true && that.isSetBrokerIDByBank();
    if (this_present_brokerIDByBank || that_present_brokerIDByBank) {
      if (!(this_present_brokerIDByBank && that_present_brokerIDByBank))
        return false;
      if (!this.brokerIDByBank.equals(that.brokerIDByBank))
        return false;
    }

    boolean this_present_bankSecuAcc = true && this.isSetBankSecuAcc();
    boolean that_present_bankSecuAcc = true && that.isSetBankSecuAcc();
    if (this_present_bankSecuAcc || that_present_bankSecuAcc) {
      if (!(this_present_bankSecuAcc && that_present_bankSecuAcc))
        return false;
      if (!this.bankSecuAcc.equals(that.bankSecuAcc))
        return false;
    }

    boolean this_present_bankPwdFlag = true && this.isSetBankPwdFlag();
    boolean that_present_bankPwdFlag = true && that.isSetBankPwdFlag();
    if (this_present_bankPwdFlag || that_present_bankPwdFlag) {
      if (!(this_present_bankPwdFlag && that_present_bankPwdFlag))
        return false;
      if (!this.bankPwdFlag.equals(that.bankPwdFlag))
        return false;
    }

    boolean this_present_secuPwdFlag = true && this.isSetSecuPwdFlag();
    boolean that_present_secuPwdFlag = true && that.isSetSecuPwdFlag();
    if (this_present_secuPwdFlag || that_present_secuPwdFlag) {
      if (!(this_present_secuPwdFlag && that_present_secuPwdFlag))
        return false;
      if (!this.secuPwdFlag.equals(that.secuPwdFlag))
        return false;
    }

    boolean this_present_operNo = true && this.isSetOperNo();
    boolean that_present_operNo = true && that.isSetOperNo();
    if (this_present_operNo || that_present_operNo) {
      if (!(this_present_operNo && that_present_operNo))
        return false;
      if (!this.operNo.equals(that.operNo))
        return false;
    }

    boolean this_present_requestID = true;
    boolean that_present_requestID = true;
    if (this_present_requestID || that_present_requestID) {
      if (!(this_present_requestID && that_present_requestID))
        return false;
      if (this.requestID != that.requestID)
        return false;
    }

    boolean this_present_tID = true;
    boolean that_present_tID = true;
    if (this_present_tID || that_present_tID) {
      if (!(this_present_tID && that_present_tID))
        return false;
      if (this.tID != that.tID)
        return false;
    }

    boolean this_present_bankUseAmount = true;
    boolean that_present_bankUseAmount = true;
    if (this_present_bankUseAmount || that_present_bankUseAmount) {
      if (!(this_present_bankUseAmount && that_present_bankUseAmount))
        return false;
      if (this.bankUseAmount != that.bankUseAmount)
        return false;
    }

    boolean this_present_bankFetchAmount = true;
    boolean that_present_bankFetchAmount = true;
    if (this_present_bankFetchAmount || that_present_bankFetchAmount) {
      if (!(this_present_bankFetchAmount && that_present_bankFetchAmount))
        return false;
      if (this.bankFetchAmount != that.bankFetchAmount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcRspQueryAccountField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTradeCode()).compareTo(other.isSetTradeCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeCode, other.tradeCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankID()).compareTo(other.isSetBankID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankID, other.bankID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankBranchID()).compareTo(other.isSetBankBranchID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankBranchID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankBranchID, other.bankBranchID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerBranchID()).compareTo(other.isSetBrokerBranchID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerBranchID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerBranchID, other.brokerBranchID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeDate()).compareTo(other.isSetTradeDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeDate, other.tradeDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeTime()).compareTo(other.isSetTradeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeTime, other.tradeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankSerial()).compareTo(other.isSetBankSerial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankSerial()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankSerial, other.bankSerial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradingDay()).compareTo(other.isSetTradingDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradingDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradingDay, other.tradingDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlateSerial()).compareTo(other.isSetPlateSerial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlateSerial()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plateSerial, other.plateSerial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastFragment()).compareTo(other.isSetLastFragment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastFragment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastFragment, other.lastFragment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomerName()).compareTo(other.isSetCustomerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customerName, other.customerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdcardType()).compareTo(other.isSetIdcardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdcardType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idcardType, other.idcardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentifiedCardNo()).compareTo(other.isSetIdentifiedCardNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentifiedCardNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identifiedCardNo, other.identifiedCardNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustType()).compareTo(other.isSetCustType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.custType, other.custType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankAccount()).compareTo(other.isSetBankAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankAccount, other.bankAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankPassWord()).compareTo(other.isSetBankPassWord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankPassWord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankPassWord, other.bankPassWord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountID()).compareTo(other.isSetAccountID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountID, other.accountID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFutureSerial()).compareTo(other.isSetFutureSerial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFutureSerial()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.futureSerial, other.futureSerial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstallID()).compareTo(other.isSetInstallID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstallID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.installID, other.installID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserID()).compareTo(other.isSetUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, other.userID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVerifyCertNoFlag()).compareTo(other.isSetVerifyCertNoFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVerifyCertNoFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verifyCertNoFlag, other.verifyCertNoFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrencyID()).compareTo(other.isSetCurrencyID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencyID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currencyID, other.currencyID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDigest()).compareTo(other.isSetDigest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDigest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.digest, other.digest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankAccType()).compareTo(other.isSetBankAccType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankAccType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankAccType, other.bankAccType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceID()).compareTo(other.isSetDeviceID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceID, other.deviceID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankSecuAccType()).compareTo(other.isSetBankSecuAccType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankSecuAccType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankSecuAccType, other.bankSecuAccType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerIDByBank()).compareTo(other.isSetBrokerIDByBank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerIDByBank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerIDByBank, other.brokerIDByBank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankSecuAcc()).compareTo(other.isSetBankSecuAcc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankSecuAcc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankSecuAcc, other.bankSecuAcc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankPwdFlag()).compareTo(other.isSetBankPwdFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankPwdFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankPwdFlag, other.bankPwdFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecuPwdFlag()).compareTo(other.isSetSecuPwdFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecuPwdFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secuPwdFlag, other.secuPwdFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperNo()).compareTo(other.isSetOperNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operNo, other.operNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestID()).compareTo(other.isSetRequestID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestID, other.requestID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTID()).compareTo(other.isSetTID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tID, other.tID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankUseAmount()).compareTo(other.isSetBankUseAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankUseAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankUseAmount, other.bankUseAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankFetchAmount()).compareTo(other.isSetBankFetchAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankFetchAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankFetchAmount, other.bankFetchAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcRspQueryAccountField(");
    boolean first = true;

    sb.append("tradeCode:");
    if (this.tradeCode == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankID:");
    if (this.bankID == null) {
      sb.append("null");
    } else {
      sb.append(this.bankID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankBranchID:");
    if (this.bankBranchID == null) {
      sb.append("null");
    } else {
      sb.append(this.bankBranchID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerBranchID:");
    if (this.brokerBranchID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerBranchID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeDate:");
    if (this.tradeDate == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeTime:");
    if (this.tradeTime == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankSerial:");
    if (this.bankSerial == null) {
      sb.append("null");
    } else {
      sb.append(this.bankSerial);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradingDay:");
    if (this.tradingDay == null) {
      sb.append("null");
    } else {
      sb.append(this.tradingDay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("plateSerial:");
    sb.append(this.plateSerial);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastFragment:");
    if (this.lastFragment == null) {
      sb.append("null");
    } else {
      sb.append(this.lastFragment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sessionID:");
    sb.append(this.sessionID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("customerName:");
    if (this.customerName == null) {
      sb.append("null");
    } else {
      sb.append(this.customerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("idcardType:");
    if (this.idcardType == null) {
      sb.append("null");
    } else {
      sb.append(this.idcardType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identifiedCardNo:");
    if (this.identifiedCardNo == null) {
      sb.append("null");
    } else {
      sb.append(this.identifiedCardNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("custType:");
    if (this.custType == null) {
      sb.append("null");
    } else {
      sb.append(this.custType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankAccount:");
    if (this.bankAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.bankAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankPassWord:");
    if (this.bankPassWord == null) {
      sb.append("null");
    } else {
      sb.append(this.bankPassWord);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountID:");
    if (this.accountID == null) {
      sb.append("null");
    } else {
      sb.append(this.accountID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("futureSerial:");
    sb.append(this.futureSerial);
    first = false;
    if (!first) sb.append(", ");
    sb.append("installID:");
    sb.append(this.installID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userID:");
    if (this.userID == null) {
      sb.append("null");
    } else {
      sb.append(this.userID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("verifyCertNoFlag:");
    if (this.verifyCertNoFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.verifyCertNoFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currencyID:");
    if (this.currencyID == null) {
      sb.append("null");
    } else {
      sb.append(this.currencyID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("digest:");
    if (this.digest == null) {
      sb.append("null");
    } else {
      sb.append(this.digest);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankAccType:");
    if (this.bankAccType == null) {
      sb.append("null");
    } else {
      sb.append(this.bankAccType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceID:");
    if (this.deviceID == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankSecuAccType:");
    if (this.bankSecuAccType == null) {
      sb.append("null");
    } else {
      sb.append(this.bankSecuAccType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerIDByBank:");
    if (this.brokerIDByBank == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerIDByBank);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankSecuAcc:");
    if (this.bankSecuAcc == null) {
      sb.append("null");
    } else {
      sb.append(this.bankSecuAcc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankPwdFlag:");
    if (this.bankPwdFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.bankPwdFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("secuPwdFlag:");
    if (this.secuPwdFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.secuPwdFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operNo:");
    if (this.operNo == null) {
      sb.append("null");
    } else {
      sb.append(this.operNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestID:");
    sb.append(this.requestID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tID:");
    sb.append(this.tID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankUseAmount:");
    sb.append(this.bankUseAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankFetchAmount:");
    sb.append(this.bankFetchAmount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcRspQueryAccountFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcRspQueryAccountFieldStandardScheme getScheme() {
      return new CThostFtdcRspQueryAccountFieldStandardScheme();
    }
  }

  private static class CThostFtdcRspQueryAccountFieldStandardScheme extends StandardScheme<CThostFtdcRspQueryAccountField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcRspQueryAccountField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRADE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeCode = iprot.readString();
              struct.setTradeCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BANK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankID = iprot.readString();
              struct.setBankIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BANK_BRANCH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankBranchID = iprot.readString();
              struct.setBankBranchIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BROKER_BRANCH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerBranchID = iprot.readString();
              struct.setBrokerBranchIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRADE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeDate = iprot.readString();
              struct.setTradeDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TRADE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeTime = iprot.readString();
              struct.setTradeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BANK_SERIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankSerial = iprot.readString();
              struct.setBankSerialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TRADING_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradingDay = iprot.readString();
              struct.setTradingDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PLATE_SERIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.plateSerial = iprot.readI32();
              struct.setPlateSerialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LAST_FRAGMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastFragment = iprot.readString();
              struct.setLastFragmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sessionID = iprot.readI32();
              struct.setSessionIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CUSTOMER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.customerName = iprot.readString();
              struct.setCustomerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IDCARD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.idcardType = iprot.readString();
              struct.setIdcardTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // IDENTIFIED_CARD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identifiedCardNo = iprot.readString();
              struct.setIdentifiedCardNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CUST_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.custType = iprot.readString();
              struct.setCustTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // BANK_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankAccount = iprot.readString();
              struct.setBankAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // BANK_PASS_WORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankPassWord = iprot.readString();
              struct.setBankPassWordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountID = iprot.readString();
              struct.setAccountIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // FUTURE_SERIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.futureSerial = iprot.readI32();
              struct.setFutureSerialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // INSTALL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.installID = iprot.readI32();
              struct.setInstallIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userID = iprot.readString();
              struct.setUserIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // VERIFY_CERT_NO_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.verifyCertNoFlag = iprot.readString();
              struct.setVerifyCertNoFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // CURRENCY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currencyID = iprot.readString();
              struct.setCurrencyIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // DIGEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.digest = iprot.readString();
              struct.setDigestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // BANK_ACC_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankAccType = iprot.readString();
              struct.setBankAccTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // DEVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceID = iprot.readString();
              struct.setDeviceIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // BANK_SECU_ACC_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankSecuAccType = iprot.readString();
              struct.setBankSecuAccTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // BROKER_IDBY_BANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerIDByBank = iprot.readString();
              struct.setBrokerIDByBankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // BANK_SECU_ACC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankSecuAcc = iprot.readString();
              struct.setBankSecuAccIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // BANK_PWD_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankPwdFlag = iprot.readString();
              struct.setBankPwdFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // SECU_PWD_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.secuPwdFlag = iprot.readString();
              struct.setSecuPwdFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // OPER_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operNo = iprot.readString();
              struct.setOperNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestID = iprot.readI32();
              struct.setRequestIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // T_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tID = iprot.readI32();
              struct.setTIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // BANK_USE_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bankUseAmount = iprot.readDouble();
              struct.setBankUseAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // BANK_FETCH_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bankFetchAmount = iprot.readDouble();
              struct.setBankFetchAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcRspQueryAccountField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tradeCode != null) {
        oprot.writeFieldBegin(TRADE_CODE_FIELD_DESC);
        oprot.writeString(struct.tradeCode);
        oprot.writeFieldEnd();
      }
      if (struct.bankID != null) {
        oprot.writeFieldBegin(BANK_ID_FIELD_DESC);
        oprot.writeString(struct.bankID);
        oprot.writeFieldEnd();
      }
      if (struct.bankBranchID != null) {
        oprot.writeFieldBegin(BANK_BRANCH_ID_FIELD_DESC);
        oprot.writeString(struct.bankBranchID);
        oprot.writeFieldEnd();
      }
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.brokerBranchID != null) {
        oprot.writeFieldBegin(BROKER_BRANCH_ID_FIELD_DESC);
        oprot.writeString(struct.brokerBranchID);
        oprot.writeFieldEnd();
      }
      if (struct.tradeDate != null) {
        oprot.writeFieldBegin(TRADE_DATE_FIELD_DESC);
        oprot.writeString(struct.tradeDate);
        oprot.writeFieldEnd();
      }
      if (struct.tradeTime != null) {
        oprot.writeFieldBegin(TRADE_TIME_FIELD_DESC);
        oprot.writeString(struct.tradeTime);
        oprot.writeFieldEnd();
      }
      if (struct.bankSerial != null) {
        oprot.writeFieldBegin(BANK_SERIAL_FIELD_DESC);
        oprot.writeString(struct.bankSerial);
        oprot.writeFieldEnd();
      }
      if (struct.tradingDay != null) {
        oprot.writeFieldBegin(TRADING_DAY_FIELD_DESC);
        oprot.writeString(struct.tradingDay);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PLATE_SERIAL_FIELD_DESC);
      oprot.writeI32(struct.plateSerial);
      oprot.writeFieldEnd();
      if (struct.lastFragment != null) {
        oprot.writeFieldBegin(LAST_FRAGMENT_FIELD_DESC);
        oprot.writeString(struct.lastFragment);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeI32(struct.sessionID);
      oprot.writeFieldEnd();
      if (struct.customerName != null) {
        oprot.writeFieldBegin(CUSTOMER_NAME_FIELD_DESC);
        oprot.writeString(struct.customerName);
        oprot.writeFieldEnd();
      }
      if (struct.idcardType != null) {
        oprot.writeFieldBegin(IDCARD_TYPE_FIELD_DESC);
        oprot.writeString(struct.idcardType);
        oprot.writeFieldEnd();
      }
      if (struct.identifiedCardNo != null) {
        oprot.writeFieldBegin(IDENTIFIED_CARD_NO_FIELD_DESC);
        oprot.writeString(struct.identifiedCardNo);
        oprot.writeFieldEnd();
      }
      if (struct.custType != null) {
        oprot.writeFieldBegin(CUST_TYPE_FIELD_DESC);
        oprot.writeString(struct.custType);
        oprot.writeFieldEnd();
      }
      if (struct.bankAccount != null) {
        oprot.writeFieldBegin(BANK_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.bankAccount);
        oprot.writeFieldEnd();
      }
      if (struct.bankPassWord != null) {
        oprot.writeFieldBegin(BANK_PASS_WORD_FIELD_DESC);
        oprot.writeString(struct.bankPassWord);
        oprot.writeFieldEnd();
      }
      if (struct.accountID != null) {
        oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
        oprot.writeString(struct.accountID);
        oprot.writeFieldEnd();
      }
      if (struct.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(struct.password);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FUTURE_SERIAL_FIELD_DESC);
      oprot.writeI32(struct.futureSerial);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INSTALL_ID_FIELD_DESC);
      oprot.writeI32(struct.installID);
      oprot.writeFieldEnd();
      if (struct.userID != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userID);
        oprot.writeFieldEnd();
      }
      if (struct.verifyCertNoFlag != null) {
        oprot.writeFieldBegin(VERIFY_CERT_NO_FLAG_FIELD_DESC);
        oprot.writeString(struct.verifyCertNoFlag);
        oprot.writeFieldEnd();
      }
      if (struct.currencyID != null) {
        oprot.writeFieldBegin(CURRENCY_ID_FIELD_DESC);
        oprot.writeString(struct.currencyID);
        oprot.writeFieldEnd();
      }
      if (struct.digest != null) {
        oprot.writeFieldBegin(DIGEST_FIELD_DESC);
        oprot.writeString(struct.digest);
        oprot.writeFieldEnd();
      }
      if (struct.bankAccType != null) {
        oprot.writeFieldBegin(BANK_ACC_TYPE_FIELD_DESC);
        oprot.writeString(struct.bankAccType);
        oprot.writeFieldEnd();
      }
      if (struct.deviceID != null) {
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeString(struct.deviceID);
        oprot.writeFieldEnd();
      }
      if (struct.bankSecuAccType != null) {
        oprot.writeFieldBegin(BANK_SECU_ACC_TYPE_FIELD_DESC);
        oprot.writeString(struct.bankSecuAccType);
        oprot.writeFieldEnd();
      }
      if (struct.brokerIDByBank != null) {
        oprot.writeFieldBegin(BROKER_IDBY_BANK_FIELD_DESC);
        oprot.writeString(struct.brokerIDByBank);
        oprot.writeFieldEnd();
      }
      if (struct.bankSecuAcc != null) {
        oprot.writeFieldBegin(BANK_SECU_ACC_FIELD_DESC);
        oprot.writeString(struct.bankSecuAcc);
        oprot.writeFieldEnd();
      }
      if (struct.bankPwdFlag != null) {
        oprot.writeFieldBegin(BANK_PWD_FLAG_FIELD_DESC);
        oprot.writeString(struct.bankPwdFlag);
        oprot.writeFieldEnd();
      }
      if (struct.secuPwdFlag != null) {
        oprot.writeFieldBegin(SECU_PWD_FLAG_FIELD_DESC);
        oprot.writeString(struct.secuPwdFlag);
        oprot.writeFieldEnd();
      }
      if (struct.operNo != null) {
        oprot.writeFieldBegin(OPER_NO_FIELD_DESC);
        oprot.writeString(struct.operNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
      oprot.writeI32(struct.requestID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(T_ID_FIELD_DESC);
      oprot.writeI32(struct.tID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BANK_USE_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.bankUseAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BANK_FETCH_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.bankFetchAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcRspQueryAccountFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcRspQueryAccountFieldTupleScheme getScheme() {
      return new CThostFtdcRspQueryAccountFieldTupleScheme();
    }
  }

  private static class CThostFtdcRspQueryAccountFieldTupleScheme extends TupleScheme<CThostFtdcRspQueryAccountField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcRspQueryAccountField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTradeCode()) {
        optionals.set(0);
      }
      if (struct.isSetBankID()) {
        optionals.set(1);
      }
      if (struct.isSetBankBranchID()) {
        optionals.set(2);
      }
      if (struct.isSetBrokerID()) {
        optionals.set(3);
      }
      if (struct.isSetBrokerBranchID()) {
        optionals.set(4);
      }
      if (struct.isSetTradeDate()) {
        optionals.set(5);
      }
      if (struct.isSetTradeTime()) {
        optionals.set(6);
      }
      if (struct.isSetBankSerial()) {
        optionals.set(7);
      }
      if (struct.isSetTradingDay()) {
        optionals.set(8);
      }
      if (struct.isSetPlateSerial()) {
        optionals.set(9);
      }
      if (struct.isSetLastFragment()) {
        optionals.set(10);
      }
      if (struct.isSetSessionID()) {
        optionals.set(11);
      }
      if (struct.isSetCustomerName()) {
        optionals.set(12);
      }
      if (struct.isSetIdcardType()) {
        optionals.set(13);
      }
      if (struct.isSetIdentifiedCardNo()) {
        optionals.set(14);
      }
      if (struct.isSetCustType()) {
        optionals.set(15);
      }
      if (struct.isSetBankAccount()) {
        optionals.set(16);
      }
      if (struct.isSetBankPassWord()) {
        optionals.set(17);
      }
      if (struct.isSetAccountID()) {
        optionals.set(18);
      }
      if (struct.isSetPassword()) {
        optionals.set(19);
      }
      if (struct.isSetFutureSerial()) {
        optionals.set(20);
      }
      if (struct.isSetInstallID()) {
        optionals.set(21);
      }
      if (struct.isSetUserID()) {
        optionals.set(22);
      }
      if (struct.isSetVerifyCertNoFlag()) {
        optionals.set(23);
      }
      if (struct.isSetCurrencyID()) {
        optionals.set(24);
      }
      if (struct.isSetDigest()) {
        optionals.set(25);
      }
      if (struct.isSetBankAccType()) {
        optionals.set(26);
      }
      if (struct.isSetDeviceID()) {
        optionals.set(27);
      }
      if (struct.isSetBankSecuAccType()) {
        optionals.set(28);
      }
      if (struct.isSetBrokerIDByBank()) {
        optionals.set(29);
      }
      if (struct.isSetBankSecuAcc()) {
        optionals.set(30);
      }
      if (struct.isSetBankPwdFlag()) {
        optionals.set(31);
      }
      if (struct.isSetSecuPwdFlag()) {
        optionals.set(32);
      }
      if (struct.isSetOperNo()) {
        optionals.set(33);
      }
      if (struct.isSetRequestID()) {
        optionals.set(34);
      }
      if (struct.isSetTID()) {
        optionals.set(35);
      }
      if (struct.isSetBankUseAmount()) {
        optionals.set(36);
      }
      if (struct.isSetBankFetchAmount()) {
        optionals.set(37);
      }
      oprot.writeBitSet(optionals, 38);
      if (struct.isSetTradeCode()) {
        oprot.writeString(struct.tradeCode);
      }
      if (struct.isSetBankID()) {
        oprot.writeString(struct.bankID);
      }
      if (struct.isSetBankBranchID()) {
        oprot.writeString(struct.bankBranchID);
      }
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetBrokerBranchID()) {
        oprot.writeString(struct.brokerBranchID);
      }
      if (struct.isSetTradeDate()) {
        oprot.writeString(struct.tradeDate);
      }
      if (struct.isSetTradeTime()) {
        oprot.writeString(struct.tradeTime);
      }
      if (struct.isSetBankSerial()) {
        oprot.writeString(struct.bankSerial);
      }
      if (struct.isSetTradingDay()) {
        oprot.writeString(struct.tradingDay);
      }
      if (struct.isSetPlateSerial()) {
        oprot.writeI32(struct.plateSerial);
      }
      if (struct.isSetLastFragment()) {
        oprot.writeString(struct.lastFragment);
      }
      if (struct.isSetSessionID()) {
        oprot.writeI32(struct.sessionID);
      }
      if (struct.isSetCustomerName()) {
        oprot.writeString(struct.customerName);
      }
      if (struct.isSetIdcardType()) {
        oprot.writeString(struct.idcardType);
      }
      if (struct.isSetIdentifiedCardNo()) {
        oprot.writeString(struct.identifiedCardNo);
      }
      if (struct.isSetCustType()) {
        oprot.writeString(struct.custType);
      }
      if (struct.isSetBankAccount()) {
        oprot.writeString(struct.bankAccount);
      }
      if (struct.isSetBankPassWord()) {
        oprot.writeString(struct.bankPassWord);
      }
      if (struct.isSetAccountID()) {
        oprot.writeString(struct.accountID);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetFutureSerial()) {
        oprot.writeI32(struct.futureSerial);
      }
      if (struct.isSetInstallID()) {
        oprot.writeI32(struct.installID);
      }
      if (struct.isSetUserID()) {
        oprot.writeString(struct.userID);
      }
      if (struct.isSetVerifyCertNoFlag()) {
        oprot.writeString(struct.verifyCertNoFlag);
      }
      if (struct.isSetCurrencyID()) {
        oprot.writeString(struct.currencyID);
      }
      if (struct.isSetDigest()) {
        oprot.writeString(struct.digest);
      }
      if (struct.isSetBankAccType()) {
        oprot.writeString(struct.bankAccType);
      }
      if (struct.isSetDeviceID()) {
        oprot.writeString(struct.deviceID);
      }
      if (struct.isSetBankSecuAccType()) {
        oprot.writeString(struct.bankSecuAccType);
      }
      if (struct.isSetBrokerIDByBank()) {
        oprot.writeString(struct.brokerIDByBank);
      }
      if (struct.isSetBankSecuAcc()) {
        oprot.writeString(struct.bankSecuAcc);
      }
      if (struct.isSetBankPwdFlag()) {
        oprot.writeString(struct.bankPwdFlag);
      }
      if (struct.isSetSecuPwdFlag()) {
        oprot.writeString(struct.secuPwdFlag);
      }
      if (struct.isSetOperNo()) {
        oprot.writeString(struct.operNo);
      }
      if (struct.isSetRequestID()) {
        oprot.writeI32(struct.requestID);
      }
      if (struct.isSetTID()) {
        oprot.writeI32(struct.tID);
      }
      if (struct.isSetBankUseAmount()) {
        oprot.writeDouble(struct.bankUseAmount);
      }
      if (struct.isSetBankFetchAmount()) {
        oprot.writeDouble(struct.bankFetchAmount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcRspQueryAccountField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(38);
      if (incoming.get(0)) {
        struct.tradeCode = iprot.readString();
        struct.setTradeCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bankID = iprot.readString();
        struct.setBankIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bankBranchID = iprot.readString();
        struct.setBankBranchIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.brokerBranchID = iprot.readString();
        struct.setBrokerBranchIDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.tradeDate = iprot.readString();
        struct.setTradeDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.tradeTime = iprot.readString();
        struct.setTradeTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.bankSerial = iprot.readString();
        struct.setBankSerialIsSet(true);
      }
      if (incoming.get(8)) {
        struct.tradingDay = iprot.readString();
        struct.setTradingDayIsSet(true);
      }
      if (incoming.get(9)) {
        struct.plateSerial = iprot.readI32();
        struct.setPlateSerialIsSet(true);
      }
      if (incoming.get(10)) {
        struct.lastFragment = iprot.readString();
        struct.setLastFragmentIsSet(true);
      }
      if (incoming.get(11)) {
        struct.sessionID = iprot.readI32();
        struct.setSessionIDIsSet(true);
      }
      if (incoming.get(12)) {
        struct.customerName = iprot.readString();
        struct.setCustomerNameIsSet(true);
      }
      if (incoming.get(13)) {
        struct.idcardType = iprot.readString();
        struct.setIdcardTypeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.identifiedCardNo = iprot.readString();
        struct.setIdentifiedCardNoIsSet(true);
      }
      if (incoming.get(15)) {
        struct.custType = iprot.readString();
        struct.setCustTypeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.bankAccount = iprot.readString();
        struct.setBankAccountIsSet(true);
      }
      if (incoming.get(17)) {
        struct.bankPassWord = iprot.readString();
        struct.setBankPassWordIsSet(true);
      }
      if (incoming.get(18)) {
        struct.accountID = iprot.readString();
        struct.setAccountIDIsSet(true);
      }
      if (incoming.get(19)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(20)) {
        struct.futureSerial = iprot.readI32();
        struct.setFutureSerialIsSet(true);
      }
      if (incoming.get(21)) {
        struct.installID = iprot.readI32();
        struct.setInstallIDIsSet(true);
      }
      if (incoming.get(22)) {
        struct.userID = iprot.readString();
        struct.setUserIDIsSet(true);
      }
      if (incoming.get(23)) {
        struct.verifyCertNoFlag = iprot.readString();
        struct.setVerifyCertNoFlagIsSet(true);
      }
      if (incoming.get(24)) {
        struct.currencyID = iprot.readString();
        struct.setCurrencyIDIsSet(true);
      }
      if (incoming.get(25)) {
        struct.digest = iprot.readString();
        struct.setDigestIsSet(true);
      }
      if (incoming.get(26)) {
        struct.bankAccType = iprot.readString();
        struct.setBankAccTypeIsSet(true);
      }
      if (incoming.get(27)) {
        struct.deviceID = iprot.readString();
        struct.setDeviceIDIsSet(true);
      }
      if (incoming.get(28)) {
        struct.bankSecuAccType = iprot.readString();
        struct.setBankSecuAccTypeIsSet(true);
      }
      if (incoming.get(29)) {
        struct.brokerIDByBank = iprot.readString();
        struct.setBrokerIDByBankIsSet(true);
      }
      if (incoming.get(30)) {
        struct.bankSecuAcc = iprot.readString();
        struct.setBankSecuAccIsSet(true);
      }
      if (incoming.get(31)) {
        struct.bankPwdFlag = iprot.readString();
        struct.setBankPwdFlagIsSet(true);
      }
      if (incoming.get(32)) {
        struct.secuPwdFlag = iprot.readString();
        struct.setSecuPwdFlagIsSet(true);
      }
      if (incoming.get(33)) {
        struct.operNo = iprot.readString();
        struct.setOperNoIsSet(true);
      }
      if (incoming.get(34)) {
        struct.requestID = iprot.readI32();
        struct.setRequestIDIsSet(true);
      }
      if (incoming.get(35)) {
        struct.tID = iprot.readI32();
        struct.setTIDIsSet(true);
      }
      if (incoming.get(36)) {
        struct.bankUseAmount = iprot.readDouble();
        struct.setBankUseAmountIsSet(true);
      }
      if (incoming.get(37)) {
        struct.bankFetchAmount = iprot.readDouble();
        struct.setBankFetchAmountIsSet(true);
      }
    }
  }

}

