/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcFrontStatusField implements org.apache.thrift.TBase<CThostFtdcFrontStatusField, CThostFtdcFrontStatusField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcFrontStatusField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcFrontStatusField");

  private static final org.apache.thrift.protocol.TField FRONT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("frontID", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LAST_REPORT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastReportDate", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_REPORT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastReportTime", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IS_ACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("isActive", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcFrontStatusFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcFrontStatusFieldTupleSchemeFactory());
  }

  public int frontID; // required
  public String lastReportDate; // required
  public String lastReportTime; // required
  public int isActive; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FRONT_ID((short)1, "frontID"),
    LAST_REPORT_DATE((short)2, "lastReportDate"),
    LAST_REPORT_TIME((short)3, "lastReportTime"),
    IS_ACTIVE((short)4, "isActive");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FRONT_ID
          return FRONT_ID;
        case 2: // LAST_REPORT_DATE
          return LAST_REPORT_DATE;
        case 3: // LAST_REPORT_TIME
          return LAST_REPORT_TIME;
        case 4: // IS_ACTIVE
          return IS_ACTIVE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FRONTID_ISSET_ID = 0;
  private static final int __ISACTIVE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FRONT_ID, new org.apache.thrift.meta_data.FieldMetaData("frontID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcFrontIDType")));
    tmpMap.put(_Fields.LAST_REPORT_DATE, new org.apache.thrift.meta_data.FieldMetaData("lastReportDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    tmpMap.put(_Fields.LAST_REPORT_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastReportTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeType")));
    tmpMap.put(_Fields.IS_ACTIVE, new org.apache.thrift.meta_data.FieldMetaData("isActive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcBoolType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcFrontStatusField.class, metaDataMap);
  }

  public CThostFtdcFrontStatusField() {
  }

  public CThostFtdcFrontStatusField(
    int frontID,
    String lastReportDate,
    String lastReportTime,
    int isActive)
  {
    this();
    this.frontID = frontID;
    setFrontIDIsSet(true);
    this.lastReportDate = lastReportDate;
    this.lastReportTime = lastReportTime;
    this.isActive = isActive;
    setIsActiveIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcFrontStatusField(CThostFtdcFrontStatusField other) {
    __isset_bitfield = other.__isset_bitfield;
    this.frontID = other.frontID;
    if (other.isSetLastReportDate()) {
      this.lastReportDate = other.lastReportDate;
    }
    if (other.isSetLastReportTime()) {
      this.lastReportTime = other.lastReportTime;
    }
    this.isActive = other.isActive;
  }

  public CThostFtdcFrontStatusField deepCopy() {
    return new CThostFtdcFrontStatusField(this);
  }

  @Override
  public void clear() {
    setFrontIDIsSet(false);
    this.frontID = 0;
    this.lastReportDate = null;
    this.lastReportTime = null;
    setIsActiveIsSet(false);
    this.isActive = 0;
  }

  public int getFrontID() {
    return this.frontID;
  }

  public CThostFtdcFrontStatusField setFrontID(int frontID) {
    this.frontID = frontID;
    setFrontIDIsSet(true);
    return this;
  }

  public void unsetFrontID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FRONTID_ISSET_ID);
  }

  /** Returns true if field frontID is set (has been assigned a value) and false otherwise */
  public boolean isSetFrontID() {
    return EncodingUtils.testBit(__isset_bitfield, __FRONTID_ISSET_ID);
  }

  public void setFrontIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FRONTID_ISSET_ID, value);
  }

  public String getLastReportDate() {
    return this.lastReportDate;
  }

  public CThostFtdcFrontStatusField setLastReportDate(String lastReportDate) {
    this.lastReportDate = lastReportDate;
    return this;
  }

  public void unsetLastReportDate() {
    this.lastReportDate = null;
  }

  /** Returns true if field lastReportDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLastReportDate() {
    return this.lastReportDate != null;
  }

  public void setLastReportDateIsSet(boolean value) {
    if (!value) {
      this.lastReportDate = null;
    }
  }

  public String getLastReportTime() {
    return this.lastReportTime;
  }

  public CThostFtdcFrontStatusField setLastReportTime(String lastReportTime) {
    this.lastReportTime = lastReportTime;
    return this;
  }

  public void unsetLastReportTime() {
    this.lastReportTime = null;
  }

  /** Returns true if field lastReportTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastReportTime() {
    return this.lastReportTime != null;
  }

  public void setLastReportTimeIsSet(boolean value) {
    if (!value) {
      this.lastReportTime = null;
    }
  }

  public int getIsActive() {
    return this.isActive;
  }

  public CThostFtdcFrontStatusField setIsActive(int isActive) {
    this.isActive = isActive;
    setIsActiveIsSet(true);
    return this;
  }

  public void unsetIsActive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISACTIVE_ISSET_ID);
  }

  /** Returns true if field isActive is set (has been assigned a value) and false otherwise */
  public boolean isSetIsActive() {
    return EncodingUtils.testBit(__isset_bitfield, __ISACTIVE_ISSET_ID);
  }

  public void setIsActiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISACTIVE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FRONT_ID:
      if (value == null) {
        unsetFrontID();
      } else {
        setFrontID((Integer)value);
      }
      break;

    case LAST_REPORT_DATE:
      if (value == null) {
        unsetLastReportDate();
      } else {
        setLastReportDate((String)value);
      }
      break;

    case LAST_REPORT_TIME:
      if (value == null) {
        unsetLastReportTime();
      } else {
        setLastReportTime((String)value);
      }
      break;

    case IS_ACTIVE:
      if (value == null) {
        unsetIsActive();
      } else {
        setIsActive((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FRONT_ID:
      return Integer.valueOf(getFrontID());

    case LAST_REPORT_DATE:
      return getLastReportDate();

    case LAST_REPORT_TIME:
      return getLastReportTime();

    case IS_ACTIVE:
      return Integer.valueOf(getIsActive());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FRONT_ID:
      return isSetFrontID();
    case LAST_REPORT_DATE:
      return isSetLastReportDate();
    case LAST_REPORT_TIME:
      return isSetLastReportTime();
    case IS_ACTIVE:
      return isSetIsActive();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcFrontStatusField)
      return this.equals((CThostFtdcFrontStatusField)that);
    return false;
  }

  public boolean equals(CThostFtdcFrontStatusField that) {
    if (that == null)
      return false;

    boolean this_present_frontID = true;
    boolean that_present_frontID = true;
    if (this_present_frontID || that_present_frontID) {
      if (!(this_present_frontID && that_present_frontID))
        return false;
      if (this.frontID != that.frontID)
        return false;
    }

    boolean this_present_lastReportDate = true && this.isSetLastReportDate();
    boolean that_present_lastReportDate = true && that.isSetLastReportDate();
    if (this_present_lastReportDate || that_present_lastReportDate) {
      if (!(this_present_lastReportDate && that_present_lastReportDate))
        return false;
      if (!this.lastReportDate.equals(that.lastReportDate))
        return false;
    }

    boolean this_present_lastReportTime = true && this.isSetLastReportTime();
    boolean that_present_lastReportTime = true && that.isSetLastReportTime();
    if (this_present_lastReportTime || that_present_lastReportTime) {
      if (!(this_present_lastReportTime && that_present_lastReportTime))
        return false;
      if (!this.lastReportTime.equals(that.lastReportTime))
        return false;
    }

    boolean this_present_isActive = true;
    boolean that_present_isActive = true;
    if (this_present_isActive || that_present_isActive) {
      if (!(this_present_isActive && that_present_isActive))
        return false;
      if (this.isActive != that.isActive)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcFrontStatusField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFrontID()).compareTo(other.isSetFrontID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrontID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frontID, other.frontID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastReportDate()).compareTo(other.isSetLastReportDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastReportDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastReportDate, other.lastReportDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastReportTime()).compareTo(other.isSetLastReportTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastReportTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastReportTime, other.lastReportTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsActive()).compareTo(other.isSetIsActive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsActive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isActive, other.isActive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcFrontStatusField(");
    boolean first = true;

    sb.append("frontID:");
    sb.append(this.frontID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastReportDate:");
    if (this.lastReportDate == null) {
      sb.append("null");
    } else {
      sb.append(this.lastReportDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastReportTime:");
    if (this.lastReportTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastReportTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isActive:");
    sb.append(this.isActive);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcFrontStatusFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcFrontStatusFieldStandardScheme getScheme() {
      return new CThostFtdcFrontStatusFieldStandardScheme();
    }
  }

  private static class CThostFtdcFrontStatusFieldStandardScheme extends StandardScheme<CThostFtdcFrontStatusField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcFrontStatusField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FRONT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.frontID = iprot.readI32();
              struct.setFrontIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LAST_REPORT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastReportDate = iprot.readString();
              struct.setLastReportDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_REPORT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastReportTime = iprot.readString();
              struct.setLastReportTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_ACTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isActive = iprot.readI32();
              struct.setIsActiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcFrontStatusField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FRONT_ID_FIELD_DESC);
      oprot.writeI32(struct.frontID);
      oprot.writeFieldEnd();
      if (struct.lastReportDate != null) {
        oprot.writeFieldBegin(LAST_REPORT_DATE_FIELD_DESC);
        oprot.writeString(struct.lastReportDate);
        oprot.writeFieldEnd();
      }
      if (struct.lastReportTime != null) {
        oprot.writeFieldBegin(LAST_REPORT_TIME_FIELD_DESC);
        oprot.writeString(struct.lastReportTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_ACTIVE_FIELD_DESC);
      oprot.writeI32(struct.isActive);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcFrontStatusFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcFrontStatusFieldTupleScheme getScheme() {
      return new CThostFtdcFrontStatusFieldTupleScheme();
    }
  }

  private static class CThostFtdcFrontStatusFieldTupleScheme extends TupleScheme<CThostFtdcFrontStatusField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcFrontStatusField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFrontID()) {
        optionals.set(0);
      }
      if (struct.isSetLastReportDate()) {
        optionals.set(1);
      }
      if (struct.isSetLastReportTime()) {
        optionals.set(2);
      }
      if (struct.isSetIsActive()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetFrontID()) {
        oprot.writeI32(struct.frontID);
      }
      if (struct.isSetLastReportDate()) {
        oprot.writeString(struct.lastReportDate);
      }
      if (struct.isSetLastReportTime()) {
        oprot.writeString(struct.lastReportTime);
      }
      if (struct.isSetIsActive()) {
        oprot.writeI32(struct.isActive);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcFrontStatusField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.frontID = iprot.readI32();
        struct.setFrontIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lastReportDate = iprot.readString();
        struct.setLastReportDateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lastReportTime = iprot.readString();
        struct.setLastReportTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isActive = iprot.readI32();
        struct.setIsActiveIsSet(true);
      }
    }
  }

}

