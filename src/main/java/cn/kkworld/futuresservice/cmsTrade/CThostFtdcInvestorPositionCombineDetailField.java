/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcInvestorPositionCombineDetailField implements org.apache.thrift.TBase<CThostFtdcInvestorPositionCombineDetailField, CThostFtdcInvestorPositionCombineDetailField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcInvestorPositionCombineDetailField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcInvestorPositionCombineDetailField");

  private static final org.apache.thrift.protocol.TField TRADING_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("tradingDay", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OPEN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("openDate", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EXCHANGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SETTLEMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("settlementID", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField INVESTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("investorID", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField COM_TRADE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("comTradeID", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TRADE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeID", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField INSTRUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instrumentID", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField HEDGE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("hedgeFlag", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("direction", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField TOTAL_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalAmt", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("margin", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField EXCH_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("exchMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField MARGIN_RATE_BY_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("marginRateByMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField MARGIN_RATE_BY_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("marginRateByVolume", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField LEG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("legID", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField LEG_MULTIPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("legMultiple", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField COMB_INSTRUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("combInstrumentID", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField TRADE_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeGroupID", org.apache.thrift.protocol.TType.I32, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcInvestorPositionCombineDetailFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcInvestorPositionCombineDetailFieldTupleSchemeFactory());
  }

  public String tradingDay; // required
  public String openDate; // required
  public String exchangeID; // required
  public int settlementID; // required
  public String brokerID; // required
  public String investorID; // required
  public String comTradeID; // required
  public String tradeID; // required
  public String instrumentID; // required
  public String hedgeFlag; // required
  public String direction; // required
  public int totalAmt; // required
  public double margin; // required
  public double exchMargin; // required
  public double marginRateByMoney; // required
  public double marginRateByVolume; // required
  public int legID; // required
  public int legMultiple; // required
  public String combInstrumentID; // required
  public int tradeGroupID; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRADING_DAY((short)1, "tradingDay"),
    OPEN_DATE((short)2, "openDate"),
    EXCHANGE_ID((short)3, "exchangeID"),
    SETTLEMENT_ID((short)4, "settlementID"),
    BROKER_ID((short)5, "brokerID"),
    INVESTOR_ID((short)6, "investorID"),
    COM_TRADE_ID((short)7, "comTradeID"),
    TRADE_ID((short)8, "tradeID"),
    INSTRUMENT_ID((short)9, "instrumentID"),
    HEDGE_FLAG((short)10, "hedgeFlag"),
    DIRECTION((short)11, "direction"),
    TOTAL_AMT((short)12, "totalAmt"),
    MARGIN((short)13, "margin"),
    EXCH_MARGIN((short)14, "exchMargin"),
    MARGIN_RATE_BY_MONEY((short)15, "marginRateByMoney"),
    MARGIN_RATE_BY_VOLUME((short)16, "marginRateByVolume"),
    LEG_ID((short)17, "legID"),
    LEG_MULTIPLE((short)18, "legMultiple"),
    COMB_INSTRUMENT_ID((short)19, "combInstrumentID"),
    TRADE_GROUP_ID((short)20, "tradeGroupID");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRADING_DAY
          return TRADING_DAY;
        case 2: // OPEN_DATE
          return OPEN_DATE;
        case 3: // EXCHANGE_ID
          return EXCHANGE_ID;
        case 4: // SETTLEMENT_ID
          return SETTLEMENT_ID;
        case 5: // BROKER_ID
          return BROKER_ID;
        case 6: // INVESTOR_ID
          return INVESTOR_ID;
        case 7: // COM_TRADE_ID
          return COM_TRADE_ID;
        case 8: // TRADE_ID
          return TRADE_ID;
        case 9: // INSTRUMENT_ID
          return INSTRUMENT_ID;
        case 10: // HEDGE_FLAG
          return HEDGE_FLAG;
        case 11: // DIRECTION
          return DIRECTION;
        case 12: // TOTAL_AMT
          return TOTAL_AMT;
        case 13: // MARGIN
          return MARGIN;
        case 14: // EXCH_MARGIN
          return EXCH_MARGIN;
        case 15: // MARGIN_RATE_BY_MONEY
          return MARGIN_RATE_BY_MONEY;
        case 16: // MARGIN_RATE_BY_VOLUME
          return MARGIN_RATE_BY_VOLUME;
        case 17: // LEG_ID
          return LEG_ID;
        case 18: // LEG_MULTIPLE
          return LEG_MULTIPLE;
        case 19: // COMB_INSTRUMENT_ID
          return COMB_INSTRUMENT_ID;
        case 20: // TRADE_GROUP_ID
          return TRADE_GROUP_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SETTLEMENTID_ISSET_ID = 0;
  private static final int __TOTALAMT_ISSET_ID = 1;
  private static final int __MARGIN_ISSET_ID = 2;
  private static final int __EXCHMARGIN_ISSET_ID = 3;
  private static final int __MARGINRATEBYMONEY_ISSET_ID = 4;
  private static final int __MARGINRATEBYVOLUME_ISSET_ID = 5;
  private static final int __LEGID_ISSET_ID = 6;
  private static final int __LEGMULTIPLE_ISSET_ID = 7;
  private static final int __TRADEGROUPID_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRADING_DAY, new org.apache.thrift.meta_data.FieldMetaData("tradingDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    tmpMap.put(_Fields.OPEN_DATE, new org.apache.thrift.meta_data.FieldMetaData("openDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    tmpMap.put(_Fields.EXCHANGE_ID, new org.apache.thrift.meta_data.FieldMetaData("exchangeID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcExchangeIDType")));
    tmpMap.put(_Fields.SETTLEMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("settlementID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcSettlementIDType")));
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.INVESTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("investorID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInvestorIDType")));
    tmpMap.put(_Fields.COM_TRADE_ID, new org.apache.thrift.meta_data.FieldMetaData("comTradeID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeIDType")));
    tmpMap.put(_Fields.TRADE_ID, new org.apache.thrift.meta_data.FieldMetaData("tradeID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeIDType")));
    tmpMap.put(_Fields.INSTRUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("instrumentID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInstrumentIDType")));
    tmpMap.put(_Fields.HEDGE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("hedgeFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcHedgeFlagType")));
    tmpMap.put(_Fields.DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("direction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDirectionType")));
    tmpMap.put(_Fields.TOTAL_AMT, new org.apache.thrift.meta_data.FieldMetaData("totalAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcVolumeType")));
    tmpMap.put(_Fields.MARGIN, new org.apache.thrift.meta_data.FieldMetaData("margin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.EXCH_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("exchMargin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.MARGIN_RATE_BY_MONEY, new org.apache.thrift.meta_data.FieldMetaData("marginRateByMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcRatioType")));
    tmpMap.put(_Fields.MARGIN_RATE_BY_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("marginRateByVolume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcRatioType")));
    tmpMap.put(_Fields.LEG_ID, new org.apache.thrift.meta_data.FieldMetaData("legID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcLegIDType")));
    tmpMap.put(_Fields.LEG_MULTIPLE, new org.apache.thrift.meta_data.FieldMetaData("legMultiple", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcLegMultipleType")));
    tmpMap.put(_Fields.COMB_INSTRUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("combInstrumentID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInstrumentIDType")));
    tmpMap.put(_Fields.TRADE_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("tradeGroupID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcTradeGroupIDType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcInvestorPositionCombineDetailField.class, metaDataMap);
  }

  public CThostFtdcInvestorPositionCombineDetailField() {
  }

  public CThostFtdcInvestorPositionCombineDetailField(
    String tradingDay,
    String openDate,
    String exchangeID,
    int settlementID,
    String brokerID,
    String investorID,
    String comTradeID,
    String tradeID,
    String instrumentID,
    String hedgeFlag,
    String direction,
    int totalAmt,
    double margin,
    double exchMargin,
    double marginRateByMoney,
    double marginRateByVolume,
    int legID,
    int legMultiple,
    String combInstrumentID,
    int tradeGroupID)
  {
    this();
    this.tradingDay = tradingDay;
    this.openDate = openDate;
    this.exchangeID = exchangeID;
    this.settlementID = settlementID;
    setSettlementIDIsSet(true);
    this.brokerID = brokerID;
    this.investorID = investorID;
    this.comTradeID = comTradeID;
    this.tradeID = tradeID;
    this.instrumentID = instrumentID;
    this.hedgeFlag = hedgeFlag;
    this.direction = direction;
    this.totalAmt = totalAmt;
    setTotalAmtIsSet(true);
    this.margin = margin;
    setMarginIsSet(true);
    this.exchMargin = exchMargin;
    setExchMarginIsSet(true);
    this.marginRateByMoney = marginRateByMoney;
    setMarginRateByMoneyIsSet(true);
    this.marginRateByVolume = marginRateByVolume;
    setMarginRateByVolumeIsSet(true);
    this.legID = legID;
    setLegIDIsSet(true);
    this.legMultiple = legMultiple;
    setLegMultipleIsSet(true);
    this.combInstrumentID = combInstrumentID;
    this.tradeGroupID = tradeGroupID;
    setTradeGroupIDIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcInvestorPositionCombineDetailField(CThostFtdcInvestorPositionCombineDetailField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTradingDay()) {
      this.tradingDay = other.tradingDay;
    }
    if (other.isSetOpenDate()) {
      this.openDate = other.openDate;
    }
    if (other.isSetExchangeID()) {
      this.exchangeID = other.exchangeID;
    }
    this.settlementID = other.settlementID;
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetInvestorID()) {
      this.investorID = other.investorID;
    }
    if (other.isSetComTradeID()) {
      this.comTradeID = other.comTradeID;
    }
    if (other.isSetTradeID()) {
      this.tradeID = other.tradeID;
    }
    if (other.isSetInstrumentID()) {
      this.instrumentID = other.instrumentID;
    }
    if (other.isSetHedgeFlag()) {
      this.hedgeFlag = other.hedgeFlag;
    }
    if (other.isSetDirection()) {
      this.direction = other.direction;
    }
    this.totalAmt = other.totalAmt;
    this.margin = other.margin;
    this.exchMargin = other.exchMargin;
    this.marginRateByMoney = other.marginRateByMoney;
    this.marginRateByVolume = other.marginRateByVolume;
    this.legID = other.legID;
    this.legMultiple = other.legMultiple;
    if (other.isSetCombInstrumentID()) {
      this.combInstrumentID = other.combInstrumentID;
    }
    this.tradeGroupID = other.tradeGroupID;
  }

  public CThostFtdcInvestorPositionCombineDetailField deepCopy() {
    return new CThostFtdcInvestorPositionCombineDetailField(this);
  }

  @Override
  public void clear() {
    this.tradingDay = null;
    this.openDate = null;
    this.exchangeID = null;
    setSettlementIDIsSet(false);
    this.settlementID = 0;
    this.brokerID = null;
    this.investorID = null;
    this.comTradeID = null;
    this.tradeID = null;
    this.instrumentID = null;
    this.hedgeFlag = null;
    this.direction = null;
    setTotalAmtIsSet(false);
    this.totalAmt = 0;
    setMarginIsSet(false);
    this.margin = 0.0;
    setExchMarginIsSet(false);
    this.exchMargin = 0.0;
    setMarginRateByMoneyIsSet(false);
    this.marginRateByMoney = 0.0;
    setMarginRateByVolumeIsSet(false);
    this.marginRateByVolume = 0.0;
    setLegIDIsSet(false);
    this.legID = 0;
    setLegMultipleIsSet(false);
    this.legMultiple = 0;
    this.combInstrumentID = null;
    setTradeGroupIDIsSet(false);
    this.tradeGroupID = 0;
  }

  public String getTradingDay() {
    return this.tradingDay;
  }

  public CThostFtdcInvestorPositionCombineDetailField setTradingDay(String tradingDay) {
    this.tradingDay = tradingDay;
    return this;
  }

  public void unsetTradingDay() {
    this.tradingDay = null;
  }

  /** Returns true if field tradingDay is set (has been assigned a value) and false otherwise */
  public boolean isSetTradingDay() {
    return this.tradingDay != null;
  }

  public void setTradingDayIsSet(boolean value) {
    if (!value) {
      this.tradingDay = null;
    }
  }

  public String getOpenDate() {
    return this.openDate;
  }

  public CThostFtdcInvestorPositionCombineDetailField setOpenDate(String openDate) {
    this.openDate = openDate;
    return this;
  }

  public void unsetOpenDate() {
    this.openDate = null;
  }

  /** Returns true if field openDate is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenDate() {
    return this.openDate != null;
  }

  public void setOpenDateIsSet(boolean value) {
    if (!value) {
      this.openDate = null;
    }
  }

  public String getExchangeID() {
    return this.exchangeID;
  }

  public CThostFtdcInvestorPositionCombineDetailField setExchangeID(String exchangeID) {
    this.exchangeID = exchangeID;
    return this;
  }

  public void unsetExchangeID() {
    this.exchangeID = null;
  }

  /** Returns true if field exchangeID is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeID() {
    return this.exchangeID != null;
  }

  public void setExchangeIDIsSet(boolean value) {
    if (!value) {
      this.exchangeID = null;
    }
  }

  public int getSettlementID() {
    return this.settlementID;
  }

  public CThostFtdcInvestorPositionCombineDetailField setSettlementID(int settlementID) {
    this.settlementID = settlementID;
    setSettlementIDIsSet(true);
    return this;
  }

  public void unsetSettlementID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID);
  }

  /** Returns true if field settlementID is set (has been assigned a value) and false otherwise */
  public boolean isSetSettlementID() {
    return EncodingUtils.testBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID);
  }

  public void setSettlementIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID, value);
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcInvestorPositionCombineDetailField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getInvestorID() {
    return this.investorID;
  }

  public CThostFtdcInvestorPositionCombineDetailField setInvestorID(String investorID) {
    this.investorID = investorID;
    return this;
  }

  public void unsetInvestorID() {
    this.investorID = null;
  }

  /** Returns true if field investorID is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorID() {
    return this.investorID != null;
  }

  public void setInvestorIDIsSet(boolean value) {
    if (!value) {
      this.investorID = null;
    }
  }

  public String getComTradeID() {
    return this.comTradeID;
  }

  public CThostFtdcInvestorPositionCombineDetailField setComTradeID(String comTradeID) {
    this.comTradeID = comTradeID;
    return this;
  }

  public void unsetComTradeID() {
    this.comTradeID = null;
  }

  /** Returns true if field comTradeID is set (has been assigned a value) and false otherwise */
  public boolean isSetComTradeID() {
    return this.comTradeID != null;
  }

  public void setComTradeIDIsSet(boolean value) {
    if (!value) {
      this.comTradeID = null;
    }
  }

  public String getTradeID() {
    return this.tradeID;
  }

  public CThostFtdcInvestorPositionCombineDetailField setTradeID(String tradeID) {
    this.tradeID = tradeID;
    return this;
  }

  public void unsetTradeID() {
    this.tradeID = null;
  }

  /** Returns true if field tradeID is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeID() {
    return this.tradeID != null;
  }

  public void setTradeIDIsSet(boolean value) {
    if (!value) {
      this.tradeID = null;
    }
  }

  public String getInstrumentID() {
    return this.instrumentID;
  }

  public CThostFtdcInvestorPositionCombineDetailField setInstrumentID(String instrumentID) {
    this.instrumentID = instrumentID;
    return this;
  }

  public void unsetInstrumentID() {
    this.instrumentID = null;
  }

  /** Returns true if field instrumentID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstrumentID() {
    return this.instrumentID != null;
  }

  public void setInstrumentIDIsSet(boolean value) {
    if (!value) {
      this.instrumentID = null;
    }
  }

  public String getHedgeFlag() {
    return this.hedgeFlag;
  }

  public CThostFtdcInvestorPositionCombineDetailField setHedgeFlag(String hedgeFlag) {
    this.hedgeFlag = hedgeFlag;
    return this;
  }

  public void unsetHedgeFlag() {
    this.hedgeFlag = null;
  }

  /** Returns true if field hedgeFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetHedgeFlag() {
    return this.hedgeFlag != null;
  }

  public void setHedgeFlagIsSet(boolean value) {
    if (!value) {
      this.hedgeFlag = null;
    }
  }

  public String getDirection() {
    return this.direction;
  }

  public CThostFtdcInvestorPositionCombineDetailField setDirection(String direction) {
    this.direction = direction;
    return this;
  }

  public void unsetDirection() {
    this.direction = null;
  }

  /** Returns true if field direction is set (has been assigned a value) and false otherwise */
  public boolean isSetDirection() {
    return this.direction != null;
  }

  public void setDirectionIsSet(boolean value) {
    if (!value) {
      this.direction = null;
    }
  }

  public int getTotalAmt() {
    return this.totalAmt;
  }

  public CThostFtdcInvestorPositionCombineDetailField setTotalAmt(int totalAmt) {
    this.totalAmt = totalAmt;
    setTotalAmtIsSet(true);
    return this;
  }

  public void unsetTotalAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALAMT_ISSET_ID);
  }

  /** Returns true if field totalAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALAMT_ISSET_ID);
  }

  public void setTotalAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALAMT_ISSET_ID, value);
  }

  public double getMargin() {
    return this.margin;
  }

  public CThostFtdcInvestorPositionCombineDetailField setMargin(double margin) {
    this.margin = margin;
    setMarginIsSet(true);
    return this;
  }

  public void unsetMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MARGIN_ISSET_ID);
  }

  /** Returns true if field margin is set (has been assigned a value) and false otherwise */
  public boolean isSetMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __MARGIN_ISSET_ID);
  }

  public void setMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MARGIN_ISSET_ID, value);
  }

  public double getExchMargin() {
    return this.exchMargin;
  }

  public CThostFtdcInvestorPositionCombineDetailField setExchMargin(double exchMargin) {
    this.exchMargin = exchMargin;
    setExchMarginIsSet(true);
    return this;
  }

  public void unsetExchMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXCHMARGIN_ISSET_ID);
  }

  /** Returns true if field exchMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetExchMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __EXCHMARGIN_ISSET_ID);
  }

  public void setExchMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXCHMARGIN_ISSET_ID, value);
  }

  public double getMarginRateByMoney() {
    return this.marginRateByMoney;
  }

  public CThostFtdcInvestorPositionCombineDetailField setMarginRateByMoney(double marginRateByMoney) {
    this.marginRateByMoney = marginRateByMoney;
    setMarginRateByMoneyIsSet(true);
    return this;
  }

  public void unsetMarginRateByMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MARGINRATEBYMONEY_ISSET_ID);
  }

  /** Returns true if field marginRateByMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetMarginRateByMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __MARGINRATEBYMONEY_ISSET_ID);
  }

  public void setMarginRateByMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MARGINRATEBYMONEY_ISSET_ID, value);
  }

  public double getMarginRateByVolume() {
    return this.marginRateByVolume;
  }

  public CThostFtdcInvestorPositionCombineDetailField setMarginRateByVolume(double marginRateByVolume) {
    this.marginRateByVolume = marginRateByVolume;
    setMarginRateByVolumeIsSet(true);
    return this;
  }

  public void unsetMarginRateByVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MARGINRATEBYVOLUME_ISSET_ID);
  }

  /** Returns true if field marginRateByVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetMarginRateByVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __MARGINRATEBYVOLUME_ISSET_ID);
  }

  public void setMarginRateByVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MARGINRATEBYVOLUME_ISSET_ID, value);
  }

  public int getLegID() {
    return this.legID;
  }

  public CThostFtdcInvestorPositionCombineDetailField setLegID(int legID) {
    this.legID = legID;
    setLegIDIsSet(true);
    return this;
  }

  public void unsetLegID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEGID_ISSET_ID);
  }

  /** Returns true if field legID is set (has been assigned a value) and false otherwise */
  public boolean isSetLegID() {
    return EncodingUtils.testBit(__isset_bitfield, __LEGID_ISSET_ID);
  }

  public void setLegIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEGID_ISSET_ID, value);
  }

  public int getLegMultiple() {
    return this.legMultiple;
  }

  public CThostFtdcInvestorPositionCombineDetailField setLegMultiple(int legMultiple) {
    this.legMultiple = legMultiple;
    setLegMultipleIsSet(true);
    return this;
  }

  public void unsetLegMultiple() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEGMULTIPLE_ISSET_ID);
  }

  /** Returns true if field legMultiple is set (has been assigned a value) and false otherwise */
  public boolean isSetLegMultiple() {
    return EncodingUtils.testBit(__isset_bitfield, __LEGMULTIPLE_ISSET_ID);
  }

  public void setLegMultipleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEGMULTIPLE_ISSET_ID, value);
  }

  public String getCombInstrumentID() {
    return this.combInstrumentID;
  }

  public CThostFtdcInvestorPositionCombineDetailField setCombInstrumentID(String combInstrumentID) {
    this.combInstrumentID = combInstrumentID;
    return this;
  }

  public void unsetCombInstrumentID() {
    this.combInstrumentID = null;
  }

  /** Returns true if field combInstrumentID is set (has been assigned a value) and false otherwise */
  public boolean isSetCombInstrumentID() {
    return this.combInstrumentID != null;
  }

  public void setCombInstrumentIDIsSet(boolean value) {
    if (!value) {
      this.combInstrumentID = null;
    }
  }

  public int getTradeGroupID() {
    return this.tradeGroupID;
  }

  public CThostFtdcInvestorPositionCombineDetailField setTradeGroupID(int tradeGroupID) {
    this.tradeGroupID = tradeGroupID;
    setTradeGroupIDIsSet(true);
    return this;
  }

  public void unsetTradeGroupID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEGROUPID_ISSET_ID);
  }

  /** Returns true if field tradeGroupID is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeGroupID() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEGROUPID_ISSET_ID);
  }

  public void setTradeGroupIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEGROUPID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRADING_DAY:
      if (value == null) {
        unsetTradingDay();
      } else {
        setTradingDay((String)value);
      }
      break;

    case OPEN_DATE:
      if (value == null) {
        unsetOpenDate();
      } else {
        setOpenDate((String)value);
      }
      break;

    case EXCHANGE_ID:
      if (value == null) {
        unsetExchangeID();
      } else {
        setExchangeID((String)value);
      }
      break;

    case SETTLEMENT_ID:
      if (value == null) {
        unsetSettlementID();
      } else {
        setSettlementID((Integer)value);
      }
      break;

    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case INVESTOR_ID:
      if (value == null) {
        unsetInvestorID();
      } else {
        setInvestorID((String)value);
      }
      break;

    case COM_TRADE_ID:
      if (value == null) {
        unsetComTradeID();
      } else {
        setComTradeID((String)value);
      }
      break;

    case TRADE_ID:
      if (value == null) {
        unsetTradeID();
      } else {
        setTradeID((String)value);
      }
      break;

    case INSTRUMENT_ID:
      if (value == null) {
        unsetInstrumentID();
      } else {
        setInstrumentID((String)value);
      }
      break;

    case HEDGE_FLAG:
      if (value == null) {
        unsetHedgeFlag();
      } else {
        setHedgeFlag((String)value);
      }
      break;

    case DIRECTION:
      if (value == null) {
        unsetDirection();
      } else {
        setDirection((String)value);
      }
      break;

    case TOTAL_AMT:
      if (value == null) {
        unsetTotalAmt();
      } else {
        setTotalAmt((Integer)value);
      }
      break;

    case MARGIN:
      if (value == null) {
        unsetMargin();
      } else {
        setMargin((Double)value);
      }
      break;

    case EXCH_MARGIN:
      if (value == null) {
        unsetExchMargin();
      } else {
        setExchMargin((Double)value);
      }
      break;

    case MARGIN_RATE_BY_MONEY:
      if (value == null) {
        unsetMarginRateByMoney();
      } else {
        setMarginRateByMoney((Double)value);
      }
      break;

    case MARGIN_RATE_BY_VOLUME:
      if (value == null) {
        unsetMarginRateByVolume();
      } else {
        setMarginRateByVolume((Double)value);
      }
      break;

    case LEG_ID:
      if (value == null) {
        unsetLegID();
      } else {
        setLegID((Integer)value);
      }
      break;

    case LEG_MULTIPLE:
      if (value == null) {
        unsetLegMultiple();
      } else {
        setLegMultiple((Integer)value);
      }
      break;

    case COMB_INSTRUMENT_ID:
      if (value == null) {
        unsetCombInstrumentID();
      } else {
        setCombInstrumentID((String)value);
      }
      break;

    case TRADE_GROUP_ID:
      if (value == null) {
        unsetTradeGroupID();
      } else {
        setTradeGroupID((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRADING_DAY:
      return getTradingDay();

    case OPEN_DATE:
      return getOpenDate();

    case EXCHANGE_ID:
      return getExchangeID();

    case SETTLEMENT_ID:
      return Integer.valueOf(getSettlementID());

    case BROKER_ID:
      return getBrokerID();

    case INVESTOR_ID:
      return getInvestorID();

    case COM_TRADE_ID:
      return getComTradeID();

    case TRADE_ID:
      return getTradeID();

    case INSTRUMENT_ID:
      return getInstrumentID();

    case HEDGE_FLAG:
      return getHedgeFlag();

    case DIRECTION:
      return getDirection();

    case TOTAL_AMT:
      return Integer.valueOf(getTotalAmt());

    case MARGIN:
      return Double.valueOf(getMargin());

    case EXCH_MARGIN:
      return Double.valueOf(getExchMargin());

    case MARGIN_RATE_BY_MONEY:
      return Double.valueOf(getMarginRateByMoney());

    case MARGIN_RATE_BY_VOLUME:
      return Double.valueOf(getMarginRateByVolume());

    case LEG_ID:
      return Integer.valueOf(getLegID());

    case LEG_MULTIPLE:
      return Integer.valueOf(getLegMultiple());

    case COMB_INSTRUMENT_ID:
      return getCombInstrumentID();

    case TRADE_GROUP_ID:
      return Integer.valueOf(getTradeGroupID());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRADING_DAY:
      return isSetTradingDay();
    case OPEN_DATE:
      return isSetOpenDate();
    case EXCHANGE_ID:
      return isSetExchangeID();
    case SETTLEMENT_ID:
      return isSetSettlementID();
    case BROKER_ID:
      return isSetBrokerID();
    case INVESTOR_ID:
      return isSetInvestorID();
    case COM_TRADE_ID:
      return isSetComTradeID();
    case TRADE_ID:
      return isSetTradeID();
    case INSTRUMENT_ID:
      return isSetInstrumentID();
    case HEDGE_FLAG:
      return isSetHedgeFlag();
    case DIRECTION:
      return isSetDirection();
    case TOTAL_AMT:
      return isSetTotalAmt();
    case MARGIN:
      return isSetMargin();
    case EXCH_MARGIN:
      return isSetExchMargin();
    case MARGIN_RATE_BY_MONEY:
      return isSetMarginRateByMoney();
    case MARGIN_RATE_BY_VOLUME:
      return isSetMarginRateByVolume();
    case LEG_ID:
      return isSetLegID();
    case LEG_MULTIPLE:
      return isSetLegMultiple();
    case COMB_INSTRUMENT_ID:
      return isSetCombInstrumentID();
    case TRADE_GROUP_ID:
      return isSetTradeGroupID();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcInvestorPositionCombineDetailField)
      return this.equals((CThostFtdcInvestorPositionCombineDetailField)that);
    return false;
  }

  public boolean equals(CThostFtdcInvestorPositionCombineDetailField that) {
    if (that == null)
      return false;

    boolean this_present_tradingDay = true && this.isSetTradingDay();
    boolean that_present_tradingDay = true && that.isSetTradingDay();
    if (this_present_tradingDay || that_present_tradingDay) {
      if (!(this_present_tradingDay && that_present_tradingDay))
        return false;
      if (!this.tradingDay.equals(that.tradingDay))
        return false;
    }

    boolean this_present_openDate = true && this.isSetOpenDate();
    boolean that_present_openDate = true && that.isSetOpenDate();
    if (this_present_openDate || that_present_openDate) {
      if (!(this_present_openDate && that_present_openDate))
        return false;
      if (!this.openDate.equals(that.openDate))
        return false;
    }

    boolean this_present_exchangeID = true && this.isSetExchangeID();
    boolean that_present_exchangeID = true && that.isSetExchangeID();
    if (this_present_exchangeID || that_present_exchangeID) {
      if (!(this_present_exchangeID && that_present_exchangeID))
        return false;
      if (!this.exchangeID.equals(that.exchangeID))
        return false;
    }

    boolean this_present_settlementID = true;
    boolean that_present_settlementID = true;
    if (this_present_settlementID || that_present_settlementID) {
      if (!(this_present_settlementID && that_present_settlementID))
        return false;
      if (this.settlementID != that.settlementID)
        return false;
    }

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_investorID = true && this.isSetInvestorID();
    boolean that_present_investorID = true && that.isSetInvestorID();
    if (this_present_investorID || that_present_investorID) {
      if (!(this_present_investorID && that_present_investorID))
        return false;
      if (!this.investorID.equals(that.investorID))
        return false;
    }

    boolean this_present_comTradeID = true && this.isSetComTradeID();
    boolean that_present_comTradeID = true && that.isSetComTradeID();
    if (this_present_comTradeID || that_present_comTradeID) {
      if (!(this_present_comTradeID && that_present_comTradeID))
        return false;
      if (!this.comTradeID.equals(that.comTradeID))
        return false;
    }

    boolean this_present_tradeID = true && this.isSetTradeID();
    boolean that_present_tradeID = true && that.isSetTradeID();
    if (this_present_tradeID || that_present_tradeID) {
      if (!(this_present_tradeID && that_present_tradeID))
        return false;
      if (!this.tradeID.equals(that.tradeID))
        return false;
    }

    boolean this_present_instrumentID = true && this.isSetInstrumentID();
    boolean that_present_instrumentID = true && that.isSetInstrumentID();
    if (this_present_instrumentID || that_present_instrumentID) {
      if (!(this_present_instrumentID && that_present_instrumentID))
        return false;
      if (!this.instrumentID.equals(that.instrumentID))
        return false;
    }

    boolean this_present_hedgeFlag = true && this.isSetHedgeFlag();
    boolean that_present_hedgeFlag = true && that.isSetHedgeFlag();
    if (this_present_hedgeFlag || that_present_hedgeFlag) {
      if (!(this_present_hedgeFlag && that_present_hedgeFlag))
        return false;
      if (!this.hedgeFlag.equals(that.hedgeFlag))
        return false;
    }

    boolean this_present_direction = true && this.isSetDirection();
    boolean that_present_direction = true && that.isSetDirection();
    if (this_present_direction || that_present_direction) {
      if (!(this_present_direction && that_present_direction))
        return false;
      if (!this.direction.equals(that.direction))
        return false;
    }

    boolean this_present_totalAmt = true;
    boolean that_present_totalAmt = true;
    if (this_present_totalAmt || that_present_totalAmt) {
      if (!(this_present_totalAmt && that_present_totalAmt))
        return false;
      if (this.totalAmt != that.totalAmt)
        return false;
    }

    boolean this_present_margin = true;
    boolean that_present_margin = true;
    if (this_present_margin || that_present_margin) {
      if (!(this_present_margin && that_present_margin))
        return false;
      if (this.margin != that.margin)
        return false;
    }

    boolean this_present_exchMargin = true;
    boolean that_present_exchMargin = true;
    if (this_present_exchMargin || that_present_exchMargin) {
      if (!(this_present_exchMargin && that_present_exchMargin))
        return false;
      if (this.exchMargin != that.exchMargin)
        return false;
    }

    boolean this_present_marginRateByMoney = true;
    boolean that_present_marginRateByMoney = true;
    if (this_present_marginRateByMoney || that_present_marginRateByMoney) {
      if (!(this_present_marginRateByMoney && that_present_marginRateByMoney))
        return false;
      if (this.marginRateByMoney != that.marginRateByMoney)
        return false;
    }

    boolean this_present_marginRateByVolume = true;
    boolean that_present_marginRateByVolume = true;
    if (this_present_marginRateByVolume || that_present_marginRateByVolume) {
      if (!(this_present_marginRateByVolume && that_present_marginRateByVolume))
        return false;
      if (this.marginRateByVolume != that.marginRateByVolume)
        return false;
    }

    boolean this_present_legID = true;
    boolean that_present_legID = true;
    if (this_present_legID || that_present_legID) {
      if (!(this_present_legID && that_present_legID))
        return false;
      if (this.legID != that.legID)
        return false;
    }

    boolean this_present_legMultiple = true;
    boolean that_present_legMultiple = true;
    if (this_present_legMultiple || that_present_legMultiple) {
      if (!(this_present_legMultiple && that_present_legMultiple))
        return false;
      if (this.legMultiple != that.legMultiple)
        return false;
    }

    boolean this_present_combInstrumentID = true && this.isSetCombInstrumentID();
    boolean that_present_combInstrumentID = true && that.isSetCombInstrumentID();
    if (this_present_combInstrumentID || that_present_combInstrumentID) {
      if (!(this_present_combInstrumentID && that_present_combInstrumentID))
        return false;
      if (!this.combInstrumentID.equals(that.combInstrumentID))
        return false;
    }

    boolean this_present_tradeGroupID = true;
    boolean that_present_tradeGroupID = true;
    if (this_present_tradeGroupID || that_present_tradeGroupID) {
      if (!(this_present_tradeGroupID && that_present_tradeGroupID))
        return false;
      if (this.tradeGroupID != that.tradeGroupID)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcInvestorPositionCombineDetailField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTradingDay()).compareTo(other.isSetTradingDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradingDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradingDay, other.tradingDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenDate()).compareTo(other.isSetOpenDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openDate, other.openDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeID()).compareTo(other.isSetExchangeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeID, other.exchangeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettlementID()).compareTo(other.isSetSettlementID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettlementID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settlementID, other.settlementID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestorID()).compareTo(other.isSetInvestorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorID, other.investorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComTradeID()).compareTo(other.isSetComTradeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComTradeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comTradeID, other.comTradeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeID()).compareTo(other.isSetTradeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeID, other.tradeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstrumentID()).compareTo(other.isSetInstrumentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstrumentID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instrumentID, other.instrumentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHedgeFlag()).compareTo(other.isSetHedgeFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHedgeFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hedgeFlag, other.hedgeFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDirection()).compareTo(other.isSetDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direction, other.direction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalAmt()).compareTo(other.isSetTotalAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalAmt, other.totalAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMargin()).compareTo(other.isSetMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.margin, other.margin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchMargin()).compareTo(other.isSetExchMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchMargin, other.exchMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarginRateByMoney()).compareTo(other.isSetMarginRateByMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarginRateByMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marginRateByMoney, other.marginRateByMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarginRateByVolume()).compareTo(other.isSetMarginRateByVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarginRateByVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marginRateByVolume, other.marginRateByVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegID()).compareTo(other.isSetLegID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legID, other.legID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegMultiple()).compareTo(other.isSetLegMultiple());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegMultiple()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legMultiple, other.legMultiple);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCombInstrumentID()).compareTo(other.isSetCombInstrumentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCombInstrumentID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.combInstrumentID, other.combInstrumentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeGroupID()).compareTo(other.isSetTradeGroupID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeGroupID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeGroupID, other.tradeGroupID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcInvestorPositionCombineDetailField(");
    boolean first = true;

    sb.append("tradingDay:");
    if (this.tradingDay == null) {
      sb.append("null");
    } else {
      sb.append(this.tradingDay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("openDate:");
    if (this.openDate == null) {
      sb.append("null");
    } else {
      sb.append(this.openDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchangeID:");
    if (this.exchangeID == null) {
      sb.append("null");
    } else {
      sb.append(this.exchangeID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settlementID:");
    sb.append(this.settlementID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("investorID:");
    if (this.investorID == null) {
      sb.append("null");
    } else {
      sb.append(this.investorID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("comTradeID:");
    if (this.comTradeID == null) {
      sb.append("null");
    } else {
      sb.append(this.comTradeID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeID:");
    if (this.tradeID == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("instrumentID:");
    if (this.instrumentID == null) {
      sb.append("null");
    } else {
      sb.append(this.instrumentID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hedgeFlag:");
    if (this.hedgeFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.hedgeFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("direction:");
    if (this.direction == null) {
      sb.append("null");
    } else {
      sb.append(this.direction);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalAmt:");
    sb.append(this.totalAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("margin:");
    sb.append(this.margin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchMargin:");
    sb.append(this.exchMargin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("marginRateByMoney:");
    sb.append(this.marginRateByMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("marginRateByVolume:");
    sb.append(this.marginRateByVolume);
    first = false;
    if (!first) sb.append(", ");
    sb.append("legID:");
    sb.append(this.legID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("legMultiple:");
    sb.append(this.legMultiple);
    first = false;
    if (!first) sb.append(", ");
    sb.append("combInstrumentID:");
    if (this.combInstrumentID == null) {
      sb.append("null");
    } else {
      sb.append(this.combInstrumentID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeGroupID:");
    sb.append(this.tradeGroupID);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcInvestorPositionCombineDetailFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcInvestorPositionCombineDetailFieldStandardScheme getScheme() {
      return new CThostFtdcInvestorPositionCombineDetailFieldStandardScheme();
    }
  }

  private static class CThostFtdcInvestorPositionCombineDetailFieldStandardScheme extends StandardScheme<CThostFtdcInvestorPositionCombineDetailField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcInvestorPositionCombineDetailField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRADING_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradingDay = iprot.readString();
              struct.setTradingDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPEN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.openDate = iprot.readString();
              struct.setOpenDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXCHANGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeID = iprot.readString();
              struct.setExchangeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SETTLEMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.settlementID = iprot.readI32();
              struct.setSettlementIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INVESTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorID = iprot.readString();
              struct.setInvestorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COM_TRADE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comTradeID = iprot.readString();
              struct.setComTradeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TRADE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeID = iprot.readString();
              struct.setTradeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // INSTRUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instrumentID = iprot.readString();
              struct.setInstrumentIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // HEDGE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hedgeFlag = iprot.readString();
              struct.setHedgeFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.direction = iprot.readString();
              struct.setDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TOTAL_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalAmt = iprot.readI32();
              struct.setTotalAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.margin = iprot.readDouble();
              struct.setMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // EXCH_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.exchMargin = iprot.readDouble();
              struct.setExchMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // MARGIN_RATE_BY_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.marginRateByMoney = iprot.readDouble();
              struct.setMarginRateByMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MARGIN_RATE_BY_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.marginRateByVolume = iprot.readDouble();
              struct.setMarginRateByVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LEG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.legID = iprot.readI32();
              struct.setLegIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // LEG_MULTIPLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.legMultiple = iprot.readI32();
              struct.setLegMultipleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // COMB_INSTRUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.combInstrumentID = iprot.readString();
              struct.setCombInstrumentIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // TRADE_GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tradeGroupID = iprot.readI32();
              struct.setTradeGroupIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcInvestorPositionCombineDetailField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tradingDay != null) {
        oprot.writeFieldBegin(TRADING_DAY_FIELD_DESC);
        oprot.writeString(struct.tradingDay);
        oprot.writeFieldEnd();
      }
      if (struct.openDate != null) {
        oprot.writeFieldBegin(OPEN_DATE_FIELD_DESC);
        oprot.writeString(struct.openDate);
        oprot.writeFieldEnd();
      }
      if (struct.exchangeID != null) {
        oprot.writeFieldBegin(EXCHANGE_ID_FIELD_DESC);
        oprot.writeString(struct.exchangeID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SETTLEMENT_ID_FIELD_DESC);
      oprot.writeI32(struct.settlementID);
      oprot.writeFieldEnd();
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.investorID != null) {
        oprot.writeFieldBegin(INVESTOR_ID_FIELD_DESC);
        oprot.writeString(struct.investorID);
        oprot.writeFieldEnd();
      }
      if (struct.comTradeID != null) {
        oprot.writeFieldBegin(COM_TRADE_ID_FIELD_DESC);
        oprot.writeString(struct.comTradeID);
        oprot.writeFieldEnd();
      }
      if (struct.tradeID != null) {
        oprot.writeFieldBegin(TRADE_ID_FIELD_DESC);
        oprot.writeString(struct.tradeID);
        oprot.writeFieldEnd();
      }
      if (struct.instrumentID != null) {
        oprot.writeFieldBegin(INSTRUMENT_ID_FIELD_DESC);
        oprot.writeString(struct.instrumentID);
        oprot.writeFieldEnd();
      }
      if (struct.hedgeFlag != null) {
        oprot.writeFieldBegin(HEDGE_FLAG_FIELD_DESC);
        oprot.writeString(struct.hedgeFlag);
        oprot.writeFieldEnd();
      }
      if (struct.direction != null) {
        oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
        oprot.writeString(struct.direction);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_AMT_FIELD_DESC);
      oprot.writeI32(struct.totalAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MARGIN_FIELD_DESC);
      oprot.writeDouble(struct.margin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXCH_MARGIN_FIELD_DESC);
      oprot.writeDouble(struct.exchMargin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MARGIN_RATE_BY_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.marginRateByMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MARGIN_RATE_BY_VOLUME_FIELD_DESC);
      oprot.writeDouble(struct.marginRateByVolume);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEG_ID_FIELD_DESC);
      oprot.writeI32(struct.legID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEG_MULTIPLE_FIELD_DESC);
      oprot.writeI32(struct.legMultiple);
      oprot.writeFieldEnd();
      if (struct.combInstrumentID != null) {
        oprot.writeFieldBegin(COMB_INSTRUMENT_ID_FIELD_DESC);
        oprot.writeString(struct.combInstrumentID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TRADE_GROUP_ID_FIELD_DESC);
      oprot.writeI32(struct.tradeGroupID);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcInvestorPositionCombineDetailFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcInvestorPositionCombineDetailFieldTupleScheme getScheme() {
      return new CThostFtdcInvestorPositionCombineDetailFieldTupleScheme();
    }
  }

  private static class CThostFtdcInvestorPositionCombineDetailFieldTupleScheme extends TupleScheme<CThostFtdcInvestorPositionCombineDetailField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcInvestorPositionCombineDetailField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTradingDay()) {
        optionals.set(0);
      }
      if (struct.isSetOpenDate()) {
        optionals.set(1);
      }
      if (struct.isSetExchangeID()) {
        optionals.set(2);
      }
      if (struct.isSetSettlementID()) {
        optionals.set(3);
      }
      if (struct.isSetBrokerID()) {
        optionals.set(4);
      }
      if (struct.isSetInvestorID()) {
        optionals.set(5);
      }
      if (struct.isSetComTradeID()) {
        optionals.set(6);
      }
      if (struct.isSetTradeID()) {
        optionals.set(7);
      }
      if (struct.isSetInstrumentID()) {
        optionals.set(8);
      }
      if (struct.isSetHedgeFlag()) {
        optionals.set(9);
      }
      if (struct.isSetDirection()) {
        optionals.set(10);
      }
      if (struct.isSetTotalAmt()) {
        optionals.set(11);
      }
      if (struct.isSetMargin()) {
        optionals.set(12);
      }
      if (struct.isSetExchMargin()) {
        optionals.set(13);
      }
      if (struct.isSetMarginRateByMoney()) {
        optionals.set(14);
      }
      if (struct.isSetMarginRateByVolume()) {
        optionals.set(15);
      }
      if (struct.isSetLegID()) {
        optionals.set(16);
      }
      if (struct.isSetLegMultiple()) {
        optionals.set(17);
      }
      if (struct.isSetCombInstrumentID()) {
        optionals.set(18);
      }
      if (struct.isSetTradeGroupID()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetTradingDay()) {
        oprot.writeString(struct.tradingDay);
      }
      if (struct.isSetOpenDate()) {
        oprot.writeString(struct.openDate);
      }
      if (struct.isSetExchangeID()) {
        oprot.writeString(struct.exchangeID);
      }
      if (struct.isSetSettlementID()) {
        oprot.writeI32(struct.settlementID);
      }
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetInvestorID()) {
        oprot.writeString(struct.investorID);
      }
      if (struct.isSetComTradeID()) {
        oprot.writeString(struct.comTradeID);
      }
      if (struct.isSetTradeID()) {
        oprot.writeString(struct.tradeID);
      }
      if (struct.isSetInstrumentID()) {
        oprot.writeString(struct.instrumentID);
      }
      if (struct.isSetHedgeFlag()) {
        oprot.writeString(struct.hedgeFlag);
      }
      if (struct.isSetDirection()) {
        oprot.writeString(struct.direction);
      }
      if (struct.isSetTotalAmt()) {
        oprot.writeI32(struct.totalAmt);
      }
      if (struct.isSetMargin()) {
        oprot.writeDouble(struct.margin);
      }
      if (struct.isSetExchMargin()) {
        oprot.writeDouble(struct.exchMargin);
      }
      if (struct.isSetMarginRateByMoney()) {
        oprot.writeDouble(struct.marginRateByMoney);
      }
      if (struct.isSetMarginRateByVolume()) {
        oprot.writeDouble(struct.marginRateByVolume);
      }
      if (struct.isSetLegID()) {
        oprot.writeI32(struct.legID);
      }
      if (struct.isSetLegMultiple()) {
        oprot.writeI32(struct.legMultiple);
      }
      if (struct.isSetCombInstrumentID()) {
        oprot.writeString(struct.combInstrumentID);
      }
      if (struct.isSetTradeGroupID()) {
        oprot.writeI32(struct.tradeGroupID);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcInvestorPositionCombineDetailField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.tradingDay = iprot.readString();
        struct.setTradingDayIsSet(true);
      }
      if (incoming.get(1)) {
        struct.openDate = iprot.readString();
        struct.setOpenDateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.exchangeID = iprot.readString();
        struct.setExchangeIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.settlementID = iprot.readI32();
        struct.setSettlementIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.investorID = iprot.readString();
        struct.setInvestorIDIsSet(true);
      }
      if (incoming.get(6)) {
        struct.comTradeID = iprot.readString();
        struct.setComTradeIDIsSet(true);
      }
      if (incoming.get(7)) {
        struct.tradeID = iprot.readString();
        struct.setTradeIDIsSet(true);
      }
      if (incoming.get(8)) {
        struct.instrumentID = iprot.readString();
        struct.setInstrumentIDIsSet(true);
      }
      if (incoming.get(9)) {
        struct.hedgeFlag = iprot.readString();
        struct.setHedgeFlagIsSet(true);
      }
      if (incoming.get(10)) {
        struct.direction = iprot.readString();
        struct.setDirectionIsSet(true);
      }
      if (incoming.get(11)) {
        struct.totalAmt = iprot.readI32();
        struct.setTotalAmtIsSet(true);
      }
      if (incoming.get(12)) {
        struct.margin = iprot.readDouble();
        struct.setMarginIsSet(true);
      }
      if (incoming.get(13)) {
        struct.exchMargin = iprot.readDouble();
        struct.setExchMarginIsSet(true);
      }
      if (incoming.get(14)) {
        struct.marginRateByMoney = iprot.readDouble();
        struct.setMarginRateByMoneyIsSet(true);
      }
      if (incoming.get(15)) {
        struct.marginRateByVolume = iprot.readDouble();
        struct.setMarginRateByVolumeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.legID = iprot.readI32();
        struct.setLegIDIsSet(true);
      }
      if (incoming.get(17)) {
        struct.legMultiple = iprot.readI32();
        struct.setLegMultipleIsSet(true);
      }
      if (incoming.get(18)) {
        struct.combInstrumentID = iprot.readString();
        struct.setCombInstrumentIDIsSet(true);
      }
      if (incoming.get(19)) {
        struct.tradeGroupID = iprot.readI32();
        struct.setTradeGroupIDIsSet(true);
      }
    }
  }

}

