/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcReqUserLoginField implements org.apache.thrift.TBase<CThostFtdcReqUserLoginField, CThostFtdcReqUserLoginField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcReqUserLoginField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcReqUserLoginField");

  private static final org.apache.thrift.protocol.TField TRADING_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("tradingDay", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USER_PRODUCT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("userProductInfo", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField INTERFACE_PRODUCT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("interfaceProductInfo", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PROTOCOL_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("protocolInfo", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MAC_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("macAddress", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ONE_TIME_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("oneTimePassword", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CLIENT_IPADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("clientIPAddress", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcReqUserLoginFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcReqUserLoginFieldTupleSchemeFactory());
  }

  public String tradingDay; // required
  public String brokerID; // required
  public String userID; // required
  public String password; // required
  public String userProductInfo; // required
  public String interfaceProductInfo; // required
  public String protocolInfo; // required
  public String macAddress; // required
  public String oneTimePassword; // required
  public String clientIPAddress; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRADING_DAY((short)1, "tradingDay"),
    BROKER_ID((short)2, "brokerID"),
    USER_ID((short)3, "userID"),
    PASSWORD((short)4, "password"),
    USER_PRODUCT_INFO((short)5, "userProductInfo"),
    INTERFACE_PRODUCT_INFO((short)6, "interfaceProductInfo"),
    PROTOCOL_INFO((short)7, "protocolInfo"),
    MAC_ADDRESS((short)8, "macAddress"),
    ONE_TIME_PASSWORD((short)9, "oneTimePassword"),
    CLIENT_IPADDRESS((short)10, "clientIPAddress");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRADING_DAY
          return TRADING_DAY;
        case 2: // BROKER_ID
          return BROKER_ID;
        case 3: // USER_ID
          return USER_ID;
        case 4: // PASSWORD
          return PASSWORD;
        case 5: // USER_PRODUCT_INFO
          return USER_PRODUCT_INFO;
        case 6: // INTERFACE_PRODUCT_INFO
          return INTERFACE_PRODUCT_INFO;
        case 7: // PROTOCOL_INFO
          return PROTOCOL_INFO;
        case 8: // MAC_ADDRESS
          return MAC_ADDRESS;
        case 9: // ONE_TIME_PASSWORD
          return ONE_TIME_PASSWORD;
        case 10: // CLIENT_IPADDRESS
          return CLIENT_IPADDRESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRADING_DAY, new org.apache.thrift.meta_data.FieldMetaData("tradingDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcUserIDType")));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcPasswordType")));
    tmpMap.put(_Fields.USER_PRODUCT_INFO, new org.apache.thrift.meta_data.FieldMetaData("userProductInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcProductInfoType")));
    tmpMap.put(_Fields.INTERFACE_PRODUCT_INFO, new org.apache.thrift.meta_data.FieldMetaData("interfaceProductInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcProductInfoType")));
    tmpMap.put(_Fields.PROTOCOL_INFO, new org.apache.thrift.meta_data.FieldMetaData("protocolInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcProtocolInfoType")));
    tmpMap.put(_Fields.MAC_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("macAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcMacAddressType")));
    tmpMap.put(_Fields.ONE_TIME_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("oneTimePassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcPasswordType")));
    tmpMap.put(_Fields.CLIENT_IPADDRESS, new org.apache.thrift.meta_data.FieldMetaData("clientIPAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcIPAddressType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcReqUserLoginField.class, metaDataMap);
  }

  public CThostFtdcReqUserLoginField() {
  }

  public CThostFtdcReqUserLoginField(
    String tradingDay,
    String brokerID,
    String userID,
    String password,
    String userProductInfo,
    String interfaceProductInfo,
    String protocolInfo,
    String macAddress,
    String oneTimePassword,
    String clientIPAddress)
  {
    this();
    this.tradingDay = tradingDay;
    this.brokerID = brokerID;
    this.userID = userID;
    this.password = password;
    this.userProductInfo = userProductInfo;
    this.interfaceProductInfo = interfaceProductInfo;
    this.protocolInfo = protocolInfo;
    this.macAddress = macAddress;
    this.oneTimePassword = oneTimePassword;
    this.clientIPAddress = clientIPAddress;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcReqUserLoginField(CThostFtdcReqUserLoginField other) {
    if (other.isSetTradingDay()) {
      this.tradingDay = other.tradingDay;
    }
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetUserID()) {
      this.userID = other.userID;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetUserProductInfo()) {
      this.userProductInfo = other.userProductInfo;
    }
    if (other.isSetInterfaceProductInfo()) {
      this.interfaceProductInfo = other.interfaceProductInfo;
    }
    if (other.isSetProtocolInfo()) {
      this.protocolInfo = other.protocolInfo;
    }
    if (other.isSetMacAddress()) {
      this.macAddress = other.macAddress;
    }
    if (other.isSetOneTimePassword()) {
      this.oneTimePassword = other.oneTimePassword;
    }
    if (other.isSetClientIPAddress()) {
      this.clientIPAddress = other.clientIPAddress;
    }
  }

  public CThostFtdcReqUserLoginField deepCopy() {
    return new CThostFtdcReqUserLoginField(this);
  }

  @Override
  public void clear() {
    this.tradingDay = null;
    this.brokerID = null;
    this.userID = null;
    this.password = null;
    this.userProductInfo = null;
    this.interfaceProductInfo = null;
    this.protocolInfo = null;
    this.macAddress = null;
    this.oneTimePassword = null;
    this.clientIPAddress = null;
  }

  public String getTradingDay() {
    return this.tradingDay;
  }

  public CThostFtdcReqUserLoginField setTradingDay(String tradingDay) {
    this.tradingDay = tradingDay;
    return this;
  }

  public void unsetTradingDay() {
    this.tradingDay = null;
  }

  /** Returns true if field tradingDay is set (has been assigned a value) and false otherwise */
  public boolean isSetTradingDay() {
    return this.tradingDay != null;
  }

  public void setTradingDayIsSet(boolean value) {
    if (!value) {
      this.tradingDay = null;
    }
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcReqUserLoginField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getUserID() {
    return this.userID;
  }

  public CThostFtdcReqUserLoginField setUserID(String userID) {
    this.userID = userID;
    return this;
  }

  public void unsetUserID() {
    this.userID = null;
  }

  /** Returns true if field userID is set (has been assigned a value) and false otherwise */
  public boolean isSetUserID() {
    return this.userID != null;
  }

  public void setUserIDIsSet(boolean value) {
    if (!value) {
      this.userID = null;
    }
  }

  public String getPassword() {
    return this.password;
  }

  public CThostFtdcReqUserLoginField setPassword(String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public String getUserProductInfo() {
    return this.userProductInfo;
  }

  public CThostFtdcReqUserLoginField setUserProductInfo(String userProductInfo) {
    this.userProductInfo = userProductInfo;
    return this;
  }

  public void unsetUserProductInfo() {
    this.userProductInfo = null;
  }

  /** Returns true if field userProductInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetUserProductInfo() {
    return this.userProductInfo != null;
  }

  public void setUserProductInfoIsSet(boolean value) {
    if (!value) {
      this.userProductInfo = null;
    }
  }

  public String getInterfaceProductInfo() {
    return this.interfaceProductInfo;
  }

  public CThostFtdcReqUserLoginField setInterfaceProductInfo(String interfaceProductInfo) {
    this.interfaceProductInfo = interfaceProductInfo;
    return this;
  }

  public void unsetInterfaceProductInfo() {
    this.interfaceProductInfo = null;
  }

  /** Returns true if field interfaceProductInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetInterfaceProductInfo() {
    return this.interfaceProductInfo != null;
  }

  public void setInterfaceProductInfoIsSet(boolean value) {
    if (!value) {
      this.interfaceProductInfo = null;
    }
  }

  public String getProtocolInfo() {
    return this.protocolInfo;
  }

  public CThostFtdcReqUserLoginField setProtocolInfo(String protocolInfo) {
    this.protocolInfo = protocolInfo;
    return this;
  }

  public void unsetProtocolInfo() {
    this.protocolInfo = null;
  }

  /** Returns true if field protocolInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocolInfo() {
    return this.protocolInfo != null;
  }

  public void setProtocolInfoIsSet(boolean value) {
    if (!value) {
      this.protocolInfo = null;
    }
  }

  public String getMacAddress() {
    return this.macAddress;
  }

  public CThostFtdcReqUserLoginField setMacAddress(String macAddress) {
    this.macAddress = macAddress;
    return this;
  }

  public void unsetMacAddress() {
    this.macAddress = null;
  }

  /** Returns true if field macAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetMacAddress() {
    return this.macAddress != null;
  }

  public void setMacAddressIsSet(boolean value) {
    if (!value) {
      this.macAddress = null;
    }
  }

  public String getOneTimePassword() {
    return this.oneTimePassword;
  }

  public CThostFtdcReqUserLoginField setOneTimePassword(String oneTimePassword) {
    this.oneTimePassword = oneTimePassword;
    return this;
  }

  public void unsetOneTimePassword() {
    this.oneTimePassword = null;
  }

  /** Returns true if field oneTimePassword is set (has been assigned a value) and false otherwise */
  public boolean isSetOneTimePassword() {
    return this.oneTimePassword != null;
  }

  public void setOneTimePasswordIsSet(boolean value) {
    if (!value) {
      this.oneTimePassword = null;
    }
  }

  public String getClientIPAddress() {
    return this.clientIPAddress;
  }

  public CThostFtdcReqUserLoginField setClientIPAddress(String clientIPAddress) {
    this.clientIPAddress = clientIPAddress;
    return this;
  }

  public void unsetClientIPAddress() {
    this.clientIPAddress = null;
  }

  /** Returns true if field clientIPAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetClientIPAddress() {
    return this.clientIPAddress != null;
  }

  public void setClientIPAddressIsSet(boolean value) {
    if (!value) {
      this.clientIPAddress = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRADING_DAY:
      if (value == null) {
        unsetTradingDay();
      } else {
        setTradingDay((String)value);
      }
      break;

    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserID();
      } else {
        setUserID((String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    case USER_PRODUCT_INFO:
      if (value == null) {
        unsetUserProductInfo();
      } else {
        setUserProductInfo((String)value);
      }
      break;

    case INTERFACE_PRODUCT_INFO:
      if (value == null) {
        unsetInterfaceProductInfo();
      } else {
        setInterfaceProductInfo((String)value);
      }
      break;

    case PROTOCOL_INFO:
      if (value == null) {
        unsetProtocolInfo();
      } else {
        setProtocolInfo((String)value);
      }
      break;

    case MAC_ADDRESS:
      if (value == null) {
        unsetMacAddress();
      } else {
        setMacAddress((String)value);
      }
      break;

    case ONE_TIME_PASSWORD:
      if (value == null) {
        unsetOneTimePassword();
      } else {
        setOneTimePassword((String)value);
      }
      break;

    case CLIENT_IPADDRESS:
      if (value == null) {
        unsetClientIPAddress();
      } else {
        setClientIPAddress((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRADING_DAY:
      return getTradingDay();

    case BROKER_ID:
      return getBrokerID();

    case USER_ID:
      return getUserID();

    case PASSWORD:
      return getPassword();

    case USER_PRODUCT_INFO:
      return getUserProductInfo();

    case INTERFACE_PRODUCT_INFO:
      return getInterfaceProductInfo();

    case PROTOCOL_INFO:
      return getProtocolInfo();

    case MAC_ADDRESS:
      return getMacAddress();

    case ONE_TIME_PASSWORD:
      return getOneTimePassword();

    case CLIENT_IPADDRESS:
      return getClientIPAddress();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRADING_DAY:
      return isSetTradingDay();
    case BROKER_ID:
      return isSetBrokerID();
    case USER_ID:
      return isSetUserID();
    case PASSWORD:
      return isSetPassword();
    case USER_PRODUCT_INFO:
      return isSetUserProductInfo();
    case INTERFACE_PRODUCT_INFO:
      return isSetInterfaceProductInfo();
    case PROTOCOL_INFO:
      return isSetProtocolInfo();
    case MAC_ADDRESS:
      return isSetMacAddress();
    case ONE_TIME_PASSWORD:
      return isSetOneTimePassword();
    case CLIENT_IPADDRESS:
      return isSetClientIPAddress();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcReqUserLoginField)
      return this.equals((CThostFtdcReqUserLoginField)that);
    return false;
  }

  public boolean equals(CThostFtdcReqUserLoginField that) {
    if (that == null)
      return false;

    boolean this_present_tradingDay = true && this.isSetTradingDay();
    boolean that_present_tradingDay = true && that.isSetTradingDay();
    if (this_present_tradingDay || that_present_tradingDay) {
      if (!(this_present_tradingDay && that_present_tradingDay))
        return false;
      if (!this.tradingDay.equals(that.tradingDay))
        return false;
    }

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_userID = true && this.isSetUserID();
    boolean that_present_userID = true && that.isSetUserID();
    if (this_present_userID || that_present_userID) {
      if (!(this_present_userID && that_present_userID))
        return false;
      if (!this.userID.equals(that.userID))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_userProductInfo = true && this.isSetUserProductInfo();
    boolean that_present_userProductInfo = true && that.isSetUserProductInfo();
    if (this_present_userProductInfo || that_present_userProductInfo) {
      if (!(this_present_userProductInfo && that_present_userProductInfo))
        return false;
      if (!this.userProductInfo.equals(that.userProductInfo))
        return false;
    }

    boolean this_present_interfaceProductInfo = true && this.isSetInterfaceProductInfo();
    boolean that_present_interfaceProductInfo = true && that.isSetInterfaceProductInfo();
    if (this_present_interfaceProductInfo || that_present_interfaceProductInfo) {
      if (!(this_present_interfaceProductInfo && that_present_interfaceProductInfo))
        return false;
      if (!this.interfaceProductInfo.equals(that.interfaceProductInfo))
        return false;
    }

    boolean this_present_protocolInfo = true && this.isSetProtocolInfo();
    boolean that_present_protocolInfo = true && that.isSetProtocolInfo();
    if (this_present_protocolInfo || that_present_protocolInfo) {
      if (!(this_present_protocolInfo && that_present_protocolInfo))
        return false;
      if (!this.protocolInfo.equals(that.protocolInfo))
        return false;
    }

    boolean this_present_macAddress = true && this.isSetMacAddress();
    boolean that_present_macAddress = true && that.isSetMacAddress();
    if (this_present_macAddress || that_present_macAddress) {
      if (!(this_present_macAddress && that_present_macAddress))
        return false;
      if (!this.macAddress.equals(that.macAddress))
        return false;
    }

    boolean this_present_oneTimePassword = true && this.isSetOneTimePassword();
    boolean that_present_oneTimePassword = true && that.isSetOneTimePassword();
    if (this_present_oneTimePassword || that_present_oneTimePassword) {
      if (!(this_present_oneTimePassword && that_present_oneTimePassword))
        return false;
      if (!this.oneTimePassword.equals(that.oneTimePassword))
        return false;
    }

    boolean this_present_clientIPAddress = true && this.isSetClientIPAddress();
    boolean that_present_clientIPAddress = true && that.isSetClientIPAddress();
    if (this_present_clientIPAddress || that_present_clientIPAddress) {
      if (!(this_present_clientIPAddress && that_present_clientIPAddress))
        return false;
      if (!this.clientIPAddress.equals(that.clientIPAddress))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcReqUserLoginField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTradingDay()).compareTo(other.isSetTradingDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradingDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradingDay, other.tradingDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserID()).compareTo(other.isSetUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, other.userID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserProductInfo()).compareTo(other.isSetUserProductInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserProductInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userProductInfo, other.userProductInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterfaceProductInfo()).compareTo(other.isSetInterfaceProductInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterfaceProductInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interfaceProductInfo, other.interfaceProductInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProtocolInfo()).compareTo(other.isSetProtocolInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocolInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocolInfo, other.protocolInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMacAddress()).compareTo(other.isSetMacAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMacAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.macAddress, other.macAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOneTimePassword()).compareTo(other.isSetOneTimePassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOneTimePassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oneTimePassword, other.oneTimePassword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientIPAddress()).compareTo(other.isSetClientIPAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientIPAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientIPAddress, other.clientIPAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcReqUserLoginField(");
    boolean first = true;

    sb.append("tradingDay:");
    if (this.tradingDay == null) {
      sb.append("null");
    } else {
      sb.append(this.tradingDay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userID:");
    if (this.userID == null) {
      sb.append("null");
    } else {
      sb.append(this.userID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userProductInfo:");
    if (this.userProductInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.userProductInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("interfaceProductInfo:");
    if (this.interfaceProductInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.interfaceProductInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("protocolInfo:");
    if (this.protocolInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.protocolInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("macAddress:");
    if (this.macAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.macAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("oneTimePassword:");
    if (this.oneTimePassword == null) {
      sb.append("null");
    } else {
      sb.append(this.oneTimePassword);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientIPAddress:");
    if (this.clientIPAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.clientIPAddress);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcReqUserLoginFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcReqUserLoginFieldStandardScheme getScheme() {
      return new CThostFtdcReqUserLoginFieldStandardScheme();
    }
  }

  private static class CThostFtdcReqUserLoginFieldStandardScheme extends StandardScheme<CThostFtdcReqUserLoginField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcReqUserLoginField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRADING_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradingDay = iprot.readString();
              struct.setTradingDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userID = iprot.readString();
              struct.setUserIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_PRODUCT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userProductInfo = iprot.readString();
              struct.setUserProductInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INTERFACE_PRODUCT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.interfaceProductInfo = iprot.readString();
              struct.setInterfaceProductInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROTOCOL_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.protocolInfo = iprot.readString();
              struct.setProtocolInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MAC_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.macAddress = iprot.readString();
              struct.setMacAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ONE_TIME_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oneTimePassword = iprot.readString();
              struct.setOneTimePasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CLIENT_IPADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientIPAddress = iprot.readString();
              struct.setClientIPAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcReqUserLoginField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tradingDay != null) {
        oprot.writeFieldBegin(TRADING_DAY_FIELD_DESC);
        oprot.writeString(struct.tradingDay);
        oprot.writeFieldEnd();
      }
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.userID != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userID);
        oprot.writeFieldEnd();
      }
      if (struct.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(struct.password);
        oprot.writeFieldEnd();
      }
      if (struct.userProductInfo != null) {
        oprot.writeFieldBegin(USER_PRODUCT_INFO_FIELD_DESC);
        oprot.writeString(struct.userProductInfo);
        oprot.writeFieldEnd();
      }
      if (struct.interfaceProductInfo != null) {
        oprot.writeFieldBegin(INTERFACE_PRODUCT_INFO_FIELD_DESC);
        oprot.writeString(struct.interfaceProductInfo);
        oprot.writeFieldEnd();
      }
      if (struct.protocolInfo != null) {
        oprot.writeFieldBegin(PROTOCOL_INFO_FIELD_DESC);
        oprot.writeString(struct.protocolInfo);
        oprot.writeFieldEnd();
      }
      if (struct.macAddress != null) {
        oprot.writeFieldBegin(MAC_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.macAddress);
        oprot.writeFieldEnd();
      }
      if (struct.oneTimePassword != null) {
        oprot.writeFieldBegin(ONE_TIME_PASSWORD_FIELD_DESC);
        oprot.writeString(struct.oneTimePassword);
        oprot.writeFieldEnd();
      }
      if (struct.clientIPAddress != null) {
        oprot.writeFieldBegin(CLIENT_IPADDRESS_FIELD_DESC);
        oprot.writeString(struct.clientIPAddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcReqUserLoginFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcReqUserLoginFieldTupleScheme getScheme() {
      return new CThostFtdcReqUserLoginFieldTupleScheme();
    }
  }

  private static class CThostFtdcReqUserLoginFieldTupleScheme extends TupleScheme<CThostFtdcReqUserLoginField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcReqUserLoginField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTradingDay()) {
        optionals.set(0);
      }
      if (struct.isSetBrokerID()) {
        optionals.set(1);
      }
      if (struct.isSetUserID()) {
        optionals.set(2);
      }
      if (struct.isSetPassword()) {
        optionals.set(3);
      }
      if (struct.isSetUserProductInfo()) {
        optionals.set(4);
      }
      if (struct.isSetInterfaceProductInfo()) {
        optionals.set(5);
      }
      if (struct.isSetProtocolInfo()) {
        optionals.set(6);
      }
      if (struct.isSetMacAddress()) {
        optionals.set(7);
      }
      if (struct.isSetOneTimePassword()) {
        optionals.set(8);
      }
      if (struct.isSetClientIPAddress()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetTradingDay()) {
        oprot.writeString(struct.tradingDay);
      }
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetUserID()) {
        oprot.writeString(struct.userID);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetUserProductInfo()) {
        oprot.writeString(struct.userProductInfo);
      }
      if (struct.isSetInterfaceProductInfo()) {
        oprot.writeString(struct.interfaceProductInfo);
      }
      if (struct.isSetProtocolInfo()) {
        oprot.writeString(struct.protocolInfo);
      }
      if (struct.isSetMacAddress()) {
        oprot.writeString(struct.macAddress);
      }
      if (struct.isSetOneTimePassword()) {
        oprot.writeString(struct.oneTimePassword);
      }
      if (struct.isSetClientIPAddress()) {
        oprot.writeString(struct.clientIPAddress);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcReqUserLoginField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.tradingDay = iprot.readString();
        struct.setTradingDayIsSet(true);
      }
      if (incoming.get(1)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userID = iprot.readString();
        struct.setUserIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(4)) {
        struct.userProductInfo = iprot.readString();
        struct.setUserProductInfoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.interfaceProductInfo = iprot.readString();
        struct.setInterfaceProductInfoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.protocolInfo = iprot.readString();
        struct.setProtocolInfoIsSet(true);
      }
      if (incoming.get(7)) {
        struct.macAddress = iprot.readString();
        struct.setMacAddressIsSet(true);
      }
      if (incoming.get(8)) {
        struct.oneTimePassword = iprot.readString();
        struct.setOneTimePasswordIsSet(true);
      }
      if (incoming.get(9)) {
        struct.clientIPAddress = iprot.readString();
        struct.setClientIPAddressIsSet(true);
      }
    }
  }

}

