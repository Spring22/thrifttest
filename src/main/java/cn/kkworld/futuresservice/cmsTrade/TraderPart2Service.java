/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TraderPart2Service {

  public interface Iface {

    public int reqQryNotice(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryNoticeField pQryNotice, int nRequestID) throws org.apache.thrift.TException;

    public int reqQrySettlementInfoConfirm(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoConfirmField pQrySettlementInfoConfirm, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryInvestorPositionCombineDetail(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionCombineDetailField pQryInvestorPositionCombineDetail, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryCFMMCTradingAccountKey(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryCFMMCTradingAccountKeyField pQryCFMMCTradingAccountKey, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryEWarrantOffset(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryEWarrantOffsetField pQryEWarrantOffset, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryInvestorProductGroupMargin(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorProductGroupMarginField pQryInvestorProductGroupMargin, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryExchangeMarginRate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateField pQryExchangeMarginRate, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryExchangeMarginRateAdjust(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateAdjustField pQryExchangeMarginRateAdjust, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryExchangeRate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeRateField pQryExchangeRate, int nRequestID) throws org.apache.thrift.TException;

    public int reqQrySecAgentACIDMap(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySecAgentACIDMapField pQrySecAgentACIDMap, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryOptionInstrTradeCost(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrTradeCostField pQryOptionInstrTradeCost, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryOptionInstrCommRate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrCommRateField pQryOptionInstrCommRate, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryExecOrder(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExecOrderField pQryExecOrder, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryForQuote(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryForQuoteField pQryForQuote, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryQuote(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryQuoteField pQryQuote, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryTransferSerial(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferSerialField pQryTransferSerial, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryAccountregister(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryAccountregisterField pQryAccountregister, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryContractBank(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryContractBankField pQryContractBank, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryParkedOrder(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderField pQryParkedOrder, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryParkedOrderAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderActionField pQryParkedOrderAction, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryTradingNotice(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingNoticeField pQryTradingNotice, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryBrokerTradingParams(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingParamsField pQryBrokerTradingParams, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryBrokerTradingAlgos(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingAlgosField pQryBrokerTradingAlgos, int nRequestID) throws org.apache.thrift.TException;

    public int reqQueryCFMMCTradingAccountToken(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryCFMMCTradingAccountTokenField pQueryCFMMCTradingAccountToken, int nRequestID) throws org.apache.thrift.TException;

    public int reqFromBankToFutureByFuture(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField pReqTransfer, int nRequestID) throws org.apache.thrift.TException;

    public int reqFromFutureToBankByFuture(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField pReqTransfer, int nRequestID) throws org.apache.thrift.TException;

    public int reqQueryBankAccountMoneyByFuture(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqQueryAccountField pReqQueryAccount, int nRequestID) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void reqQryNotice(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryNoticeField pQryNotice, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQrySettlementInfoConfirm(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoConfirmField pQrySettlementInfoConfirm, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryInvestorPositionCombineDetail(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionCombineDetailField pQryInvestorPositionCombineDetail, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryCFMMCTradingAccountKey(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryCFMMCTradingAccountKeyField pQryCFMMCTradingAccountKey, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryEWarrantOffset(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryEWarrantOffsetField pQryEWarrantOffset, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryInvestorProductGroupMargin(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorProductGroupMarginField pQryInvestorProductGroupMargin, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryExchangeMarginRate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateField pQryExchangeMarginRate, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryExchangeMarginRateAdjust(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateAdjustField pQryExchangeMarginRateAdjust, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryExchangeRate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeRateField pQryExchangeRate, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQrySecAgentACIDMap(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySecAgentACIDMapField pQrySecAgentACIDMap, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryOptionInstrTradeCost(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrTradeCostField pQryOptionInstrTradeCost, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryOptionInstrCommRate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrCommRateField pQryOptionInstrCommRate, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryExecOrder(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExecOrderField pQryExecOrder, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryForQuote(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryForQuoteField pQryForQuote, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryQuote(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryQuoteField pQryQuote, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryTransferSerial(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferSerialField pQryTransferSerial, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryAccountregister(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryAccountregisterField pQryAccountregister, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryContractBank(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryContractBankField pQryContractBank, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryParkedOrder(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderField pQryParkedOrder, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryParkedOrderAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderActionField pQryParkedOrderAction, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryTradingNotice(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingNoticeField pQryTradingNotice, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryBrokerTradingParams(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingParamsField pQryBrokerTradingParams, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryBrokerTradingAlgos(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingAlgosField pQryBrokerTradingAlgos, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQueryCFMMCTradingAccountToken(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryCFMMCTradingAccountTokenField pQueryCFMMCTradingAccountToken, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqFromBankToFutureByFuture(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField pReqTransfer, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqFromFutureToBankByFuture(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField pReqTransfer, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQueryBankAccountMoneyByFuture(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqQueryAccountField pReqQueryAccount, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int reqQryNotice(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryNoticeField pQryNotice, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryNotice(pQryNotice, nRequestID);
      return recv_reqQryNotice();
    }

    public void send_reqQryNotice(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryNoticeField pQryNotice, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryNotice_args args = new reqQryNotice_args();
      args.setPQryNotice(pQryNotice);
      args.setNRequestID(nRequestID);
      sendBase("reqQryNotice", args);
    }

    public int recv_reqQryNotice() throws org.apache.thrift.TException
    {
      reqQryNotice_result result = new reqQryNotice_result();
      receiveBase(result, "reqQryNotice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryNotice failed: unknown result");
    }

    public int reqQrySettlementInfoConfirm(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoConfirmField pQrySettlementInfoConfirm, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQrySettlementInfoConfirm(pQrySettlementInfoConfirm, nRequestID);
      return recv_reqQrySettlementInfoConfirm();
    }

    public void send_reqQrySettlementInfoConfirm(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoConfirmField pQrySettlementInfoConfirm, int nRequestID) throws org.apache.thrift.TException
    {
      reqQrySettlementInfoConfirm_args args = new reqQrySettlementInfoConfirm_args();
      args.setPQrySettlementInfoConfirm(pQrySettlementInfoConfirm);
      args.setNRequestID(nRequestID);
      sendBase("reqQrySettlementInfoConfirm", args);
    }

    public int recv_reqQrySettlementInfoConfirm() throws org.apache.thrift.TException
    {
      reqQrySettlementInfoConfirm_result result = new reqQrySettlementInfoConfirm_result();
      receiveBase(result, "reqQrySettlementInfoConfirm");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQrySettlementInfoConfirm failed: unknown result");
    }

    public int reqQryInvestorPositionCombineDetail(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionCombineDetailField pQryInvestorPositionCombineDetail, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryInvestorPositionCombineDetail(pQryInvestorPositionCombineDetail, nRequestID);
      return recv_reqQryInvestorPositionCombineDetail();
    }

    public void send_reqQryInvestorPositionCombineDetail(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionCombineDetailField pQryInvestorPositionCombineDetail, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryInvestorPositionCombineDetail_args args = new reqQryInvestorPositionCombineDetail_args();
      args.setPQryInvestorPositionCombineDetail(pQryInvestorPositionCombineDetail);
      args.setNRequestID(nRequestID);
      sendBase("reqQryInvestorPositionCombineDetail", args);
    }

    public int recv_reqQryInvestorPositionCombineDetail() throws org.apache.thrift.TException
    {
      reqQryInvestorPositionCombineDetail_result result = new reqQryInvestorPositionCombineDetail_result();
      receiveBase(result, "reqQryInvestorPositionCombineDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryInvestorPositionCombineDetail failed: unknown result");
    }

    public int reqQryCFMMCTradingAccountKey(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryCFMMCTradingAccountKeyField pQryCFMMCTradingAccountKey, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryCFMMCTradingAccountKey(pQryCFMMCTradingAccountKey, nRequestID);
      return recv_reqQryCFMMCTradingAccountKey();
    }

    public void send_reqQryCFMMCTradingAccountKey(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryCFMMCTradingAccountKeyField pQryCFMMCTradingAccountKey, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryCFMMCTradingAccountKey_args args = new reqQryCFMMCTradingAccountKey_args();
      args.setPQryCFMMCTradingAccountKey(pQryCFMMCTradingAccountKey);
      args.setNRequestID(nRequestID);
      sendBase("reqQryCFMMCTradingAccountKey", args);
    }

    public int recv_reqQryCFMMCTradingAccountKey() throws org.apache.thrift.TException
    {
      reqQryCFMMCTradingAccountKey_result result = new reqQryCFMMCTradingAccountKey_result();
      receiveBase(result, "reqQryCFMMCTradingAccountKey");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryCFMMCTradingAccountKey failed: unknown result");
    }

    public int reqQryEWarrantOffset(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryEWarrantOffsetField pQryEWarrantOffset, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryEWarrantOffset(pQryEWarrantOffset, nRequestID);
      return recv_reqQryEWarrantOffset();
    }

    public void send_reqQryEWarrantOffset(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryEWarrantOffsetField pQryEWarrantOffset, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryEWarrantOffset_args args = new reqQryEWarrantOffset_args();
      args.setPQryEWarrantOffset(pQryEWarrantOffset);
      args.setNRequestID(nRequestID);
      sendBase("reqQryEWarrantOffset", args);
    }

    public int recv_reqQryEWarrantOffset() throws org.apache.thrift.TException
    {
      reqQryEWarrantOffset_result result = new reqQryEWarrantOffset_result();
      receiveBase(result, "reqQryEWarrantOffset");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryEWarrantOffset failed: unknown result");
    }

    public int reqQryInvestorProductGroupMargin(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorProductGroupMarginField pQryInvestorProductGroupMargin, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryInvestorProductGroupMargin(pQryInvestorProductGroupMargin, nRequestID);
      return recv_reqQryInvestorProductGroupMargin();
    }

    public void send_reqQryInvestorProductGroupMargin(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorProductGroupMarginField pQryInvestorProductGroupMargin, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryInvestorProductGroupMargin_args args = new reqQryInvestorProductGroupMargin_args();
      args.setPQryInvestorProductGroupMargin(pQryInvestorProductGroupMargin);
      args.setNRequestID(nRequestID);
      sendBase("reqQryInvestorProductGroupMargin", args);
    }

    public int recv_reqQryInvestorProductGroupMargin() throws org.apache.thrift.TException
    {
      reqQryInvestorProductGroupMargin_result result = new reqQryInvestorProductGroupMargin_result();
      receiveBase(result, "reqQryInvestorProductGroupMargin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryInvestorProductGroupMargin failed: unknown result");
    }

    public int reqQryExchangeMarginRate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateField pQryExchangeMarginRate, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryExchangeMarginRate(pQryExchangeMarginRate, nRequestID);
      return recv_reqQryExchangeMarginRate();
    }

    public void send_reqQryExchangeMarginRate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateField pQryExchangeMarginRate, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryExchangeMarginRate_args args = new reqQryExchangeMarginRate_args();
      args.setPQryExchangeMarginRate(pQryExchangeMarginRate);
      args.setNRequestID(nRequestID);
      sendBase("reqQryExchangeMarginRate", args);
    }

    public int recv_reqQryExchangeMarginRate() throws org.apache.thrift.TException
    {
      reqQryExchangeMarginRate_result result = new reqQryExchangeMarginRate_result();
      receiveBase(result, "reqQryExchangeMarginRate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryExchangeMarginRate failed: unknown result");
    }

    public int reqQryExchangeMarginRateAdjust(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateAdjustField pQryExchangeMarginRateAdjust, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryExchangeMarginRateAdjust(pQryExchangeMarginRateAdjust, nRequestID);
      return recv_reqQryExchangeMarginRateAdjust();
    }

    public void send_reqQryExchangeMarginRateAdjust(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateAdjustField pQryExchangeMarginRateAdjust, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryExchangeMarginRateAdjust_args args = new reqQryExchangeMarginRateAdjust_args();
      args.setPQryExchangeMarginRateAdjust(pQryExchangeMarginRateAdjust);
      args.setNRequestID(nRequestID);
      sendBase("reqQryExchangeMarginRateAdjust", args);
    }

    public int recv_reqQryExchangeMarginRateAdjust() throws org.apache.thrift.TException
    {
      reqQryExchangeMarginRateAdjust_result result = new reqQryExchangeMarginRateAdjust_result();
      receiveBase(result, "reqQryExchangeMarginRateAdjust");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryExchangeMarginRateAdjust failed: unknown result");
    }

    public int reqQryExchangeRate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeRateField pQryExchangeRate, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryExchangeRate(pQryExchangeRate, nRequestID);
      return recv_reqQryExchangeRate();
    }

    public void send_reqQryExchangeRate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeRateField pQryExchangeRate, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryExchangeRate_args args = new reqQryExchangeRate_args();
      args.setPQryExchangeRate(pQryExchangeRate);
      args.setNRequestID(nRequestID);
      sendBase("reqQryExchangeRate", args);
    }

    public int recv_reqQryExchangeRate() throws org.apache.thrift.TException
    {
      reqQryExchangeRate_result result = new reqQryExchangeRate_result();
      receiveBase(result, "reqQryExchangeRate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryExchangeRate failed: unknown result");
    }

    public int reqQrySecAgentACIDMap(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySecAgentACIDMapField pQrySecAgentACIDMap, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQrySecAgentACIDMap(pQrySecAgentACIDMap, nRequestID);
      return recv_reqQrySecAgentACIDMap();
    }

    public void send_reqQrySecAgentACIDMap(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySecAgentACIDMapField pQrySecAgentACIDMap, int nRequestID) throws org.apache.thrift.TException
    {
      reqQrySecAgentACIDMap_args args = new reqQrySecAgentACIDMap_args();
      args.setPQrySecAgentACIDMap(pQrySecAgentACIDMap);
      args.setNRequestID(nRequestID);
      sendBase("reqQrySecAgentACIDMap", args);
    }

    public int recv_reqQrySecAgentACIDMap() throws org.apache.thrift.TException
    {
      reqQrySecAgentACIDMap_result result = new reqQrySecAgentACIDMap_result();
      receiveBase(result, "reqQrySecAgentACIDMap");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQrySecAgentACIDMap failed: unknown result");
    }

    public int reqQryOptionInstrTradeCost(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrTradeCostField pQryOptionInstrTradeCost, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryOptionInstrTradeCost(pQryOptionInstrTradeCost, nRequestID);
      return recv_reqQryOptionInstrTradeCost();
    }

    public void send_reqQryOptionInstrTradeCost(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrTradeCostField pQryOptionInstrTradeCost, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryOptionInstrTradeCost_args args = new reqQryOptionInstrTradeCost_args();
      args.setPQryOptionInstrTradeCost(pQryOptionInstrTradeCost);
      args.setNRequestID(nRequestID);
      sendBase("reqQryOptionInstrTradeCost", args);
    }

    public int recv_reqQryOptionInstrTradeCost() throws org.apache.thrift.TException
    {
      reqQryOptionInstrTradeCost_result result = new reqQryOptionInstrTradeCost_result();
      receiveBase(result, "reqQryOptionInstrTradeCost");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryOptionInstrTradeCost failed: unknown result");
    }

    public int reqQryOptionInstrCommRate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrCommRateField pQryOptionInstrCommRate, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryOptionInstrCommRate(pQryOptionInstrCommRate, nRequestID);
      return recv_reqQryOptionInstrCommRate();
    }

    public void send_reqQryOptionInstrCommRate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrCommRateField pQryOptionInstrCommRate, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryOptionInstrCommRate_args args = new reqQryOptionInstrCommRate_args();
      args.setPQryOptionInstrCommRate(pQryOptionInstrCommRate);
      args.setNRequestID(nRequestID);
      sendBase("reqQryOptionInstrCommRate", args);
    }

    public int recv_reqQryOptionInstrCommRate() throws org.apache.thrift.TException
    {
      reqQryOptionInstrCommRate_result result = new reqQryOptionInstrCommRate_result();
      receiveBase(result, "reqQryOptionInstrCommRate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryOptionInstrCommRate failed: unknown result");
    }

    public int reqQryExecOrder(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExecOrderField pQryExecOrder, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryExecOrder(pQryExecOrder, nRequestID);
      return recv_reqQryExecOrder();
    }

    public void send_reqQryExecOrder(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExecOrderField pQryExecOrder, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryExecOrder_args args = new reqQryExecOrder_args();
      args.setPQryExecOrder(pQryExecOrder);
      args.setNRequestID(nRequestID);
      sendBase("reqQryExecOrder", args);
    }

    public int recv_reqQryExecOrder() throws org.apache.thrift.TException
    {
      reqQryExecOrder_result result = new reqQryExecOrder_result();
      receiveBase(result, "reqQryExecOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryExecOrder failed: unknown result");
    }

    public int reqQryForQuote(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryForQuoteField pQryForQuote, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryForQuote(pQryForQuote, nRequestID);
      return recv_reqQryForQuote();
    }

    public void send_reqQryForQuote(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryForQuoteField pQryForQuote, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryForQuote_args args = new reqQryForQuote_args();
      args.setPQryForQuote(pQryForQuote);
      args.setNRequestID(nRequestID);
      sendBase("reqQryForQuote", args);
    }

    public int recv_reqQryForQuote() throws org.apache.thrift.TException
    {
      reqQryForQuote_result result = new reqQryForQuote_result();
      receiveBase(result, "reqQryForQuote");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryForQuote failed: unknown result");
    }

    public int reqQryQuote(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryQuoteField pQryQuote, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryQuote(pQryQuote, nRequestID);
      return recv_reqQryQuote();
    }

    public void send_reqQryQuote(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryQuoteField pQryQuote, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryQuote_args args = new reqQryQuote_args();
      args.setPQryQuote(pQryQuote);
      args.setNRequestID(nRequestID);
      sendBase("reqQryQuote", args);
    }

    public int recv_reqQryQuote() throws org.apache.thrift.TException
    {
      reqQryQuote_result result = new reqQryQuote_result();
      receiveBase(result, "reqQryQuote");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryQuote failed: unknown result");
    }

    public int reqQryTransferSerial(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferSerialField pQryTransferSerial, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryTransferSerial(pQryTransferSerial, nRequestID);
      return recv_reqQryTransferSerial();
    }

    public void send_reqQryTransferSerial(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferSerialField pQryTransferSerial, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryTransferSerial_args args = new reqQryTransferSerial_args();
      args.setPQryTransferSerial(pQryTransferSerial);
      args.setNRequestID(nRequestID);
      sendBase("reqQryTransferSerial", args);
    }

    public int recv_reqQryTransferSerial() throws org.apache.thrift.TException
    {
      reqQryTransferSerial_result result = new reqQryTransferSerial_result();
      receiveBase(result, "reqQryTransferSerial");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryTransferSerial failed: unknown result");
    }

    public int reqQryAccountregister(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryAccountregisterField pQryAccountregister, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryAccountregister(pQryAccountregister, nRequestID);
      return recv_reqQryAccountregister();
    }

    public void send_reqQryAccountregister(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryAccountregisterField pQryAccountregister, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryAccountregister_args args = new reqQryAccountregister_args();
      args.setPQryAccountregister(pQryAccountregister);
      args.setNRequestID(nRequestID);
      sendBase("reqQryAccountregister", args);
    }

    public int recv_reqQryAccountregister() throws org.apache.thrift.TException
    {
      reqQryAccountregister_result result = new reqQryAccountregister_result();
      receiveBase(result, "reqQryAccountregister");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryAccountregister failed: unknown result");
    }

    public int reqQryContractBank(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryContractBankField pQryContractBank, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryContractBank(pQryContractBank, nRequestID);
      return recv_reqQryContractBank();
    }

    public void send_reqQryContractBank(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryContractBankField pQryContractBank, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryContractBank_args args = new reqQryContractBank_args();
      args.setPQryContractBank(pQryContractBank);
      args.setNRequestID(nRequestID);
      sendBase("reqQryContractBank", args);
    }

    public int recv_reqQryContractBank() throws org.apache.thrift.TException
    {
      reqQryContractBank_result result = new reqQryContractBank_result();
      receiveBase(result, "reqQryContractBank");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryContractBank failed: unknown result");
    }

    public int reqQryParkedOrder(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderField pQryParkedOrder, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryParkedOrder(pQryParkedOrder, nRequestID);
      return recv_reqQryParkedOrder();
    }

    public void send_reqQryParkedOrder(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderField pQryParkedOrder, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryParkedOrder_args args = new reqQryParkedOrder_args();
      args.setPQryParkedOrder(pQryParkedOrder);
      args.setNRequestID(nRequestID);
      sendBase("reqQryParkedOrder", args);
    }

    public int recv_reqQryParkedOrder() throws org.apache.thrift.TException
    {
      reqQryParkedOrder_result result = new reqQryParkedOrder_result();
      receiveBase(result, "reqQryParkedOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryParkedOrder failed: unknown result");
    }

    public int reqQryParkedOrderAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderActionField pQryParkedOrderAction, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryParkedOrderAction(pQryParkedOrderAction, nRequestID);
      return recv_reqQryParkedOrderAction();
    }

    public void send_reqQryParkedOrderAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderActionField pQryParkedOrderAction, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryParkedOrderAction_args args = new reqQryParkedOrderAction_args();
      args.setPQryParkedOrderAction(pQryParkedOrderAction);
      args.setNRequestID(nRequestID);
      sendBase("reqQryParkedOrderAction", args);
    }

    public int recv_reqQryParkedOrderAction() throws org.apache.thrift.TException
    {
      reqQryParkedOrderAction_result result = new reqQryParkedOrderAction_result();
      receiveBase(result, "reqQryParkedOrderAction");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryParkedOrderAction failed: unknown result");
    }

    public int reqQryTradingNotice(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingNoticeField pQryTradingNotice, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryTradingNotice(pQryTradingNotice, nRequestID);
      return recv_reqQryTradingNotice();
    }

    public void send_reqQryTradingNotice(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingNoticeField pQryTradingNotice, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryTradingNotice_args args = new reqQryTradingNotice_args();
      args.setPQryTradingNotice(pQryTradingNotice);
      args.setNRequestID(nRequestID);
      sendBase("reqQryTradingNotice", args);
    }

    public int recv_reqQryTradingNotice() throws org.apache.thrift.TException
    {
      reqQryTradingNotice_result result = new reqQryTradingNotice_result();
      receiveBase(result, "reqQryTradingNotice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryTradingNotice failed: unknown result");
    }

    public int reqQryBrokerTradingParams(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingParamsField pQryBrokerTradingParams, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryBrokerTradingParams(pQryBrokerTradingParams, nRequestID);
      return recv_reqQryBrokerTradingParams();
    }

    public void send_reqQryBrokerTradingParams(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingParamsField pQryBrokerTradingParams, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryBrokerTradingParams_args args = new reqQryBrokerTradingParams_args();
      args.setPQryBrokerTradingParams(pQryBrokerTradingParams);
      args.setNRequestID(nRequestID);
      sendBase("reqQryBrokerTradingParams", args);
    }

    public int recv_reqQryBrokerTradingParams() throws org.apache.thrift.TException
    {
      reqQryBrokerTradingParams_result result = new reqQryBrokerTradingParams_result();
      receiveBase(result, "reqQryBrokerTradingParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryBrokerTradingParams failed: unknown result");
    }

    public int reqQryBrokerTradingAlgos(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingAlgosField pQryBrokerTradingAlgos, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryBrokerTradingAlgos(pQryBrokerTradingAlgos, nRequestID);
      return recv_reqQryBrokerTradingAlgos();
    }

    public void send_reqQryBrokerTradingAlgos(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingAlgosField pQryBrokerTradingAlgos, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryBrokerTradingAlgos_args args = new reqQryBrokerTradingAlgos_args();
      args.setPQryBrokerTradingAlgos(pQryBrokerTradingAlgos);
      args.setNRequestID(nRequestID);
      sendBase("reqQryBrokerTradingAlgos", args);
    }

    public int recv_reqQryBrokerTradingAlgos() throws org.apache.thrift.TException
    {
      reqQryBrokerTradingAlgos_result result = new reqQryBrokerTradingAlgos_result();
      receiveBase(result, "reqQryBrokerTradingAlgos");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryBrokerTradingAlgos failed: unknown result");
    }

    public int reqQueryCFMMCTradingAccountToken(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryCFMMCTradingAccountTokenField pQueryCFMMCTradingAccountToken, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQueryCFMMCTradingAccountToken(pQueryCFMMCTradingAccountToken, nRequestID);
      return recv_reqQueryCFMMCTradingAccountToken();
    }

    public void send_reqQueryCFMMCTradingAccountToken(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryCFMMCTradingAccountTokenField pQueryCFMMCTradingAccountToken, int nRequestID) throws org.apache.thrift.TException
    {
      reqQueryCFMMCTradingAccountToken_args args = new reqQueryCFMMCTradingAccountToken_args();
      args.setPQueryCFMMCTradingAccountToken(pQueryCFMMCTradingAccountToken);
      args.setNRequestID(nRequestID);
      sendBase("reqQueryCFMMCTradingAccountToken", args);
    }

    public int recv_reqQueryCFMMCTradingAccountToken() throws org.apache.thrift.TException
    {
      reqQueryCFMMCTradingAccountToken_result result = new reqQueryCFMMCTradingAccountToken_result();
      receiveBase(result, "reqQueryCFMMCTradingAccountToken");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQueryCFMMCTradingAccountToken failed: unknown result");
    }

    public int reqFromBankToFutureByFuture(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField pReqTransfer, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqFromBankToFutureByFuture(pReqTransfer, nRequestID);
      return recv_reqFromBankToFutureByFuture();
    }

    public void send_reqFromBankToFutureByFuture(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField pReqTransfer, int nRequestID) throws org.apache.thrift.TException
    {
      reqFromBankToFutureByFuture_args args = new reqFromBankToFutureByFuture_args();
      args.setPReqTransfer(pReqTransfer);
      args.setNRequestID(nRequestID);
      sendBase("reqFromBankToFutureByFuture", args);
    }

    public int recv_reqFromBankToFutureByFuture() throws org.apache.thrift.TException
    {
      reqFromBankToFutureByFuture_result result = new reqFromBankToFutureByFuture_result();
      receiveBase(result, "reqFromBankToFutureByFuture");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqFromBankToFutureByFuture failed: unknown result");
    }

    public int reqFromFutureToBankByFuture(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField pReqTransfer, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqFromFutureToBankByFuture(pReqTransfer, nRequestID);
      return recv_reqFromFutureToBankByFuture();
    }

    public void send_reqFromFutureToBankByFuture(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField pReqTransfer, int nRequestID) throws org.apache.thrift.TException
    {
      reqFromFutureToBankByFuture_args args = new reqFromFutureToBankByFuture_args();
      args.setPReqTransfer(pReqTransfer);
      args.setNRequestID(nRequestID);
      sendBase("reqFromFutureToBankByFuture", args);
    }

    public int recv_reqFromFutureToBankByFuture() throws org.apache.thrift.TException
    {
      reqFromFutureToBankByFuture_result result = new reqFromFutureToBankByFuture_result();
      receiveBase(result, "reqFromFutureToBankByFuture");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqFromFutureToBankByFuture failed: unknown result");
    }

    public int reqQueryBankAccountMoneyByFuture(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqQueryAccountField pReqQueryAccount, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQueryBankAccountMoneyByFuture(pReqQueryAccount, nRequestID);
      return recv_reqQueryBankAccountMoneyByFuture();
    }

    public void send_reqQueryBankAccountMoneyByFuture(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqQueryAccountField pReqQueryAccount, int nRequestID) throws org.apache.thrift.TException
    {
      reqQueryBankAccountMoneyByFuture_args args = new reqQueryBankAccountMoneyByFuture_args();
      args.setPReqQueryAccount(pReqQueryAccount);
      args.setNRequestID(nRequestID);
      sendBase("reqQueryBankAccountMoneyByFuture", args);
    }

    public int recv_reqQueryBankAccountMoneyByFuture() throws org.apache.thrift.TException
    {
      reqQueryBankAccountMoneyByFuture_result result = new reqQueryBankAccountMoneyByFuture_result();
      receiveBase(result, "reqQueryBankAccountMoneyByFuture");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQueryBankAccountMoneyByFuture failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void reqQryNotice(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryNoticeField pQryNotice, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryNotice_call method_call = new reqQryNotice_call(pQryNotice, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryNotice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryNoticeField pQryNotice;
      private int nRequestID;
      public reqQryNotice_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryNoticeField pQryNotice, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryNotice = pQryNotice;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryNotice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryNotice_args args = new reqQryNotice_args();
        args.setPQryNotice(pQryNotice);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryNotice();
      }
    }

    public void reqQrySettlementInfoConfirm(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoConfirmField pQrySettlementInfoConfirm, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQrySettlementInfoConfirm_call method_call = new reqQrySettlementInfoConfirm_call(pQrySettlementInfoConfirm, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQrySettlementInfoConfirm_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoConfirmField pQrySettlementInfoConfirm;
      private int nRequestID;
      public reqQrySettlementInfoConfirm_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoConfirmField pQrySettlementInfoConfirm, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQrySettlementInfoConfirm = pQrySettlementInfoConfirm;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQrySettlementInfoConfirm", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQrySettlementInfoConfirm_args args = new reqQrySettlementInfoConfirm_args();
        args.setPQrySettlementInfoConfirm(pQrySettlementInfoConfirm);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQrySettlementInfoConfirm();
      }
    }

    public void reqQryInvestorPositionCombineDetail(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionCombineDetailField pQryInvestorPositionCombineDetail, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryInvestorPositionCombineDetail_call method_call = new reqQryInvestorPositionCombineDetail_call(pQryInvestorPositionCombineDetail, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryInvestorPositionCombineDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionCombineDetailField pQryInvestorPositionCombineDetail;
      private int nRequestID;
      public reqQryInvestorPositionCombineDetail_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionCombineDetailField pQryInvestorPositionCombineDetail, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryInvestorPositionCombineDetail = pQryInvestorPositionCombineDetail;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryInvestorPositionCombineDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryInvestorPositionCombineDetail_args args = new reqQryInvestorPositionCombineDetail_args();
        args.setPQryInvestorPositionCombineDetail(pQryInvestorPositionCombineDetail);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryInvestorPositionCombineDetail();
      }
    }

    public void reqQryCFMMCTradingAccountKey(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryCFMMCTradingAccountKeyField pQryCFMMCTradingAccountKey, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryCFMMCTradingAccountKey_call method_call = new reqQryCFMMCTradingAccountKey_call(pQryCFMMCTradingAccountKey, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryCFMMCTradingAccountKey_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryCFMMCTradingAccountKeyField pQryCFMMCTradingAccountKey;
      private int nRequestID;
      public reqQryCFMMCTradingAccountKey_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryCFMMCTradingAccountKeyField pQryCFMMCTradingAccountKey, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryCFMMCTradingAccountKey = pQryCFMMCTradingAccountKey;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryCFMMCTradingAccountKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryCFMMCTradingAccountKey_args args = new reqQryCFMMCTradingAccountKey_args();
        args.setPQryCFMMCTradingAccountKey(pQryCFMMCTradingAccountKey);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryCFMMCTradingAccountKey();
      }
    }

    public void reqQryEWarrantOffset(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryEWarrantOffsetField pQryEWarrantOffset, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryEWarrantOffset_call method_call = new reqQryEWarrantOffset_call(pQryEWarrantOffset, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryEWarrantOffset_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryEWarrantOffsetField pQryEWarrantOffset;
      private int nRequestID;
      public reqQryEWarrantOffset_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryEWarrantOffsetField pQryEWarrantOffset, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryEWarrantOffset = pQryEWarrantOffset;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryEWarrantOffset", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryEWarrantOffset_args args = new reqQryEWarrantOffset_args();
        args.setPQryEWarrantOffset(pQryEWarrantOffset);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryEWarrantOffset();
      }
    }

    public void reqQryInvestorProductGroupMargin(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorProductGroupMarginField pQryInvestorProductGroupMargin, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryInvestorProductGroupMargin_call method_call = new reqQryInvestorProductGroupMargin_call(pQryInvestorProductGroupMargin, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryInvestorProductGroupMargin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorProductGroupMarginField pQryInvestorProductGroupMargin;
      private int nRequestID;
      public reqQryInvestorProductGroupMargin_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorProductGroupMarginField pQryInvestorProductGroupMargin, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryInvestorProductGroupMargin = pQryInvestorProductGroupMargin;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryInvestorProductGroupMargin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryInvestorProductGroupMargin_args args = new reqQryInvestorProductGroupMargin_args();
        args.setPQryInvestorProductGroupMargin(pQryInvestorProductGroupMargin);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryInvestorProductGroupMargin();
      }
    }

    public void reqQryExchangeMarginRate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateField pQryExchangeMarginRate, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryExchangeMarginRate_call method_call = new reqQryExchangeMarginRate_call(pQryExchangeMarginRate, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryExchangeMarginRate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateField pQryExchangeMarginRate;
      private int nRequestID;
      public reqQryExchangeMarginRate_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateField pQryExchangeMarginRate, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryExchangeMarginRate = pQryExchangeMarginRate;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryExchangeMarginRate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryExchangeMarginRate_args args = new reqQryExchangeMarginRate_args();
        args.setPQryExchangeMarginRate(pQryExchangeMarginRate);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryExchangeMarginRate();
      }
    }

    public void reqQryExchangeMarginRateAdjust(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateAdjustField pQryExchangeMarginRateAdjust, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryExchangeMarginRateAdjust_call method_call = new reqQryExchangeMarginRateAdjust_call(pQryExchangeMarginRateAdjust, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryExchangeMarginRateAdjust_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateAdjustField pQryExchangeMarginRateAdjust;
      private int nRequestID;
      public reqQryExchangeMarginRateAdjust_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateAdjustField pQryExchangeMarginRateAdjust, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryExchangeMarginRateAdjust = pQryExchangeMarginRateAdjust;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryExchangeMarginRateAdjust", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryExchangeMarginRateAdjust_args args = new reqQryExchangeMarginRateAdjust_args();
        args.setPQryExchangeMarginRateAdjust(pQryExchangeMarginRateAdjust);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryExchangeMarginRateAdjust();
      }
    }

    public void reqQryExchangeRate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeRateField pQryExchangeRate, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryExchangeRate_call method_call = new reqQryExchangeRate_call(pQryExchangeRate, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryExchangeRate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeRateField pQryExchangeRate;
      private int nRequestID;
      public reqQryExchangeRate_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeRateField pQryExchangeRate, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryExchangeRate = pQryExchangeRate;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryExchangeRate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryExchangeRate_args args = new reqQryExchangeRate_args();
        args.setPQryExchangeRate(pQryExchangeRate);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryExchangeRate();
      }
    }

    public void reqQrySecAgentACIDMap(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySecAgentACIDMapField pQrySecAgentACIDMap, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQrySecAgentACIDMap_call method_call = new reqQrySecAgentACIDMap_call(pQrySecAgentACIDMap, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQrySecAgentACIDMap_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySecAgentACIDMapField pQrySecAgentACIDMap;
      private int nRequestID;
      public reqQrySecAgentACIDMap_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySecAgentACIDMapField pQrySecAgentACIDMap, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQrySecAgentACIDMap = pQrySecAgentACIDMap;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQrySecAgentACIDMap", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQrySecAgentACIDMap_args args = new reqQrySecAgentACIDMap_args();
        args.setPQrySecAgentACIDMap(pQrySecAgentACIDMap);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQrySecAgentACIDMap();
      }
    }

    public void reqQryOptionInstrTradeCost(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrTradeCostField pQryOptionInstrTradeCost, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryOptionInstrTradeCost_call method_call = new reqQryOptionInstrTradeCost_call(pQryOptionInstrTradeCost, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryOptionInstrTradeCost_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrTradeCostField pQryOptionInstrTradeCost;
      private int nRequestID;
      public reqQryOptionInstrTradeCost_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrTradeCostField pQryOptionInstrTradeCost, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryOptionInstrTradeCost = pQryOptionInstrTradeCost;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryOptionInstrTradeCost", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryOptionInstrTradeCost_args args = new reqQryOptionInstrTradeCost_args();
        args.setPQryOptionInstrTradeCost(pQryOptionInstrTradeCost);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryOptionInstrTradeCost();
      }
    }

    public void reqQryOptionInstrCommRate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrCommRateField pQryOptionInstrCommRate, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryOptionInstrCommRate_call method_call = new reqQryOptionInstrCommRate_call(pQryOptionInstrCommRate, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryOptionInstrCommRate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrCommRateField pQryOptionInstrCommRate;
      private int nRequestID;
      public reqQryOptionInstrCommRate_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrCommRateField pQryOptionInstrCommRate, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryOptionInstrCommRate = pQryOptionInstrCommRate;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryOptionInstrCommRate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryOptionInstrCommRate_args args = new reqQryOptionInstrCommRate_args();
        args.setPQryOptionInstrCommRate(pQryOptionInstrCommRate);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryOptionInstrCommRate();
      }
    }

    public void reqQryExecOrder(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExecOrderField pQryExecOrder, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryExecOrder_call method_call = new reqQryExecOrder_call(pQryExecOrder, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryExecOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExecOrderField pQryExecOrder;
      private int nRequestID;
      public reqQryExecOrder_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExecOrderField pQryExecOrder, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryExecOrder = pQryExecOrder;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryExecOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryExecOrder_args args = new reqQryExecOrder_args();
        args.setPQryExecOrder(pQryExecOrder);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryExecOrder();
      }
    }

    public void reqQryForQuote(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryForQuoteField pQryForQuote, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryForQuote_call method_call = new reqQryForQuote_call(pQryForQuote, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryForQuote_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryForQuoteField pQryForQuote;
      private int nRequestID;
      public reqQryForQuote_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryForQuoteField pQryForQuote, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryForQuote = pQryForQuote;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryForQuote", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryForQuote_args args = new reqQryForQuote_args();
        args.setPQryForQuote(pQryForQuote);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryForQuote();
      }
    }

    public void reqQryQuote(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryQuoteField pQryQuote, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryQuote_call method_call = new reqQryQuote_call(pQryQuote, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryQuote_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryQuoteField pQryQuote;
      private int nRequestID;
      public reqQryQuote_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryQuoteField pQryQuote, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryQuote = pQryQuote;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryQuote", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryQuote_args args = new reqQryQuote_args();
        args.setPQryQuote(pQryQuote);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryQuote();
      }
    }

    public void reqQryTransferSerial(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferSerialField pQryTransferSerial, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryTransferSerial_call method_call = new reqQryTransferSerial_call(pQryTransferSerial, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryTransferSerial_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferSerialField pQryTransferSerial;
      private int nRequestID;
      public reqQryTransferSerial_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferSerialField pQryTransferSerial, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryTransferSerial = pQryTransferSerial;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryTransferSerial", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryTransferSerial_args args = new reqQryTransferSerial_args();
        args.setPQryTransferSerial(pQryTransferSerial);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryTransferSerial();
      }
    }

    public void reqQryAccountregister(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryAccountregisterField pQryAccountregister, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryAccountregister_call method_call = new reqQryAccountregister_call(pQryAccountregister, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryAccountregister_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryAccountregisterField pQryAccountregister;
      private int nRequestID;
      public reqQryAccountregister_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryAccountregisterField pQryAccountregister, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryAccountregister = pQryAccountregister;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryAccountregister", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryAccountregister_args args = new reqQryAccountregister_args();
        args.setPQryAccountregister(pQryAccountregister);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryAccountregister();
      }
    }

    public void reqQryContractBank(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryContractBankField pQryContractBank, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryContractBank_call method_call = new reqQryContractBank_call(pQryContractBank, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryContractBank_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryContractBankField pQryContractBank;
      private int nRequestID;
      public reqQryContractBank_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryContractBankField pQryContractBank, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryContractBank = pQryContractBank;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryContractBank", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryContractBank_args args = new reqQryContractBank_args();
        args.setPQryContractBank(pQryContractBank);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryContractBank();
      }
    }

    public void reqQryParkedOrder(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderField pQryParkedOrder, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryParkedOrder_call method_call = new reqQryParkedOrder_call(pQryParkedOrder, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryParkedOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderField pQryParkedOrder;
      private int nRequestID;
      public reqQryParkedOrder_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderField pQryParkedOrder, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryParkedOrder = pQryParkedOrder;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryParkedOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryParkedOrder_args args = new reqQryParkedOrder_args();
        args.setPQryParkedOrder(pQryParkedOrder);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryParkedOrder();
      }
    }

    public void reqQryParkedOrderAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderActionField pQryParkedOrderAction, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryParkedOrderAction_call method_call = new reqQryParkedOrderAction_call(pQryParkedOrderAction, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryParkedOrderAction_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderActionField pQryParkedOrderAction;
      private int nRequestID;
      public reqQryParkedOrderAction_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderActionField pQryParkedOrderAction, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryParkedOrderAction = pQryParkedOrderAction;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryParkedOrderAction", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryParkedOrderAction_args args = new reqQryParkedOrderAction_args();
        args.setPQryParkedOrderAction(pQryParkedOrderAction);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryParkedOrderAction();
      }
    }

    public void reqQryTradingNotice(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingNoticeField pQryTradingNotice, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryTradingNotice_call method_call = new reqQryTradingNotice_call(pQryTradingNotice, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryTradingNotice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingNoticeField pQryTradingNotice;
      private int nRequestID;
      public reqQryTradingNotice_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingNoticeField pQryTradingNotice, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryTradingNotice = pQryTradingNotice;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryTradingNotice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryTradingNotice_args args = new reqQryTradingNotice_args();
        args.setPQryTradingNotice(pQryTradingNotice);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryTradingNotice();
      }
    }

    public void reqQryBrokerTradingParams(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingParamsField pQryBrokerTradingParams, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryBrokerTradingParams_call method_call = new reqQryBrokerTradingParams_call(pQryBrokerTradingParams, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryBrokerTradingParams_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingParamsField pQryBrokerTradingParams;
      private int nRequestID;
      public reqQryBrokerTradingParams_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingParamsField pQryBrokerTradingParams, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryBrokerTradingParams = pQryBrokerTradingParams;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryBrokerTradingParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryBrokerTradingParams_args args = new reqQryBrokerTradingParams_args();
        args.setPQryBrokerTradingParams(pQryBrokerTradingParams);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryBrokerTradingParams();
      }
    }

    public void reqQryBrokerTradingAlgos(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingAlgosField pQryBrokerTradingAlgos, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryBrokerTradingAlgos_call method_call = new reqQryBrokerTradingAlgos_call(pQryBrokerTradingAlgos, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryBrokerTradingAlgos_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingAlgosField pQryBrokerTradingAlgos;
      private int nRequestID;
      public reqQryBrokerTradingAlgos_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingAlgosField pQryBrokerTradingAlgos, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryBrokerTradingAlgos = pQryBrokerTradingAlgos;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryBrokerTradingAlgos", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryBrokerTradingAlgos_args args = new reqQryBrokerTradingAlgos_args();
        args.setPQryBrokerTradingAlgos(pQryBrokerTradingAlgos);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryBrokerTradingAlgos();
      }
    }

    public void reqQueryCFMMCTradingAccountToken(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryCFMMCTradingAccountTokenField pQueryCFMMCTradingAccountToken, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQueryCFMMCTradingAccountToken_call method_call = new reqQueryCFMMCTradingAccountToken_call(pQueryCFMMCTradingAccountToken, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQueryCFMMCTradingAccountToken_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryCFMMCTradingAccountTokenField pQueryCFMMCTradingAccountToken;
      private int nRequestID;
      public reqQueryCFMMCTradingAccountToken_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryCFMMCTradingAccountTokenField pQueryCFMMCTradingAccountToken, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQueryCFMMCTradingAccountToken = pQueryCFMMCTradingAccountToken;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQueryCFMMCTradingAccountToken", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQueryCFMMCTradingAccountToken_args args = new reqQueryCFMMCTradingAccountToken_args();
        args.setPQueryCFMMCTradingAccountToken(pQueryCFMMCTradingAccountToken);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQueryCFMMCTradingAccountToken();
      }
    }

    public void reqFromBankToFutureByFuture(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField pReqTransfer, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqFromBankToFutureByFuture_call method_call = new reqFromBankToFutureByFuture_call(pReqTransfer, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqFromBankToFutureByFuture_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField pReqTransfer;
      private int nRequestID;
      public reqFromBankToFutureByFuture_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField pReqTransfer, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pReqTransfer = pReqTransfer;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqFromBankToFutureByFuture", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqFromBankToFutureByFuture_args args = new reqFromBankToFutureByFuture_args();
        args.setPReqTransfer(pReqTransfer);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqFromBankToFutureByFuture();
      }
    }

    public void reqFromFutureToBankByFuture(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField pReqTransfer, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqFromFutureToBankByFuture_call method_call = new reqFromFutureToBankByFuture_call(pReqTransfer, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqFromFutureToBankByFuture_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField pReqTransfer;
      private int nRequestID;
      public reqFromFutureToBankByFuture_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField pReqTransfer, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pReqTransfer = pReqTransfer;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqFromFutureToBankByFuture", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqFromFutureToBankByFuture_args args = new reqFromFutureToBankByFuture_args();
        args.setPReqTransfer(pReqTransfer);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqFromFutureToBankByFuture();
      }
    }

    public void reqQueryBankAccountMoneyByFuture(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqQueryAccountField pReqQueryAccount, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQueryBankAccountMoneyByFuture_call method_call = new reqQueryBankAccountMoneyByFuture_call(pReqQueryAccount, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQueryBankAccountMoneyByFuture_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqQueryAccountField pReqQueryAccount;
      private int nRequestID;
      public reqQueryBankAccountMoneyByFuture_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqQueryAccountField pReqQueryAccount, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pReqQueryAccount = pReqQueryAccount;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQueryBankAccountMoneyByFuture", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQueryBankAccountMoneyByFuture_args args = new reqQueryBankAccountMoneyByFuture_args();
        args.setPReqQueryAccount(pReqQueryAccount);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQueryBankAccountMoneyByFuture();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("reqQryNotice", new reqQryNotice());
      processMap.put("reqQrySettlementInfoConfirm", new reqQrySettlementInfoConfirm());
      processMap.put("reqQryInvestorPositionCombineDetail", new reqQryInvestorPositionCombineDetail());
      processMap.put("reqQryCFMMCTradingAccountKey", new reqQryCFMMCTradingAccountKey());
      processMap.put("reqQryEWarrantOffset", new reqQryEWarrantOffset());
      processMap.put("reqQryInvestorProductGroupMargin", new reqQryInvestorProductGroupMargin());
      processMap.put("reqQryExchangeMarginRate", new reqQryExchangeMarginRate());
      processMap.put("reqQryExchangeMarginRateAdjust", new reqQryExchangeMarginRateAdjust());
      processMap.put("reqQryExchangeRate", new reqQryExchangeRate());
      processMap.put("reqQrySecAgentACIDMap", new reqQrySecAgentACIDMap());
      processMap.put("reqQryOptionInstrTradeCost", new reqQryOptionInstrTradeCost());
      processMap.put("reqQryOptionInstrCommRate", new reqQryOptionInstrCommRate());
      processMap.put("reqQryExecOrder", new reqQryExecOrder());
      processMap.put("reqQryForQuote", new reqQryForQuote());
      processMap.put("reqQryQuote", new reqQryQuote());
      processMap.put("reqQryTransferSerial", new reqQryTransferSerial());
      processMap.put("reqQryAccountregister", new reqQryAccountregister());
      processMap.put("reqQryContractBank", new reqQryContractBank());
      processMap.put("reqQryParkedOrder", new reqQryParkedOrder());
      processMap.put("reqQryParkedOrderAction", new reqQryParkedOrderAction());
      processMap.put("reqQryTradingNotice", new reqQryTradingNotice());
      processMap.put("reqQryBrokerTradingParams", new reqQryBrokerTradingParams());
      processMap.put("reqQryBrokerTradingAlgos", new reqQryBrokerTradingAlgos());
      processMap.put("reqQueryCFMMCTradingAccountToken", new reqQueryCFMMCTradingAccountToken());
      processMap.put("reqFromBankToFutureByFuture", new reqFromBankToFutureByFuture());
      processMap.put("reqFromFutureToBankByFuture", new reqFromFutureToBankByFuture());
      processMap.put("reqQueryBankAccountMoneyByFuture", new reqQueryBankAccountMoneyByFuture());
      return processMap;
    }

    public static class reqQryNotice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryNotice_args> {
      public reqQryNotice() {
        super("reqQryNotice");
      }

      public reqQryNotice_args getEmptyArgsInstance() {
        return new reqQryNotice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryNotice_result getResult(I iface, reqQryNotice_args args) throws org.apache.thrift.TException {
        reqQryNotice_result result = new reqQryNotice_result();
        result.success = iface.reqQryNotice(args.pQryNotice, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQrySettlementInfoConfirm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQrySettlementInfoConfirm_args> {
      public reqQrySettlementInfoConfirm() {
        super("reqQrySettlementInfoConfirm");
      }

      public reqQrySettlementInfoConfirm_args getEmptyArgsInstance() {
        return new reqQrySettlementInfoConfirm_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQrySettlementInfoConfirm_result getResult(I iface, reqQrySettlementInfoConfirm_args args) throws org.apache.thrift.TException {
        reqQrySettlementInfoConfirm_result result = new reqQrySettlementInfoConfirm_result();
        result.success = iface.reqQrySettlementInfoConfirm(args.pQrySettlementInfoConfirm, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryInvestorPositionCombineDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryInvestorPositionCombineDetail_args> {
      public reqQryInvestorPositionCombineDetail() {
        super("reqQryInvestorPositionCombineDetail");
      }

      public reqQryInvestorPositionCombineDetail_args getEmptyArgsInstance() {
        return new reqQryInvestorPositionCombineDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryInvestorPositionCombineDetail_result getResult(I iface, reqQryInvestorPositionCombineDetail_args args) throws org.apache.thrift.TException {
        reqQryInvestorPositionCombineDetail_result result = new reqQryInvestorPositionCombineDetail_result();
        result.success = iface.reqQryInvestorPositionCombineDetail(args.pQryInvestorPositionCombineDetail, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryCFMMCTradingAccountKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryCFMMCTradingAccountKey_args> {
      public reqQryCFMMCTradingAccountKey() {
        super("reqQryCFMMCTradingAccountKey");
      }

      public reqQryCFMMCTradingAccountKey_args getEmptyArgsInstance() {
        return new reqQryCFMMCTradingAccountKey_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryCFMMCTradingAccountKey_result getResult(I iface, reqQryCFMMCTradingAccountKey_args args) throws org.apache.thrift.TException {
        reqQryCFMMCTradingAccountKey_result result = new reqQryCFMMCTradingAccountKey_result();
        result.success = iface.reqQryCFMMCTradingAccountKey(args.pQryCFMMCTradingAccountKey, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryEWarrantOffset<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryEWarrantOffset_args> {
      public reqQryEWarrantOffset() {
        super("reqQryEWarrantOffset");
      }

      public reqQryEWarrantOffset_args getEmptyArgsInstance() {
        return new reqQryEWarrantOffset_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryEWarrantOffset_result getResult(I iface, reqQryEWarrantOffset_args args) throws org.apache.thrift.TException {
        reqQryEWarrantOffset_result result = new reqQryEWarrantOffset_result();
        result.success = iface.reqQryEWarrantOffset(args.pQryEWarrantOffset, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryInvestorProductGroupMargin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryInvestorProductGroupMargin_args> {
      public reqQryInvestorProductGroupMargin() {
        super("reqQryInvestorProductGroupMargin");
      }

      public reqQryInvestorProductGroupMargin_args getEmptyArgsInstance() {
        return new reqQryInvestorProductGroupMargin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryInvestorProductGroupMargin_result getResult(I iface, reqQryInvestorProductGroupMargin_args args) throws org.apache.thrift.TException {
        reqQryInvestorProductGroupMargin_result result = new reqQryInvestorProductGroupMargin_result();
        result.success = iface.reqQryInvestorProductGroupMargin(args.pQryInvestorProductGroupMargin, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryExchangeMarginRate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryExchangeMarginRate_args> {
      public reqQryExchangeMarginRate() {
        super("reqQryExchangeMarginRate");
      }

      public reqQryExchangeMarginRate_args getEmptyArgsInstance() {
        return new reqQryExchangeMarginRate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryExchangeMarginRate_result getResult(I iface, reqQryExchangeMarginRate_args args) throws org.apache.thrift.TException {
        reqQryExchangeMarginRate_result result = new reqQryExchangeMarginRate_result();
        result.success = iface.reqQryExchangeMarginRate(args.pQryExchangeMarginRate, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryExchangeMarginRateAdjust<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryExchangeMarginRateAdjust_args> {
      public reqQryExchangeMarginRateAdjust() {
        super("reqQryExchangeMarginRateAdjust");
      }

      public reqQryExchangeMarginRateAdjust_args getEmptyArgsInstance() {
        return new reqQryExchangeMarginRateAdjust_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryExchangeMarginRateAdjust_result getResult(I iface, reqQryExchangeMarginRateAdjust_args args) throws org.apache.thrift.TException {
        reqQryExchangeMarginRateAdjust_result result = new reqQryExchangeMarginRateAdjust_result();
        result.success = iface.reqQryExchangeMarginRateAdjust(args.pQryExchangeMarginRateAdjust, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryExchangeRate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryExchangeRate_args> {
      public reqQryExchangeRate() {
        super("reqQryExchangeRate");
      }

      public reqQryExchangeRate_args getEmptyArgsInstance() {
        return new reqQryExchangeRate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryExchangeRate_result getResult(I iface, reqQryExchangeRate_args args) throws org.apache.thrift.TException {
        reqQryExchangeRate_result result = new reqQryExchangeRate_result();
        result.success = iface.reqQryExchangeRate(args.pQryExchangeRate, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQrySecAgentACIDMap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQrySecAgentACIDMap_args> {
      public reqQrySecAgentACIDMap() {
        super("reqQrySecAgentACIDMap");
      }

      public reqQrySecAgentACIDMap_args getEmptyArgsInstance() {
        return new reqQrySecAgentACIDMap_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQrySecAgentACIDMap_result getResult(I iface, reqQrySecAgentACIDMap_args args) throws org.apache.thrift.TException {
        reqQrySecAgentACIDMap_result result = new reqQrySecAgentACIDMap_result();
        result.success = iface.reqQrySecAgentACIDMap(args.pQrySecAgentACIDMap, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryOptionInstrTradeCost<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryOptionInstrTradeCost_args> {
      public reqQryOptionInstrTradeCost() {
        super("reqQryOptionInstrTradeCost");
      }

      public reqQryOptionInstrTradeCost_args getEmptyArgsInstance() {
        return new reqQryOptionInstrTradeCost_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryOptionInstrTradeCost_result getResult(I iface, reqQryOptionInstrTradeCost_args args) throws org.apache.thrift.TException {
        reqQryOptionInstrTradeCost_result result = new reqQryOptionInstrTradeCost_result();
        result.success = iface.reqQryOptionInstrTradeCost(args.pQryOptionInstrTradeCost, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryOptionInstrCommRate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryOptionInstrCommRate_args> {
      public reqQryOptionInstrCommRate() {
        super("reqQryOptionInstrCommRate");
      }

      public reqQryOptionInstrCommRate_args getEmptyArgsInstance() {
        return new reqQryOptionInstrCommRate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryOptionInstrCommRate_result getResult(I iface, reqQryOptionInstrCommRate_args args) throws org.apache.thrift.TException {
        reqQryOptionInstrCommRate_result result = new reqQryOptionInstrCommRate_result();
        result.success = iface.reqQryOptionInstrCommRate(args.pQryOptionInstrCommRate, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryExecOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryExecOrder_args> {
      public reqQryExecOrder() {
        super("reqQryExecOrder");
      }

      public reqQryExecOrder_args getEmptyArgsInstance() {
        return new reqQryExecOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryExecOrder_result getResult(I iface, reqQryExecOrder_args args) throws org.apache.thrift.TException {
        reqQryExecOrder_result result = new reqQryExecOrder_result();
        result.success = iface.reqQryExecOrder(args.pQryExecOrder, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryForQuote<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryForQuote_args> {
      public reqQryForQuote() {
        super("reqQryForQuote");
      }

      public reqQryForQuote_args getEmptyArgsInstance() {
        return new reqQryForQuote_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryForQuote_result getResult(I iface, reqQryForQuote_args args) throws org.apache.thrift.TException {
        reqQryForQuote_result result = new reqQryForQuote_result();
        result.success = iface.reqQryForQuote(args.pQryForQuote, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryQuote<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryQuote_args> {
      public reqQryQuote() {
        super("reqQryQuote");
      }

      public reqQryQuote_args getEmptyArgsInstance() {
        return new reqQryQuote_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryQuote_result getResult(I iface, reqQryQuote_args args) throws org.apache.thrift.TException {
        reqQryQuote_result result = new reqQryQuote_result();
        result.success = iface.reqQryQuote(args.pQryQuote, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryTransferSerial<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryTransferSerial_args> {
      public reqQryTransferSerial() {
        super("reqQryTransferSerial");
      }

      public reqQryTransferSerial_args getEmptyArgsInstance() {
        return new reqQryTransferSerial_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryTransferSerial_result getResult(I iface, reqQryTransferSerial_args args) throws org.apache.thrift.TException {
        reqQryTransferSerial_result result = new reqQryTransferSerial_result();
        result.success = iface.reqQryTransferSerial(args.pQryTransferSerial, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryAccountregister<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryAccountregister_args> {
      public reqQryAccountregister() {
        super("reqQryAccountregister");
      }

      public reqQryAccountregister_args getEmptyArgsInstance() {
        return new reqQryAccountregister_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryAccountregister_result getResult(I iface, reqQryAccountregister_args args) throws org.apache.thrift.TException {
        reqQryAccountregister_result result = new reqQryAccountregister_result();
        result.success = iface.reqQryAccountregister(args.pQryAccountregister, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryContractBank<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryContractBank_args> {
      public reqQryContractBank() {
        super("reqQryContractBank");
      }

      public reqQryContractBank_args getEmptyArgsInstance() {
        return new reqQryContractBank_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryContractBank_result getResult(I iface, reqQryContractBank_args args) throws org.apache.thrift.TException {
        reqQryContractBank_result result = new reqQryContractBank_result();
        result.success = iface.reqQryContractBank(args.pQryContractBank, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryParkedOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryParkedOrder_args> {
      public reqQryParkedOrder() {
        super("reqQryParkedOrder");
      }

      public reqQryParkedOrder_args getEmptyArgsInstance() {
        return new reqQryParkedOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryParkedOrder_result getResult(I iface, reqQryParkedOrder_args args) throws org.apache.thrift.TException {
        reqQryParkedOrder_result result = new reqQryParkedOrder_result();
        result.success = iface.reqQryParkedOrder(args.pQryParkedOrder, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryParkedOrderAction<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryParkedOrderAction_args> {
      public reqQryParkedOrderAction() {
        super("reqQryParkedOrderAction");
      }

      public reqQryParkedOrderAction_args getEmptyArgsInstance() {
        return new reqQryParkedOrderAction_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryParkedOrderAction_result getResult(I iface, reqQryParkedOrderAction_args args) throws org.apache.thrift.TException {
        reqQryParkedOrderAction_result result = new reqQryParkedOrderAction_result();
        result.success = iface.reqQryParkedOrderAction(args.pQryParkedOrderAction, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryTradingNotice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryTradingNotice_args> {
      public reqQryTradingNotice() {
        super("reqQryTradingNotice");
      }

      public reqQryTradingNotice_args getEmptyArgsInstance() {
        return new reqQryTradingNotice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryTradingNotice_result getResult(I iface, reqQryTradingNotice_args args) throws org.apache.thrift.TException {
        reqQryTradingNotice_result result = new reqQryTradingNotice_result();
        result.success = iface.reqQryTradingNotice(args.pQryTradingNotice, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryBrokerTradingParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryBrokerTradingParams_args> {
      public reqQryBrokerTradingParams() {
        super("reqQryBrokerTradingParams");
      }

      public reqQryBrokerTradingParams_args getEmptyArgsInstance() {
        return new reqQryBrokerTradingParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryBrokerTradingParams_result getResult(I iface, reqQryBrokerTradingParams_args args) throws org.apache.thrift.TException {
        reqQryBrokerTradingParams_result result = new reqQryBrokerTradingParams_result();
        result.success = iface.reqQryBrokerTradingParams(args.pQryBrokerTradingParams, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryBrokerTradingAlgos<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryBrokerTradingAlgos_args> {
      public reqQryBrokerTradingAlgos() {
        super("reqQryBrokerTradingAlgos");
      }

      public reqQryBrokerTradingAlgos_args getEmptyArgsInstance() {
        return new reqQryBrokerTradingAlgos_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryBrokerTradingAlgos_result getResult(I iface, reqQryBrokerTradingAlgos_args args) throws org.apache.thrift.TException {
        reqQryBrokerTradingAlgos_result result = new reqQryBrokerTradingAlgos_result();
        result.success = iface.reqQryBrokerTradingAlgos(args.pQryBrokerTradingAlgos, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQueryCFMMCTradingAccountToken<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQueryCFMMCTradingAccountToken_args> {
      public reqQueryCFMMCTradingAccountToken() {
        super("reqQueryCFMMCTradingAccountToken");
      }

      public reqQueryCFMMCTradingAccountToken_args getEmptyArgsInstance() {
        return new reqQueryCFMMCTradingAccountToken_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQueryCFMMCTradingAccountToken_result getResult(I iface, reqQueryCFMMCTradingAccountToken_args args) throws org.apache.thrift.TException {
        reqQueryCFMMCTradingAccountToken_result result = new reqQueryCFMMCTradingAccountToken_result();
        result.success = iface.reqQueryCFMMCTradingAccountToken(args.pQueryCFMMCTradingAccountToken, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqFromBankToFutureByFuture<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqFromBankToFutureByFuture_args> {
      public reqFromBankToFutureByFuture() {
        super("reqFromBankToFutureByFuture");
      }

      public reqFromBankToFutureByFuture_args getEmptyArgsInstance() {
        return new reqFromBankToFutureByFuture_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqFromBankToFutureByFuture_result getResult(I iface, reqFromBankToFutureByFuture_args args) throws org.apache.thrift.TException {
        reqFromBankToFutureByFuture_result result = new reqFromBankToFutureByFuture_result();
        result.success = iface.reqFromBankToFutureByFuture(args.pReqTransfer, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqFromFutureToBankByFuture<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqFromFutureToBankByFuture_args> {
      public reqFromFutureToBankByFuture() {
        super("reqFromFutureToBankByFuture");
      }

      public reqFromFutureToBankByFuture_args getEmptyArgsInstance() {
        return new reqFromFutureToBankByFuture_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqFromFutureToBankByFuture_result getResult(I iface, reqFromFutureToBankByFuture_args args) throws org.apache.thrift.TException {
        reqFromFutureToBankByFuture_result result = new reqFromFutureToBankByFuture_result();
        result.success = iface.reqFromFutureToBankByFuture(args.pReqTransfer, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQueryBankAccountMoneyByFuture<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQueryBankAccountMoneyByFuture_args> {
      public reqQueryBankAccountMoneyByFuture() {
        super("reqQueryBankAccountMoneyByFuture");
      }

      public reqQueryBankAccountMoneyByFuture_args getEmptyArgsInstance() {
        return new reqQueryBankAccountMoneyByFuture_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQueryBankAccountMoneyByFuture_result getResult(I iface, reqQueryBankAccountMoneyByFuture_args args) throws org.apache.thrift.TException {
        reqQueryBankAccountMoneyByFuture_result result = new reqQueryBankAccountMoneyByFuture_result();
        result.success = iface.reqQueryBankAccountMoneyByFuture(args.pReqQueryAccount, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("reqQryNotice", new reqQryNotice());
      processMap.put("reqQrySettlementInfoConfirm", new reqQrySettlementInfoConfirm());
      processMap.put("reqQryInvestorPositionCombineDetail", new reqQryInvestorPositionCombineDetail());
      processMap.put("reqQryCFMMCTradingAccountKey", new reqQryCFMMCTradingAccountKey());
      processMap.put("reqQryEWarrantOffset", new reqQryEWarrantOffset());
      processMap.put("reqQryInvestorProductGroupMargin", new reqQryInvestorProductGroupMargin());
      processMap.put("reqQryExchangeMarginRate", new reqQryExchangeMarginRate());
      processMap.put("reqQryExchangeMarginRateAdjust", new reqQryExchangeMarginRateAdjust());
      processMap.put("reqQryExchangeRate", new reqQryExchangeRate());
      processMap.put("reqQrySecAgentACIDMap", new reqQrySecAgentACIDMap());
      processMap.put("reqQryOptionInstrTradeCost", new reqQryOptionInstrTradeCost());
      processMap.put("reqQryOptionInstrCommRate", new reqQryOptionInstrCommRate());
      processMap.put("reqQryExecOrder", new reqQryExecOrder());
      processMap.put("reqQryForQuote", new reqQryForQuote());
      processMap.put("reqQryQuote", new reqQryQuote());
      processMap.put("reqQryTransferSerial", new reqQryTransferSerial());
      processMap.put("reqQryAccountregister", new reqQryAccountregister());
      processMap.put("reqQryContractBank", new reqQryContractBank());
      processMap.put("reqQryParkedOrder", new reqQryParkedOrder());
      processMap.put("reqQryParkedOrderAction", new reqQryParkedOrderAction());
      processMap.put("reqQryTradingNotice", new reqQryTradingNotice());
      processMap.put("reqQryBrokerTradingParams", new reqQryBrokerTradingParams());
      processMap.put("reqQryBrokerTradingAlgos", new reqQryBrokerTradingAlgos());
      processMap.put("reqQueryCFMMCTradingAccountToken", new reqQueryCFMMCTradingAccountToken());
      processMap.put("reqFromBankToFutureByFuture", new reqFromBankToFutureByFuture());
      processMap.put("reqFromFutureToBankByFuture", new reqFromFutureToBankByFuture());
      processMap.put("reqQueryBankAccountMoneyByFuture", new reqQueryBankAccountMoneyByFuture());
      return processMap;
    }

    public static class reqQryNotice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryNotice_args, Integer> {
      public reqQryNotice() {
        super("reqQryNotice");
      }

      public reqQryNotice_args getEmptyArgsInstance() {
        return new reqQryNotice_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryNotice_result result = new reqQryNotice_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryNotice_result result = new reqQryNotice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryNotice_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryNotice(args.pQryNotice, args.nRequestID,resultHandler);
      }
    }

    public static class reqQrySettlementInfoConfirm<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQrySettlementInfoConfirm_args, Integer> {
      public reqQrySettlementInfoConfirm() {
        super("reqQrySettlementInfoConfirm");
      }

      public reqQrySettlementInfoConfirm_args getEmptyArgsInstance() {
        return new reqQrySettlementInfoConfirm_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQrySettlementInfoConfirm_result result = new reqQrySettlementInfoConfirm_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQrySettlementInfoConfirm_result result = new reqQrySettlementInfoConfirm_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQrySettlementInfoConfirm_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQrySettlementInfoConfirm(args.pQrySettlementInfoConfirm, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryInvestorPositionCombineDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryInvestorPositionCombineDetail_args, Integer> {
      public reqQryInvestorPositionCombineDetail() {
        super("reqQryInvestorPositionCombineDetail");
      }

      public reqQryInvestorPositionCombineDetail_args getEmptyArgsInstance() {
        return new reqQryInvestorPositionCombineDetail_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryInvestorPositionCombineDetail_result result = new reqQryInvestorPositionCombineDetail_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryInvestorPositionCombineDetail_result result = new reqQryInvestorPositionCombineDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryInvestorPositionCombineDetail_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryInvestorPositionCombineDetail(args.pQryInvestorPositionCombineDetail, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryCFMMCTradingAccountKey<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryCFMMCTradingAccountKey_args, Integer> {
      public reqQryCFMMCTradingAccountKey() {
        super("reqQryCFMMCTradingAccountKey");
      }

      public reqQryCFMMCTradingAccountKey_args getEmptyArgsInstance() {
        return new reqQryCFMMCTradingAccountKey_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryCFMMCTradingAccountKey_result result = new reqQryCFMMCTradingAccountKey_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryCFMMCTradingAccountKey_result result = new reqQryCFMMCTradingAccountKey_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryCFMMCTradingAccountKey_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryCFMMCTradingAccountKey(args.pQryCFMMCTradingAccountKey, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryEWarrantOffset<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryEWarrantOffset_args, Integer> {
      public reqQryEWarrantOffset() {
        super("reqQryEWarrantOffset");
      }

      public reqQryEWarrantOffset_args getEmptyArgsInstance() {
        return new reqQryEWarrantOffset_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryEWarrantOffset_result result = new reqQryEWarrantOffset_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryEWarrantOffset_result result = new reqQryEWarrantOffset_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryEWarrantOffset_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryEWarrantOffset(args.pQryEWarrantOffset, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryInvestorProductGroupMargin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryInvestorProductGroupMargin_args, Integer> {
      public reqQryInvestorProductGroupMargin() {
        super("reqQryInvestorProductGroupMargin");
      }

      public reqQryInvestorProductGroupMargin_args getEmptyArgsInstance() {
        return new reqQryInvestorProductGroupMargin_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryInvestorProductGroupMargin_result result = new reqQryInvestorProductGroupMargin_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryInvestorProductGroupMargin_result result = new reqQryInvestorProductGroupMargin_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryInvestorProductGroupMargin_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryInvestorProductGroupMargin(args.pQryInvestorProductGroupMargin, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryExchangeMarginRate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryExchangeMarginRate_args, Integer> {
      public reqQryExchangeMarginRate() {
        super("reqQryExchangeMarginRate");
      }

      public reqQryExchangeMarginRate_args getEmptyArgsInstance() {
        return new reqQryExchangeMarginRate_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryExchangeMarginRate_result result = new reqQryExchangeMarginRate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryExchangeMarginRate_result result = new reqQryExchangeMarginRate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryExchangeMarginRate_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryExchangeMarginRate(args.pQryExchangeMarginRate, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryExchangeMarginRateAdjust<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryExchangeMarginRateAdjust_args, Integer> {
      public reqQryExchangeMarginRateAdjust() {
        super("reqQryExchangeMarginRateAdjust");
      }

      public reqQryExchangeMarginRateAdjust_args getEmptyArgsInstance() {
        return new reqQryExchangeMarginRateAdjust_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryExchangeMarginRateAdjust_result result = new reqQryExchangeMarginRateAdjust_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryExchangeMarginRateAdjust_result result = new reqQryExchangeMarginRateAdjust_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryExchangeMarginRateAdjust_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryExchangeMarginRateAdjust(args.pQryExchangeMarginRateAdjust, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryExchangeRate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryExchangeRate_args, Integer> {
      public reqQryExchangeRate() {
        super("reqQryExchangeRate");
      }

      public reqQryExchangeRate_args getEmptyArgsInstance() {
        return new reqQryExchangeRate_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryExchangeRate_result result = new reqQryExchangeRate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryExchangeRate_result result = new reqQryExchangeRate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryExchangeRate_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryExchangeRate(args.pQryExchangeRate, args.nRequestID,resultHandler);
      }
    }

    public static class reqQrySecAgentACIDMap<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQrySecAgentACIDMap_args, Integer> {
      public reqQrySecAgentACIDMap() {
        super("reqQrySecAgentACIDMap");
      }

      public reqQrySecAgentACIDMap_args getEmptyArgsInstance() {
        return new reqQrySecAgentACIDMap_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQrySecAgentACIDMap_result result = new reqQrySecAgentACIDMap_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQrySecAgentACIDMap_result result = new reqQrySecAgentACIDMap_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQrySecAgentACIDMap_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQrySecAgentACIDMap(args.pQrySecAgentACIDMap, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryOptionInstrTradeCost<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryOptionInstrTradeCost_args, Integer> {
      public reqQryOptionInstrTradeCost() {
        super("reqQryOptionInstrTradeCost");
      }

      public reqQryOptionInstrTradeCost_args getEmptyArgsInstance() {
        return new reqQryOptionInstrTradeCost_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryOptionInstrTradeCost_result result = new reqQryOptionInstrTradeCost_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryOptionInstrTradeCost_result result = new reqQryOptionInstrTradeCost_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryOptionInstrTradeCost_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryOptionInstrTradeCost(args.pQryOptionInstrTradeCost, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryOptionInstrCommRate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryOptionInstrCommRate_args, Integer> {
      public reqQryOptionInstrCommRate() {
        super("reqQryOptionInstrCommRate");
      }

      public reqQryOptionInstrCommRate_args getEmptyArgsInstance() {
        return new reqQryOptionInstrCommRate_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryOptionInstrCommRate_result result = new reqQryOptionInstrCommRate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryOptionInstrCommRate_result result = new reqQryOptionInstrCommRate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryOptionInstrCommRate_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryOptionInstrCommRate(args.pQryOptionInstrCommRate, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryExecOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryExecOrder_args, Integer> {
      public reqQryExecOrder() {
        super("reqQryExecOrder");
      }

      public reqQryExecOrder_args getEmptyArgsInstance() {
        return new reqQryExecOrder_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryExecOrder_result result = new reqQryExecOrder_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryExecOrder_result result = new reqQryExecOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryExecOrder_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryExecOrder(args.pQryExecOrder, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryForQuote<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryForQuote_args, Integer> {
      public reqQryForQuote() {
        super("reqQryForQuote");
      }

      public reqQryForQuote_args getEmptyArgsInstance() {
        return new reqQryForQuote_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryForQuote_result result = new reqQryForQuote_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryForQuote_result result = new reqQryForQuote_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryForQuote_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryForQuote(args.pQryForQuote, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryQuote<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryQuote_args, Integer> {
      public reqQryQuote() {
        super("reqQryQuote");
      }

      public reqQryQuote_args getEmptyArgsInstance() {
        return new reqQryQuote_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryQuote_result result = new reqQryQuote_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryQuote_result result = new reqQryQuote_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryQuote_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryQuote(args.pQryQuote, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryTransferSerial<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryTransferSerial_args, Integer> {
      public reqQryTransferSerial() {
        super("reqQryTransferSerial");
      }

      public reqQryTransferSerial_args getEmptyArgsInstance() {
        return new reqQryTransferSerial_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryTransferSerial_result result = new reqQryTransferSerial_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryTransferSerial_result result = new reqQryTransferSerial_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryTransferSerial_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryTransferSerial(args.pQryTransferSerial, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryAccountregister<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryAccountregister_args, Integer> {
      public reqQryAccountregister() {
        super("reqQryAccountregister");
      }

      public reqQryAccountregister_args getEmptyArgsInstance() {
        return new reqQryAccountregister_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryAccountregister_result result = new reqQryAccountregister_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryAccountregister_result result = new reqQryAccountregister_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryAccountregister_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryAccountregister(args.pQryAccountregister, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryContractBank<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryContractBank_args, Integer> {
      public reqQryContractBank() {
        super("reqQryContractBank");
      }

      public reqQryContractBank_args getEmptyArgsInstance() {
        return new reqQryContractBank_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryContractBank_result result = new reqQryContractBank_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryContractBank_result result = new reqQryContractBank_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryContractBank_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryContractBank(args.pQryContractBank, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryParkedOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryParkedOrder_args, Integer> {
      public reqQryParkedOrder() {
        super("reqQryParkedOrder");
      }

      public reqQryParkedOrder_args getEmptyArgsInstance() {
        return new reqQryParkedOrder_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryParkedOrder_result result = new reqQryParkedOrder_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryParkedOrder_result result = new reqQryParkedOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryParkedOrder_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryParkedOrder(args.pQryParkedOrder, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryParkedOrderAction<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryParkedOrderAction_args, Integer> {
      public reqQryParkedOrderAction() {
        super("reqQryParkedOrderAction");
      }

      public reqQryParkedOrderAction_args getEmptyArgsInstance() {
        return new reqQryParkedOrderAction_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryParkedOrderAction_result result = new reqQryParkedOrderAction_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryParkedOrderAction_result result = new reqQryParkedOrderAction_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryParkedOrderAction_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryParkedOrderAction(args.pQryParkedOrderAction, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryTradingNotice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryTradingNotice_args, Integer> {
      public reqQryTradingNotice() {
        super("reqQryTradingNotice");
      }

      public reqQryTradingNotice_args getEmptyArgsInstance() {
        return new reqQryTradingNotice_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryTradingNotice_result result = new reqQryTradingNotice_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryTradingNotice_result result = new reqQryTradingNotice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryTradingNotice_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryTradingNotice(args.pQryTradingNotice, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryBrokerTradingParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryBrokerTradingParams_args, Integer> {
      public reqQryBrokerTradingParams() {
        super("reqQryBrokerTradingParams");
      }

      public reqQryBrokerTradingParams_args getEmptyArgsInstance() {
        return new reqQryBrokerTradingParams_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryBrokerTradingParams_result result = new reqQryBrokerTradingParams_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryBrokerTradingParams_result result = new reqQryBrokerTradingParams_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryBrokerTradingParams_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryBrokerTradingParams(args.pQryBrokerTradingParams, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryBrokerTradingAlgos<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryBrokerTradingAlgos_args, Integer> {
      public reqQryBrokerTradingAlgos() {
        super("reqQryBrokerTradingAlgos");
      }

      public reqQryBrokerTradingAlgos_args getEmptyArgsInstance() {
        return new reqQryBrokerTradingAlgos_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryBrokerTradingAlgos_result result = new reqQryBrokerTradingAlgos_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryBrokerTradingAlgos_result result = new reqQryBrokerTradingAlgos_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryBrokerTradingAlgos_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryBrokerTradingAlgos(args.pQryBrokerTradingAlgos, args.nRequestID,resultHandler);
      }
    }

    public static class reqQueryCFMMCTradingAccountToken<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQueryCFMMCTradingAccountToken_args, Integer> {
      public reqQueryCFMMCTradingAccountToken() {
        super("reqQueryCFMMCTradingAccountToken");
      }

      public reqQueryCFMMCTradingAccountToken_args getEmptyArgsInstance() {
        return new reqQueryCFMMCTradingAccountToken_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQueryCFMMCTradingAccountToken_result result = new reqQueryCFMMCTradingAccountToken_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQueryCFMMCTradingAccountToken_result result = new reqQueryCFMMCTradingAccountToken_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQueryCFMMCTradingAccountToken_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQueryCFMMCTradingAccountToken(args.pQueryCFMMCTradingAccountToken, args.nRequestID,resultHandler);
      }
    }

    public static class reqFromBankToFutureByFuture<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqFromBankToFutureByFuture_args, Integer> {
      public reqFromBankToFutureByFuture() {
        super("reqFromBankToFutureByFuture");
      }

      public reqFromBankToFutureByFuture_args getEmptyArgsInstance() {
        return new reqFromBankToFutureByFuture_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqFromBankToFutureByFuture_result result = new reqFromBankToFutureByFuture_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqFromBankToFutureByFuture_result result = new reqFromBankToFutureByFuture_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqFromBankToFutureByFuture_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqFromBankToFutureByFuture(args.pReqTransfer, args.nRequestID,resultHandler);
      }
    }

    public static class reqFromFutureToBankByFuture<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqFromFutureToBankByFuture_args, Integer> {
      public reqFromFutureToBankByFuture() {
        super("reqFromFutureToBankByFuture");
      }

      public reqFromFutureToBankByFuture_args getEmptyArgsInstance() {
        return new reqFromFutureToBankByFuture_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqFromFutureToBankByFuture_result result = new reqFromFutureToBankByFuture_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqFromFutureToBankByFuture_result result = new reqFromFutureToBankByFuture_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqFromFutureToBankByFuture_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqFromFutureToBankByFuture(args.pReqTransfer, args.nRequestID,resultHandler);
      }
    }

    public static class reqQueryBankAccountMoneyByFuture<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQueryBankAccountMoneyByFuture_args, Integer> {
      public reqQueryBankAccountMoneyByFuture() {
        super("reqQueryBankAccountMoneyByFuture");
      }

      public reqQueryBankAccountMoneyByFuture_args getEmptyArgsInstance() {
        return new reqQueryBankAccountMoneyByFuture_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQueryBankAccountMoneyByFuture_result result = new reqQueryBankAccountMoneyByFuture_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQueryBankAccountMoneyByFuture_result result = new reqQueryBankAccountMoneyByFuture_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQueryBankAccountMoneyByFuture_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQueryBankAccountMoneyByFuture(args.pReqQueryAccount, args.nRequestID,resultHandler);
      }
    }

  }

  public static class reqQryNotice_args implements org.apache.thrift.TBase<reqQryNotice_args, reqQryNotice_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryNotice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryNotice_args");

    private static final org.apache.thrift.protocol.TField P_QRY_NOTICE_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryNotice", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryNotice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryNotice_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryNoticeField pQryNotice; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_NOTICE((short)1, "pQryNotice"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_NOTICE
            return P_QRY_NOTICE;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_NOTICE, new org.apache.thrift.meta_data.FieldMetaData("pQryNotice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryNoticeField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryNotice_args.class, metaDataMap);
    }

    public reqQryNotice_args() {
    }

    public reqQryNotice_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryNoticeField pQryNotice,
      int nRequestID)
    {
      this();
      this.pQryNotice = pQryNotice;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryNotice_args(reqQryNotice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryNotice()) {
        this.pQryNotice = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryNoticeField(other.pQryNotice);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryNotice_args deepCopy() {
      return new reqQryNotice_args(this);
    }

    @Override
    public void clear() {
      this.pQryNotice = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryNoticeField getPQryNotice() {
      return this.pQryNotice;
    }

    public reqQryNotice_args setPQryNotice(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryNoticeField pQryNotice) {
      this.pQryNotice = pQryNotice;
      return this;
    }

    public void unsetPQryNotice() {
      this.pQryNotice = null;
    }

    /** Returns true if field pQryNotice is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryNotice() {
      return this.pQryNotice != null;
    }

    public void setPQryNoticeIsSet(boolean value) {
      if (!value) {
        this.pQryNotice = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryNotice_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_NOTICE:
        if (value == null) {
          unsetPQryNotice();
        } else {
          setPQryNotice((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryNoticeField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_NOTICE:
        return getPQryNotice();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_NOTICE:
        return isSetPQryNotice();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryNotice_args)
        return this.equals((reqQryNotice_args)that);
      return false;
    }

    public boolean equals(reqQryNotice_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryNotice = true && this.isSetPQryNotice();
      boolean that_present_pQryNotice = true && that.isSetPQryNotice();
      if (this_present_pQryNotice || that_present_pQryNotice) {
        if (!(this_present_pQryNotice && that_present_pQryNotice))
          return false;
        if (!this.pQryNotice.equals(that.pQryNotice))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryNotice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryNotice()).compareTo(other.isSetPQryNotice());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryNotice()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryNotice, other.pQryNotice);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryNotice_args(");
      boolean first = true;

      sb.append("pQryNotice:");
      if (this.pQryNotice == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryNotice);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryNotice != null) {
        pQryNotice.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryNotice_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryNotice_argsStandardScheme getScheme() {
        return new reqQryNotice_argsStandardScheme();
      }
    }

    private static class reqQryNotice_argsStandardScheme extends StandardScheme<reqQryNotice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryNotice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_NOTICE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryNotice = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryNoticeField();
                struct.pQryNotice.read(iprot);
                struct.setPQryNoticeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryNotice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryNotice != null) {
          oprot.writeFieldBegin(P_QRY_NOTICE_FIELD_DESC);
          struct.pQryNotice.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryNotice_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryNotice_argsTupleScheme getScheme() {
        return new reqQryNotice_argsTupleScheme();
      }
    }

    private static class reqQryNotice_argsTupleScheme extends TupleScheme<reqQryNotice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryNotice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryNotice()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryNotice()) {
          struct.pQryNotice.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryNotice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryNotice = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryNoticeField();
          struct.pQryNotice.read(iprot);
          struct.setPQryNoticeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryNotice_result implements org.apache.thrift.TBase<reqQryNotice_result, reqQryNotice_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryNotice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryNotice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryNotice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryNotice_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryNotice_result.class, metaDataMap);
    }

    public reqQryNotice_result() {
    }

    public reqQryNotice_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryNotice_result(reqQryNotice_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryNotice_result deepCopy() {
      return new reqQryNotice_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryNotice_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryNotice_result)
        return this.equals((reqQryNotice_result)that);
      return false;
    }

    public boolean equals(reqQryNotice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryNotice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryNotice_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryNotice_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryNotice_resultStandardScheme getScheme() {
        return new reqQryNotice_resultStandardScheme();
      }
    }

    private static class reqQryNotice_resultStandardScheme extends StandardScheme<reqQryNotice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryNotice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryNotice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryNotice_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryNotice_resultTupleScheme getScheme() {
        return new reqQryNotice_resultTupleScheme();
      }
    }

    private static class reqQryNotice_resultTupleScheme extends TupleScheme<reqQryNotice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryNotice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryNotice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQrySettlementInfoConfirm_args implements org.apache.thrift.TBase<reqQrySettlementInfoConfirm_args, reqQrySettlementInfoConfirm_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQrySettlementInfoConfirm_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQrySettlementInfoConfirm_args");

    private static final org.apache.thrift.protocol.TField P_QRY_SETTLEMENT_INFO_CONFIRM_FIELD_DESC = new org.apache.thrift.protocol.TField("pQrySettlementInfoConfirm", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQrySettlementInfoConfirm_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQrySettlementInfoConfirm_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoConfirmField pQrySettlementInfoConfirm; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_SETTLEMENT_INFO_CONFIRM((short)1, "pQrySettlementInfoConfirm"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_SETTLEMENT_INFO_CONFIRM
            return P_QRY_SETTLEMENT_INFO_CONFIRM;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_SETTLEMENT_INFO_CONFIRM, new org.apache.thrift.meta_data.FieldMetaData("pQrySettlementInfoConfirm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoConfirmField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQrySettlementInfoConfirm_args.class, metaDataMap);
    }

    public reqQrySettlementInfoConfirm_args() {
    }

    public reqQrySettlementInfoConfirm_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoConfirmField pQrySettlementInfoConfirm,
      int nRequestID)
    {
      this();
      this.pQrySettlementInfoConfirm = pQrySettlementInfoConfirm;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQrySettlementInfoConfirm_args(reqQrySettlementInfoConfirm_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQrySettlementInfoConfirm()) {
        this.pQrySettlementInfoConfirm = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoConfirmField(other.pQrySettlementInfoConfirm);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQrySettlementInfoConfirm_args deepCopy() {
      return new reqQrySettlementInfoConfirm_args(this);
    }

    @Override
    public void clear() {
      this.pQrySettlementInfoConfirm = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoConfirmField getPQrySettlementInfoConfirm() {
      return this.pQrySettlementInfoConfirm;
    }

    public reqQrySettlementInfoConfirm_args setPQrySettlementInfoConfirm(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoConfirmField pQrySettlementInfoConfirm) {
      this.pQrySettlementInfoConfirm = pQrySettlementInfoConfirm;
      return this;
    }

    public void unsetPQrySettlementInfoConfirm() {
      this.pQrySettlementInfoConfirm = null;
    }

    /** Returns true if field pQrySettlementInfoConfirm is set (has been assigned a value) and false otherwise */
    public boolean isSetPQrySettlementInfoConfirm() {
      return this.pQrySettlementInfoConfirm != null;
    }

    public void setPQrySettlementInfoConfirmIsSet(boolean value) {
      if (!value) {
        this.pQrySettlementInfoConfirm = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQrySettlementInfoConfirm_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_SETTLEMENT_INFO_CONFIRM:
        if (value == null) {
          unsetPQrySettlementInfoConfirm();
        } else {
          setPQrySettlementInfoConfirm((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoConfirmField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_SETTLEMENT_INFO_CONFIRM:
        return getPQrySettlementInfoConfirm();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_SETTLEMENT_INFO_CONFIRM:
        return isSetPQrySettlementInfoConfirm();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQrySettlementInfoConfirm_args)
        return this.equals((reqQrySettlementInfoConfirm_args)that);
      return false;
    }

    public boolean equals(reqQrySettlementInfoConfirm_args that) {
      if (that == null)
        return false;

      boolean this_present_pQrySettlementInfoConfirm = true && this.isSetPQrySettlementInfoConfirm();
      boolean that_present_pQrySettlementInfoConfirm = true && that.isSetPQrySettlementInfoConfirm();
      if (this_present_pQrySettlementInfoConfirm || that_present_pQrySettlementInfoConfirm) {
        if (!(this_present_pQrySettlementInfoConfirm && that_present_pQrySettlementInfoConfirm))
          return false;
        if (!this.pQrySettlementInfoConfirm.equals(that.pQrySettlementInfoConfirm))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQrySettlementInfoConfirm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQrySettlementInfoConfirm()).compareTo(other.isSetPQrySettlementInfoConfirm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQrySettlementInfoConfirm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQrySettlementInfoConfirm, other.pQrySettlementInfoConfirm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQrySettlementInfoConfirm_args(");
      boolean first = true;

      sb.append("pQrySettlementInfoConfirm:");
      if (this.pQrySettlementInfoConfirm == null) {
        sb.append("null");
      } else {
        sb.append(this.pQrySettlementInfoConfirm);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQrySettlementInfoConfirm != null) {
        pQrySettlementInfoConfirm.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQrySettlementInfoConfirm_argsStandardSchemeFactory implements SchemeFactory {
      public reqQrySettlementInfoConfirm_argsStandardScheme getScheme() {
        return new reqQrySettlementInfoConfirm_argsStandardScheme();
      }
    }

    private static class reqQrySettlementInfoConfirm_argsStandardScheme extends StandardScheme<reqQrySettlementInfoConfirm_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQrySettlementInfoConfirm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_SETTLEMENT_INFO_CONFIRM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQrySettlementInfoConfirm = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoConfirmField();
                struct.pQrySettlementInfoConfirm.read(iprot);
                struct.setPQrySettlementInfoConfirmIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQrySettlementInfoConfirm_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQrySettlementInfoConfirm != null) {
          oprot.writeFieldBegin(P_QRY_SETTLEMENT_INFO_CONFIRM_FIELD_DESC);
          struct.pQrySettlementInfoConfirm.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQrySettlementInfoConfirm_argsTupleSchemeFactory implements SchemeFactory {
      public reqQrySettlementInfoConfirm_argsTupleScheme getScheme() {
        return new reqQrySettlementInfoConfirm_argsTupleScheme();
      }
    }

    private static class reqQrySettlementInfoConfirm_argsTupleScheme extends TupleScheme<reqQrySettlementInfoConfirm_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQrySettlementInfoConfirm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQrySettlementInfoConfirm()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQrySettlementInfoConfirm()) {
          struct.pQrySettlementInfoConfirm.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQrySettlementInfoConfirm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQrySettlementInfoConfirm = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoConfirmField();
          struct.pQrySettlementInfoConfirm.read(iprot);
          struct.setPQrySettlementInfoConfirmIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQrySettlementInfoConfirm_result implements org.apache.thrift.TBase<reqQrySettlementInfoConfirm_result, reqQrySettlementInfoConfirm_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQrySettlementInfoConfirm_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQrySettlementInfoConfirm_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQrySettlementInfoConfirm_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQrySettlementInfoConfirm_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQrySettlementInfoConfirm_result.class, metaDataMap);
    }

    public reqQrySettlementInfoConfirm_result() {
    }

    public reqQrySettlementInfoConfirm_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQrySettlementInfoConfirm_result(reqQrySettlementInfoConfirm_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQrySettlementInfoConfirm_result deepCopy() {
      return new reqQrySettlementInfoConfirm_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQrySettlementInfoConfirm_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQrySettlementInfoConfirm_result)
        return this.equals((reqQrySettlementInfoConfirm_result)that);
      return false;
    }

    public boolean equals(reqQrySettlementInfoConfirm_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQrySettlementInfoConfirm_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQrySettlementInfoConfirm_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQrySettlementInfoConfirm_resultStandardSchemeFactory implements SchemeFactory {
      public reqQrySettlementInfoConfirm_resultStandardScheme getScheme() {
        return new reqQrySettlementInfoConfirm_resultStandardScheme();
      }
    }

    private static class reqQrySettlementInfoConfirm_resultStandardScheme extends StandardScheme<reqQrySettlementInfoConfirm_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQrySettlementInfoConfirm_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQrySettlementInfoConfirm_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQrySettlementInfoConfirm_resultTupleSchemeFactory implements SchemeFactory {
      public reqQrySettlementInfoConfirm_resultTupleScheme getScheme() {
        return new reqQrySettlementInfoConfirm_resultTupleScheme();
      }
    }

    private static class reqQrySettlementInfoConfirm_resultTupleScheme extends TupleScheme<reqQrySettlementInfoConfirm_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQrySettlementInfoConfirm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQrySettlementInfoConfirm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryInvestorPositionCombineDetail_args implements org.apache.thrift.TBase<reqQryInvestorPositionCombineDetail_args, reqQryInvestorPositionCombineDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryInvestorPositionCombineDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryInvestorPositionCombineDetail_args");

    private static final org.apache.thrift.protocol.TField P_QRY_INVESTOR_POSITION_COMBINE_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryInvestorPositionCombineDetail", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryInvestorPositionCombineDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryInvestorPositionCombineDetail_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionCombineDetailField pQryInvestorPositionCombineDetail; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_INVESTOR_POSITION_COMBINE_DETAIL((short)1, "pQryInvestorPositionCombineDetail"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_INVESTOR_POSITION_COMBINE_DETAIL
            return P_QRY_INVESTOR_POSITION_COMBINE_DETAIL;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_INVESTOR_POSITION_COMBINE_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("pQryInvestorPositionCombineDetail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionCombineDetailField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryInvestorPositionCombineDetail_args.class, metaDataMap);
    }

    public reqQryInvestorPositionCombineDetail_args() {
    }

    public reqQryInvestorPositionCombineDetail_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionCombineDetailField pQryInvestorPositionCombineDetail,
      int nRequestID)
    {
      this();
      this.pQryInvestorPositionCombineDetail = pQryInvestorPositionCombineDetail;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryInvestorPositionCombineDetail_args(reqQryInvestorPositionCombineDetail_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryInvestorPositionCombineDetail()) {
        this.pQryInvestorPositionCombineDetail = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionCombineDetailField(other.pQryInvestorPositionCombineDetail);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryInvestorPositionCombineDetail_args deepCopy() {
      return new reqQryInvestorPositionCombineDetail_args(this);
    }

    @Override
    public void clear() {
      this.pQryInvestorPositionCombineDetail = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionCombineDetailField getPQryInvestorPositionCombineDetail() {
      return this.pQryInvestorPositionCombineDetail;
    }

    public reqQryInvestorPositionCombineDetail_args setPQryInvestorPositionCombineDetail(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionCombineDetailField pQryInvestorPositionCombineDetail) {
      this.pQryInvestorPositionCombineDetail = pQryInvestorPositionCombineDetail;
      return this;
    }

    public void unsetPQryInvestorPositionCombineDetail() {
      this.pQryInvestorPositionCombineDetail = null;
    }

    /** Returns true if field pQryInvestorPositionCombineDetail is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryInvestorPositionCombineDetail() {
      return this.pQryInvestorPositionCombineDetail != null;
    }

    public void setPQryInvestorPositionCombineDetailIsSet(boolean value) {
      if (!value) {
        this.pQryInvestorPositionCombineDetail = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryInvestorPositionCombineDetail_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_INVESTOR_POSITION_COMBINE_DETAIL:
        if (value == null) {
          unsetPQryInvestorPositionCombineDetail();
        } else {
          setPQryInvestorPositionCombineDetail((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionCombineDetailField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_INVESTOR_POSITION_COMBINE_DETAIL:
        return getPQryInvestorPositionCombineDetail();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_INVESTOR_POSITION_COMBINE_DETAIL:
        return isSetPQryInvestorPositionCombineDetail();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryInvestorPositionCombineDetail_args)
        return this.equals((reqQryInvestorPositionCombineDetail_args)that);
      return false;
    }

    public boolean equals(reqQryInvestorPositionCombineDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryInvestorPositionCombineDetail = true && this.isSetPQryInvestorPositionCombineDetail();
      boolean that_present_pQryInvestorPositionCombineDetail = true && that.isSetPQryInvestorPositionCombineDetail();
      if (this_present_pQryInvestorPositionCombineDetail || that_present_pQryInvestorPositionCombineDetail) {
        if (!(this_present_pQryInvestorPositionCombineDetail && that_present_pQryInvestorPositionCombineDetail))
          return false;
        if (!this.pQryInvestorPositionCombineDetail.equals(that.pQryInvestorPositionCombineDetail))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryInvestorPositionCombineDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryInvestorPositionCombineDetail()).compareTo(other.isSetPQryInvestorPositionCombineDetail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryInvestorPositionCombineDetail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryInvestorPositionCombineDetail, other.pQryInvestorPositionCombineDetail);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryInvestorPositionCombineDetail_args(");
      boolean first = true;

      sb.append("pQryInvestorPositionCombineDetail:");
      if (this.pQryInvestorPositionCombineDetail == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryInvestorPositionCombineDetail);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryInvestorPositionCombineDetail != null) {
        pQryInvestorPositionCombineDetail.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryInvestorPositionCombineDetail_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryInvestorPositionCombineDetail_argsStandardScheme getScheme() {
        return new reqQryInvestorPositionCombineDetail_argsStandardScheme();
      }
    }

    private static class reqQryInvestorPositionCombineDetail_argsStandardScheme extends StandardScheme<reqQryInvestorPositionCombineDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryInvestorPositionCombineDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_INVESTOR_POSITION_COMBINE_DETAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryInvestorPositionCombineDetail = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionCombineDetailField();
                struct.pQryInvestorPositionCombineDetail.read(iprot);
                struct.setPQryInvestorPositionCombineDetailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryInvestorPositionCombineDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryInvestorPositionCombineDetail != null) {
          oprot.writeFieldBegin(P_QRY_INVESTOR_POSITION_COMBINE_DETAIL_FIELD_DESC);
          struct.pQryInvestorPositionCombineDetail.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryInvestorPositionCombineDetail_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryInvestorPositionCombineDetail_argsTupleScheme getScheme() {
        return new reqQryInvestorPositionCombineDetail_argsTupleScheme();
      }
    }

    private static class reqQryInvestorPositionCombineDetail_argsTupleScheme extends TupleScheme<reqQryInvestorPositionCombineDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryInvestorPositionCombineDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryInvestorPositionCombineDetail()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryInvestorPositionCombineDetail()) {
          struct.pQryInvestorPositionCombineDetail.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryInvestorPositionCombineDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryInvestorPositionCombineDetail = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionCombineDetailField();
          struct.pQryInvestorPositionCombineDetail.read(iprot);
          struct.setPQryInvestorPositionCombineDetailIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryInvestorPositionCombineDetail_result implements org.apache.thrift.TBase<reqQryInvestorPositionCombineDetail_result, reqQryInvestorPositionCombineDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryInvestorPositionCombineDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryInvestorPositionCombineDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryInvestorPositionCombineDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryInvestorPositionCombineDetail_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryInvestorPositionCombineDetail_result.class, metaDataMap);
    }

    public reqQryInvestorPositionCombineDetail_result() {
    }

    public reqQryInvestorPositionCombineDetail_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryInvestorPositionCombineDetail_result(reqQryInvestorPositionCombineDetail_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryInvestorPositionCombineDetail_result deepCopy() {
      return new reqQryInvestorPositionCombineDetail_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryInvestorPositionCombineDetail_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryInvestorPositionCombineDetail_result)
        return this.equals((reqQryInvestorPositionCombineDetail_result)that);
      return false;
    }

    public boolean equals(reqQryInvestorPositionCombineDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryInvestorPositionCombineDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryInvestorPositionCombineDetail_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryInvestorPositionCombineDetail_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryInvestorPositionCombineDetail_resultStandardScheme getScheme() {
        return new reqQryInvestorPositionCombineDetail_resultStandardScheme();
      }
    }

    private static class reqQryInvestorPositionCombineDetail_resultStandardScheme extends StandardScheme<reqQryInvestorPositionCombineDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryInvestorPositionCombineDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryInvestorPositionCombineDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryInvestorPositionCombineDetail_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryInvestorPositionCombineDetail_resultTupleScheme getScheme() {
        return new reqQryInvestorPositionCombineDetail_resultTupleScheme();
      }
    }

    private static class reqQryInvestorPositionCombineDetail_resultTupleScheme extends TupleScheme<reqQryInvestorPositionCombineDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryInvestorPositionCombineDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryInvestorPositionCombineDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryCFMMCTradingAccountKey_args implements org.apache.thrift.TBase<reqQryCFMMCTradingAccountKey_args, reqQryCFMMCTradingAccountKey_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryCFMMCTradingAccountKey_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryCFMMCTradingAccountKey_args");

    private static final org.apache.thrift.protocol.TField P_QRY_CFMMCTRADING_ACCOUNT_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryCFMMCTradingAccountKey", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryCFMMCTradingAccountKey_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryCFMMCTradingAccountKey_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryCFMMCTradingAccountKeyField pQryCFMMCTradingAccountKey; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_CFMMCTRADING_ACCOUNT_KEY((short)1, "pQryCFMMCTradingAccountKey"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_CFMMCTRADING_ACCOUNT_KEY
            return P_QRY_CFMMCTRADING_ACCOUNT_KEY;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_CFMMCTRADING_ACCOUNT_KEY, new org.apache.thrift.meta_data.FieldMetaData("pQryCFMMCTradingAccountKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryCFMMCTradingAccountKeyField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryCFMMCTradingAccountKey_args.class, metaDataMap);
    }

    public reqQryCFMMCTradingAccountKey_args() {
    }

    public reqQryCFMMCTradingAccountKey_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryCFMMCTradingAccountKeyField pQryCFMMCTradingAccountKey,
      int nRequestID)
    {
      this();
      this.pQryCFMMCTradingAccountKey = pQryCFMMCTradingAccountKey;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryCFMMCTradingAccountKey_args(reqQryCFMMCTradingAccountKey_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryCFMMCTradingAccountKey()) {
        this.pQryCFMMCTradingAccountKey = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryCFMMCTradingAccountKeyField(other.pQryCFMMCTradingAccountKey);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryCFMMCTradingAccountKey_args deepCopy() {
      return new reqQryCFMMCTradingAccountKey_args(this);
    }

    @Override
    public void clear() {
      this.pQryCFMMCTradingAccountKey = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryCFMMCTradingAccountKeyField getPQryCFMMCTradingAccountKey() {
      return this.pQryCFMMCTradingAccountKey;
    }

    public reqQryCFMMCTradingAccountKey_args setPQryCFMMCTradingAccountKey(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryCFMMCTradingAccountKeyField pQryCFMMCTradingAccountKey) {
      this.pQryCFMMCTradingAccountKey = pQryCFMMCTradingAccountKey;
      return this;
    }

    public void unsetPQryCFMMCTradingAccountKey() {
      this.pQryCFMMCTradingAccountKey = null;
    }

    /** Returns true if field pQryCFMMCTradingAccountKey is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryCFMMCTradingAccountKey() {
      return this.pQryCFMMCTradingAccountKey != null;
    }

    public void setPQryCFMMCTradingAccountKeyIsSet(boolean value) {
      if (!value) {
        this.pQryCFMMCTradingAccountKey = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryCFMMCTradingAccountKey_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_CFMMCTRADING_ACCOUNT_KEY:
        if (value == null) {
          unsetPQryCFMMCTradingAccountKey();
        } else {
          setPQryCFMMCTradingAccountKey((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryCFMMCTradingAccountKeyField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_CFMMCTRADING_ACCOUNT_KEY:
        return getPQryCFMMCTradingAccountKey();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_CFMMCTRADING_ACCOUNT_KEY:
        return isSetPQryCFMMCTradingAccountKey();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryCFMMCTradingAccountKey_args)
        return this.equals((reqQryCFMMCTradingAccountKey_args)that);
      return false;
    }

    public boolean equals(reqQryCFMMCTradingAccountKey_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryCFMMCTradingAccountKey = true && this.isSetPQryCFMMCTradingAccountKey();
      boolean that_present_pQryCFMMCTradingAccountKey = true && that.isSetPQryCFMMCTradingAccountKey();
      if (this_present_pQryCFMMCTradingAccountKey || that_present_pQryCFMMCTradingAccountKey) {
        if (!(this_present_pQryCFMMCTradingAccountKey && that_present_pQryCFMMCTradingAccountKey))
          return false;
        if (!this.pQryCFMMCTradingAccountKey.equals(that.pQryCFMMCTradingAccountKey))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryCFMMCTradingAccountKey_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryCFMMCTradingAccountKey()).compareTo(other.isSetPQryCFMMCTradingAccountKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryCFMMCTradingAccountKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryCFMMCTradingAccountKey, other.pQryCFMMCTradingAccountKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryCFMMCTradingAccountKey_args(");
      boolean first = true;

      sb.append("pQryCFMMCTradingAccountKey:");
      if (this.pQryCFMMCTradingAccountKey == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryCFMMCTradingAccountKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryCFMMCTradingAccountKey != null) {
        pQryCFMMCTradingAccountKey.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryCFMMCTradingAccountKey_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryCFMMCTradingAccountKey_argsStandardScheme getScheme() {
        return new reqQryCFMMCTradingAccountKey_argsStandardScheme();
      }
    }

    private static class reqQryCFMMCTradingAccountKey_argsStandardScheme extends StandardScheme<reqQryCFMMCTradingAccountKey_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryCFMMCTradingAccountKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_CFMMCTRADING_ACCOUNT_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryCFMMCTradingAccountKey = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryCFMMCTradingAccountKeyField();
                struct.pQryCFMMCTradingAccountKey.read(iprot);
                struct.setPQryCFMMCTradingAccountKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryCFMMCTradingAccountKey_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryCFMMCTradingAccountKey != null) {
          oprot.writeFieldBegin(P_QRY_CFMMCTRADING_ACCOUNT_KEY_FIELD_DESC);
          struct.pQryCFMMCTradingAccountKey.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryCFMMCTradingAccountKey_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryCFMMCTradingAccountKey_argsTupleScheme getScheme() {
        return new reqQryCFMMCTradingAccountKey_argsTupleScheme();
      }
    }

    private static class reqQryCFMMCTradingAccountKey_argsTupleScheme extends TupleScheme<reqQryCFMMCTradingAccountKey_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryCFMMCTradingAccountKey_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryCFMMCTradingAccountKey()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryCFMMCTradingAccountKey()) {
          struct.pQryCFMMCTradingAccountKey.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryCFMMCTradingAccountKey_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryCFMMCTradingAccountKey = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryCFMMCTradingAccountKeyField();
          struct.pQryCFMMCTradingAccountKey.read(iprot);
          struct.setPQryCFMMCTradingAccountKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryCFMMCTradingAccountKey_result implements org.apache.thrift.TBase<reqQryCFMMCTradingAccountKey_result, reqQryCFMMCTradingAccountKey_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryCFMMCTradingAccountKey_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryCFMMCTradingAccountKey_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryCFMMCTradingAccountKey_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryCFMMCTradingAccountKey_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryCFMMCTradingAccountKey_result.class, metaDataMap);
    }

    public reqQryCFMMCTradingAccountKey_result() {
    }

    public reqQryCFMMCTradingAccountKey_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryCFMMCTradingAccountKey_result(reqQryCFMMCTradingAccountKey_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryCFMMCTradingAccountKey_result deepCopy() {
      return new reqQryCFMMCTradingAccountKey_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryCFMMCTradingAccountKey_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryCFMMCTradingAccountKey_result)
        return this.equals((reqQryCFMMCTradingAccountKey_result)that);
      return false;
    }

    public boolean equals(reqQryCFMMCTradingAccountKey_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryCFMMCTradingAccountKey_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryCFMMCTradingAccountKey_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryCFMMCTradingAccountKey_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryCFMMCTradingAccountKey_resultStandardScheme getScheme() {
        return new reqQryCFMMCTradingAccountKey_resultStandardScheme();
      }
    }

    private static class reqQryCFMMCTradingAccountKey_resultStandardScheme extends StandardScheme<reqQryCFMMCTradingAccountKey_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryCFMMCTradingAccountKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryCFMMCTradingAccountKey_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryCFMMCTradingAccountKey_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryCFMMCTradingAccountKey_resultTupleScheme getScheme() {
        return new reqQryCFMMCTradingAccountKey_resultTupleScheme();
      }
    }

    private static class reqQryCFMMCTradingAccountKey_resultTupleScheme extends TupleScheme<reqQryCFMMCTradingAccountKey_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryCFMMCTradingAccountKey_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryCFMMCTradingAccountKey_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryEWarrantOffset_args implements org.apache.thrift.TBase<reqQryEWarrantOffset_args, reqQryEWarrantOffset_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryEWarrantOffset_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryEWarrantOffset_args");

    private static final org.apache.thrift.protocol.TField P_QRY_EWARRANT_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryEWarrantOffset", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryEWarrantOffset_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryEWarrantOffset_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryEWarrantOffsetField pQryEWarrantOffset; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_EWARRANT_OFFSET((short)1, "pQryEWarrantOffset"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_EWARRANT_OFFSET
            return P_QRY_EWARRANT_OFFSET;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_EWARRANT_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("pQryEWarrantOffset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryEWarrantOffsetField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryEWarrantOffset_args.class, metaDataMap);
    }

    public reqQryEWarrantOffset_args() {
    }

    public reqQryEWarrantOffset_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryEWarrantOffsetField pQryEWarrantOffset,
      int nRequestID)
    {
      this();
      this.pQryEWarrantOffset = pQryEWarrantOffset;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryEWarrantOffset_args(reqQryEWarrantOffset_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryEWarrantOffset()) {
        this.pQryEWarrantOffset = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryEWarrantOffsetField(other.pQryEWarrantOffset);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryEWarrantOffset_args deepCopy() {
      return new reqQryEWarrantOffset_args(this);
    }

    @Override
    public void clear() {
      this.pQryEWarrantOffset = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryEWarrantOffsetField getPQryEWarrantOffset() {
      return this.pQryEWarrantOffset;
    }

    public reqQryEWarrantOffset_args setPQryEWarrantOffset(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryEWarrantOffsetField pQryEWarrantOffset) {
      this.pQryEWarrantOffset = pQryEWarrantOffset;
      return this;
    }

    public void unsetPQryEWarrantOffset() {
      this.pQryEWarrantOffset = null;
    }

    /** Returns true if field pQryEWarrantOffset is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryEWarrantOffset() {
      return this.pQryEWarrantOffset != null;
    }

    public void setPQryEWarrantOffsetIsSet(boolean value) {
      if (!value) {
        this.pQryEWarrantOffset = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryEWarrantOffset_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_EWARRANT_OFFSET:
        if (value == null) {
          unsetPQryEWarrantOffset();
        } else {
          setPQryEWarrantOffset((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryEWarrantOffsetField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_EWARRANT_OFFSET:
        return getPQryEWarrantOffset();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_EWARRANT_OFFSET:
        return isSetPQryEWarrantOffset();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryEWarrantOffset_args)
        return this.equals((reqQryEWarrantOffset_args)that);
      return false;
    }

    public boolean equals(reqQryEWarrantOffset_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryEWarrantOffset = true && this.isSetPQryEWarrantOffset();
      boolean that_present_pQryEWarrantOffset = true && that.isSetPQryEWarrantOffset();
      if (this_present_pQryEWarrantOffset || that_present_pQryEWarrantOffset) {
        if (!(this_present_pQryEWarrantOffset && that_present_pQryEWarrantOffset))
          return false;
        if (!this.pQryEWarrantOffset.equals(that.pQryEWarrantOffset))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryEWarrantOffset_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryEWarrantOffset()).compareTo(other.isSetPQryEWarrantOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryEWarrantOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryEWarrantOffset, other.pQryEWarrantOffset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryEWarrantOffset_args(");
      boolean first = true;

      sb.append("pQryEWarrantOffset:");
      if (this.pQryEWarrantOffset == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryEWarrantOffset);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryEWarrantOffset != null) {
        pQryEWarrantOffset.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryEWarrantOffset_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryEWarrantOffset_argsStandardScheme getScheme() {
        return new reqQryEWarrantOffset_argsStandardScheme();
      }
    }

    private static class reqQryEWarrantOffset_argsStandardScheme extends StandardScheme<reqQryEWarrantOffset_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryEWarrantOffset_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_EWARRANT_OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryEWarrantOffset = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryEWarrantOffsetField();
                struct.pQryEWarrantOffset.read(iprot);
                struct.setPQryEWarrantOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryEWarrantOffset_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryEWarrantOffset != null) {
          oprot.writeFieldBegin(P_QRY_EWARRANT_OFFSET_FIELD_DESC);
          struct.pQryEWarrantOffset.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryEWarrantOffset_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryEWarrantOffset_argsTupleScheme getScheme() {
        return new reqQryEWarrantOffset_argsTupleScheme();
      }
    }

    private static class reqQryEWarrantOffset_argsTupleScheme extends TupleScheme<reqQryEWarrantOffset_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryEWarrantOffset_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryEWarrantOffset()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryEWarrantOffset()) {
          struct.pQryEWarrantOffset.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryEWarrantOffset_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryEWarrantOffset = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryEWarrantOffsetField();
          struct.pQryEWarrantOffset.read(iprot);
          struct.setPQryEWarrantOffsetIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryEWarrantOffset_result implements org.apache.thrift.TBase<reqQryEWarrantOffset_result, reqQryEWarrantOffset_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryEWarrantOffset_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryEWarrantOffset_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryEWarrantOffset_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryEWarrantOffset_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryEWarrantOffset_result.class, metaDataMap);
    }

    public reqQryEWarrantOffset_result() {
    }

    public reqQryEWarrantOffset_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryEWarrantOffset_result(reqQryEWarrantOffset_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryEWarrantOffset_result deepCopy() {
      return new reqQryEWarrantOffset_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryEWarrantOffset_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryEWarrantOffset_result)
        return this.equals((reqQryEWarrantOffset_result)that);
      return false;
    }

    public boolean equals(reqQryEWarrantOffset_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryEWarrantOffset_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryEWarrantOffset_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryEWarrantOffset_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryEWarrantOffset_resultStandardScheme getScheme() {
        return new reqQryEWarrantOffset_resultStandardScheme();
      }
    }

    private static class reqQryEWarrantOffset_resultStandardScheme extends StandardScheme<reqQryEWarrantOffset_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryEWarrantOffset_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryEWarrantOffset_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryEWarrantOffset_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryEWarrantOffset_resultTupleScheme getScheme() {
        return new reqQryEWarrantOffset_resultTupleScheme();
      }
    }

    private static class reqQryEWarrantOffset_resultTupleScheme extends TupleScheme<reqQryEWarrantOffset_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryEWarrantOffset_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryEWarrantOffset_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryInvestorProductGroupMargin_args implements org.apache.thrift.TBase<reqQryInvestorProductGroupMargin_args, reqQryInvestorProductGroupMargin_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryInvestorProductGroupMargin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryInvestorProductGroupMargin_args");

    private static final org.apache.thrift.protocol.TField P_QRY_INVESTOR_PRODUCT_GROUP_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryInvestorProductGroupMargin", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryInvestorProductGroupMargin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryInvestorProductGroupMargin_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorProductGroupMarginField pQryInvestorProductGroupMargin; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_INVESTOR_PRODUCT_GROUP_MARGIN((short)1, "pQryInvestorProductGroupMargin"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_INVESTOR_PRODUCT_GROUP_MARGIN
            return P_QRY_INVESTOR_PRODUCT_GROUP_MARGIN;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_INVESTOR_PRODUCT_GROUP_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("pQryInvestorProductGroupMargin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorProductGroupMarginField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryInvestorProductGroupMargin_args.class, metaDataMap);
    }

    public reqQryInvestorProductGroupMargin_args() {
    }

    public reqQryInvestorProductGroupMargin_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorProductGroupMarginField pQryInvestorProductGroupMargin,
      int nRequestID)
    {
      this();
      this.pQryInvestorProductGroupMargin = pQryInvestorProductGroupMargin;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryInvestorProductGroupMargin_args(reqQryInvestorProductGroupMargin_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryInvestorProductGroupMargin()) {
        this.pQryInvestorProductGroupMargin = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorProductGroupMarginField(other.pQryInvestorProductGroupMargin);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryInvestorProductGroupMargin_args deepCopy() {
      return new reqQryInvestorProductGroupMargin_args(this);
    }

    @Override
    public void clear() {
      this.pQryInvestorProductGroupMargin = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorProductGroupMarginField getPQryInvestorProductGroupMargin() {
      return this.pQryInvestorProductGroupMargin;
    }

    public reqQryInvestorProductGroupMargin_args setPQryInvestorProductGroupMargin(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorProductGroupMarginField pQryInvestorProductGroupMargin) {
      this.pQryInvestorProductGroupMargin = pQryInvestorProductGroupMargin;
      return this;
    }

    public void unsetPQryInvestorProductGroupMargin() {
      this.pQryInvestorProductGroupMargin = null;
    }

    /** Returns true if field pQryInvestorProductGroupMargin is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryInvestorProductGroupMargin() {
      return this.pQryInvestorProductGroupMargin != null;
    }

    public void setPQryInvestorProductGroupMarginIsSet(boolean value) {
      if (!value) {
        this.pQryInvestorProductGroupMargin = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryInvestorProductGroupMargin_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_INVESTOR_PRODUCT_GROUP_MARGIN:
        if (value == null) {
          unsetPQryInvestorProductGroupMargin();
        } else {
          setPQryInvestorProductGroupMargin((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorProductGroupMarginField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_INVESTOR_PRODUCT_GROUP_MARGIN:
        return getPQryInvestorProductGroupMargin();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_INVESTOR_PRODUCT_GROUP_MARGIN:
        return isSetPQryInvestorProductGroupMargin();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryInvestorProductGroupMargin_args)
        return this.equals((reqQryInvestorProductGroupMargin_args)that);
      return false;
    }

    public boolean equals(reqQryInvestorProductGroupMargin_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryInvestorProductGroupMargin = true && this.isSetPQryInvestorProductGroupMargin();
      boolean that_present_pQryInvestorProductGroupMargin = true && that.isSetPQryInvestorProductGroupMargin();
      if (this_present_pQryInvestorProductGroupMargin || that_present_pQryInvestorProductGroupMargin) {
        if (!(this_present_pQryInvestorProductGroupMargin && that_present_pQryInvestorProductGroupMargin))
          return false;
        if (!this.pQryInvestorProductGroupMargin.equals(that.pQryInvestorProductGroupMargin))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryInvestorProductGroupMargin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryInvestorProductGroupMargin()).compareTo(other.isSetPQryInvestorProductGroupMargin());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryInvestorProductGroupMargin()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryInvestorProductGroupMargin, other.pQryInvestorProductGroupMargin);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryInvestorProductGroupMargin_args(");
      boolean first = true;

      sb.append("pQryInvestorProductGroupMargin:");
      if (this.pQryInvestorProductGroupMargin == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryInvestorProductGroupMargin);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryInvestorProductGroupMargin != null) {
        pQryInvestorProductGroupMargin.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryInvestorProductGroupMargin_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryInvestorProductGroupMargin_argsStandardScheme getScheme() {
        return new reqQryInvestorProductGroupMargin_argsStandardScheme();
      }
    }

    private static class reqQryInvestorProductGroupMargin_argsStandardScheme extends StandardScheme<reqQryInvestorProductGroupMargin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryInvestorProductGroupMargin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_INVESTOR_PRODUCT_GROUP_MARGIN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryInvestorProductGroupMargin = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorProductGroupMarginField();
                struct.pQryInvestorProductGroupMargin.read(iprot);
                struct.setPQryInvestorProductGroupMarginIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryInvestorProductGroupMargin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryInvestorProductGroupMargin != null) {
          oprot.writeFieldBegin(P_QRY_INVESTOR_PRODUCT_GROUP_MARGIN_FIELD_DESC);
          struct.pQryInvestorProductGroupMargin.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryInvestorProductGroupMargin_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryInvestorProductGroupMargin_argsTupleScheme getScheme() {
        return new reqQryInvestorProductGroupMargin_argsTupleScheme();
      }
    }

    private static class reqQryInvestorProductGroupMargin_argsTupleScheme extends TupleScheme<reqQryInvestorProductGroupMargin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryInvestorProductGroupMargin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryInvestorProductGroupMargin()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryInvestorProductGroupMargin()) {
          struct.pQryInvestorProductGroupMargin.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryInvestorProductGroupMargin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryInvestorProductGroupMargin = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorProductGroupMarginField();
          struct.pQryInvestorProductGroupMargin.read(iprot);
          struct.setPQryInvestorProductGroupMarginIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryInvestorProductGroupMargin_result implements org.apache.thrift.TBase<reqQryInvestorProductGroupMargin_result, reqQryInvestorProductGroupMargin_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryInvestorProductGroupMargin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryInvestorProductGroupMargin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryInvestorProductGroupMargin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryInvestorProductGroupMargin_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryInvestorProductGroupMargin_result.class, metaDataMap);
    }

    public reqQryInvestorProductGroupMargin_result() {
    }

    public reqQryInvestorProductGroupMargin_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryInvestorProductGroupMargin_result(reqQryInvestorProductGroupMargin_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryInvestorProductGroupMargin_result deepCopy() {
      return new reqQryInvestorProductGroupMargin_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryInvestorProductGroupMargin_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryInvestorProductGroupMargin_result)
        return this.equals((reqQryInvestorProductGroupMargin_result)that);
      return false;
    }

    public boolean equals(reqQryInvestorProductGroupMargin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryInvestorProductGroupMargin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryInvestorProductGroupMargin_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryInvestorProductGroupMargin_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryInvestorProductGroupMargin_resultStandardScheme getScheme() {
        return new reqQryInvestorProductGroupMargin_resultStandardScheme();
      }
    }

    private static class reqQryInvestorProductGroupMargin_resultStandardScheme extends StandardScheme<reqQryInvestorProductGroupMargin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryInvestorProductGroupMargin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryInvestorProductGroupMargin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryInvestorProductGroupMargin_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryInvestorProductGroupMargin_resultTupleScheme getScheme() {
        return new reqQryInvestorProductGroupMargin_resultTupleScheme();
      }
    }

    private static class reqQryInvestorProductGroupMargin_resultTupleScheme extends TupleScheme<reqQryInvestorProductGroupMargin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryInvestorProductGroupMargin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryInvestorProductGroupMargin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryExchangeMarginRate_args implements org.apache.thrift.TBase<reqQryExchangeMarginRate_args, reqQryExchangeMarginRate_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryExchangeMarginRate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryExchangeMarginRate_args");

    private static final org.apache.thrift.protocol.TField P_QRY_EXCHANGE_MARGIN_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryExchangeMarginRate", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryExchangeMarginRate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryExchangeMarginRate_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateField pQryExchangeMarginRate; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_EXCHANGE_MARGIN_RATE((short)1, "pQryExchangeMarginRate"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_EXCHANGE_MARGIN_RATE
            return P_QRY_EXCHANGE_MARGIN_RATE;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_EXCHANGE_MARGIN_RATE, new org.apache.thrift.meta_data.FieldMetaData("pQryExchangeMarginRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryExchangeMarginRate_args.class, metaDataMap);
    }

    public reqQryExchangeMarginRate_args() {
    }

    public reqQryExchangeMarginRate_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateField pQryExchangeMarginRate,
      int nRequestID)
    {
      this();
      this.pQryExchangeMarginRate = pQryExchangeMarginRate;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryExchangeMarginRate_args(reqQryExchangeMarginRate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryExchangeMarginRate()) {
        this.pQryExchangeMarginRate = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateField(other.pQryExchangeMarginRate);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryExchangeMarginRate_args deepCopy() {
      return new reqQryExchangeMarginRate_args(this);
    }

    @Override
    public void clear() {
      this.pQryExchangeMarginRate = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateField getPQryExchangeMarginRate() {
      return this.pQryExchangeMarginRate;
    }

    public reqQryExchangeMarginRate_args setPQryExchangeMarginRate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateField pQryExchangeMarginRate) {
      this.pQryExchangeMarginRate = pQryExchangeMarginRate;
      return this;
    }

    public void unsetPQryExchangeMarginRate() {
      this.pQryExchangeMarginRate = null;
    }

    /** Returns true if field pQryExchangeMarginRate is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryExchangeMarginRate() {
      return this.pQryExchangeMarginRate != null;
    }

    public void setPQryExchangeMarginRateIsSet(boolean value) {
      if (!value) {
        this.pQryExchangeMarginRate = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryExchangeMarginRate_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_EXCHANGE_MARGIN_RATE:
        if (value == null) {
          unsetPQryExchangeMarginRate();
        } else {
          setPQryExchangeMarginRate((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_EXCHANGE_MARGIN_RATE:
        return getPQryExchangeMarginRate();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_EXCHANGE_MARGIN_RATE:
        return isSetPQryExchangeMarginRate();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryExchangeMarginRate_args)
        return this.equals((reqQryExchangeMarginRate_args)that);
      return false;
    }

    public boolean equals(reqQryExchangeMarginRate_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryExchangeMarginRate = true && this.isSetPQryExchangeMarginRate();
      boolean that_present_pQryExchangeMarginRate = true && that.isSetPQryExchangeMarginRate();
      if (this_present_pQryExchangeMarginRate || that_present_pQryExchangeMarginRate) {
        if (!(this_present_pQryExchangeMarginRate && that_present_pQryExchangeMarginRate))
          return false;
        if (!this.pQryExchangeMarginRate.equals(that.pQryExchangeMarginRate))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryExchangeMarginRate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryExchangeMarginRate()).compareTo(other.isSetPQryExchangeMarginRate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryExchangeMarginRate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryExchangeMarginRate, other.pQryExchangeMarginRate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryExchangeMarginRate_args(");
      boolean first = true;

      sb.append("pQryExchangeMarginRate:");
      if (this.pQryExchangeMarginRate == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryExchangeMarginRate);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryExchangeMarginRate != null) {
        pQryExchangeMarginRate.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryExchangeMarginRate_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryExchangeMarginRate_argsStandardScheme getScheme() {
        return new reqQryExchangeMarginRate_argsStandardScheme();
      }
    }

    private static class reqQryExchangeMarginRate_argsStandardScheme extends StandardScheme<reqQryExchangeMarginRate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryExchangeMarginRate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_EXCHANGE_MARGIN_RATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryExchangeMarginRate = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateField();
                struct.pQryExchangeMarginRate.read(iprot);
                struct.setPQryExchangeMarginRateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryExchangeMarginRate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryExchangeMarginRate != null) {
          oprot.writeFieldBegin(P_QRY_EXCHANGE_MARGIN_RATE_FIELD_DESC);
          struct.pQryExchangeMarginRate.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryExchangeMarginRate_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryExchangeMarginRate_argsTupleScheme getScheme() {
        return new reqQryExchangeMarginRate_argsTupleScheme();
      }
    }

    private static class reqQryExchangeMarginRate_argsTupleScheme extends TupleScheme<reqQryExchangeMarginRate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryExchangeMarginRate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryExchangeMarginRate()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryExchangeMarginRate()) {
          struct.pQryExchangeMarginRate.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryExchangeMarginRate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryExchangeMarginRate = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateField();
          struct.pQryExchangeMarginRate.read(iprot);
          struct.setPQryExchangeMarginRateIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryExchangeMarginRate_result implements org.apache.thrift.TBase<reqQryExchangeMarginRate_result, reqQryExchangeMarginRate_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryExchangeMarginRate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryExchangeMarginRate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryExchangeMarginRate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryExchangeMarginRate_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryExchangeMarginRate_result.class, metaDataMap);
    }

    public reqQryExchangeMarginRate_result() {
    }

    public reqQryExchangeMarginRate_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryExchangeMarginRate_result(reqQryExchangeMarginRate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryExchangeMarginRate_result deepCopy() {
      return new reqQryExchangeMarginRate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryExchangeMarginRate_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryExchangeMarginRate_result)
        return this.equals((reqQryExchangeMarginRate_result)that);
      return false;
    }

    public boolean equals(reqQryExchangeMarginRate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryExchangeMarginRate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryExchangeMarginRate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryExchangeMarginRate_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryExchangeMarginRate_resultStandardScheme getScheme() {
        return new reqQryExchangeMarginRate_resultStandardScheme();
      }
    }

    private static class reqQryExchangeMarginRate_resultStandardScheme extends StandardScheme<reqQryExchangeMarginRate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryExchangeMarginRate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryExchangeMarginRate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryExchangeMarginRate_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryExchangeMarginRate_resultTupleScheme getScheme() {
        return new reqQryExchangeMarginRate_resultTupleScheme();
      }
    }

    private static class reqQryExchangeMarginRate_resultTupleScheme extends TupleScheme<reqQryExchangeMarginRate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryExchangeMarginRate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryExchangeMarginRate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryExchangeMarginRateAdjust_args implements org.apache.thrift.TBase<reqQryExchangeMarginRateAdjust_args, reqQryExchangeMarginRateAdjust_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryExchangeMarginRateAdjust_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryExchangeMarginRateAdjust_args");

    private static final org.apache.thrift.protocol.TField P_QRY_EXCHANGE_MARGIN_RATE_ADJUST_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryExchangeMarginRateAdjust", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryExchangeMarginRateAdjust_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryExchangeMarginRateAdjust_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateAdjustField pQryExchangeMarginRateAdjust; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_EXCHANGE_MARGIN_RATE_ADJUST((short)1, "pQryExchangeMarginRateAdjust"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_EXCHANGE_MARGIN_RATE_ADJUST
            return P_QRY_EXCHANGE_MARGIN_RATE_ADJUST;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_EXCHANGE_MARGIN_RATE_ADJUST, new org.apache.thrift.meta_data.FieldMetaData("pQryExchangeMarginRateAdjust", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateAdjustField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryExchangeMarginRateAdjust_args.class, metaDataMap);
    }

    public reqQryExchangeMarginRateAdjust_args() {
    }

    public reqQryExchangeMarginRateAdjust_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateAdjustField pQryExchangeMarginRateAdjust,
      int nRequestID)
    {
      this();
      this.pQryExchangeMarginRateAdjust = pQryExchangeMarginRateAdjust;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryExchangeMarginRateAdjust_args(reqQryExchangeMarginRateAdjust_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryExchangeMarginRateAdjust()) {
        this.pQryExchangeMarginRateAdjust = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateAdjustField(other.pQryExchangeMarginRateAdjust);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryExchangeMarginRateAdjust_args deepCopy() {
      return new reqQryExchangeMarginRateAdjust_args(this);
    }

    @Override
    public void clear() {
      this.pQryExchangeMarginRateAdjust = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateAdjustField getPQryExchangeMarginRateAdjust() {
      return this.pQryExchangeMarginRateAdjust;
    }

    public reqQryExchangeMarginRateAdjust_args setPQryExchangeMarginRateAdjust(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateAdjustField pQryExchangeMarginRateAdjust) {
      this.pQryExchangeMarginRateAdjust = pQryExchangeMarginRateAdjust;
      return this;
    }

    public void unsetPQryExchangeMarginRateAdjust() {
      this.pQryExchangeMarginRateAdjust = null;
    }

    /** Returns true if field pQryExchangeMarginRateAdjust is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryExchangeMarginRateAdjust() {
      return this.pQryExchangeMarginRateAdjust != null;
    }

    public void setPQryExchangeMarginRateAdjustIsSet(boolean value) {
      if (!value) {
        this.pQryExchangeMarginRateAdjust = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryExchangeMarginRateAdjust_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_EXCHANGE_MARGIN_RATE_ADJUST:
        if (value == null) {
          unsetPQryExchangeMarginRateAdjust();
        } else {
          setPQryExchangeMarginRateAdjust((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateAdjustField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_EXCHANGE_MARGIN_RATE_ADJUST:
        return getPQryExchangeMarginRateAdjust();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_EXCHANGE_MARGIN_RATE_ADJUST:
        return isSetPQryExchangeMarginRateAdjust();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryExchangeMarginRateAdjust_args)
        return this.equals((reqQryExchangeMarginRateAdjust_args)that);
      return false;
    }

    public boolean equals(reqQryExchangeMarginRateAdjust_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryExchangeMarginRateAdjust = true && this.isSetPQryExchangeMarginRateAdjust();
      boolean that_present_pQryExchangeMarginRateAdjust = true && that.isSetPQryExchangeMarginRateAdjust();
      if (this_present_pQryExchangeMarginRateAdjust || that_present_pQryExchangeMarginRateAdjust) {
        if (!(this_present_pQryExchangeMarginRateAdjust && that_present_pQryExchangeMarginRateAdjust))
          return false;
        if (!this.pQryExchangeMarginRateAdjust.equals(that.pQryExchangeMarginRateAdjust))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryExchangeMarginRateAdjust_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryExchangeMarginRateAdjust()).compareTo(other.isSetPQryExchangeMarginRateAdjust());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryExchangeMarginRateAdjust()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryExchangeMarginRateAdjust, other.pQryExchangeMarginRateAdjust);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryExchangeMarginRateAdjust_args(");
      boolean first = true;

      sb.append("pQryExchangeMarginRateAdjust:");
      if (this.pQryExchangeMarginRateAdjust == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryExchangeMarginRateAdjust);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryExchangeMarginRateAdjust != null) {
        pQryExchangeMarginRateAdjust.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryExchangeMarginRateAdjust_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryExchangeMarginRateAdjust_argsStandardScheme getScheme() {
        return new reqQryExchangeMarginRateAdjust_argsStandardScheme();
      }
    }

    private static class reqQryExchangeMarginRateAdjust_argsStandardScheme extends StandardScheme<reqQryExchangeMarginRateAdjust_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryExchangeMarginRateAdjust_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_EXCHANGE_MARGIN_RATE_ADJUST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryExchangeMarginRateAdjust = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateAdjustField();
                struct.pQryExchangeMarginRateAdjust.read(iprot);
                struct.setPQryExchangeMarginRateAdjustIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryExchangeMarginRateAdjust_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryExchangeMarginRateAdjust != null) {
          oprot.writeFieldBegin(P_QRY_EXCHANGE_MARGIN_RATE_ADJUST_FIELD_DESC);
          struct.pQryExchangeMarginRateAdjust.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryExchangeMarginRateAdjust_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryExchangeMarginRateAdjust_argsTupleScheme getScheme() {
        return new reqQryExchangeMarginRateAdjust_argsTupleScheme();
      }
    }

    private static class reqQryExchangeMarginRateAdjust_argsTupleScheme extends TupleScheme<reqQryExchangeMarginRateAdjust_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryExchangeMarginRateAdjust_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryExchangeMarginRateAdjust()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryExchangeMarginRateAdjust()) {
          struct.pQryExchangeMarginRateAdjust.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryExchangeMarginRateAdjust_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryExchangeMarginRateAdjust = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeMarginRateAdjustField();
          struct.pQryExchangeMarginRateAdjust.read(iprot);
          struct.setPQryExchangeMarginRateAdjustIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryExchangeMarginRateAdjust_result implements org.apache.thrift.TBase<reqQryExchangeMarginRateAdjust_result, reqQryExchangeMarginRateAdjust_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryExchangeMarginRateAdjust_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryExchangeMarginRateAdjust_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryExchangeMarginRateAdjust_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryExchangeMarginRateAdjust_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryExchangeMarginRateAdjust_result.class, metaDataMap);
    }

    public reqQryExchangeMarginRateAdjust_result() {
    }

    public reqQryExchangeMarginRateAdjust_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryExchangeMarginRateAdjust_result(reqQryExchangeMarginRateAdjust_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryExchangeMarginRateAdjust_result deepCopy() {
      return new reqQryExchangeMarginRateAdjust_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryExchangeMarginRateAdjust_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryExchangeMarginRateAdjust_result)
        return this.equals((reqQryExchangeMarginRateAdjust_result)that);
      return false;
    }

    public boolean equals(reqQryExchangeMarginRateAdjust_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryExchangeMarginRateAdjust_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryExchangeMarginRateAdjust_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryExchangeMarginRateAdjust_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryExchangeMarginRateAdjust_resultStandardScheme getScheme() {
        return new reqQryExchangeMarginRateAdjust_resultStandardScheme();
      }
    }

    private static class reqQryExchangeMarginRateAdjust_resultStandardScheme extends StandardScheme<reqQryExchangeMarginRateAdjust_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryExchangeMarginRateAdjust_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryExchangeMarginRateAdjust_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryExchangeMarginRateAdjust_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryExchangeMarginRateAdjust_resultTupleScheme getScheme() {
        return new reqQryExchangeMarginRateAdjust_resultTupleScheme();
      }
    }

    private static class reqQryExchangeMarginRateAdjust_resultTupleScheme extends TupleScheme<reqQryExchangeMarginRateAdjust_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryExchangeMarginRateAdjust_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryExchangeMarginRateAdjust_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryExchangeRate_args implements org.apache.thrift.TBase<reqQryExchangeRate_args, reqQryExchangeRate_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryExchangeRate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryExchangeRate_args");

    private static final org.apache.thrift.protocol.TField P_QRY_EXCHANGE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryExchangeRate", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryExchangeRate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryExchangeRate_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeRateField pQryExchangeRate; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_EXCHANGE_RATE((short)1, "pQryExchangeRate"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_EXCHANGE_RATE
            return P_QRY_EXCHANGE_RATE;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_EXCHANGE_RATE, new org.apache.thrift.meta_data.FieldMetaData("pQryExchangeRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeRateField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryExchangeRate_args.class, metaDataMap);
    }

    public reqQryExchangeRate_args() {
    }

    public reqQryExchangeRate_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeRateField pQryExchangeRate,
      int nRequestID)
    {
      this();
      this.pQryExchangeRate = pQryExchangeRate;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryExchangeRate_args(reqQryExchangeRate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryExchangeRate()) {
        this.pQryExchangeRate = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeRateField(other.pQryExchangeRate);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryExchangeRate_args deepCopy() {
      return new reqQryExchangeRate_args(this);
    }

    @Override
    public void clear() {
      this.pQryExchangeRate = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeRateField getPQryExchangeRate() {
      return this.pQryExchangeRate;
    }

    public reqQryExchangeRate_args setPQryExchangeRate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeRateField pQryExchangeRate) {
      this.pQryExchangeRate = pQryExchangeRate;
      return this;
    }

    public void unsetPQryExchangeRate() {
      this.pQryExchangeRate = null;
    }

    /** Returns true if field pQryExchangeRate is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryExchangeRate() {
      return this.pQryExchangeRate != null;
    }

    public void setPQryExchangeRateIsSet(boolean value) {
      if (!value) {
        this.pQryExchangeRate = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryExchangeRate_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_EXCHANGE_RATE:
        if (value == null) {
          unsetPQryExchangeRate();
        } else {
          setPQryExchangeRate((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeRateField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_EXCHANGE_RATE:
        return getPQryExchangeRate();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_EXCHANGE_RATE:
        return isSetPQryExchangeRate();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryExchangeRate_args)
        return this.equals((reqQryExchangeRate_args)that);
      return false;
    }

    public boolean equals(reqQryExchangeRate_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryExchangeRate = true && this.isSetPQryExchangeRate();
      boolean that_present_pQryExchangeRate = true && that.isSetPQryExchangeRate();
      if (this_present_pQryExchangeRate || that_present_pQryExchangeRate) {
        if (!(this_present_pQryExchangeRate && that_present_pQryExchangeRate))
          return false;
        if (!this.pQryExchangeRate.equals(that.pQryExchangeRate))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryExchangeRate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryExchangeRate()).compareTo(other.isSetPQryExchangeRate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryExchangeRate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryExchangeRate, other.pQryExchangeRate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryExchangeRate_args(");
      boolean first = true;

      sb.append("pQryExchangeRate:");
      if (this.pQryExchangeRate == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryExchangeRate);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryExchangeRate != null) {
        pQryExchangeRate.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryExchangeRate_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryExchangeRate_argsStandardScheme getScheme() {
        return new reqQryExchangeRate_argsStandardScheme();
      }
    }

    private static class reqQryExchangeRate_argsStandardScheme extends StandardScheme<reqQryExchangeRate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryExchangeRate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_EXCHANGE_RATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryExchangeRate = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeRateField();
                struct.pQryExchangeRate.read(iprot);
                struct.setPQryExchangeRateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryExchangeRate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryExchangeRate != null) {
          oprot.writeFieldBegin(P_QRY_EXCHANGE_RATE_FIELD_DESC);
          struct.pQryExchangeRate.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryExchangeRate_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryExchangeRate_argsTupleScheme getScheme() {
        return new reqQryExchangeRate_argsTupleScheme();
      }
    }

    private static class reqQryExchangeRate_argsTupleScheme extends TupleScheme<reqQryExchangeRate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryExchangeRate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryExchangeRate()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryExchangeRate()) {
          struct.pQryExchangeRate.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryExchangeRate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryExchangeRate = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeRateField();
          struct.pQryExchangeRate.read(iprot);
          struct.setPQryExchangeRateIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryExchangeRate_result implements org.apache.thrift.TBase<reqQryExchangeRate_result, reqQryExchangeRate_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryExchangeRate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryExchangeRate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryExchangeRate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryExchangeRate_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryExchangeRate_result.class, metaDataMap);
    }

    public reqQryExchangeRate_result() {
    }

    public reqQryExchangeRate_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryExchangeRate_result(reqQryExchangeRate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryExchangeRate_result deepCopy() {
      return new reqQryExchangeRate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryExchangeRate_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryExchangeRate_result)
        return this.equals((reqQryExchangeRate_result)that);
      return false;
    }

    public boolean equals(reqQryExchangeRate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryExchangeRate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryExchangeRate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryExchangeRate_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryExchangeRate_resultStandardScheme getScheme() {
        return new reqQryExchangeRate_resultStandardScheme();
      }
    }

    private static class reqQryExchangeRate_resultStandardScheme extends StandardScheme<reqQryExchangeRate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryExchangeRate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryExchangeRate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryExchangeRate_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryExchangeRate_resultTupleScheme getScheme() {
        return new reqQryExchangeRate_resultTupleScheme();
      }
    }

    private static class reqQryExchangeRate_resultTupleScheme extends TupleScheme<reqQryExchangeRate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryExchangeRate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryExchangeRate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQrySecAgentACIDMap_args implements org.apache.thrift.TBase<reqQrySecAgentACIDMap_args, reqQrySecAgentACIDMap_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQrySecAgentACIDMap_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQrySecAgentACIDMap_args");

    private static final org.apache.thrift.protocol.TField P_QRY_SEC_AGENT_ACIDMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("pQrySecAgentACIDMap", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQrySecAgentACIDMap_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQrySecAgentACIDMap_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySecAgentACIDMapField pQrySecAgentACIDMap; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_SEC_AGENT_ACIDMAP((short)1, "pQrySecAgentACIDMap"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_SEC_AGENT_ACIDMAP
            return P_QRY_SEC_AGENT_ACIDMAP;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_SEC_AGENT_ACIDMAP, new org.apache.thrift.meta_data.FieldMetaData("pQrySecAgentACIDMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySecAgentACIDMapField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQrySecAgentACIDMap_args.class, metaDataMap);
    }

    public reqQrySecAgentACIDMap_args() {
    }

    public reqQrySecAgentACIDMap_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySecAgentACIDMapField pQrySecAgentACIDMap,
      int nRequestID)
    {
      this();
      this.pQrySecAgentACIDMap = pQrySecAgentACIDMap;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQrySecAgentACIDMap_args(reqQrySecAgentACIDMap_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQrySecAgentACIDMap()) {
        this.pQrySecAgentACIDMap = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySecAgentACIDMapField(other.pQrySecAgentACIDMap);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQrySecAgentACIDMap_args deepCopy() {
      return new reqQrySecAgentACIDMap_args(this);
    }

    @Override
    public void clear() {
      this.pQrySecAgentACIDMap = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySecAgentACIDMapField getPQrySecAgentACIDMap() {
      return this.pQrySecAgentACIDMap;
    }

    public reqQrySecAgentACIDMap_args setPQrySecAgentACIDMap(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySecAgentACIDMapField pQrySecAgentACIDMap) {
      this.pQrySecAgentACIDMap = pQrySecAgentACIDMap;
      return this;
    }

    public void unsetPQrySecAgentACIDMap() {
      this.pQrySecAgentACIDMap = null;
    }

    /** Returns true if field pQrySecAgentACIDMap is set (has been assigned a value) and false otherwise */
    public boolean isSetPQrySecAgentACIDMap() {
      return this.pQrySecAgentACIDMap != null;
    }

    public void setPQrySecAgentACIDMapIsSet(boolean value) {
      if (!value) {
        this.pQrySecAgentACIDMap = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQrySecAgentACIDMap_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_SEC_AGENT_ACIDMAP:
        if (value == null) {
          unsetPQrySecAgentACIDMap();
        } else {
          setPQrySecAgentACIDMap((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySecAgentACIDMapField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_SEC_AGENT_ACIDMAP:
        return getPQrySecAgentACIDMap();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_SEC_AGENT_ACIDMAP:
        return isSetPQrySecAgentACIDMap();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQrySecAgentACIDMap_args)
        return this.equals((reqQrySecAgentACIDMap_args)that);
      return false;
    }

    public boolean equals(reqQrySecAgentACIDMap_args that) {
      if (that == null)
        return false;

      boolean this_present_pQrySecAgentACIDMap = true && this.isSetPQrySecAgentACIDMap();
      boolean that_present_pQrySecAgentACIDMap = true && that.isSetPQrySecAgentACIDMap();
      if (this_present_pQrySecAgentACIDMap || that_present_pQrySecAgentACIDMap) {
        if (!(this_present_pQrySecAgentACIDMap && that_present_pQrySecAgentACIDMap))
          return false;
        if (!this.pQrySecAgentACIDMap.equals(that.pQrySecAgentACIDMap))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQrySecAgentACIDMap_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQrySecAgentACIDMap()).compareTo(other.isSetPQrySecAgentACIDMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQrySecAgentACIDMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQrySecAgentACIDMap, other.pQrySecAgentACIDMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQrySecAgentACIDMap_args(");
      boolean first = true;

      sb.append("pQrySecAgentACIDMap:");
      if (this.pQrySecAgentACIDMap == null) {
        sb.append("null");
      } else {
        sb.append(this.pQrySecAgentACIDMap);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQrySecAgentACIDMap != null) {
        pQrySecAgentACIDMap.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQrySecAgentACIDMap_argsStandardSchemeFactory implements SchemeFactory {
      public reqQrySecAgentACIDMap_argsStandardScheme getScheme() {
        return new reqQrySecAgentACIDMap_argsStandardScheme();
      }
    }

    private static class reqQrySecAgentACIDMap_argsStandardScheme extends StandardScheme<reqQrySecAgentACIDMap_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQrySecAgentACIDMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_SEC_AGENT_ACIDMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQrySecAgentACIDMap = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySecAgentACIDMapField();
                struct.pQrySecAgentACIDMap.read(iprot);
                struct.setPQrySecAgentACIDMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQrySecAgentACIDMap_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQrySecAgentACIDMap != null) {
          oprot.writeFieldBegin(P_QRY_SEC_AGENT_ACIDMAP_FIELD_DESC);
          struct.pQrySecAgentACIDMap.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQrySecAgentACIDMap_argsTupleSchemeFactory implements SchemeFactory {
      public reqQrySecAgentACIDMap_argsTupleScheme getScheme() {
        return new reqQrySecAgentACIDMap_argsTupleScheme();
      }
    }

    private static class reqQrySecAgentACIDMap_argsTupleScheme extends TupleScheme<reqQrySecAgentACIDMap_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQrySecAgentACIDMap_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQrySecAgentACIDMap()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQrySecAgentACIDMap()) {
          struct.pQrySecAgentACIDMap.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQrySecAgentACIDMap_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQrySecAgentACIDMap = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySecAgentACIDMapField();
          struct.pQrySecAgentACIDMap.read(iprot);
          struct.setPQrySecAgentACIDMapIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQrySecAgentACIDMap_result implements org.apache.thrift.TBase<reqQrySecAgentACIDMap_result, reqQrySecAgentACIDMap_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQrySecAgentACIDMap_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQrySecAgentACIDMap_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQrySecAgentACIDMap_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQrySecAgentACIDMap_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQrySecAgentACIDMap_result.class, metaDataMap);
    }

    public reqQrySecAgentACIDMap_result() {
    }

    public reqQrySecAgentACIDMap_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQrySecAgentACIDMap_result(reqQrySecAgentACIDMap_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQrySecAgentACIDMap_result deepCopy() {
      return new reqQrySecAgentACIDMap_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQrySecAgentACIDMap_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQrySecAgentACIDMap_result)
        return this.equals((reqQrySecAgentACIDMap_result)that);
      return false;
    }

    public boolean equals(reqQrySecAgentACIDMap_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQrySecAgentACIDMap_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQrySecAgentACIDMap_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQrySecAgentACIDMap_resultStandardSchemeFactory implements SchemeFactory {
      public reqQrySecAgentACIDMap_resultStandardScheme getScheme() {
        return new reqQrySecAgentACIDMap_resultStandardScheme();
      }
    }

    private static class reqQrySecAgentACIDMap_resultStandardScheme extends StandardScheme<reqQrySecAgentACIDMap_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQrySecAgentACIDMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQrySecAgentACIDMap_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQrySecAgentACIDMap_resultTupleSchemeFactory implements SchemeFactory {
      public reqQrySecAgentACIDMap_resultTupleScheme getScheme() {
        return new reqQrySecAgentACIDMap_resultTupleScheme();
      }
    }

    private static class reqQrySecAgentACIDMap_resultTupleScheme extends TupleScheme<reqQrySecAgentACIDMap_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQrySecAgentACIDMap_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQrySecAgentACIDMap_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryOptionInstrTradeCost_args implements org.apache.thrift.TBase<reqQryOptionInstrTradeCost_args, reqQryOptionInstrTradeCost_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryOptionInstrTradeCost_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryOptionInstrTradeCost_args");

    private static final org.apache.thrift.protocol.TField P_QRY_OPTION_INSTR_TRADE_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryOptionInstrTradeCost", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryOptionInstrTradeCost_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryOptionInstrTradeCost_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrTradeCostField pQryOptionInstrTradeCost; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_OPTION_INSTR_TRADE_COST((short)1, "pQryOptionInstrTradeCost"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_OPTION_INSTR_TRADE_COST
            return P_QRY_OPTION_INSTR_TRADE_COST;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_OPTION_INSTR_TRADE_COST, new org.apache.thrift.meta_data.FieldMetaData("pQryOptionInstrTradeCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrTradeCostField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryOptionInstrTradeCost_args.class, metaDataMap);
    }

    public reqQryOptionInstrTradeCost_args() {
    }

    public reqQryOptionInstrTradeCost_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrTradeCostField pQryOptionInstrTradeCost,
      int nRequestID)
    {
      this();
      this.pQryOptionInstrTradeCost = pQryOptionInstrTradeCost;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryOptionInstrTradeCost_args(reqQryOptionInstrTradeCost_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryOptionInstrTradeCost()) {
        this.pQryOptionInstrTradeCost = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrTradeCostField(other.pQryOptionInstrTradeCost);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryOptionInstrTradeCost_args deepCopy() {
      return new reqQryOptionInstrTradeCost_args(this);
    }

    @Override
    public void clear() {
      this.pQryOptionInstrTradeCost = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrTradeCostField getPQryOptionInstrTradeCost() {
      return this.pQryOptionInstrTradeCost;
    }

    public reqQryOptionInstrTradeCost_args setPQryOptionInstrTradeCost(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrTradeCostField pQryOptionInstrTradeCost) {
      this.pQryOptionInstrTradeCost = pQryOptionInstrTradeCost;
      return this;
    }

    public void unsetPQryOptionInstrTradeCost() {
      this.pQryOptionInstrTradeCost = null;
    }

    /** Returns true if field pQryOptionInstrTradeCost is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryOptionInstrTradeCost() {
      return this.pQryOptionInstrTradeCost != null;
    }

    public void setPQryOptionInstrTradeCostIsSet(boolean value) {
      if (!value) {
        this.pQryOptionInstrTradeCost = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryOptionInstrTradeCost_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_OPTION_INSTR_TRADE_COST:
        if (value == null) {
          unsetPQryOptionInstrTradeCost();
        } else {
          setPQryOptionInstrTradeCost((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrTradeCostField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_OPTION_INSTR_TRADE_COST:
        return getPQryOptionInstrTradeCost();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_OPTION_INSTR_TRADE_COST:
        return isSetPQryOptionInstrTradeCost();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryOptionInstrTradeCost_args)
        return this.equals((reqQryOptionInstrTradeCost_args)that);
      return false;
    }

    public boolean equals(reqQryOptionInstrTradeCost_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryOptionInstrTradeCost = true && this.isSetPQryOptionInstrTradeCost();
      boolean that_present_pQryOptionInstrTradeCost = true && that.isSetPQryOptionInstrTradeCost();
      if (this_present_pQryOptionInstrTradeCost || that_present_pQryOptionInstrTradeCost) {
        if (!(this_present_pQryOptionInstrTradeCost && that_present_pQryOptionInstrTradeCost))
          return false;
        if (!this.pQryOptionInstrTradeCost.equals(that.pQryOptionInstrTradeCost))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryOptionInstrTradeCost_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryOptionInstrTradeCost()).compareTo(other.isSetPQryOptionInstrTradeCost());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryOptionInstrTradeCost()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryOptionInstrTradeCost, other.pQryOptionInstrTradeCost);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryOptionInstrTradeCost_args(");
      boolean first = true;

      sb.append("pQryOptionInstrTradeCost:");
      if (this.pQryOptionInstrTradeCost == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryOptionInstrTradeCost);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryOptionInstrTradeCost != null) {
        pQryOptionInstrTradeCost.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryOptionInstrTradeCost_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryOptionInstrTradeCost_argsStandardScheme getScheme() {
        return new reqQryOptionInstrTradeCost_argsStandardScheme();
      }
    }

    private static class reqQryOptionInstrTradeCost_argsStandardScheme extends StandardScheme<reqQryOptionInstrTradeCost_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryOptionInstrTradeCost_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_OPTION_INSTR_TRADE_COST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryOptionInstrTradeCost = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrTradeCostField();
                struct.pQryOptionInstrTradeCost.read(iprot);
                struct.setPQryOptionInstrTradeCostIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryOptionInstrTradeCost_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryOptionInstrTradeCost != null) {
          oprot.writeFieldBegin(P_QRY_OPTION_INSTR_TRADE_COST_FIELD_DESC);
          struct.pQryOptionInstrTradeCost.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryOptionInstrTradeCost_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryOptionInstrTradeCost_argsTupleScheme getScheme() {
        return new reqQryOptionInstrTradeCost_argsTupleScheme();
      }
    }

    private static class reqQryOptionInstrTradeCost_argsTupleScheme extends TupleScheme<reqQryOptionInstrTradeCost_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryOptionInstrTradeCost_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryOptionInstrTradeCost()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryOptionInstrTradeCost()) {
          struct.pQryOptionInstrTradeCost.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryOptionInstrTradeCost_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryOptionInstrTradeCost = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrTradeCostField();
          struct.pQryOptionInstrTradeCost.read(iprot);
          struct.setPQryOptionInstrTradeCostIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryOptionInstrTradeCost_result implements org.apache.thrift.TBase<reqQryOptionInstrTradeCost_result, reqQryOptionInstrTradeCost_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryOptionInstrTradeCost_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryOptionInstrTradeCost_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryOptionInstrTradeCost_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryOptionInstrTradeCost_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryOptionInstrTradeCost_result.class, metaDataMap);
    }

    public reqQryOptionInstrTradeCost_result() {
    }

    public reqQryOptionInstrTradeCost_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryOptionInstrTradeCost_result(reqQryOptionInstrTradeCost_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryOptionInstrTradeCost_result deepCopy() {
      return new reqQryOptionInstrTradeCost_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryOptionInstrTradeCost_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryOptionInstrTradeCost_result)
        return this.equals((reqQryOptionInstrTradeCost_result)that);
      return false;
    }

    public boolean equals(reqQryOptionInstrTradeCost_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryOptionInstrTradeCost_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryOptionInstrTradeCost_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryOptionInstrTradeCost_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryOptionInstrTradeCost_resultStandardScheme getScheme() {
        return new reqQryOptionInstrTradeCost_resultStandardScheme();
      }
    }

    private static class reqQryOptionInstrTradeCost_resultStandardScheme extends StandardScheme<reqQryOptionInstrTradeCost_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryOptionInstrTradeCost_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryOptionInstrTradeCost_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryOptionInstrTradeCost_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryOptionInstrTradeCost_resultTupleScheme getScheme() {
        return new reqQryOptionInstrTradeCost_resultTupleScheme();
      }
    }

    private static class reqQryOptionInstrTradeCost_resultTupleScheme extends TupleScheme<reqQryOptionInstrTradeCost_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryOptionInstrTradeCost_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryOptionInstrTradeCost_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryOptionInstrCommRate_args implements org.apache.thrift.TBase<reqQryOptionInstrCommRate_args, reqQryOptionInstrCommRate_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryOptionInstrCommRate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryOptionInstrCommRate_args");

    private static final org.apache.thrift.protocol.TField P_QRY_OPTION_INSTR_COMM_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryOptionInstrCommRate", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryOptionInstrCommRate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryOptionInstrCommRate_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrCommRateField pQryOptionInstrCommRate; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_OPTION_INSTR_COMM_RATE((short)1, "pQryOptionInstrCommRate"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_OPTION_INSTR_COMM_RATE
            return P_QRY_OPTION_INSTR_COMM_RATE;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_OPTION_INSTR_COMM_RATE, new org.apache.thrift.meta_data.FieldMetaData("pQryOptionInstrCommRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrCommRateField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryOptionInstrCommRate_args.class, metaDataMap);
    }

    public reqQryOptionInstrCommRate_args() {
    }

    public reqQryOptionInstrCommRate_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrCommRateField pQryOptionInstrCommRate,
      int nRequestID)
    {
      this();
      this.pQryOptionInstrCommRate = pQryOptionInstrCommRate;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryOptionInstrCommRate_args(reqQryOptionInstrCommRate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryOptionInstrCommRate()) {
        this.pQryOptionInstrCommRate = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrCommRateField(other.pQryOptionInstrCommRate);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryOptionInstrCommRate_args deepCopy() {
      return new reqQryOptionInstrCommRate_args(this);
    }

    @Override
    public void clear() {
      this.pQryOptionInstrCommRate = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrCommRateField getPQryOptionInstrCommRate() {
      return this.pQryOptionInstrCommRate;
    }

    public reqQryOptionInstrCommRate_args setPQryOptionInstrCommRate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrCommRateField pQryOptionInstrCommRate) {
      this.pQryOptionInstrCommRate = pQryOptionInstrCommRate;
      return this;
    }

    public void unsetPQryOptionInstrCommRate() {
      this.pQryOptionInstrCommRate = null;
    }

    /** Returns true if field pQryOptionInstrCommRate is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryOptionInstrCommRate() {
      return this.pQryOptionInstrCommRate != null;
    }

    public void setPQryOptionInstrCommRateIsSet(boolean value) {
      if (!value) {
        this.pQryOptionInstrCommRate = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryOptionInstrCommRate_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_OPTION_INSTR_COMM_RATE:
        if (value == null) {
          unsetPQryOptionInstrCommRate();
        } else {
          setPQryOptionInstrCommRate((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrCommRateField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_OPTION_INSTR_COMM_RATE:
        return getPQryOptionInstrCommRate();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_OPTION_INSTR_COMM_RATE:
        return isSetPQryOptionInstrCommRate();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryOptionInstrCommRate_args)
        return this.equals((reqQryOptionInstrCommRate_args)that);
      return false;
    }

    public boolean equals(reqQryOptionInstrCommRate_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryOptionInstrCommRate = true && this.isSetPQryOptionInstrCommRate();
      boolean that_present_pQryOptionInstrCommRate = true && that.isSetPQryOptionInstrCommRate();
      if (this_present_pQryOptionInstrCommRate || that_present_pQryOptionInstrCommRate) {
        if (!(this_present_pQryOptionInstrCommRate && that_present_pQryOptionInstrCommRate))
          return false;
        if (!this.pQryOptionInstrCommRate.equals(that.pQryOptionInstrCommRate))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryOptionInstrCommRate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryOptionInstrCommRate()).compareTo(other.isSetPQryOptionInstrCommRate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryOptionInstrCommRate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryOptionInstrCommRate, other.pQryOptionInstrCommRate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryOptionInstrCommRate_args(");
      boolean first = true;

      sb.append("pQryOptionInstrCommRate:");
      if (this.pQryOptionInstrCommRate == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryOptionInstrCommRate);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryOptionInstrCommRate != null) {
        pQryOptionInstrCommRate.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryOptionInstrCommRate_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryOptionInstrCommRate_argsStandardScheme getScheme() {
        return new reqQryOptionInstrCommRate_argsStandardScheme();
      }
    }

    private static class reqQryOptionInstrCommRate_argsStandardScheme extends StandardScheme<reqQryOptionInstrCommRate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryOptionInstrCommRate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_OPTION_INSTR_COMM_RATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryOptionInstrCommRate = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrCommRateField();
                struct.pQryOptionInstrCommRate.read(iprot);
                struct.setPQryOptionInstrCommRateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryOptionInstrCommRate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryOptionInstrCommRate != null) {
          oprot.writeFieldBegin(P_QRY_OPTION_INSTR_COMM_RATE_FIELD_DESC);
          struct.pQryOptionInstrCommRate.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryOptionInstrCommRate_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryOptionInstrCommRate_argsTupleScheme getScheme() {
        return new reqQryOptionInstrCommRate_argsTupleScheme();
      }
    }

    private static class reqQryOptionInstrCommRate_argsTupleScheme extends TupleScheme<reqQryOptionInstrCommRate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryOptionInstrCommRate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryOptionInstrCommRate()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryOptionInstrCommRate()) {
          struct.pQryOptionInstrCommRate.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryOptionInstrCommRate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryOptionInstrCommRate = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOptionInstrCommRateField();
          struct.pQryOptionInstrCommRate.read(iprot);
          struct.setPQryOptionInstrCommRateIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryOptionInstrCommRate_result implements org.apache.thrift.TBase<reqQryOptionInstrCommRate_result, reqQryOptionInstrCommRate_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryOptionInstrCommRate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryOptionInstrCommRate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryOptionInstrCommRate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryOptionInstrCommRate_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryOptionInstrCommRate_result.class, metaDataMap);
    }

    public reqQryOptionInstrCommRate_result() {
    }

    public reqQryOptionInstrCommRate_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryOptionInstrCommRate_result(reqQryOptionInstrCommRate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryOptionInstrCommRate_result deepCopy() {
      return new reqQryOptionInstrCommRate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryOptionInstrCommRate_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryOptionInstrCommRate_result)
        return this.equals((reqQryOptionInstrCommRate_result)that);
      return false;
    }

    public boolean equals(reqQryOptionInstrCommRate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryOptionInstrCommRate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryOptionInstrCommRate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryOptionInstrCommRate_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryOptionInstrCommRate_resultStandardScheme getScheme() {
        return new reqQryOptionInstrCommRate_resultStandardScheme();
      }
    }

    private static class reqQryOptionInstrCommRate_resultStandardScheme extends StandardScheme<reqQryOptionInstrCommRate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryOptionInstrCommRate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryOptionInstrCommRate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryOptionInstrCommRate_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryOptionInstrCommRate_resultTupleScheme getScheme() {
        return new reqQryOptionInstrCommRate_resultTupleScheme();
      }
    }

    private static class reqQryOptionInstrCommRate_resultTupleScheme extends TupleScheme<reqQryOptionInstrCommRate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryOptionInstrCommRate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryOptionInstrCommRate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryExecOrder_args implements org.apache.thrift.TBase<reqQryExecOrder_args, reqQryExecOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryExecOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryExecOrder_args");

    private static final org.apache.thrift.protocol.TField P_QRY_EXEC_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryExecOrder", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryExecOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryExecOrder_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExecOrderField pQryExecOrder; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_EXEC_ORDER((short)1, "pQryExecOrder"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_EXEC_ORDER
            return P_QRY_EXEC_ORDER;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_EXEC_ORDER, new org.apache.thrift.meta_data.FieldMetaData("pQryExecOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExecOrderField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryExecOrder_args.class, metaDataMap);
    }

    public reqQryExecOrder_args() {
    }

    public reqQryExecOrder_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExecOrderField pQryExecOrder,
      int nRequestID)
    {
      this();
      this.pQryExecOrder = pQryExecOrder;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryExecOrder_args(reqQryExecOrder_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryExecOrder()) {
        this.pQryExecOrder = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExecOrderField(other.pQryExecOrder);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryExecOrder_args deepCopy() {
      return new reqQryExecOrder_args(this);
    }

    @Override
    public void clear() {
      this.pQryExecOrder = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExecOrderField getPQryExecOrder() {
      return this.pQryExecOrder;
    }

    public reqQryExecOrder_args setPQryExecOrder(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExecOrderField pQryExecOrder) {
      this.pQryExecOrder = pQryExecOrder;
      return this;
    }

    public void unsetPQryExecOrder() {
      this.pQryExecOrder = null;
    }

    /** Returns true if field pQryExecOrder is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryExecOrder() {
      return this.pQryExecOrder != null;
    }

    public void setPQryExecOrderIsSet(boolean value) {
      if (!value) {
        this.pQryExecOrder = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryExecOrder_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_EXEC_ORDER:
        if (value == null) {
          unsetPQryExecOrder();
        } else {
          setPQryExecOrder((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExecOrderField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_EXEC_ORDER:
        return getPQryExecOrder();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_EXEC_ORDER:
        return isSetPQryExecOrder();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryExecOrder_args)
        return this.equals((reqQryExecOrder_args)that);
      return false;
    }

    public boolean equals(reqQryExecOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryExecOrder = true && this.isSetPQryExecOrder();
      boolean that_present_pQryExecOrder = true && that.isSetPQryExecOrder();
      if (this_present_pQryExecOrder || that_present_pQryExecOrder) {
        if (!(this_present_pQryExecOrder && that_present_pQryExecOrder))
          return false;
        if (!this.pQryExecOrder.equals(that.pQryExecOrder))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryExecOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryExecOrder()).compareTo(other.isSetPQryExecOrder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryExecOrder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryExecOrder, other.pQryExecOrder);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryExecOrder_args(");
      boolean first = true;

      sb.append("pQryExecOrder:");
      if (this.pQryExecOrder == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryExecOrder);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryExecOrder != null) {
        pQryExecOrder.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryExecOrder_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryExecOrder_argsStandardScheme getScheme() {
        return new reqQryExecOrder_argsStandardScheme();
      }
    }

    private static class reqQryExecOrder_argsStandardScheme extends StandardScheme<reqQryExecOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryExecOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_EXEC_ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryExecOrder = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExecOrderField();
                struct.pQryExecOrder.read(iprot);
                struct.setPQryExecOrderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryExecOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryExecOrder != null) {
          oprot.writeFieldBegin(P_QRY_EXEC_ORDER_FIELD_DESC);
          struct.pQryExecOrder.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryExecOrder_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryExecOrder_argsTupleScheme getScheme() {
        return new reqQryExecOrder_argsTupleScheme();
      }
    }

    private static class reqQryExecOrder_argsTupleScheme extends TupleScheme<reqQryExecOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryExecOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryExecOrder()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryExecOrder()) {
          struct.pQryExecOrder.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryExecOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryExecOrder = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExecOrderField();
          struct.pQryExecOrder.read(iprot);
          struct.setPQryExecOrderIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryExecOrder_result implements org.apache.thrift.TBase<reqQryExecOrder_result, reqQryExecOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryExecOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryExecOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryExecOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryExecOrder_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryExecOrder_result.class, metaDataMap);
    }

    public reqQryExecOrder_result() {
    }

    public reqQryExecOrder_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryExecOrder_result(reqQryExecOrder_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryExecOrder_result deepCopy() {
      return new reqQryExecOrder_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryExecOrder_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryExecOrder_result)
        return this.equals((reqQryExecOrder_result)that);
      return false;
    }

    public boolean equals(reqQryExecOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryExecOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryExecOrder_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryExecOrder_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryExecOrder_resultStandardScheme getScheme() {
        return new reqQryExecOrder_resultStandardScheme();
      }
    }

    private static class reqQryExecOrder_resultStandardScheme extends StandardScheme<reqQryExecOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryExecOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryExecOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryExecOrder_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryExecOrder_resultTupleScheme getScheme() {
        return new reqQryExecOrder_resultTupleScheme();
      }
    }

    private static class reqQryExecOrder_resultTupleScheme extends TupleScheme<reqQryExecOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryExecOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryExecOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryForQuote_args implements org.apache.thrift.TBase<reqQryForQuote_args, reqQryForQuote_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryForQuote_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryForQuote_args");

    private static final org.apache.thrift.protocol.TField P_QRY_FOR_QUOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryForQuote", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryForQuote_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryForQuote_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryForQuoteField pQryForQuote; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_FOR_QUOTE((short)1, "pQryForQuote"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_FOR_QUOTE
            return P_QRY_FOR_QUOTE;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_FOR_QUOTE, new org.apache.thrift.meta_data.FieldMetaData("pQryForQuote", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryForQuoteField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryForQuote_args.class, metaDataMap);
    }

    public reqQryForQuote_args() {
    }

    public reqQryForQuote_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryForQuoteField pQryForQuote,
      int nRequestID)
    {
      this();
      this.pQryForQuote = pQryForQuote;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryForQuote_args(reqQryForQuote_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryForQuote()) {
        this.pQryForQuote = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryForQuoteField(other.pQryForQuote);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryForQuote_args deepCopy() {
      return new reqQryForQuote_args(this);
    }

    @Override
    public void clear() {
      this.pQryForQuote = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryForQuoteField getPQryForQuote() {
      return this.pQryForQuote;
    }

    public reqQryForQuote_args setPQryForQuote(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryForQuoteField pQryForQuote) {
      this.pQryForQuote = pQryForQuote;
      return this;
    }

    public void unsetPQryForQuote() {
      this.pQryForQuote = null;
    }

    /** Returns true if field pQryForQuote is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryForQuote() {
      return this.pQryForQuote != null;
    }

    public void setPQryForQuoteIsSet(boolean value) {
      if (!value) {
        this.pQryForQuote = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryForQuote_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_FOR_QUOTE:
        if (value == null) {
          unsetPQryForQuote();
        } else {
          setPQryForQuote((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryForQuoteField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_FOR_QUOTE:
        return getPQryForQuote();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_FOR_QUOTE:
        return isSetPQryForQuote();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryForQuote_args)
        return this.equals((reqQryForQuote_args)that);
      return false;
    }

    public boolean equals(reqQryForQuote_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryForQuote = true && this.isSetPQryForQuote();
      boolean that_present_pQryForQuote = true && that.isSetPQryForQuote();
      if (this_present_pQryForQuote || that_present_pQryForQuote) {
        if (!(this_present_pQryForQuote && that_present_pQryForQuote))
          return false;
        if (!this.pQryForQuote.equals(that.pQryForQuote))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryForQuote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryForQuote()).compareTo(other.isSetPQryForQuote());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryForQuote()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryForQuote, other.pQryForQuote);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryForQuote_args(");
      boolean first = true;

      sb.append("pQryForQuote:");
      if (this.pQryForQuote == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryForQuote);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryForQuote != null) {
        pQryForQuote.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryForQuote_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryForQuote_argsStandardScheme getScheme() {
        return new reqQryForQuote_argsStandardScheme();
      }
    }

    private static class reqQryForQuote_argsStandardScheme extends StandardScheme<reqQryForQuote_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryForQuote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_FOR_QUOTE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryForQuote = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryForQuoteField();
                struct.pQryForQuote.read(iprot);
                struct.setPQryForQuoteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryForQuote_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryForQuote != null) {
          oprot.writeFieldBegin(P_QRY_FOR_QUOTE_FIELD_DESC);
          struct.pQryForQuote.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryForQuote_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryForQuote_argsTupleScheme getScheme() {
        return new reqQryForQuote_argsTupleScheme();
      }
    }

    private static class reqQryForQuote_argsTupleScheme extends TupleScheme<reqQryForQuote_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryForQuote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryForQuote()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryForQuote()) {
          struct.pQryForQuote.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryForQuote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryForQuote = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryForQuoteField();
          struct.pQryForQuote.read(iprot);
          struct.setPQryForQuoteIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryForQuote_result implements org.apache.thrift.TBase<reqQryForQuote_result, reqQryForQuote_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryForQuote_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryForQuote_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryForQuote_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryForQuote_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryForQuote_result.class, metaDataMap);
    }

    public reqQryForQuote_result() {
    }

    public reqQryForQuote_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryForQuote_result(reqQryForQuote_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryForQuote_result deepCopy() {
      return new reqQryForQuote_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryForQuote_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryForQuote_result)
        return this.equals((reqQryForQuote_result)that);
      return false;
    }

    public boolean equals(reqQryForQuote_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryForQuote_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryForQuote_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryForQuote_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryForQuote_resultStandardScheme getScheme() {
        return new reqQryForQuote_resultStandardScheme();
      }
    }

    private static class reqQryForQuote_resultStandardScheme extends StandardScheme<reqQryForQuote_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryForQuote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryForQuote_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryForQuote_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryForQuote_resultTupleScheme getScheme() {
        return new reqQryForQuote_resultTupleScheme();
      }
    }

    private static class reqQryForQuote_resultTupleScheme extends TupleScheme<reqQryForQuote_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryForQuote_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryForQuote_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryQuote_args implements org.apache.thrift.TBase<reqQryQuote_args, reqQryQuote_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryQuote_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryQuote_args");

    private static final org.apache.thrift.protocol.TField P_QRY_QUOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryQuote", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryQuote_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryQuote_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryQuoteField pQryQuote; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_QUOTE((short)1, "pQryQuote"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_QUOTE
            return P_QRY_QUOTE;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_QUOTE, new org.apache.thrift.meta_data.FieldMetaData("pQryQuote", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryQuoteField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryQuote_args.class, metaDataMap);
    }

    public reqQryQuote_args() {
    }

    public reqQryQuote_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryQuoteField pQryQuote,
      int nRequestID)
    {
      this();
      this.pQryQuote = pQryQuote;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryQuote_args(reqQryQuote_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryQuote()) {
        this.pQryQuote = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryQuoteField(other.pQryQuote);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryQuote_args deepCopy() {
      return new reqQryQuote_args(this);
    }

    @Override
    public void clear() {
      this.pQryQuote = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryQuoteField getPQryQuote() {
      return this.pQryQuote;
    }

    public reqQryQuote_args setPQryQuote(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryQuoteField pQryQuote) {
      this.pQryQuote = pQryQuote;
      return this;
    }

    public void unsetPQryQuote() {
      this.pQryQuote = null;
    }

    /** Returns true if field pQryQuote is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryQuote() {
      return this.pQryQuote != null;
    }

    public void setPQryQuoteIsSet(boolean value) {
      if (!value) {
        this.pQryQuote = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryQuote_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_QUOTE:
        if (value == null) {
          unsetPQryQuote();
        } else {
          setPQryQuote((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryQuoteField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_QUOTE:
        return getPQryQuote();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_QUOTE:
        return isSetPQryQuote();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryQuote_args)
        return this.equals((reqQryQuote_args)that);
      return false;
    }

    public boolean equals(reqQryQuote_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryQuote = true && this.isSetPQryQuote();
      boolean that_present_pQryQuote = true && that.isSetPQryQuote();
      if (this_present_pQryQuote || that_present_pQryQuote) {
        if (!(this_present_pQryQuote && that_present_pQryQuote))
          return false;
        if (!this.pQryQuote.equals(that.pQryQuote))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryQuote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryQuote()).compareTo(other.isSetPQryQuote());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryQuote()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryQuote, other.pQryQuote);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryQuote_args(");
      boolean first = true;

      sb.append("pQryQuote:");
      if (this.pQryQuote == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryQuote);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryQuote != null) {
        pQryQuote.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryQuote_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryQuote_argsStandardScheme getScheme() {
        return new reqQryQuote_argsStandardScheme();
      }
    }

    private static class reqQryQuote_argsStandardScheme extends StandardScheme<reqQryQuote_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryQuote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_QUOTE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryQuote = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryQuoteField();
                struct.pQryQuote.read(iprot);
                struct.setPQryQuoteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryQuote_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryQuote != null) {
          oprot.writeFieldBegin(P_QRY_QUOTE_FIELD_DESC);
          struct.pQryQuote.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryQuote_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryQuote_argsTupleScheme getScheme() {
        return new reqQryQuote_argsTupleScheme();
      }
    }

    private static class reqQryQuote_argsTupleScheme extends TupleScheme<reqQryQuote_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryQuote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryQuote()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryQuote()) {
          struct.pQryQuote.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryQuote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryQuote = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryQuoteField();
          struct.pQryQuote.read(iprot);
          struct.setPQryQuoteIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryQuote_result implements org.apache.thrift.TBase<reqQryQuote_result, reqQryQuote_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryQuote_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryQuote_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryQuote_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryQuote_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryQuote_result.class, metaDataMap);
    }

    public reqQryQuote_result() {
    }

    public reqQryQuote_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryQuote_result(reqQryQuote_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryQuote_result deepCopy() {
      return new reqQryQuote_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryQuote_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryQuote_result)
        return this.equals((reqQryQuote_result)that);
      return false;
    }

    public boolean equals(reqQryQuote_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryQuote_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryQuote_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryQuote_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryQuote_resultStandardScheme getScheme() {
        return new reqQryQuote_resultStandardScheme();
      }
    }

    private static class reqQryQuote_resultStandardScheme extends StandardScheme<reqQryQuote_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryQuote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryQuote_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryQuote_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryQuote_resultTupleScheme getScheme() {
        return new reqQryQuote_resultTupleScheme();
      }
    }

    private static class reqQryQuote_resultTupleScheme extends TupleScheme<reqQryQuote_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryQuote_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryQuote_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryTransferSerial_args implements org.apache.thrift.TBase<reqQryTransferSerial_args, reqQryTransferSerial_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryTransferSerial_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryTransferSerial_args");

    private static final org.apache.thrift.protocol.TField P_QRY_TRANSFER_SERIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryTransferSerial", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryTransferSerial_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryTransferSerial_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferSerialField pQryTransferSerial; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_TRANSFER_SERIAL((short)1, "pQryTransferSerial"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_TRANSFER_SERIAL
            return P_QRY_TRANSFER_SERIAL;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_TRANSFER_SERIAL, new org.apache.thrift.meta_data.FieldMetaData("pQryTransferSerial", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferSerialField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryTransferSerial_args.class, metaDataMap);
    }

    public reqQryTransferSerial_args() {
    }

    public reqQryTransferSerial_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferSerialField pQryTransferSerial,
      int nRequestID)
    {
      this();
      this.pQryTransferSerial = pQryTransferSerial;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryTransferSerial_args(reqQryTransferSerial_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryTransferSerial()) {
        this.pQryTransferSerial = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferSerialField(other.pQryTransferSerial);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryTransferSerial_args deepCopy() {
      return new reqQryTransferSerial_args(this);
    }

    @Override
    public void clear() {
      this.pQryTransferSerial = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferSerialField getPQryTransferSerial() {
      return this.pQryTransferSerial;
    }

    public reqQryTransferSerial_args setPQryTransferSerial(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferSerialField pQryTransferSerial) {
      this.pQryTransferSerial = pQryTransferSerial;
      return this;
    }

    public void unsetPQryTransferSerial() {
      this.pQryTransferSerial = null;
    }

    /** Returns true if field pQryTransferSerial is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryTransferSerial() {
      return this.pQryTransferSerial != null;
    }

    public void setPQryTransferSerialIsSet(boolean value) {
      if (!value) {
        this.pQryTransferSerial = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryTransferSerial_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_TRANSFER_SERIAL:
        if (value == null) {
          unsetPQryTransferSerial();
        } else {
          setPQryTransferSerial((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferSerialField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_TRANSFER_SERIAL:
        return getPQryTransferSerial();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_TRANSFER_SERIAL:
        return isSetPQryTransferSerial();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryTransferSerial_args)
        return this.equals((reqQryTransferSerial_args)that);
      return false;
    }

    public boolean equals(reqQryTransferSerial_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryTransferSerial = true && this.isSetPQryTransferSerial();
      boolean that_present_pQryTransferSerial = true && that.isSetPQryTransferSerial();
      if (this_present_pQryTransferSerial || that_present_pQryTransferSerial) {
        if (!(this_present_pQryTransferSerial && that_present_pQryTransferSerial))
          return false;
        if (!this.pQryTransferSerial.equals(that.pQryTransferSerial))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryTransferSerial_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryTransferSerial()).compareTo(other.isSetPQryTransferSerial());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryTransferSerial()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryTransferSerial, other.pQryTransferSerial);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryTransferSerial_args(");
      boolean first = true;

      sb.append("pQryTransferSerial:");
      if (this.pQryTransferSerial == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryTransferSerial);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryTransferSerial != null) {
        pQryTransferSerial.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryTransferSerial_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryTransferSerial_argsStandardScheme getScheme() {
        return new reqQryTransferSerial_argsStandardScheme();
      }
    }

    private static class reqQryTransferSerial_argsStandardScheme extends StandardScheme<reqQryTransferSerial_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryTransferSerial_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_TRANSFER_SERIAL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryTransferSerial = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferSerialField();
                struct.pQryTransferSerial.read(iprot);
                struct.setPQryTransferSerialIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryTransferSerial_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryTransferSerial != null) {
          oprot.writeFieldBegin(P_QRY_TRANSFER_SERIAL_FIELD_DESC);
          struct.pQryTransferSerial.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryTransferSerial_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryTransferSerial_argsTupleScheme getScheme() {
        return new reqQryTransferSerial_argsTupleScheme();
      }
    }

    private static class reqQryTransferSerial_argsTupleScheme extends TupleScheme<reqQryTransferSerial_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryTransferSerial_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryTransferSerial()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryTransferSerial()) {
          struct.pQryTransferSerial.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryTransferSerial_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryTransferSerial = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferSerialField();
          struct.pQryTransferSerial.read(iprot);
          struct.setPQryTransferSerialIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryTransferSerial_result implements org.apache.thrift.TBase<reqQryTransferSerial_result, reqQryTransferSerial_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryTransferSerial_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryTransferSerial_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryTransferSerial_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryTransferSerial_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryTransferSerial_result.class, metaDataMap);
    }

    public reqQryTransferSerial_result() {
    }

    public reqQryTransferSerial_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryTransferSerial_result(reqQryTransferSerial_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryTransferSerial_result deepCopy() {
      return new reqQryTransferSerial_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryTransferSerial_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryTransferSerial_result)
        return this.equals((reqQryTransferSerial_result)that);
      return false;
    }

    public boolean equals(reqQryTransferSerial_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryTransferSerial_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryTransferSerial_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryTransferSerial_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryTransferSerial_resultStandardScheme getScheme() {
        return new reqQryTransferSerial_resultStandardScheme();
      }
    }

    private static class reqQryTransferSerial_resultStandardScheme extends StandardScheme<reqQryTransferSerial_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryTransferSerial_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryTransferSerial_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryTransferSerial_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryTransferSerial_resultTupleScheme getScheme() {
        return new reqQryTransferSerial_resultTupleScheme();
      }
    }

    private static class reqQryTransferSerial_resultTupleScheme extends TupleScheme<reqQryTransferSerial_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryTransferSerial_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryTransferSerial_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryAccountregister_args implements org.apache.thrift.TBase<reqQryAccountregister_args, reqQryAccountregister_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryAccountregister_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryAccountregister_args");

    private static final org.apache.thrift.protocol.TField P_QRY_ACCOUNTREGISTER_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryAccountregister", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryAccountregister_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryAccountregister_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryAccountregisterField pQryAccountregister; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_ACCOUNTREGISTER((short)1, "pQryAccountregister"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_ACCOUNTREGISTER
            return P_QRY_ACCOUNTREGISTER;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_ACCOUNTREGISTER, new org.apache.thrift.meta_data.FieldMetaData("pQryAccountregister", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryAccountregisterField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryAccountregister_args.class, metaDataMap);
    }

    public reqQryAccountregister_args() {
    }

    public reqQryAccountregister_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryAccountregisterField pQryAccountregister,
      int nRequestID)
    {
      this();
      this.pQryAccountregister = pQryAccountregister;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryAccountregister_args(reqQryAccountregister_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryAccountregister()) {
        this.pQryAccountregister = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryAccountregisterField(other.pQryAccountregister);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryAccountregister_args deepCopy() {
      return new reqQryAccountregister_args(this);
    }

    @Override
    public void clear() {
      this.pQryAccountregister = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryAccountregisterField getPQryAccountregister() {
      return this.pQryAccountregister;
    }

    public reqQryAccountregister_args setPQryAccountregister(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryAccountregisterField pQryAccountregister) {
      this.pQryAccountregister = pQryAccountregister;
      return this;
    }

    public void unsetPQryAccountregister() {
      this.pQryAccountregister = null;
    }

    /** Returns true if field pQryAccountregister is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryAccountregister() {
      return this.pQryAccountregister != null;
    }

    public void setPQryAccountregisterIsSet(boolean value) {
      if (!value) {
        this.pQryAccountregister = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryAccountregister_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_ACCOUNTREGISTER:
        if (value == null) {
          unsetPQryAccountregister();
        } else {
          setPQryAccountregister((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryAccountregisterField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_ACCOUNTREGISTER:
        return getPQryAccountregister();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_ACCOUNTREGISTER:
        return isSetPQryAccountregister();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryAccountregister_args)
        return this.equals((reqQryAccountregister_args)that);
      return false;
    }

    public boolean equals(reqQryAccountregister_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryAccountregister = true && this.isSetPQryAccountregister();
      boolean that_present_pQryAccountregister = true && that.isSetPQryAccountregister();
      if (this_present_pQryAccountregister || that_present_pQryAccountregister) {
        if (!(this_present_pQryAccountregister && that_present_pQryAccountregister))
          return false;
        if (!this.pQryAccountregister.equals(that.pQryAccountregister))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryAccountregister_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryAccountregister()).compareTo(other.isSetPQryAccountregister());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryAccountregister()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryAccountregister, other.pQryAccountregister);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryAccountregister_args(");
      boolean first = true;

      sb.append("pQryAccountregister:");
      if (this.pQryAccountregister == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryAccountregister);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryAccountregister != null) {
        pQryAccountregister.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryAccountregister_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryAccountregister_argsStandardScheme getScheme() {
        return new reqQryAccountregister_argsStandardScheme();
      }
    }

    private static class reqQryAccountregister_argsStandardScheme extends StandardScheme<reqQryAccountregister_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryAccountregister_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_ACCOUNTREGISTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryAccountregister = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryAccountregisterField();
                struct.pQryAccountregister.read(iprot);
                struct.setPQryAccountregisterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryAccountregister_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryAccountregister != null) {
          oprot.writeFieldBegin(P_QRY_ACCOUNTREGISTER_FIELD_DESC);
          struct.pQryAccountregister.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryAccountregister_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryAccountregister_argsTupleScheme getScheme() {
        return new reqQryAccountregister_argsTupleScheme();
      }
    }

    private static class reqQryAccountregister_argsTupleScheme extends TupleScheme<reqQryAccountregister_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryAccountregister_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryAccountregister()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryAccountregister()) {
          struct.pQryAccountregister.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryAccountregister_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryAccountregister = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryAccountregisterField();
          struct.pQryAccountregister.read(iprot);
          struct.setPQryAccountregisterIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryAccountregister_result implements org.apache.thrift.TBase<reqQryAccountregister_result, reqQryAccountregister_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryAccountregister_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryAccountregister_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryAccountregister_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryAccountregister_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryAccountregister_result.class, metaDataMap);
    }

    public reqQryAccountregister_result() {
    }

    public reqQryAccountregister_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryAccountregister_result(reqQryAccountregister_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryAccountregister_result deepCopy() {
      return new reqQryAccountregister_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryAccountregister_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryAccountregister_result)
        return this.equals((reqQryAccountregister_result)that);
      return false;
    }

    public boolean equals(reqQryAccountregister_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryAccountregister_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryAccountregister_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryAccountregister_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryAccountregister_resultStandardScheme getScheme() {
        return new reqQryAccountregister_resultStandardScheme();
      }
    }

    private static class reqQryAccountregister_resultStandardScheme extends StandardScheme<reqQryAccountregister_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryAccountregister_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryAccountregister_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryAccountregister_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryAccountregister_resultTupleScheme getScheme() {
        return new reqQryAccountregister_resultTupleScheme();
      }
    }

    private static class reqQryAccountregister_resultTupleScheme extends TupleScheme<reqQryAccountregister_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryAccountregister_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryAccountregister_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryContractBank_args implements org.apache.thrift.TBase<reqQryContractBank_args, reqQryContractBank_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryContractBank_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryContractBank_args");

    private static final org.apache.thrift.protocol.TField P_QRY_CONTRACT_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryContractBank", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryContractBank_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryContractBank_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryContractBankField pQryContractBank; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_CONTRACT_BANK((short)1, "pQryContractBank"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_CONTRACT_BANK
            return P_QRY_CONTRACT_BANK;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_CONTRACT_BANK, new org.apache.thrift.meta_data.FieldMetaData("pQryContractBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryContractBankField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryContractBank_args.class, metaDataMap);
    }

    public reqQryContractBank_args() {
    }

    public reqQryContractBank_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryContractBankField pQryContractBank,
      int nRequestID)
    {
      this();
      this.pQryContractBank = pQryContractBank;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryContractBank_args(reqQryContractBank_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryContractBank()) {
        this.pQryContractBank = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryContractBankField(other.pQryContractBank);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryContractBank_args deepCopy() {
      return new reqQryContractBank_args(this);
    }

    @Override
    public void clear() {
      this.pQryContractBank = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryContractBankField getPQryContractBank() {
      return this.pQryContractBank;
    }

    public reqQryContractBank_args setPQryContractBank(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryContractBankField pQryContractBank) {
      this.pQryContractBank = pQryContractBank;
      return this;
    }

    public void unsetPQryContractBank() {
      this.pQryContractBank = null;
    }

    /** Returns true if field pQryContractBank is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryContractBank() {
      return this.pQryContractBank != null;
    }

    public void setPQryContractBankIsSet(boolean value) {
      if (!value) {
        this.pQryContractBank = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryContractBank_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_CONTRACT_BANK:
        if (value == null) {
          unsetPQryContractBank();
        } else {
          setPQryContractBank((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryContractBankField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_CONTRACT_BANK:
        return getPQryContractBank();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_CONTRACT_BANK:
        return isSetPQryContractBank();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryContractBank_args)
        return this.equals((reqQryContractBank_args)that);
      return false;
    }

    public boolean equals(reqQryContractBank_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryContractBank = true && this.isSetPQryContractBank();
      boolean that_present_pQryContractBank = true && that.isSetPQryContractBank();
      if (this_present_pQryContractBank || that_present_pQryContractBank) {
        if (!(this_present_pQryContractBank && that_present_pQryContractBank))
          return false;
        if (!this.pQryContractBank.equals(that.pQryContractBank))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryContractBank_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryContractBank()).compareTo(other.isSetPQryContractBank());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryContractBank()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryContractBank, other.pQryContractBank);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryContractBank_args(");
      boolean first = true;

      sb.append("pQryContractBank:");
      if (this.pQryContractBank == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryContractBank);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryContractBank != null) {
        pQryContractBank.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryContractBank_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryContractBank_argsStandardScheme getScheme() {
        return new reqQryContractBank_argsStandardScheme();
      }
    }

    private static class reqQryContractBank_argsStandardScheme extends StandardScheme<reqQryContractBank_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryContractBank_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_CONTRACT_BANK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryContractBank = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryContractBankField();
                struct.pQryContractBank.read(iprot);
                struct.setPQryContractBankIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryContractBank_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryContractBank != null) {
          oprot.writeFieldBegin(P_QRY_CONTRACT_BANK_FIELD_DESC);
          struct.pQryContractBank.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryContractBank_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryContractBank_argsTupleScheme getScheme() {
        return new reqQryContractBank_argsTupleScheme();
      }
    }

    private static class reqQryContractBank_argsTupleScheme extends TupleScheme<reqQryContractBank_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryContractBank_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryContractBank()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryContractBank()) {
          struct.pQryContractBank.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryContractBank_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryContractBank = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryContractBankField();
          struct.pQryContractBank.read(iprot);
          struct.setPQryContractBankIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryContractBank_result implements org.apache.thrift.TBase<reqQryContractBank_result, reqQryContractBank_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryContractBank_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryContractBank_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryContractBank_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryContractBank_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryContractBank_result.class, metaDataMap);
    }

    public reqQryContractBank_result() {
    }

    public reqQryContractBank_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryContractBank_result(reqQryContractBank_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryContractBank_result deepCopy() {
      return new reqQryContractBank_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryContractBank_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryContractBank_result)
        return this.equals((reqQryContractBank_result)that);
      return false;
    }

    public boolean equals(reqQryContractBank_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryContractBank_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryContractBank_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryContractBank_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryContractBank_resultStandardScheme getScheme() {
        return new reqQryContractBank_resultStandardScheme();
      }
    }

    private static class reqQryContractBank_resultStandardScheme extends StandardScheme<reqQryContractBank_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryContractBank_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryContractBank_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryContractBank_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryContractBank_resultTupleScheme getScheme() {
        return new reqQryContractBank_resultTupleScheme();
      }
    }

    private static class reqQryContractBank_resultTupleScheme extends TupleScheme<reqQryContractBank_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryContractBank_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryContractBank_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryParkedOrder_args implements org.apache.thrift.TBase<reqQryParkedOrder_args, reqQryParkedOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryParkedOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryParkedOrder_args");

    private static final org.apache.thrift.protocol.TField P_QRY_PARKED_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryParkedOrder", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryParkedOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryParkedOrder_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderField pQryParkedOrder; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_PARKED_ORDER((short)1, "pQryParkedOrder"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_PARKED_ORDER
            return P_QRY_PARKED_ORDER;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_PARKED_ORDER, new org.apache.thrift.meta_data.FieldMetaData("pQryParkedOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryParkedOrder_args.class, metaDataMap);
    }

    public reqQryParkedOrder_args() {
    }

    public reqQryParkedOrder_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderField pQryParkedOrder,
      int nRequestID)
    {
      this();
      this.pQryParkedOrder = pQryParkedOrder;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryParkedOrder_args(reqQryParkedOrder_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryParkedOrder()) {
        this.pQryParkedOrder = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderField(other.pQryParkedOrder);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryParkedOrder_args deepCopy() {
      return new reqQryParkedOrder_args(this);
    }

    @Override
    public void clear() {
      this.pQryParkedOrder = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderField getPQryParkedOrder() {
      return this.pQryParkedOrder;
    }

    public reqQryParkedOrder_args setPQryParkedOrder(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderField pQryParkedOrder) {
      this.pQryParkedOrder = pQryParkedOrder;
      return this;
    }

    public void unsetPQryParkedOrder() {
      this.pQryParkedOrder = null;
    }

    /** Returns true if field pQryParkedOrder is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryParkedOrder() {
      return this.pQryParkedOrder != null;
    }

    public void setPQryParkedOrderIsSet(boolean value) {
      if (!value) {
        this.pQryParkedOrder = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryParkedOrder_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_PARKED_ORDER:
        if (value == null) {
          unsetPQryParkedOrder();
        } else {
          setPQryParkedOrder((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_PARKED_ORDER:
        return getPQryParkedOrder();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_PARKED_ORDER:
        return isSetPQryParkedOrder();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryParkedOrder_args)
        return this.equals((reqQryParkedOrder_args)that);
      return false;
    }

    public boolean equals(reqQryParkedOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryParkedOrder = true && this.isSetPQryParkedOrder();
      boolean that_present_pQryParkedOrder = true && that.isSetPQryParkedOrder();
      if (this_present_pQryParkedOrder || that_present_pQryParkedOrder) {
        if (!(this_present_pQryParkedOrder && that_present_pQryParkedOrder))
          return false;
        if (!this.pQryParkedOrder.equals(that.pQryParkedOrder))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryParkedOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryParkedOrder()).compareTo(other.isSetPQryParkedOrder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryParkedOrder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryParkedOrder, other.pQryParkedOrder);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryParkedOrder_args(");
      boolean first = true;

      sb.append("pQryParkedOrder:");
      if (this.pQryParkedOrder == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryParkedOrder);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryParkedOrder != null) {
        pQryParkedOrder.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryParkedOrder_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryParkedOrder_argsStandardScheme getScheme() {
        return new reqQryParkedOrder_argsStandardScheme();
      }
    }

    private static class reqQryParkedOrder_argsStandardScheme extends StandardScheme<reqQryParkedOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryParkedOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_PARKED_ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryParkedOrder = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderField();
                struct.pQryParkedOrder.read(iprot);
                struct.setPQryParkedOrderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryParkedOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryParkedOrder != null) {
          oprot.writeFieldBegin(P_QRY_PARKED_ORDER_FIELD_DESC);
          struct.pQryParkedOrder.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryParkedOrder_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryParkedOrder_argsTupleScheme getScheme() {
        return new reqQryParkedOrder_argsTupleScheme();
      }
    }

    private static class reqQryParkedOrder_argsTupleScheme extends TupleScheme<reqQryParkedOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryParkedOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryParkedOrder()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryParkedOrder()) {
          struct.pQryParkedOrder.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryParkedOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryParkedOrder = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderField();
          struct.pQryParkedOrder.read(iprot);
          struct.setPQryParkedOrderIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryParkedOrder_result implements org.apache.thrift.TBase<reqQryParkedOrder_result, reqQryParkedOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryParkedOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryParkedOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryParkedOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryParkedOrder_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryParkedOrder_result.class, metaDataMap);
    }

    public reqQryParkedOrder_result() {
    }

    public reqQryParkedOrder_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryParkedOrder_result(reqQryParkedOrder_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryParkedOrder_result deepCopy() {
      return new reqQryParkedOrder_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryParkedOrder_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryParkedOrder_result)
        return this.equals((reqQryParkedOrder_result)that);
      return false;
    }

    public boolean equals(reqQryParkedOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryParkedOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryParkedOrder_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryParkedOrder_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryParkedOrder_resultStandardScheme getScheme() {
        return new reqQryParkedOrder_resultStandardScheme();
      }
    }

    private static class reqQryParkedOrder_resultStandardScheme extends StandardScheme<reqQryParkedOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryParkedOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryParkedOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryParkedOrder_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryParkedOrder_resultTupleScheme getScheme() {
        return new reqQryParkedOrder_resultTupleScheme();
      }
    }

    private static class reqQryParkedOrder_resultTupleScheme extends TupleScheme<reqQryParkedOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryParkedOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryParkedOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryParkedOrderAction_args implements org.apache.thrift.TBase<reqQryParkedOrderAction_args, reqQryParkedOrderAction_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryParkedOrderAction_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryParkedOrderAction_args");

    private static final org.apache.thrift.protocol.TField P_QRY_PARKED_ORDER_ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryParkedOrderAction", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryParkedOrderAction_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryParkedOrderAction_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderActionField pQryParkedOrderAction; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_PARKED_ORDER_ACTION((short)1, "pQryParkedOrderAction"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_PARKED_ORDER_ACTION
            return P_QRY_PARKED_ORDER_ACTION;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_PARKED_ORDER_ACTION, new org.apache.thrift.meta_data.FieldMetaData("pQryParkedOrderAction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderActionField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryParkedOrderAction_args.class, metaDataMap);
    }

    public reqQryParkedOrderAction_args() {
    }

    public reqQryParkedOrderAction_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderActionField pQryParkedOrderAction,
      int nRequestID)
    {
      this();
      this.pQryParkedOrderAction = pQryParkedOrderAction;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryParkedOrderAction_args(reqQryParkedOrderAction_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryParkedOrderAction()) {
        this.pQryParkedOrderAction = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderActionField(other.pQryParkedOrderAction);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryParkedOrderAction_args deepCopy() {
      return new reqQryParkedOrderAction_args(this);
    }

    @Override
    public void clear() {
      this.pQryParkedOrderAction = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderActionField getPQryParkedOrderAction() {
      return this.pQryParkedOrderAction;
    }

    public reqQryParkedOrderAction_args setPQryParkedOrderAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderActionField pQryParkedOrderAction) {
      this.pQryParkedOrderAction = pQryParkedOrderAction;
      return this;
    }

    public void unsetPQryParkedOrderAction() {
      this.pQryParkedOrderAction = null;
    }

    /** Returns true if field pQryParkedOrderAction is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryParkedOrderAction() {
      return this.pQryParkedOrderAction != null;
    }

    public void setPQryParkedOrderActionIsSet(boolean value) {
      if (!value) {
        this.pQryParkedOrderAction = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryParkedOrderAction_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_PARKED_ORDER_ACTION:
        if (value == null) {
          unsetPQryParkedOrderAction();
        } else {
          setPQryParkedOrderAction((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderActionField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_PARKED_ORDER_ACTION:
        return getPQryParkedOrderAction();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_PARKED_ORDER_ACTION:
        return isSetPQryParkedOrderAction();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryParkedOrderAction_args)
        return this.equals((reqQryParkedOrderAction_args)that);
      return false;
    }

    public boolean equals(reqQryParkedOrderAction_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryParkedOrderAction = true && this.isSetPQryParkedOrderAction();
      boolean that_present_pQryParkedOrderAction = true && that.isSetPQryParkedOrderAction();
      if (this_present_pQryParkedOrderAction || that_present_pQryParkedOrderAction) {
        if (!(this_present_pQryParkedOrderAction && that_present_pQryParkedOrderAction))
          return false;
        if (!this.pQryParkedOrderAction.equals(that.pQryParkedOrderAction))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryParkedOrderAction_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryParkedOrderAction()).compareTo(other.isSetPQryParkedOrderAction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryParkedOrderAction()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryParkedOrderAction, other.pQryParkedOrderAction);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryParkedOrderAction_args(");
      boolean first = true;

      sb.append("pQryParkedOrderAction:");
      if (this.pQryParkedOrderAction == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryParkedOrderAction);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryParkedOrderAction != null) {
        pQryParkedOrderAction.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryParkedOrderAction_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryParkedOrderAction_argsStandardScheme getScheme() {
        return new reqQryParkedOrderAction_argsStandardScheme();
      }
    }

    private static class reqQryParkedOrderAction_argsStandardScheme extends StandardScheme<reqQryParkedOrderAction_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryParkedOrderAction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_PARKED_ORDER_ACTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryParkedOrderAction = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderActionField();
                struct.pQryParkedOrderAction.read(iprot);
                struct.setPQryParkedOrderActionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryParkedOrderAction_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryParkedOrderAction != null) {
          oprot.writeFieldBegin(P_QRY_PARKED_ORDER_ACTION_FIELD_DESC);
          struct.pQryParkedOrderAction.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryParkedOrderAction_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryParkedOrderAction_argsTupleScheme getScheme() {
        return new reqQryParkedOrderAction_argsTupleScheme();
      }
    }

    private static class reqQryParkedOrderAction_argsTupleScheme extends TupleScheme<reqQryParkedOrderAction_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryParkedOrderAction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryParkedOrderAction()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryParkedOrderAction()) {
          struct.pQryParkedOrderAction.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryParkedOrderAction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryParkedOrderAction = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryParkedOrderActionField();
          struct.pQryParkedOrderAction.read(iprot);
          struct.setPQryParkedOrderActionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryParkedOrderAction_result implements org.apache.thrift.TBase<reqQryParkedOrderAction_result, reqQryParkedOrderAction_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryParkedOrderAction_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryParkedOrderAction_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryParkedOrderAction_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryParkedOrderAction_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryParkedOrderAction_result.class, metaDataMap);
    }

    public reqQryParkedOrderAction_result() {
    }

    public reqQryParkedOrderAction_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryParkedOrderAction_result(reqQryParkedOrderAction_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryParkedOrderAction_result deepCopy() {
      return new reqQryParkedOrderAction_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryParkedOrderAction_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryParkedOrderAction_result)
        return this.equals((reqQryParkedOrderAction_result)that);
      return false;
    }

    public boolean equals(reqQryParkedOrderAction_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryParkedOrderAction_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryParkedOrderAction_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryParkedOrderAction_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryParkedOrderAction_resultStandardScheme getScheme() {
        return new reqQryParkedOrderAction_resultStandardScheme();
      }
    }

    private static class reqQryParkedOrderAction_resultStandardScheme extends StandardScheme<reqQryParkedOrderAction_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryParkedOrderAction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryParkedOrderAction_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryParkedOrderAction_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryParkedOrderAction_resultTupleScheme getScheme() {
        return new reqQryParkedOrderAction_resultTupleScheme();
      }
    }

    private static class reqQryParkedOrderAction_resultTupleScheme extends TupleScheme<reqQryParkedOrderAction_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryParkedOrderAction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryParkedOrderAction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryTradingNotice_args implements org.apache.thrift.TBase<reqQryTradingNotice_args, reqQryTradingNotice_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryTradingNotice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryTradingNotice_args");

    private static final org.apache.thrift.protocol.TField P_QRY_TRADING_NOTICE_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryTradingNotice", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryTradingNotice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryTradingNotice_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingNoticeField pQryTradingNotice; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_TRADING_NOTICE((short)1, "pQryTradingNotice"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_TRADING_NOTICE
            return P_QRY_TRADING_NOTICE;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_TRADING_NOTICE, new org.apache.thrift.meta_data.FieldMetaData("pQryTradingNotice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingNoticeField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryTradingNotice_args.class, metaDataMap);
    }

    public reqQryTradingNotice_args() {
    }

    public reqQryTradingNotice_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingNoticeField pQryTradingNotice,
      int nRequestID)
    {
      this();
      this.pQryTradingNotice = pQryTradingNotice;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryTradingNotice_args(reqQryTradingNotice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryTradingNotice()) {
        this.pQryTradingNotice = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingNoticeField(other.pQryTradingNotice);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryTradingNotice_args deepCopy() {
      return new reqQryTradingNotice_args(this);
    }

    @Override
    public void clear() {
      this.pQryTradingNotice = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingNoticeField getPQryTradingNotice() {
      return this.pQryTradingNotice;
    }

    public reqQryTradingNotice_args setPQryTradingNotice(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingNoticeField pQryTradingNotice) {
      this.pQryTradingNotice = pQryTradingNotice;
      return this;
    }

    public void unsetPQryTradingNotice() {
      this.pQryTradingNotice = null;
    }

    /** Returns true if field pQryTradingNotice is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryTradingNotice() {
      return this.pQryTradingNotice != null;
    }

    public void setPQryTradingNoticeIsSet(boolean value) {
      if (!value) {
        this.pQryTradingNotice = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryTradingNotice_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_TRADING_NOTICE:
        if (value == null) {
          unsetPQryTradingNotice();
        } else {
          setPQryTradingNotice((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingNoticeField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_TRADING_NOTICE:
        return getPQryTradingNotice();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_TRADING_NOTICE:
        return isSetPQryTradingNotice();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryTradingNotice_args)
        return this.equals((reqQryTradingNotice_args)that);
      return false;
    }

    public boolean equals(reqQryTradingNotice_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryTradingNotice = true && this.isSetPQryTradingNotice();
      boolean that_present_pQryTradingNotice = true && that.isSetPQryTradingNotice();
      if (this_present_pQryTradingNotice || that_present_pQryTradingNotice) {
        if (!(this_present_pQryTradingNotice && that_present_pQryTradingNotice))
          return false;
        if (!this.pQryTradingNotice.equals(that.pQryTradingNotice))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryTradingNotice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryTradingNotice()).compareTo(other.isSetPQryTradingNotice());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryTradingNotice()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryTradingNotice, other.pQryTradingNotice);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryTradingNotice_args(");
      boolean first = true;

      sb.append("pQryTradingNotice:");
      if (this.pQryTradingNotice == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryTradingNotice);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryTradingNotice != null) {
        pQryTradingNotice.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryTradingNotice_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryTradingNotice_argsStandardScheme getScheme() {
        return new reqQryTradingNotice_argsStandardScheme();
      }
    }

    private static class reqQryTradingNotice_argsStandardScheme extends StandardScheme<reqQryTradingNotice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryTradingNotice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_TRADING_NOTICE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryTradingNotice = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingNoticeField();
                struct.pQryTradingNotice.read(iprot);
                struct.setPQryTradingNoticeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryTradingNotice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryTradingNotice != null) {
          oprot.writeFieldBegin(P_QRY_TRADING_NOTICE_FIELD_DESC);
          struct.pQryTradingNotice.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryTradingNotice_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryTradingNotice_argsTupleScheme getScheme() {
        return new reqQryTradingNotice_argsTupleScheme();
      }
    }

    private static class reqQryTradingNotice_argsTupleScheme extends TupleScheme<reqQryTradingNotice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryTradingNotice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryTradingNotice()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryTradingNotice()) {
          struct.pQryTradingNotice.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryTradingNotice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryTradingNotice = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingNoticeField();
          struct.pQryTradingNotice.read(iprot);
          struct.setPQryTradingNoticeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryTradingNotice_result implements org.apache.thrift.TBase<reqQryTradingNotice_result, reqQryTradingNotice_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryTradingNotice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryTradingNotice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryTradingNotice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryTradingNotice_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryTradingNotice_result.class, metaDataMap);
    }

    public reqQryTradingNotice_result() {
    }

    public reqQryTradingNotice_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryTradingNotice_result(reqQryTradingNotice_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryTradingNotice_result deepCopy() {
      return new reqQryTradingNotice_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryTradingNotice_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryTradingNotice_result)
        return this.equals((reqQryTradingNotice_result)that);
      return false;
    }

    public boolean equals(reqQryTradingNotice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryTradingNotice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryTradingNotice_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryTradingNotice_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryTradingNotice_resultStandardScheme getScheme() {
        return new reqQryTradingNotice_resultStandardScheme();
      }
    }

    private static class reqQryTradingNotice_resultStandardScheme extends StandardScheme<reqQryTradingNotice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryTradingNotice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryTradingNotice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryTradingNotice_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryTradingNotice_resultTupleScheme getScheme() {
        return new reqQryTradingNotice_resultTupleScheme();
      }
    }

    private static class reqQryTradingNotice_resultTupleScheme extends TupleScheme<reqQryTradingNotice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryTradingNotice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryTradingNotice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryBrokerTradingParams_args implements org.apache.thrift.TBase<reqQryBrokerTradingParams_args, reqQryBrokerTradingParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryBrokerTradingParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryBrokerTradingParams_args");

    private static final org.apache.thrift.protocol.TField P_QRY_BROKER_TRADING_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryBrokerTradingParams", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryBrokerTradingParams_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryBrokerTradingParams_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingParamsField pQryBrokerTradingParams; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_BROKER_TRADING_PARAMS((short)1, "pQryBrokerTradingParams"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_BROKER_TRADING_PARAMS
            return P_QRY_BROKER_TRADING_PARAMS;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_BROKER_TRADING_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("pQryBrokerTradingParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingParamsField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryBrokerTradingParams_args.class, metaDataMap);
    }

    public reqQryBrokerTradingParams_args() {
    }

    public reqQryBrokerTradingParams_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingParamsField pQryBrokerTradingParams,
      int nRequestID)
    {
      this();
      this.pQryBrokerTradingParams = pQryBrokerTradingParams;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryBrokerTradingParams_args(reqQryBrokerTradingParams_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryBrokerTradingParams()) {
        this.pQryBrokerTradingParams = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingParamsField(other.pQryBrokerTradingParams);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryBrokerTradingParams_args deepCopy() {
      return new reqQryBrokerTradingParams_args(this);
    }

    @Override
    public void clear() {
      this.pQryBrokerTradingParams = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingParamsField getPQryBrokerTradingParams() {
      return this.pQryBrokerTradingParams;
    }

    public reqQryBrokerTradingParams_args setPQryBrokerTradingParams(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingParamsField pQryBrokerTradingParams) {
      this.pQryBrokerTradingParams = pQryBrokerTradingParams;
      return this;
    }

    public void unsetPQryBrokerTradingParams() {
      this.pQryBrokerTradingParams = null;
    }

    /** Returns true if field pQryBrokerTradingParams is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryBrokerTradingParams() {
      return this.pQryBrokerTradingParams != null;
    }

    public void setPQryBrokerTradingParamsIsSet(boolean value) {
      if (!value) {
        this.pQryBrokerTradingParams = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryBrokerTradingParams_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_BROKER_TRADING_PARAMS:
        if (value == null) {
          unsetPQryBrokerTradingParams();
        } else {
          setPQryBrokerTradingParams((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingParamsField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_BROKER_TRADING_PARAMS:
        return getPQryBrokerTradingParams();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_BROKER_TRADING_PARAMS:
        return isSetPQryBrokerTradingParams();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryBrokerTradingParams_args)
        return this.equals((reqQryBrokerTradingParams_args)that);
      return false;
    }

    public boolean equals(reqQryBrokerTradingParams_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryBrokerTradingParams = true && this.isSetPQryBrokerTradingParams();
      boolean that_present_pQryBrokerTradingParams = true && that.isSetPQryBrokerTradingParams();
      if (this_present_pQryBrokerTradingParams || that_present_pQryBrokerTradingParams) {
        if (!(this_present_pQryBrokerTradingParams && that_present_pQryBrokerTradingParams))
          return false;
        if (!this.pQryBrokerTradingParams.equals(that.pQryBrokerTradingParams))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryBrokerTradingParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryBrokerTradingParams()).compareTo(other.isSetPQryBrokerTradingParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryBrokerTradingParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryBrokerTradingParams, other.pQryBrokerTradingParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryBrokerTradingParams_args(");
      boolean first = true;

      sb.append("pQryBrokerTradingParams:");
      if (this.pQryBrokerTradingParams == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryBrokerTradingParams);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryBrokerTradingParams != null) {
        pQryBrokerTradingParams.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryBrokerTradingParams_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryBrokerTradingParams_argsStandardScheme getScheme() {
        return new reqQryBrokerTradingParams_argsStandardScheme();
      }
    }

    private static class reqQryBrokerTradingParams_argsStandardScheme extends StandardScheme<reqQryBrokerTradingParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryBrokerTradingParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_BROKER_TRADING_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryBrokerTradingParams = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingParamsField();
                struct.pQryBrokerTradingParams.read(iprot);
                struct.setPQryBrokerTradingParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryBrokerTradingParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryBrokerTradingParams != null) {
          oprot.writeFieldBegin(P_QRY_BROKER_TRADING_PARAMS_FIELD_DESC);
          struct.pQryBrokerTradingParams.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryBrokerTradingParams_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryBrokerTradingParams_argsTupleScheme getScheme() {
        return new reqQryBrokerTradingParams_argsTupleScheme();
      }
    }

    private static class reqQryBrokerTradingParams_argsTupleScheme extends TupleScheme<reqQryBrokerTradingParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryBrokerTradingParams_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryBrokerTradingParams()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryBrokerTradingParams()) {
          struct.pQryBrokerTradingParams.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryBrokerTradingParams_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryBrokerTradingParams = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingParamsField();
          struct.pQryBrokerTradingParams.read(iprot);
          struct.setPQryBrokerTradingParamsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryBrokerTradingParams_result implements org.apache.thrift.TBase<reqQryBrokerTradingParams_result, reqQryBrokerTradingParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryBrokerTradingParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryBrokerTradingParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryBrokerTradingParams_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryBrokerTradingParams_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryBrokerTradingParams_result.class, metaDataMap);
    }

    public reqQryBrokerTradingParams_result() {
    }

    public reqQryBrokerTradingParams_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryBrokerTradingParams_result(reqQryBrokerTradingParams_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryBrokerTradingParams_result deepCopy() {
      return new reqQryBrokerTradingParams_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryBrokerTradingParams_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryBrokerTradingParams_result)
        return this.equals((reqQryBrokerTradingParams_result)that);
      return false;
    }

    public boolean equals(reqQryBrokerTradingParams_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryBrokerTradingParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryBrokerTradingParams_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryBrokerTradingParams_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryBrokerTradingParams_resultStandardScheme getScheme() {
        return new reqQryBrokerTradingParams_resultStandardScheme();
      }
    }

    private static class reqQryBrokerTradingParams_resultStandardScheme extends StandardScheme<reqQryBrokerTradingParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryBrokerTradingParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryBrokerTradingParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryBrokerTradingParams_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryBrokerTradingParams_resultTupleScheme getScheme() {
        return new reqQryBrokerTradingParams_resultTupleScheme();
      }
    }

    private static class reqQryBrokerTradingParams_resultTupleScheme extends TupleScheme<reqQryBrokerTradingParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryBrokerTradingParams_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryBrokerTradingParams_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryBrokerTradingAlgos_args implements org.apache.thrift.TBase<reqQryBrokerTradingAlgos_args, reqQryBrokerTradingAlgos_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryBrokerTradingAlgos_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryBrokerTradingAlgos_args");

    private static final org.apache.thrift.protocol.TField P_QRY_BROKER_TRADING_ALGOS_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryBrokerTradingAlgos", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryBrokerTradingAlgos_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryBrokerTradingAlgos_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingAlgosField pQryBrokerTradingAlgos; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_BROKER_TRADING_ALGOS((short)1, "pQryBrokerTradingAlgos"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_BROKER_TRADING_ALGOS
            return P_QRY_BROKER_TRADING_ALGOS;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_BROKER_TRADING_ALGOS, new org.apache.thrift.meta_data.FieldMetaData("pQryBrokerTradingAlgos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingAlgosField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryBrokerTradingAlgos_args.class, metaDataMap);
    }

    public reqQryBrokerTradingAlgos_args() {
    }

    public reqQryBrokerTradingAlgos_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingAlgosField pQryBrokerTradingAlgos,
      int nRequestID)
    {
      this();
      this.pQryBrokerTradingAlgos = pQryBrokerTradingAlgos;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryBrokerTradingAlgos_args(reqQryBrokerTradingAlgos_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryBrokerTradingAlgos()) {
        this.pQryBrokerTradingAlgos = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingAlgosField(other.pQryBrokerTradingAlgos);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryBrokerTradingAlgos_args deepCopy() {
      return new reqQryBrokerTradingAlgos_args(this);
    }

    @Override
    public void clear() {
      this.pQryBrokerTradingAlgos = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingAlgosField getPQryBrokerTradingAlgos() {
      return this.pQryBrokerTradingAlgos;
    }

    public reqQryBrokerTradingAlgos_args setPQryBrokerTradingAlgos(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingAlgosField pQryBrokerTradingAlgos) {
      this.pQryBrokerTradingAlgos = pQryBrokerTradingAlgos;
      return this;
    }

    public void unsetPQryBrokerTradingAlgos() {
      this.pQryBrokerTradingAlgos = null;
    }

    /** Returns true if field pQryBrokerTradingAlgos is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryBrokerTradingAlgos() {
      return this.pQryBrokerTradingAlgos != null;
    }

    public void setPQryBrokerTradingAlgosIsSet(boolean value) {
      if (!value) {
        this.pQryBrokerTradingAlgos = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryBrokerTradingAlgos_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_BROKER_TRADING_ALGOS:
        if (value == null) {
          unsetPQryBrokerTradingAlgos();
        } else {
          setPQryBrokerTradingAlgos((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingAlgosField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_BROKER_TRADING_ALGOS:
        return getPQryBrokerTradingAlgos();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_BROKER_TRADING_ALGOS:
        return isSetPQryBrokerTradingAlgos();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryBrokerTradingAlgos_args)
        return this.equals((reqQryBrokerTradingAlgos_args)that);
      return false;
    }

    public boolean equals(reqQryBrokerTradingAlgos_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryBrokerTradingAlgos = true && this.isSetPQryBrokerTradingAlgos();
      boolean that_present_pQryBrokerTradingAlgos = true && that.isSetPQryBrokerTradingAlgos();
      if (this_present_pQryBrokerTradingAlgos || that_present_pQryBrokerTradingAlgos) {
        if (!(this_present_pQryBrokerTradingAlgos && that_present_pQryBrokerTradingAlgos))
          return false;
        if (!this.pQryBrokerTradingAlgos.equals(that.pQryBrokerTradingAlgos))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryBrokerTradingAlgos_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryBrokerTradingAlgos()).compareTo(other.isSetPQryBrokerTradingAlgos());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryBrokerTradingAlgos()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryBrokerTradingAlgos, other.pQryBrokerTradingAlgos);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryBrokerTradingAlgos_args(");
      boolean first = true;

      sb.append("pQryBrokerTradingAlgos:");
      if (this.pQryBrokerTradingAlgos == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryBrokerTradingAlgos);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryBrokerTradingAlgos != null) {
        pQryBrokerTradingAlgos.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryBrokerTradingAlgos_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryBrokerTradingAlgos_argsStandardScheme getScheme() {
        return new reqQryBrokerTradingAlgos_argsStandardScheme();
      }
    }

    private static class reqQryBrokerTradingAlgos_argsStandardScheme extends StandardScheme<reqQryBrokerTradingAlgos_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryBrokerTradingAlgos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_BROKER_TRADING_ALGOS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryBrokerTradingAlgos = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingAlgosField();
                struct.pQryBrokerTradingAlgos.read(iprot);
                struct.setPQryBrokerTradingAlgosIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryBrokerTradingAlgos_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryBrokerTradingAlgos != null) {
          oprot.writeFieldBegin(P_QRY_BROKER_TRADING_ALGOS_FIELD_DESC);
          struct.pQryBrokerTradingAlgos.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryBrokerTradingAlgos_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryBrokerTradingAlgos_argsTupleScheme getScheme() {
        return new reqQryBrokerTradingAlgos_argsTupleScheme();
      }
    }

    private static class reqQryBrokerTradingAlgos_argsTupleScheme extends TupleScheme<reqQryBrokerTradingAlgos_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryBrokerTradingAlgos_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryBrokerTradingAlgos()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryBrokerTradingAlgos()) {
          struct.pQryBrokerTradingAlgos.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryBrokerTradingAlgos_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryBrokerTradingAlgos = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryBrokerTradingAlgosField();
          struct.pQryBrokerTradingAlgos.read(iprot);
          struct.setPQryBrokerTradingAlgosIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryBrokerTradingAlgos_result implements org.apache.thrift.TBase<reqQryBrokerTradingAlgos_result, reqQryBrokerTradingAlgos_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryBrokerTradingAlgos_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryBrokerTradingAlgos_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryBrokerTradingAlgos_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryBrokerTradingAlgos_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryBrokerTradingAlgos_result.class, metaDataMap);
    }

    public reqQryBrokerTradingAlgos_result() {
    }

    public reqQryBrokerTradingAlgos_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryBrokerTradingAlgos_result(reqQryBrokerTradingAlgos_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryBrokerTradingAlgos_result deepCopy() {
      return new reqQryBrokerTradingAlgos_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryBrokerTradingAlgos_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryBrokerTradingAlgos_result)
        return this.equals((reqQryBrokerTradingAlgos_result)that);
      return false;
    }

    public boolean equals(reqQryBrokerTradingAlgos_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryBrokerTradingAlgos_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryBrokerTradingAlgos_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryBrokerTradingAlgos_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryBrokerTradingAlgos_resultStandardScheme getScheme() {
        return new reqQryBrokerTradingAlgos_resultStandardScheme();
      }
    }

    private static class reqQryBrokerTradingAlgos_resultStandardScheme extends StandardScheme<reqQryBrokerTradingAlgos_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryBrokerTradingAlgos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryBrokerTradingAlgos_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryBrokerTradingAlgos_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryBrokerTradingAlgos_resultTupleScheme getScheme() {
        return new reqQryBrokerTradingAlgos_resultTupleScheme();
      }
    }

    private static class reqQryBrokerTradingAlgos_resultTupleScheme extends TupleScheme<reqQryBrokerTradingAlgos_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryBrokerTradingAlgos_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryBrokerTradingAlgos_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQueryCFMMCTradingAccountToken_args implements org.apache.thrift.TBase<reqQueryCFMMCTradingAccountToken_args, reqQueryCFMMCTradingAccountToken_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQueryCFMMCTradingAccountToken_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQueryCFMMCTradingAccountToken_args");

    private static final org.apache.thrift.protocol.TField P_QUERY_CFMMCTRADING_ACCOUNT_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("pQueryCFMMCTradingAccountToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQueryCFMMCTradingAccountToken_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQueryCFMMCTradingAccountToken_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryCFMMCTradingAccountTokenField pQueryCFMMCTradingAccountToken; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QUERY_CFMMCTRADING_ACCOUNT_TOKEN((short)1, "pQueryCFMMCTradingAccountToken"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QUERY_CFMMCTRADING_ACCOUNT_TOKEN
            return P_QUERY_CFMMCTRADING_ACCOUNT_TOKEN;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QUERY_CFMMCTRADING_ACCOUNT_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("pQueryCFMMCTradingAccountToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryCFMMCTradingAccountTokenField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQueryCFMMCTradingAccountToken_args.class, metaDataMap);
    }

    public reqQueryCFMMCTradingAccountToken_args() {
    }

    public reqQueryCFMMCTradingAccountToken_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryCFMMCTradingAccountTokenField pQueryCFMMCTradingAccountToken,
      int nRequestID)
    {
      this();
      this.pQueryCFMMCTradingAccountToken = pQueryCFMMCTradingAccountToken;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQueryCFMMCTradingAccountToken_args(reqQueryCFMMCTradingAccountToken_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQueryCFMMCTradingAccountToken()) {
        this.pQueryCFMMCTradingAccountToken = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryCFMMCTradingAccountTokenField(other.pQueryCFMMCTradingAccountToken);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQueryCFMMCTradingAccountToken_args deepCopy() {
      return new reqQueryCFMMCTradingAccountToken_args(this);
    }

    @Override
    public void clear() {
      this.pQueryCFMMCTradingAccountToken = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryCFMMCTradingAccountTokenField getPQueryCFMMCTradingAccountToken() {
      return this.pQueryCFMMCTradingAccountToken;
    }

    public reqQueryCFMMCTradingAccountToken_args setPQueryCFMMCTradingAccountToken(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryCFMMCTradingAccountTokenField pQueryCFMMCTradingAccountToken) {
      this.pQueryCFMMCTradingAccountToken = pQueryCFMMCTradingAccountToken;
      return this;
    }

    public void unsetPQueryCFMMCTradingAccountToken() {
      this.pQueryCFMMCTradingAccountToken = null;
    }

    /** Returns true if field pQueryCFMMCTradingAccountToken is set (has been assigned a value) and false otherwise */
    public boolean isSetPQueryCFMMCTradingAccountToken() {
      return this.pQueryCFMMCTradingAccountToken != null;
    }

    public void setPQueryCFMMCTradingAccountTokenIsSet(boolean value) {
      if (!value) {
        this.pQueryCFMMCTradingAccountToken = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQueryCFMMCTradingAccountToken_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QUERY_CFMMCTRADING_ACCOUNT_TOKEN:
        if (value == null) {
          unsetPQueryCFMMCTradingAccountToken();
        } else {
          setPQueryCFMMCTradingAccountToken((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryCFMMCTradingAccountTokenField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QUERY_CFMMCTRADING_ACCOUNT_TOKEN:
        return getPQueryCFMMCTradingAccountToken();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QUERY_CFMMCTRADING_ACCOUNT_TOKEN:
        return isSetPQueryCFMMCTradingAccountToken();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQueryCFMMCTradingAccountToken_args)
        return this.equals((reqQueryCFMMCTradingAccountToken_args)that);
      return false;
    }

    public boolean equals(reqQueryCFMMCTradingAccountToken_args that) {
      if (that == null)
        return false;

      boolean this_present_pQueryCFMMCTradingAccountToken = true && this.isSetPQueryCFMMCTradingAccountToken();
      boolean that_present_pQueryCFMMCTradingAccountToken = true && that.isSetPQueryCFMMCTradingAccountToken();
      if (this_present_pQueryCFMMCTradingAccountToken || that_present_pQueryCFMMCTradingAccountToken) {
        if (!(this_present_pQueryCFMMCTradingAccountToken && that_present_pQueryCFMMCTradingAccountToken))
          return false;
        if (!this.pQueryCFMMCTradingAccountToken.equals(that.pQueryCFMMCTradingAccountToken))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQueryCFMMCTradingAccountToken_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQueryCFMMCTradingAccountToken()).compareTo(other.isSetPQueryCFMMCTradingAccountToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQueryCFMMCTradingAccountToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQueryCFMMCTradingAccountToken, other.pQueryCFMMCTradingAccountToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQueryCFMMCTradingAccountToken_args(");
      boolean first = true;

      sb.append("pQueryCFMMCTradingAccountToken:");
      if (this.pQueryCFMMCTradingAccountToken == null) {
        sb.append("null");
      } else {
        sb.append(this.pQueryCFMMCTradingAccountToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQueryCFMMCTradingAccountToken != null) {
        pQueryCFMMCTradingAccountToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQueryCFMMCTradingAccountToken_argsStandardSchemeFactory implements SchemeFactory {
      public reqQueryCFMMCTradingAccountToken_argsStandardScheme getScheme() {
        return new reqQueryCFMMCTradingAccountToken_argsStandardScheme();
      }
    }

    private static class reqQueryCFMMCTradingAccountToken_argsStandardScheme extends StandardScheme<reqQueryCFMMCTradingAccountToken_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQueryCFMMCTradingAccountToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QUERY_CFMMCTRADING_ACCOUNT_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQueryCFMMCTradingAccountToken = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryCFMMCTradingAccountTokenField();
                struct.pQueryCFMMCTradingAccountToken.read(iprot);
                struct.setPQueryCFMMCTradingAccountTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQueryCFMMCTradingAccountToken_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQueryCFMMCTradingAccountToken != null) {
          oprot.writeFieldBegin(P_QUERY_CFMMCTRADING_ACCOUNT_TOKEN_FIELD_DESC);
          struct.pQueryCFMMCTradingAccountToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQueryCFMMCTradingAccountToken_argsTupleSchemeFactory implements SchemeFactory {
      public reqQueryCFMMCTradingAccountToken_argsTupleScheme getScheme() {
        return new reqQueryCFMMCTradingAccountToken_argsTupleScheme();
      }
    }

    private static class reqQueryCFMMCTradingAccountToken_argsTupleScheme extends TupleScheme<reqQueryCFMMCTradingAccountToken_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQueryCFMMCTradingAccountToken_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQueryCFMMCTradingAccountToken()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQueryCFMMCTradingAccountToken()) {
          struct.pQueryCFMMCTradingAccountToken.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQueryCFMMCTradingAccountToken_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQueryCFMMCTradingAccountToken = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryCFMMCTradingAccountTokenField();
          struct.pQueryCFMMCTradingAccountToken.read(iprot);
          struct.setPQueryCFMMCTradingAccountTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQueryCFMMCTradingAccountToken_result implements org.apache.thrift.TBase<reqQueryCFMMCTradingAccountToken_result, reqQueryCFMMCTradingAccountToken_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQueryCFMMCTradingAccountToken_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQueryCFMMCTradingAccountToken_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQueryCFMMCTradingAccountToken_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQueryCFMMCTradingAccountToken_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQueryCFMMCTradingAccountToken_result.class, metaDataMap);
    }

    public reqQueryCFMMCTradingAccountToken_result() {
    }

    public reqQueryCFMMCTradingAccountToken_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQueryCFMMCTradingAccountToken_result(reqQueryCFMMCTradingAccountToken_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQueryCFMMCTradingAccountToken_result deepCopy() {
      return new reqQueryCFMMCTradingAccountToken_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQueryCFMMCTradingAccountToken_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQueryCFMMCTradingAccountToken_result)
        return this.equals((reqQueryCFMMCTradingAccountToken_result)that);
      return false;
    }

    public boolean equals(reqQueryCFMMCTradingAccountToken_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQueryCFMMCTradingAccountToken_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQueryCFMMCTradingAccountToken_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQueryCFMMCTradingAccountToken_resultStandardSchemeFactory implements SchemeFactory {
      public reqQueryCFMMCTradingAccountToken_resultStandardScheme getScheme() {
        return new reqQueryCFMMCTradingAccountToken_resultStandardScheme();
      }
    }

    private static class reqQueryCFMMCTradingAccountToken_resultStandardScheme extends StandardScheme<reqQueryCFMMCTradingAccountToken_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQueryCFMMCTradingAccountToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQueryCFMMCTradingAccountToken_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQueryCFMMCTradingAccountToken_resultTupleSchemeFactory implements SchemeFactory {
      public reqQueryCFMMCTradingAccountToken_resultTupleScheme getScheme() {
        return new reqQueryCFMMCTradingAccountToken_resultTupleScheme();
      }
    }

    private static class reqQueryCFMMCTradingAccountToken_resultTupleScheme extends TupleScheme<reqQueryCFMMCTradingAccountToken_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQueryCFMMCTradingAccountToken_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQueryCFMMCTradingAccountToken_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqFromBankToFutureByFuture_args implements org.apache.thrift.TBase<reqFromBankToFutureByFuture_args, reqFromBankToFutureByFuture_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqFromBankToFutureByFuture_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqFromBankToFutureByFuture_args");

    private static final org.apache.thrift.protocol.TField P_REQ_TRANSFER_FIELD_DESC = new org.apache.thrift.protocol.TField("pReqTransfer", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqFromBankToFutureByFuture_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqFromBankToFutureByFuture_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField pReqTransfer; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_REQ_TRANSFER((short)1, "pReqTransfer"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_REQ_TRANSFER
            return P_REQ_TRANSFER;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_REQ_TRANSFER, new org.apache.thrift.meta_data.FieldMetaData("pReqTransfer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqFromBankToFutureByFuture_args.class, metaDataMap);
    }

    public reqFromBankToFutureByFuture_args() {
    }

    public reqFromBankToFutureByFuture_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField pReqTransfer,
      int nRequestID)
    {
      this();
      this.pReqTransfer = pReqTransfer;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqFromBankToFutureByFuture_args(reqFromBankToFutureByFuture_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPReqTransfer()) {
        this.pReqTransfer = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField(other.pReqTransfer);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqFromBankToFutureByFuture_args deepCopy() {
      return new reqFromBankToFutureByFuture_args(this);
    }

    @Override
    public void clear() {
      this.pReqTransfer = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField getPReqTransfer() {
      return this.pReqTransfer;
    }

    public reqFromBankToFutureByFuture_args setPReqTransfer(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField pReqTransfer) {
      this.pReqTransfer = pReqTransfer;
      return this;
    }

    public void unsetPReqTransfer() {
      this.pReqTransfer = null;
    }

    /** Returns true if field pReqTransfer is set (has been assigned a value) and false otherwise */
    public boolean isSetPReqTransfer() {
      return this.pReqTransfer != null;
    }

    public void setPReqTransferIsSet(boolean value) {
      if (!value) {
        this.pReqTransfer = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqFromBankToFutureByFuture_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_REQ_TRANSFER:
        if (value == null) {
          unsetPReqTransfer();
        } else {
          setPReqTransfer((cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_REQ_TRANSFER:
        return getPReqTransfer();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_REQ_TRANSFER:
        return isSetPReqTransfer();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqFromBankToFutureByFuture_args)
        return this.equals((reqFromBankToFutureByFuture_args)that);
      return false;
    }

    public boolean equals(reqFromBankToFutureByFuture_args that) {
      if (that == null)
        return false;

      boolean this_present_pReqTransfer = true && this.isSetPReqTransfer();
      boolean that_present_pReqTransfer = true && that.isSetPReqTransfer();
      if (this_present_pReqTransfer || that_present_pReqTransfer) {
        if (!(this_present_pReqTransfer && that_present_pReqTransfer))
          return false;
        if (!this.pReqTransfer.equals(that.pReqTransfer))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqFromBankToFutureByFuture_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPReqTransfer()).compareTo(other.isSetPReqTransfer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPReqTransfer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pReqTransfer, other.pReqTransfer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqFromBankToFutureByFuture_args(");
      boolean first = true;

      sb.append("pReqTransfer:");
      if (this.pReqTransfer == null) {
        sb.append("null");
      } else {
        sb.append(this.pReqTransfer);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pReqTransfer != null) {
        pReqTransfer.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqFromBankToFutureByFuture_argsStandardSchemeFactory implements SchemeFactory {
      public reqFromBankToFutureByFuture_argsStandardScheme getScheme() {
        return new reqFromBankToFutureByFuture_argsStandardScheme();
      }
    }

    private static class reqFromBankToFutureByFuture_argsStandardScheme extends StandardScheme<reqFromBankToFutureByFuture_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqFromBankToFutureByFuture_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_REQ_TRANSFER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pReqTransfer = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField();
                struct.pReqTransfer.read(iprot);
                struct.setPReqTransferIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqFromBankToFutureByFuture_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pReqTransfer != null) {
          oprot.writeFieldBegin(P_REQ_TRANSFER_FIELD_DESC);
          struct.pReqTransfer.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqFromBankToFutureByFuture_argsTupleSchemeFactory implements SchemeFactory {
      public reqFromBankToFutureByFuture_argsTupleScheme getScheme() {
        return new reqFromBankToFutureByFuture_argsTupleScheme();
      }
    }

    private static class reqFromBankToFutureByFuture_argsTupleScheme extends TupleScheme<reqFromBankToFutureByFuture_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqFromBankToFutureByFuture_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPReqTransfer()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPReqTransfer()) {
          struct.pReqTransfer.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqFromBankToFutureByFuture_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pReqTransfer = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField();
          struct.pReqTransfer.read(iprot);
          struct.setPReqTransferIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqFromBankToFutureByFuture_result implements org.apache.thrift.TBase<reqFromBankToFutureByFuture_result, reqFromBankToFutureByFuture_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqFromBankToFutureByFuture_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqFromBankToFutureByFuture_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqFromBankToFutureByFuture_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqFromBankToFutureByFuture_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqFromBankToFutureByFuture_result.class, metaDataMap);
    }

    public reqFromBankToFutureByFuture_result() {
    }

    public reqFromBankToFutureByFuture_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqFromBankToFutureByFuture_result(reqFromBankToFutureByFuture_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqFromBankToFutureByFuture_result deepCopy() {
      return new reqFromBankToFutureByFuture_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqFromBankToFutureByFuture_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqFromBankToFutureByFuture_result)
        return this.equals((reqFromBankToFutureByFuture_result)that);
      return false;
    }

    public boolean equals(reqFromBankToFutureByFuture_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqFromBankToFutureByFuture_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqFromBankToFutureByFuture_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqFromBankToFutureByFuture_resultStandardSchemeFactory implements SchemeFactory {
      public reqFromBankToFutureByFuture_resultStandardScheme getScheme() {
        return new reqFromBankToFutureByFuture_resultStandardScheme();
      }
    }

    private static class reqFromBankToFutureByFuture_resultStandardScheme extends StandardScheme<reqFromBankToFutureByFuture_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqFromBankToFutureByFuture_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqFromBankToFutureByFuture_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqFromBankToFutureByFuture_resultTupleSchemeFactory implements SchemeFactory {
      public reqFromBankToFutureByFuture_resultTupleScheme getScheme() {
        return new reqFromBankToFutureByFuture_resultTupleScheme();
      }
    }

    private static class reqFromBankToFutureByFuture_resultTupleScheme extends TupleScheme<reqFromBankToFutureByFuture_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqFromBankToFutureByFuture_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqFromBankToFutureByFuture_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqFromFutureToBankByFuture_args implements org.apache.thrift.TBase<reqFromFutureToBankByFuture_args, reqFromFutureToBankByFuture_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqFromFutureToBankByFuture_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqFromFutureToBankByFuture_args");

    private static final org.apache.thrift.protocol.TField P_REQ_TRANSFER_FIELD_DESC = new org.apache.thrift.protocol.TField("pReqTransfer", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqFromFutureToBankByFuture_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqFromFutureToBankByFuture_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField pReqTransfer; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_REQ_TRANSFER((short)1, "pReqTransfer"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_REQ_TRANSFER
            return P_REQ_TRANSFER;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_REQ_TRANSFER, new org.apache.thrift.meta_data.FieldMetaData("pReqTransfer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqFromFutureToBankByFuture_args.class, metaDataMap);
    }

    public reqFromFutureToBankByFuture_args() {
    }

    public reqFromFutureToBankByFuture_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField pReqTransfer,
      int nRequestID)
    {
      this();
      this.pReqTransfer = pReqTransfer;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqFromFutureToBankByFuture_args(reqFromFutureToBankByFuture_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPReqTransfer()) {
        this.pReqTransfer = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField(other.pReqTransfer);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqFromFutureToBankByFuture_args deepCopy() {
      return new reqFromFutureToBankByFuture_args(this);
    }

    @Override
    public void clear() {
      this.pReqTransfer = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField getPReqTransfer() {
      return this.pReqTransfer;
    }

    public reqFromFutureToBankByFuture_args setPReqTransfer(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField pReqTransfer) {
      this.pReqTransfer = pReqTransfer;
      return this;
    }

    public void unsetPReqTransfer() {
      this.pReqTransfer = null;
    }

    /** Returns true if field pReqTransfer is set (has been assigned a value) and false otherwise */
    public boolean isSetPReqTransfer() {
      return this.pReqTransfer != null;
    }

    public void setPReqTransferIsSet(boolean value) {
      if (!value) {
        this.pReqTransfer = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqFromFutureToBankByFuture_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_REQ_TRANSFER:
        if (value == null) {
          unsetPReqTransfer();
        } else {
          setPReqTransfer((cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_REQ_TRANSFER:
        return getPReqTransfer();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_REQ_TRANSFER:
        return isSetPReqTransfer();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqFromFutureToBankByFuture_args)
        return this.equals((reqFromFutureToBankByFuture_args)that);
      return false;
    }

    public boolean equals(reqFromFutureToBankByFuture_args that) {
      if (that == null)
        return false;

      boolean this_present_pReqTransfer = true && this.isSetPReqTransfer();
      boolean that_present_pReqTransfer = true && that.isSetPReqTransfer();
      if (this_present_pReqTransfer || that_present_pReqTransfer) {
        if (!(this_present_pReqTransfer && that_present_pReqTransfer))
          return false;
        if (!this.pReqTransfer.equals(that.pReqTransfer))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqFromFutureToBankByFuture_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPReqTransfer()).compareTo(other.isSetPReqTransfer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPReqTransfer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pReqTransfer, other.pReqTransfer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqFromFutureToBankByFuture_args(");
      boolean first = true;

      sb.append("pReqTransfer:");
      if (this.pReqTransfer == null) {
        sb.append("null");
      } else {
        sb.append(this.pReqTransfer);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pReqTransfer != null) {
        pReqTransfer.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqFromFutureToBankByFuture_argsStandardSchemeFactory implements SchemeFactory {
      public reqFromFutureToBankByFuture_argsStandardScheme getScheme() {
        return new reqFromFutureToBankByFuture_argsStandardScheme();
      }
    }

    private static class reqFromFutureToBankByFuture_argsStandardScheme extends StandardScheme<reqFromFutureToBankByFuture_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqFromFutureToBankByFuture_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_REQ_TRANSFER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pReqTransfer = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField();
                struct.pReqTransfer.read(iprot);
                struct.setPReqTransferIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqFromFutureToBankByFuture_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pReqTransfer != null) {
          oprot.writeFieldBegin(P_REQ_TRANSFER_FIELD_DESC);
          struct.pReqTransfer.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqFromFutureToBankByFuture_argsTupleSchemeFactory implements SchemeFactory {
      public reqFromFutureToBankByFuture_argsTupleScheme getScheme() {
        return new reqFromFutureToBankByFuture_argsTupleScheme();
      }
    }

    private static class reqFromFutureToBankByFuture_argsTupleScheme extends TupleScheme<reqFromFutureToBankByFuture_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqFromFutureToBankByFuture_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPReqTransfer()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPReqTransfer()) {
          struct.pReqTransfer.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqFromFutureToBankByFuture_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pReqTransfer = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqTransferField();
          struct.pReqTransfer.read(iprot);
          struct.setPReqTransferIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqFromFutureToBankByFuture_result implements org.apache.thrift.TBase<reqFromFutureToBankByFuture_result, reqFromFutureToBankByFuture_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqFromFutureToBankByFuture_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqFromFutureToBankByFuture_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqFromFutureToBankByFuture_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqFromFutureToBankByFuture_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqFromFutureToBankByFuture_result.class, metaDataMap);
    }

    public reqFromFutureToBankByFuture_result() {
    }

    public reqFromFutureToBankByFuture_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqFromFutureToBankByFuture_result(reqFromFutureToBankByFuture_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqFromFutureToBankByFuture_result deepCopy() {
      return new reqFromFutureToBankByFuture_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqFromFutureToBankByFuture_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqFromFutureToBankByFuture_result)
        return this.equals((reqFromFutureToBankByFuture_result)that);
      return false;
    }

    public boolean equals(reqFromFutureToBankByFuture_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqFromFutureToBankByFuture_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqFromFutureToBankByFuture_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqFromFutureToBankByFuture_resultStandardSchemeFactory implements SchemeFactory {
      public reqFromFutureToBankByFuture_resultStandardScheme getScheme() {
        return new reqFromFutureToBankByFuture_resultStandardScheme();
      }
    }

    private static class reqFromFutureToBankByFuture_resultStandardScheme extends StandardScheme<reqFromFutureToBankByFuture_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqFromFutureToBankByFuture_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqFromFutureToBankByFuture_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqFromFutureToBankByFuture_resultTupleSchemeFactory implements SchemeFactory {
      public reqFromFutureToBankByFuture_resultTupleScheme getScheme() {
        return new reqFromFutureToBankByFuture_resultTupleScheme();
      }
    }

    private static class reqFromFutureToBankByFuture_resultTupleScheme extends TupleScheme<reqFromFutureToBankByFuture_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqFromFutureToBankByFuture_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqFromFutureToBankByFuture_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQueryBankAccountMoneyByFuture_args implements org.apache.thrift.TBase<reqQueryBankAccountMoneyByFuture_args, reqQueryBankAccountMoneyByFuture_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQueryBankAccountMoneyByFuture_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQueryBankAccountMoneyByFuture_args");

    private static final org.apache.thrift.protocol.TField P_REQ_QUERY_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("pReqQueryAccount", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQueryBankAccountMoneyByFuture_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQueryBankAccountMoneyByFuture_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqQueryAccountField pReqQueryAccount; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_REQ_QUERY_ACCOUNT((short)1, "pReqQueryAccount"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_REQ_QUERY_ACCOUNT
            return P_REQ_QUERY_ACCOUNT;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_REQ_QUERY_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("pReqQueryAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqQueryAccountField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQueryBankAccountMoneyByFuture_args.class, metaDataMap);
    }

    public reqQueryBankAccountMoneyByFuture_args() {
    }

    public reqQueryBankAccountMoneyByFuture_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqQueryAccountField pReqQueryAccount,
      int nRequestID)
    {
      this();
      this.pReqQueryAccount = pReqQueryAccount;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQueryBankAccountMoneyByFuture_args(reqQueryBankAccountMoneyByFuture_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPReqQueryAccount()) {
        this.pReqQueryAccount = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqQueryAccountField(other.pReqQueryAccount);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQueryBankAccountMoneyByFuture_args deepCopy() {
      return new reqQueryBankAccountMoneyByFuture_args(this);
    }

    @Override
    public void clear() {
      this.pReqQueryAccount = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqQueryAccountField getPReqQueryAccount() {
      return this.pReqQueryAccount;
    }

    public reqQueryBankAccountMoneyByFuture_args setPReqQueryAccount(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqQueryAccountField pReqQueryAccount) {
      this.pReqQueryAccount = pReqQueryAccount;
      return this;
    }

    public void unsetPReqQueryAccount() {
      this.pReqQueryAccount = null;
    }

    /** Returns true if field pReqQueryAccount is set (has been assigned a value) and false otherwise */
    public boolean isSetPReqQueryAccount() {
      return this.pReqQueryAccount != null;
    }

    public void setPReqQueryAccountIsSet(boolean value) {
      if (!value) {
        this.pReqQueryAccount = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQueryBankAccountMoneyByFuture_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_REQ_QUERY_ACCOUNT:
        if (value == null) {
          unsetPReqQueryAccount();
        } else {
          setPReqQueryAccount((cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqQueryAccountField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_REQ_QUERY_ACCOUNT:
        return getPReqQueryAccount();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_REQ_QUERY_ACCOUNT:
        return isSetPReqQueryAccount();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQueryBankAccountMoneyByFuture_args)
        return this.equals((reqQueryBankAccountMoneyByFuture_args)that);
      return false;
    }

    public boolean equals(reqQueryBankAccountMoneyByFuture_args that) {
      if (that == null)
        return false;

      boolean this_present_pReqQueryAccount = true && this.isSetPReqQueryAccount();
      boolean that_present_pReqQueryAccount = true && that.isSetPReqQueryAccount();
      if (this_present_pReqQueryAccount || that_present_pReqQueryAccount) {
        if (!(this_present_pReqQueryAccount && that_present_pReqQueryAccount))
          return false;
        if (!this.pReqQueryAccount.equals(that.pReqQueryAccount))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQueryBankAccountMoneyByFuture_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPReqQueryAccount()).compareTo(other.isSetPReqQueryAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPReqQueryAccount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pReqQueryAccount, other.pReqQueryAccount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQueryBankAccountMoneyByFuture_args(");
      boolean first = true;

      sb.append("pReqQueryAccount:");
      if (this.pReqQueryAccount == null) {
        sb.append("null");
      } else {
        sb.append(this.pReqQueryAccount);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pReqQueryAccount != null) {
        pReqQueryAccount.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQueryBankAccountMoneyByFuture_argsStandardSchemeFactory implements SchemeFactory {
      public reqQueryBankAccountMoneyByFuture_argsStandardScheme getScheme() {
        return new reqQueryBankAccountMoneyByFuture_argsStandardScheme();
      }
    }

    private static class reqQueryBankAccountMoneyByFuture_argsStandardScheme extends StandardScheme<reqQueryBankAccountMoneyByFuture_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQueryBankAccountMoneyByFuture_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_REQ_QUERY_ACCOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pReqQueryAccount = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqQueryAccountField();
                struct.pReqQueryAccount.read(iprot);
                struct.setPReqQueryAccountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQueryBankAccountMoneyByFuture_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pReqQueryAccount != null) {
          oprot.writeFieldBegin(P_REQ_QUERY_ACCOUNT_FIELD_DESC);
          struct.pReqQueryAccount.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQueryBankAccountMoneyByFuture_argsTupleSchemeFactory implements SchemeFactory {
      public reqQueryBankAccountMoneyByFuture_argsTupleScheme getScheme() {
        return new reqQueryBankAccountMoneyByFuture_argsTupleScheme();
      }
    }

    private static class reqQueryBankAccountMoneyByFuture_argsTupleScheme extends TupleScheme<reqQueryBankAccountMoneyByFuture_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQueryBankAccountMoneyByFuture_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPReqQueryAccount()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPReqQueryAccount()) {
          struct.pReqQueryAccount.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQueryBankAccountMoneyByFuture_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pReqQueryAccount = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqQueryAccountField();
          struct.pReqQueryAccount.read(iprot);
          struct.setPReqQueryAccountIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQueryBankAccountMoneyByFuture_result implements org.apache.thrift.TBase<reqQueryBankAccountMoneyByFuture_result, reqQueryBankAccountMoneyByFuture_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQueryBankAccountMoneyByFuture_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQueryBankAccountMoneyByFuture_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQueryBankAccountMoneyByFuture_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQueryBankAccountMoneyByFuture_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQueryBankAccountMoneyByFuture_result.class, metaDataMap);
    }

    public reqQueryBankAccountMoneyByFuture_result() {
    }

    public reqQueryBankAccountMoneyByFuture_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQueryBankAccountMoneyByFuture_result(reqQueryBankAccountMoneyByFuture_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQueryBankAccountMoneyByFuture_result deepCopy() {
      return new reqQueryBankAccountMoneyByFuture_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQueryBankAccountMoneyByFuture_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQueryBankAccountMoneyByFuture_result)
        return this.equals((reqQueryBankAccountMoneyByFuture_result)that);
      return false;
    }

    public boolean equals(reqQueryBankAccountMoneyByFuture_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQueryBankAccountMoneyByFuture_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQueryBankAccountMoneyByFuture_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQueryBankAccountMoneyByFuture_resultStandardSchemeFactory implements SchemeFactory {
      public reqQueryBankAccountMoneyByFuture_resultStandardScheme getScheme() {
        return new reqQueryBankAccountMoneyByFuture_resultStandardScheme();
      }
    }

    private static class reqQueryBankAccountMoneyByFuture_resultStandardScheme extends StandardScheme<reqQueryBankAccountMoneyByFuture_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQueryBankAccountMoneyByFuture_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQueryBankAccountMoneyByFuture_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQueryBankAccountMoneyByFuture_resultTupleSchemeFactory implements SchemeFactory {
      public reqQueryBankAccountMoneyByFuture_resultTupleScheme getScheme() {
        return new reqQueryBankAccountMoneyByFuture_resultTupleScheme();
      }
    }

    private static class reqQueryBankAccountMoneyByFuture_resultTupleScheme extends TupleScheme<reqQueryBankAccountMoneyByFuture_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQueryBankAccountMoneyByFuture_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQueryBankAccountMoneyByFuture_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
