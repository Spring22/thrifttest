/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcQuoteField implements org.apache.thrift.TBase<CThostFtdcQuoteField, CThostFtdcQuoteField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcQuoteField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcQuoteField");

  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INVESTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("investorID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INSTRUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instrumentID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField QUOTE_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("quoteRef", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ASK_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("askPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField BID_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("bidPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField ASK_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("askVolume", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField BID_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("bidVolume", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestID", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField BUSINESS_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("businessUnit", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ASK_OFFSET_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("askOffsetFlag", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField BID_OFFSET_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("bidOffsetFlag", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField ASK_HEDGE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("askHedgeFlag", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField BID_HEDGE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("bidHedgeFlag", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField QUOTE_LOCAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("quoteLocalID", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField EXCHANGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeID", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField PARTICIPANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("participantID", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientID", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField EXCHANGE_INST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeInstID", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField TRADER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("traderID", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField INSTALL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("installID", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField NOTIFY_SEQUENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("notifySequence", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField ORDER_SUBMIT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("orderSubmitStatus", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField TRADING_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("tradingDay", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField SETTLEMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("settlementID", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField QUOTE_SYS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("quoteSysID", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField INSERT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("insertDate", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField INSERT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("insertTime", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField CANCEL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelTime", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField QUOTE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("quoteStatus", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField CLEARING_PART_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clearingPartID", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField SEQUENCE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("sequenceNo", org.apache.thrift.protocol.TType.I32, (short)33);
  private static final org.apache.thrift.protocol.TField ASK_ORDER_SYS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("askOrderSysID", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField BID_ORDER_SYS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bidOrderSysID", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField FRONT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("frontID", org.apache.thrift.protocol.TType.I32, (short)36);
  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.I32, (short)37);
  private static final org.apache.thrift.protocol.TField USER_PRODUCT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("userProductInfo", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField STATUS_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("statusMsg", org.apache.thrift.protocol.TType.STRING, (short)39);
  private static final org.apache.thrift.protocol.TField ACTIVE_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activeUserID", org.apache.thrift.protocol.TType.STRING, (short)40);
  private static final org.apache.thrift.protocol.TField BROKER_QUOTE_SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerQuoteSeq", org.apache.thrift.protocol.TType.I32, (short)41);
  private static final org.apache.thrift.protocol.TField ASK_ORDER_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("askOrderRef", org.apache.thrift.protocol.TType.STRING, (short)42);
  private static final org.apache.thrift.protocol.TField BID_ORDER_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("bidOrderRef", org.apache.thrift.protocol.TType.STRING, (short)43);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcQuoteFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcQuoteFieldTupleSchemeFactory());
  }

  public String brokerID; // required
  public String investorID; // required
  public String instrumentID; // required
  public String quoteRef; // required
  public String userID; // required
  public double askPrice; // required
  public double bidPrice; // required
  public int askVolume; // required
  public int bidVolume; // required
  public int requestID; // required
  public String businessUnit; // required
  public String askOffsetFlag; // required
  public String bidOffsetFlag; // required
  public String askHedgeFlag; // required
  public String bidHedgeFlag; // required
  public String quoteLocalID; // required
  public String exchangeID; // required
  public String participantID; // required
  public String clientID; // required
  public String exchangeInstID; // required
  public String traderID; // required
  public int installID; // required
  public int notifySequence; // required
  public String orderSubmitStatus; // required
  public String tradingDay; // required
  public int settlementID; // required
  public String quoteSysID; // required
  public String insertDate; // required
  public String insertTime; // required
  public String cancelTime; // required
  public String quoteStatus; // required
  public String clearingPartID; // required
  public int sequenceNo; // required
  public String askOrderSysID; // required
  public String bidOrderSysID; // required
  public int frontID; // required
  public int sessionID; // required
  public String userProductInfo; // required
  public String statusMsg; // required
  public String activeUserID; // required
  public int brokerQuoteSeq; // required
  public String askOrderRef; // required
  public String bidOrderRef; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BROKER_ID((short)1, "brokerID"),
    INVESTOR_ID((short)2, "investorID"),
    INSTRUMENT_ID((short)3, "instrumentID"),
    QUOTE_REF((short)4, "quoteRef"),
    USER_ID((short)5, "userID"),
    ASK_PRICE((short)6, "askPrice"),
    BID_PRICE((short)7, "bidPrice"),
    ASK_VOLUME((short)8, "askVolume"),
    BID_VOLUME((short)9, "bidVolume"),
    REQUEST_ID((short)10, "requestID"),
    BUSINESS_UNIT((short)11, "businessUnit"),
    ASK_OFFSET_FLAG((short)12, "askOffsetFlag"),
    BID_OFFSET_FLAG((short)13, "bidOffsetFlag"),
    ASK_HEDGE_FLAG((short)14, "askHedgeFlag"),
    BID_HEDGE_FLAG((short)15, "bidHedgeFlag"),
    QUOTE_LOCAL_ID((short)16, "quoteLocalID"),
    EXCHANGE_ID((short)17, "exchangeID"),
    PARTICIPANT_ID((short)18, "participantID"),
    CLIENT_ID((short)19, "clientID"),
    EXCHANGE_INST_ID((short)20, "exchangeInstID"),
    TRADER_ID((short)21, "traderID"),
    INSTALL_ID((short)22, "installID"),
    NOTIFY_SEQUENCE((short)23, "notifySequence"),
    ORDER_SUBMIT_STATUS((short)24, "orderSubmitStatus"),
    TRADING_DAY((short)25, "tradingDay"),
    SETTLEMENT_ID((short)26, "settlementID"),
    QUOTE_SYS_ID((short)27, "quoteSysID"),
    INSERT_DATE((short)28, "insertDate"),
    INSERT_TIME((short)29, "insertTime"),
    CANCEL_TIME((short)30, "cancelTime"),
    QUOTE_STATUS((short)31, "quoteStatus"),
    CLEARING_PART_ID((short)32, "clearingPartID"),
    SEQUENCE_NO((short)33, "sequenceNo"),
    ASK_ORDER_SYS_ID((short)34, "askOrderSysID"),
    BID_ORDER_SYS_ID((short)35, "bidOrderSysID"),
    FRONT_ID((short)36, "frontID"),
    SESSION_ID((short)37, "sessionID"),
    USER_PRODUCT_INFO((short)38, "userProductInfo"),
    STATUS_MSG((short)39, "statusMsg"),
    ACTIVE_USER_ID((short)40, "activeUserID"),
    BROKER_QUOTE_SEQ((short)41, "brokerQuoteSeq"),
    ASK_ORDER_REF((short)42, "askOrderRef"),
    BID_ORDER_REF((short)43, "bidOrderRef");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BROKER_ID
          return BROKER_ID;
        case 2: // INVESTOR_ID
          return INVESTOR_ID;
        case 3: // INSTRUMENT_ID
          return INSTRUMENT_ID;
        case 4: // QUOTE_REF
          return QUOTE_REF;
        case 5: // USER_ID
          return USER_ID;
        case 6: // ASK_PRICE
          return ASK_PRICE;
        case 7: // BID_PRICE
          return BID_PRICE;
        case 8: // ASK_VOLUME
          return ASK_VOLUME;
        case 9: // BID_VOLUME
          return BID_VOLUME;
        case 10: // REQUEST_ID
          return REQUEST_ID;
        case 11: // BUSINESS_UNIT
          return BUSINESS_UNIT;
        case 12: // ASK_OFFSET_FLAG
          return ASK_OFFSET_FLAG;
        case 13: // BID_OFFSET_FLAG
          return BID_OFFSET_FLAG;
        case 14: // ASK_HEDGE_FLAG
          return ASK_HEDGE_FLAG;
        case 15: // BID_HEDGE_FLAG
          return BID_HEDGE_FLAG;
        case 16: // QUOTE_LOCAL_ID
          return QUOTE_LOCAL_ID;
        case 17: // EXCHANGE_ID
          return EXCHANGE_ID;
        case 18: // PARTICIPANT_ID
          return PARTICIPANT_ID;
        case 19: // CLIENT_ID
          return CLIENT_ID;
        case 20: // EXCHANGE_INST_ID
          return EXCHANGE_INST_ID;
        case 21: // TRADER_ID
          return TRADER_ID;
        case 22: // INSTALL_ID
          return INSTALL_ID;
        case 23: // NOTIFY_SEQUENCE
          return NOTIFY_SEQUENCE;
        case 24: // ORDER_SUBMIT_STATUS
          return ORDER_SUBMIT_STATUS;
        case 25: // TRADING_DAY
          return TRADING_DAY;
        case 26: // SETTLEMENT_ID
          return SETTLEMENT_ID;
        case 27: // QUOTE_SYS_ID
          return QUOTE_SYS_ID;
        case 28: // INSERT_DATE
          return INSERT_DATE;
        case 29: // INSERT_TIME
          return INSERT_TIME;
        case 30: // CANCEL_TIME
          return CANCEL_TIME;
        case 31: // QUOTE_STATUS
          return QUOTE_STATUS;
        case 32: // CLEARING_PART_ID
          return CLEARING_PART_ID;
        case 33: // SEQUENCE_NO
          return SEQUENCE_NO;
        case 34: // ASK_ORDER_SYS_ID
          return ASK_ORDER_SYS_ID;
        case 35: // BID_ORDER_SYS_ID
          return BID_ORDER_SYS_ID;
        case 36: // FRONT_ID
          return FRONT_ID;
        case 37: // SESSION_ID
          return SESSION_ID;
        case 38: // USER_PRODUCT_INFO
          return USER_PRODUCT_INFO;
        case 39: // STATUS_MSG
          return STATUS_MSG;
        case 40: // ACTIVE_USER_ID
          return ACTIVE_USER_ID;
        case 41: // BROKER_QUOTE_SEQ
          return BROKER_QUOTE_SEQ;
        case 42: // ASK_ORDER_REF
          return ASK_ORDER_REF;
        case 43: // BID_ORDER_REF
          return BID_ORDER_REF;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ASKPRICE_ISSET_ID = 0;
  private static final int __BIDPRICE_ISSET_ID = 1;
  private static final int __ASKVOLUME_ISSET_ID = 2;
  private static final int __BIDVOLUME_ISSET_ID = 3;
  private static final int __REQUESTID_ISSET_ID = 4;
  private static final int __INSTALLID_ISSET_ID = 5;
  private static final int __NOTIFYSEQUENCE_ISSET_ID = 6;
  private static final int __SETTLEMENTID_ISSET_ID = 7;
  private static final int __SEQUENCENO_ISSET_ID = 8;
  private static final int __FRONTID_ISSET_ID = 9;
  private static final int __SESSIONID_ISSET_ID = 10;
  private static final int __BROKERQUOTESEQ_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.INVESTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("investorID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInvestorIDType")));
    tmpMap.put(_Fields.INSTRUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("instrumentID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInstrumentIDType")));
    tmpMap.put(_Fields.QUOTE_REF, new org.apache.thrift.meta_data.FieldMetaData("quoteRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderRefType")));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcUserIDType")));
    tmpMap.put(_Fields.ASK_PRICE, new org.apache.thrift.meta_data.FieldMetaData("askPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.BID_PRICE, new org.apache.thrift.meta_data.FieldMetaData("bidPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.ASK_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("askVolume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcVolumeType")));
    tmpMap.put(_Fields.BID_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("bidVolume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcVolumeType")));
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcRequestIDType")));
    tmpMap.put(_Fields.BUSINESS_UNIT, new org.apache.thrift.meta_data.FieldMetaData("businessUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBusinessUnitType")));
    tmpMap.put(_Fields.ASK_OFFSET_FLAG, new org.apache.thrift.meta_data.FieldMetaData("askOffsetFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOffsetFlagType")));
    tmpMap.put(_Fields.BID_OFFSET_FLAG, new org.apache.thrift.meta_data.FieldMetaData("bidOffsetFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOffsetFlagType")));
    tmpMap.put(_Fields.ASK_HEDGE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("askHedgeFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcHedgeFlagType")));
    tmpMap.put(_Fields.BID_HEDGE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("bidHedgeFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcHedgeFlagType")));
    tmpMap.put(_Fields.QUOTE_LOCAL_ID, new org.apache.thrift.meta_data.FieldMetaData("quoteLocalID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderLocalIDType")));
    tmpMap.put(_Fields.EXCHANGE_ID, new org.apache.thrift.meta_data.FieldMetaData("exchangeID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcExchangeIDType")));
    tmpMap.put(_Fields.PARTICIPANT_ID, new org.apache.thrift.meta_data.FieldMetaData("participantID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcParticipantIDType")));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcClientIDType")));
    tmpMap.put(_Fields.EXCHANGE_INST_ID, new org.apache.thrift.meta_data.FieldMetaData("exchangeInstID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcExchangeInstIDType")));
    tmpMap.put(_Fields.TRADER_ID, new org.apache.thrift.meta_data.FieldMetaData("traderID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTraderIDType")));
    tmpMap.put(_Fields.INSTALL_ID, new org.apache.thrift.meta_data.FieldMetaData("installID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcInstallIDType")));
    tmpMap.put(_Fields.NOTIFY_SEQUENCE, new org.apache.thrift.meta_data.FieldMetaData("notifySequence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcSequenceNoType")));
    tmpMap.put(_Fields.ORDER_SUBMIT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("orderSubmitStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderSubmitStatusType")));
    tmpMap.put(_Fields.TRADING_DAY, new org.apache.thrift.meta_data.FieldMetaData("tradingDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    tmpMap.put(_Fields.SETTLEMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("settlementID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcSettlementIDType")));
    tmpMap.put(_Fields.QUOTE_SYS_ID, new org.apache.thrift.meta_data.FieldMetaData("quoteSysID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderSysIDType")));
    tmpMap.put(_Fields.INSERT_DATE, new org.apache.thrift.meta_data.FieldMetaData("insertDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    tmpMap.put(_Fields.INSERT_TIME, new org.apache.thrift.meta_data.FieldMetaData("insertTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeType")));
    tmpMap.put(_Fields.CANCEL_TIME, new org.apache.thrift.meta_data.FieldMetaData("cancelTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeType")));
    tmpMap.put(_Fields.QUOTE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("quoteStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderStatusType")));
    tmpMap.put(_Fields.CLEARING_PART_ID, new org.apache.thrift.meta_data.FieldMetaData("clearingPartID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcParticipantIDType")));
    tmpMap.put(_Fields.SEQUENCE_NO, new org.apache.thrift.meta_data.FieldMetaData("sequenceNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcSequenceNoType")));
    tmpMap.put(_Fields.ASK_ORDER_SYS_ID, new org.apache.thrift.meta_data.FieldMetaData("askOrderSysID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderSysIDType")));
    tmpMap.put(_Fields.BID_ORDER_SYS_ID, new org.apache.thrift.meta_data.FieldMetaData("bidOrderSysID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderSysIDType")));
    tmpMap.put(_Fields.FRONT_ID, new org.apache.thrift.meta_data.FieldMetaData("frontID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcFrontIDType")));
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcSessionIDType")));
    tmpMap.put(_Fields.USER_PRODUCT_INFO, new org.apache.thrift.meta_data.FieldMetaData("userProductInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcProductInfoType")));
    tmpMap.put(_Fields.STATUS_MSG, new org.apache.thrift.meta_data.FieldMetaData("statusMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcErrorMsgType")));
    tmpMap.put(_Fields.ACTIVE_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("activeUserID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcUserIDType")));
    tmpMap.put(_Fields.BROKER_QUOTE_SEQ, new org.apache.thrift.meta_data.FieldMetaData("brokerQuoteSeq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcSequenceNoType")));
    tmpMap.put(_Fields.ASK_ORDER_REF, new org.apache.thrift.meta_data.FieldMetaData("askOrderRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderRefType")));
    tmpMap.put(_Fields.BID_ORDER_REF, new org.apache.thrift.meta_data.FieldMetaData("bidOrderRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderRefType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcQuoteField.class, metaDataMap);
  }

  public CThostFtdcQuoteField() {
  }

  public CThostFtdcQuoteField(
    String brokerID,
    String investorID,
    String instrumentID,
    String quoteRef,
    String userID,
    double askPrice,
    double bidPrice,
    int askVolume,
    int bidVolume,
    int requestID,
    String businessUnit,
    String askOffsetFlag,
    String bidOffsetFlag,
    String askHedgeFlag,
    String bidHedgeFlag,
    String quoteLocalID,
    String exchangeID,
    String participantID,
    String clientID,
    String exchangeInstID,
    String traderID,
    int installID,
    int notifySequence,
    String orderSubmitStatus,
    String tradingDay,
    int settlementID,
    String quoteSysID,
    String insertDate,
    String insertTime,
    String cancelTime,
    String quoteStatus,
    String clearingPartID,
    int sequenceNo,
    String askOrderSysID,
    String bidOrderSysID,
    int frontID,
    int sessionID,
    String userProductInfo,
    String statusMsg,
    String activeUserID,
    int brokerQuoteSeq,
    String askOrderRef,
    String bidOrderRef)
  {
    this();
    this.brokerID = brokerID;
    this.investorID = investorID;
    this.instrumentID = instrumentID;
    this.quoteRef = quoteRef;
    this.userID = userID;
    this.askPrice = askPrice;
    setAskPriceIsSet(true);
    this.bidPrice = bidPrice;
    setBidPriceIsSet(true);
    this.askVolume = askVolume;
    setAskVolumeIsSet(true);
    this.bidVolume = bidVolume;
    setBidVolumeIsSet(true);
    this.requestID = requestID;
    setRequestIDIsSet(true);
    this.businessUnit = businessUnit;
    this.askOffsetFlag = askOffsetFlag;
    this.bidOffsetFlag = bidOffsetFlag;
    this.askHedgeFlag = askHedgeFlag;
    this.bidHedgeFlag = bidHedgeFlag;
    this.quoteLocalID = quoteLocalID;
    this.exchangeID = exchangeID;
    this.participantID = participantID;
    this.clientID = clientID;
    this.exchangeInstID = exchangeInstID;
    this.traderID = traderID;
    this.installID = installID;
    setInstallIDIsSet(true);
    this.notifySequence = notifySequence;
    setNotifySequenceIsSet(true);
    this.orderSubmitStatus = orderSubmitStatus;
    this.tradingDay = tradingDay;
    this.settlementID = settlementID;
    setSettlementIDIsSet(true);
    this.quoteSysID = quoteSysID;
    this.insertDate = insertDate;
    this.insertTime = insertTime;
    this.cancelTime = cancelTime;
    this.quoteStatus = quoteStatus;
    this.clearingPartID = clearingPartID;
    this.sequenceNo = sequenceNo;
    setSequenceNoIsSet(true);
    this.askOrderSysID = askOrderSysID;
    this.bidOrderSysID = bidOrderSysID;
    this.frontID = frontID;
    setFrontIDIsSet(true);
    this.sessionID = sessionID;
    setSessionIDIsSet(true);
    this.userProductInfo = userProductInfo;
    this.statusMsg = statusMsg;
    this.activeUserID = activeUserID;
    this.brokerQuoteSeq = brokerQuoteSeq;
    setBrokerQuoteSeqIsSet(true);
    this.askOrderRef = askOrderRef;
    this.bidOrderRef = bidOrderRef;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcQuoteField(CThostFtdcQuoteField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetInvestorID()) {
      this.investorID = other.investorID;
    }
    if (other.isSetInstrumentID()) {
      this.instrumentID = other.instrumentID;
    }
    if (other.isSetQuoteRef()) {
      this.quoteRef = other.quoteRef;
    }
    if (other.isSetUserID()) {
      this.userID = other.userID;
    }
    this.askPrice = other.askPrice;
    this.bidPrice = other.bidPrice;
    this.askVolume = other.askVolume;
    this.bidVolume = other.bidVolume;
    this.requestID = other.requestID;
    if (other.isSetBusinessUnit()) {
      this.businessUnit = other.businessUnit;
    }
    if (other.isSetAskOffsetFlag()) {
      this.askOffsetFlag = other.askOffsetFlag;
    }
    if (other.isSetBidOffsetFlag()) {
      this.bidOffsetFlag = other.bidOffsetFlag;
    }
    if (other.isSetAskHedgeFlag()) {
      this.askHedgeFlag = other.askHedgeFlag;
    }
    if (other.isSetBidHedgeFlag()) {
      this.bidHedgeFlag = other.bidHedgeFlag;
    }
    if (other.isSetQuoteLocalID()) {
      this.quoteLocalID = other.quoteLocalID;
    }
    if (other.isSetExchangeID()) {
      this.exchangeID = other.exchangeID;
    }
    if (other.isSetParticipantID()) {
      this.participantID = other.participantID;
    }
    if (other.isSetClientID()) {
      this.clientID = other.clientID;
    }
    if (other.isSetExchangeInstID()) {
      this.exchangeInstID = other.exchangeInstID;
    }
    if (other.isSetTraderID()) {
      this.traderID = other.traderID;
    }
    this.installID = other.installID;
    this.notifySequence = other.notifySequence;
    if (other.isSetOrderSubmitStatus()) {
      this.orderSubmitStatus = other.orderSubmitStatus;
    }
    if (other.isSetTradingDay()) {
      this.tradingDay = other.tradingDay;
    }
    this.settlementID = other.settlementID;
    if (other.isSetQuoteSysID()) {
      this.quoteSysID = other.quoteSysID;
    }
    if (other.isSetInsertDate()) {
      this.insertDate = other.insertDate;
    }
    if (other.isSetInsertTime()) {
      this.insertTime = other.insertTime;
    }
    if (other.isSetCancelTime()) {
      this.cancelTime = other.cancelTime;
    }
    if (other.isSetQuoteStatus()) {
      this.quoteStatus = other.quoteStatus;
    }
    if (other.isSetClearingPartID()) {
      this.clearingPartID = other.clearingPartID;
    }
    this.sequenceNo = other.sequenceNo;
    if (other.isSetAskOrderSysID()) {
      this.askOrderSysID = other.askOrderSysID;
    }
    if (other.isSetBidOrderSysID()) {
      this.bidOrderSysID = other.bidOrderSysID;
    }
    this.frontID = other.frontID;
    this.sessionID = other.sessionID;
    if (other.isSetUserProductInfo()) {
      this.userProductInfo = other.userProductInfo;
    }
    if (other.isSetStatusMsg()) {
      this.statusMsg = other.statusMsg;
    }
    if (other.isSetActiveUserID()) {
      this.activeUserID = other.activeUserID;
    }
    this.brokerQuoteSeq = other.brokerQuoteSeq;
    if (other.isSetAskOrderRef()) {
      this.askOrderRef = other.askOrderRef;
    }
    if (other.isSetBidOrderRef()) {
      this.bidOrderRef = other.bidOrderRef;
    }
  }

  public CThostFtdcQuoteField deepCopy() {
    return new CThostFtdcQuoteField(this);
  }

  @Override
  public void clear() {
    this.brokerID = null;
    this.investorID = null;
    this.instrumentID = null;
    this.quoteRef = null;
    this.userID = null;
    setAskPriceIsSet(false);
    this.askPrice = 0.0;
    setBidPriceIsSet(false);
    this.bidPrice = 0.0;
    setAskVolumeIsSet(false);
    this.askVolume = 0;
    setBidVolumeIsSet(false);
    this.bidVolume = 0;
    setRequestIDIsSet(false);
    this.requestID = 0;
    this.businessUnit = null;
    this.askOffsetFlag = null;
    this.bidOffsetFlag = null;
    this.askHedgeFlag = null;
    this.bidHedgeFlag = null;
    this.quoteLocalID = null;
    this.exchangeID = null;
    this.participantID = null;
    this.clientID = null;
    this.exchangeInstID = null;
    this.traderID = null;
    setInstallIDIsSet(false);
    this.installID = 0;
    setNotifySequenceIsSet(false);
    this.notifySequence = 0;
    this.orderSubmitStatus = null;
    this.tradingDay = null;
    setSettlementIDIsSet(false);
    this.settlementID = 0;
    this.quoteSysID = null;
    this.insertDate = null;
    this.insertTime = null;
    this.cancelTime = null;
    this.quoteStatus = null;
    this.clearingPartID = null;
    setSequenceNoIsSet(false);
    this.sequenceNo = 0;
    this.askOrderSysID = null;
    this.bidOrderSysID = null;
    setFrontIDIsSet(false);
    this.frontID = 0;
    setSessionIDIsSet(false);
    this.sessionID = 0;
    this.userProductInfo = null;
    this.statusMsg = null;
    this.activeUserID = null;
    setBrokerQuoteSeqIsSet(false);
    this.brokerQuoteSeq = 0;
    this.askOrderRef = null;
    this.bidOrderRef = null;
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcQuoteField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getInvestorID() {
    return this.investorID;
  }

  public CThostFtdcQuoteField setInvestorID(String investorID) {
    this.investorID = investorID;
    return this;
  }

  public void unsetInvestorID() {
    this.investorID = null;
  }

  /** Returns true if field investorID is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorID() {
    return this.investorID != null;
  }

  public void setInvestorIDIsSet(boolean value) {
    if (!value) {
      this.investorID = null;
    }
  }

  public String getInstrumentID() {
    return this.instrumentID;
  }

  public CThostFtdcQuoteField setInstrumentID(String instrumentID) {
    this.instrumentID = instrumentID;
    return this;
  }

  public void unsetInstrumentID() {
    this.instrumentID = null;
  }

  /** Returns true if field instrumentID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstrumentID() {
    return this.instrumentID != null;
  }

  public void setInstrumentIDIsSet(boolean value) {
    if (!value) {
      this.instrumentID = null;
    }
  }

  public String getQuoteRef() {
    return this.quoteRef;
  }

  public CThostFtdcQuoteField setQuoteRef(String quoteRef) {
    this.quoteRef = quoteRef;
    return this;
  }

  public void unsetQuoteRef() {
    this.quoteRef = null;
  }

  /** Returns true if field quoteRef is set (has been assigned a value) and false otherwise */
  public boolean isSetQuoteRef() {
    return this.quoteRef != null;
  }

  public void setQuoteRefIsSet(boolean value) {
    if (!value) {
      this.quoteRef = null;
    }
  }

  public String getUserID() {
    return this.userID;
  }

  public CThostFtdcQuoteField setUserID(String userID) {
    this.userID = userID;
    return this;
  }

  public void unsetUserID() {
    this.userID = null;
  }

  /** Returns true if field userID is set (has been assigned a value) and false otherwise */
  public boolean isSetUserID() {
    return this.userID != null;
  }

  public void setUserIDIsSet(boolean value) {
    if (!value) {
      this.userID = null;
    }
  }

  public double getAskPrice() {
    return this.askPrice;
  }

  public CThostFtdcQuoteField setAskPrice(double askPrice) {
    this.askPrice = askPrice;
    setAskPriceIsSet(true);
    return this;
  }

  public void unsetAskPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASKPRICE_ISSET_ID);
  }

  /** Returns true if field askPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetAskPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __ASKPRICE_ISSET_ID);
  }

  public void setAskPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASKPRICE_ISSET_ID, value);
  }

  public double getBidPrice() {
    return this.bidPrice;
  }

  public CThostFtdcQuoteField setBidPrice(double bidPrice) {
    this.bidPrice = bidPrice;
    setBidPriceIsSet(true);
    return this;
  }

  public void unsetBidPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIDPRICE_ISSET_ID);
  }

  /** Returns true if field bidPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetBidPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __BIDPRICE_ISSET_ID);
  }

  public void setBidPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIDPRICE_ISSET_ID, value);
  }

  public int getAskVolume() {
    return this.askVolume;
  }

  public CThostFtdcQuoteField setAskVolume(int askVolume) {
    this.askVolume = askVolume;
    setAskVolumeIsSet(true);
    return this;
  }

  public void unsetAskVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASKVOLUME_ISSET_ID);
  }

  /** Returns true if field askVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetAskVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __ASKVOLUME_ISSET_ID);
  }

  public void setAskVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASKVOLUME_ISSET_ID, value);
  }

  public int getBidVolume() {
    return this.bidVolume;
  }

  public CThostFtdcQuoteField setBidVolume(int bidVolume) {
    this.bidVolume = bidVolume;
    setBidVolumeIsSet(true);
    return this;
  }

  public void unsetBidVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIDVOLUME_ISSET_ID);
  }

  /** Returns true if field bidVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetBidVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __BIDVOLUME_ISSET_ID);
  }

  public void setBidVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIDVOLUME_ISSET_ID, value);
  }

  public int getRequestID() {
    return this.requestID;
  }

  public CThostFtdcQuoteField setRequestID(int requestID) {
    this.requestID = requestID;
    setRequestIDIsSet(true);
    return this;
  }

  public void unsetRequestID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  /** Returns true if field requestID is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestID() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  public void setRequestIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
  }

  public String getBusinessUnit() {
    return this.businessUnit;
  }

  public CThostFtdcQuoteField setBusinessUnit(String businessUnit) {
    this.businessUnit = businessUnit;
    return this;
  }

  public void unsetBusinessUnit() {
    this.businessUnit = null;
  }

  /** Returns true if field businessUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessUnit() {
    return this.businessUnit != null;
  }

  public void setBusinessUnitIsSet(boolean value) {
    if (!value) {
      this.businessUnit = null;
    }
  }

  public String getAskOffsetFlag() {
    return this.askOffsetFlag;
  }

  public CThostFtdcQuoteField setAskOffsetFlag(String askOffsetFlag) {
    this.askOffsetFlag = askOffsetFlag;
    return this;
  }

  public void unsetAskOffsetFlag() {
    this.askOffsetFlag = null;
  }

  /** Returns true if field askOffsetFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetAskOffsetFlag() {
    return this.askOffsetFlag != null;
  }

  public void setAskOffsetFlagIsSet(boolean value) {
    if (!value) {
      this.askOffsetFlag = null;
    }
  }

  public String getBidOffsetFlag() {
    return this.bidOffsetFlag;
  }

  public CThostFtdcQuoteField setBidOffsetFlag(String bidOffsetFlag) {
    this.bidOffsetFlag = bidOffsetFlag;
    return this;
  }

  public void unsetBidOffsetFlag() {
    this.bidOffsetFlag = null;
  }

  /** Returns true if field bidOffsetFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetBidOffsetFlag() {
    return this.bidOffsetFlag != null;
  }

  public void setBidOffsetFlagIsSet(boolean value) {
    if (!value) {
      this.bidOffsetFlag = null;
    }
  }

  public String getAskHedgeFlag() {
    return this.askHedgeFlag;
  }

  public CThostFtdcQuoteField setAskHedgeFlag(String askHedgeFlag) {
    this.askHedgeFlag = askHedgeFlag;
    return this;
  }

  public void unsetAskHedgeFlag() {
    this.askHedgeFlag = null;
  }

  /** Returns true if field askHedgeFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetAskHedgeFlag() {
    return this.askHedgeFlag != null;
  }

  public void setAskHedgeFlagIsSet(boolean value) {
    if (!value) {
      this.askHedgeFlag = null;
    }
  }

  public String getBidHedgeFlag() {
    return this.bidHedgeFlag;
  }

  public CThostFtdcQuoteField setBidHedgeFlag(String bidHedgeFlag) {
    this.bidHedgeFlag = bidHedgeFlag;
    return this;
  }

  public void unsetBidHedgeFlag() {
    this.bidHedgeFlag = null;
  }

  /** Returns true if field bidHedgeFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetBidHedgeFlag() {
    return this.bidHedgeFlag != null;
  }

  public void setBidHedgeFlagIsSet(boolean value) {
    if (!value) {
      this.bidHedgeFlag = null;
    }
  }

  public String getQuoteLocalID() {
    return this.quoteLocalID;
  }

  public CThostFtdcQuoteField setQuoteLocalID(String quoteLocalID) {
    this.quoteLocalID = quoteLocalID;
    return this;
  }

  public void unsetQuoteLocalID() {
    this.quoteLocalID = null;
  }

  /** Returns true if field quoteLocalID is set (has been assigned a value) and false otherwise */
  public boolean isSetQuoteLocalID() {
    return this.quoteLocalID != null;
  }

  public void setQuoteLocalIDIsSet(boolean value) {
    if (!value) {
      this.quoteLocalID = null;
    }
  }

  public String getExchangeID() {
    return this.exchangeID;
  }

  public CThostFtdcQuoteField setExchangeID(String exchangeID) {
    this.exchangeID = exchangeID;
    return this;
  }

  public void unsetExchangeID() {
    this.exchangeID = null;
  }

  /** Returns true if field exchangeID is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeID() {
    return this.exchangeID != null;
  }

  public void setExchangeIDIsSet(boolean value) {
    if (!value) {
      this.exchangeID = null;
    }
  }

  public String getParticipantID() {
    return this.participantID;
  }

  public CThostFtdcQuoteField setParticipantID(String participantID) {
    this.participantID = participantID;
    return this;
  }

  public void unsetParticipantID() {
    this.participantID = null;
  }

  /** Returns true if field participantID is set (has been assigned a value) and false otherwise */
  public boolean isSetParticipantID() {
    return this.participantID != null;
  }

  public void setParticipantIDIsSet(boolean value) {
    if (!value) {
      this.participantID = null;
    }
  }

  public String getClientID() {
    return this.clientID;
  }

  public CThostFtdcQuoteField setClientID(String clientID) {
    this.clientID = clientID;
    return this;
  }

  public void unsetClientID() {
    this.clientID = null;
  }

  /** Returns true if field clientID is set (has been assigned a value) and false otherwise */
  public boolean isSetClientID() {
    return this.clientID != null;
  }

  public void setClientIDIsSet(boolean value) {
    if (!value) {
      this.clientID = null;
    }
  }

  public String getExchangeInstID() {
    return this.exchangeInstID;
  }

  public CThostFtdcQuoteField setExchangeInstID(String exchangeInstID) {
    this.exchangeInstID = exchangeInstID;
    return this;
  }

  public void unsetExchangeInstID() {
    this.exchangeInstID = null;
  }

  /** Returns true if field exchangeInstID is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeInstID() {
    return this.exchangeInstID != null;
  }

  public void setExchangeInstIDIsSet(boolean value) {
    if (!value) {
      this.exchangeInstID = null;
    }
  }

  public String getTraderID() {
    return this.traderID;
  }

  public CThostFtdcQuoteField setTraderID(String traderID) {
    this.traderID = traderID;
    return this;
  }

  public void unsetTraderID() {
    this.traderID = null;
  }

  /** Returns true if field traderID is set (has been assigned a value) and false otherwise */
  public boolean isSetTraderID() {
    return this.traderID != null;
  }

  public void setTraderIDIsSet(boolean value) {
    if (!value) {
      this.traderID = null;
    }
  }

  public int getInstallID() {
    return this.installID;
  }

  public CThostFtdcQuoteField setInstallID(int installID) {
    this.installID = installID;
    setInstallIDIsSet(true);
    return this;
  }

  public void unsetInstallID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSTALLID_ISSET_ID);
  }

  /** Returns true if field installID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstallID() {
    return EncodingUtils.testBit(__isset_bitfield, __INSTALLID_ISSET_ID);
  }

  public void setInstallIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSTALLID_ISSET_ID, value);
  }

  public int getNotifySequence() {
    return this.notifySequence;
  }

  public CThostFtdcQuoteField setNotifySequence(int notifySequence) {
    this.notifySequence = notifySequence;
    setNotifySequenceIsSet(true);
    return this;
  }

  public void unsetNotifySequence() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTIFYSEQUENCE_ISSET_ID);
  }

  /** Returns true if field notifySequence is set (has been assigned a value) and false otherwise */
  public boolean isSetNotifySequence() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTIFYSEQUENCE_ISSET_ID);
  }

  public void setNotifySequenceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTIFYSEQUENCE_ISSET_ID, value);
  }

  public String getOrderSubmitStatus() {
    return this.orderSubmitStatus;
  }

  public CThostFtdcQuoteField setOrderSubmitStatus(String orderSubmitStatus) {
    this.orderSubmitStatus = orderSubmitStatus;
    return this;
  }

  public void unsetOrderSubmitStatus() {
    this.orderSubmitStatus = null;
  }

  /** Returns true if field orderSubmitStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderSubmitStatus() {
    return this.orderSubmitStatus != null;
  }

  public void setOrderSubmitStatusIsSet(boolean value) {
    if (!value) {
      this.orderSubmitStatus = null;
    }
  }

  public String getTradingDay() {
    return this.tradingDay;
  }

  public CThostFtdcQuoteField setTradingDay(String tradingDay) {
    this.tradingDay = tradingDay;
    return this;
  }

  public void unsetTradingDay() {
    this.tradingDay = null;
  }

  /** Returns true if field tradingDay is set (has been assigned a value) and false otherwise */
  public boolean isSetTradingDay() {
    return this.tradingDay != null;
  }

  public void setTradingDayIsSet(boolean value) {
    if (!value) {
      this.tradingDay = null;
    }
  }

  public int getSettlementID() {
    return this.settlementID;
  }

  public CThostFtdcQuoteField setSettlementID(int settlementID) {
    this.settlementID = settlementID;
    setSettlementIDIsSet(true);
    return this;
  }

  public void unsetSettlementID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID);
  }

  /** Returns true if field settlementID is set (has been assigned a value) and false otherwise */
  public boolean isSetSettlementID() {
    return EncodingUtils.testBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID);
  }

  public void setSettlementIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID, value);
  }

  public String getQuoteSysID() {
    return this.quoteSysID;
  }

  public CThostFtdcQuoteField setQuoteSysID(String quoteSysID) {
    this.quoteSysID = quoteSysID;
    return this;
  }

  public void unsetQuoteSysID() {
    this.quoteSysID = null;
  }

  /** Returns true if field quoteSysID is set (has been assigned a value) and false otherwise */
  public boolean isSetQuoteSysID() {
    return this.quoteSysID != null;
  }

  public void setQuoteSysIDIsSet(boolean value) {
    if (!value) {
      this.quoteSysID = null;
    }
  }

  public String getInsertDate() {
    return this.insertDate;
  }

  public CThostFtdcQuoteField setInsertDate(String insertDate) {
    this.insertDate = insertDate;
    return this;
  }

  public void unsetInsertDate() {
    this.insertDate = null;
  }

  /** Returns true if field insertDate is set (has been assigned a value) and false otherwise */
  public boolean isSetInsertDate() {
    return this.insertDate != null;
  }

  public void setInsertDateIsSet(boolean value) {
    if (!value) {
      this.insertDate = null;
    }
  }

  public String getInsertTime() {
    return this.insertTime;
  }

  public CThostFtdcQuoteField setInsertTime(String insertTime) {
    this.insertTime = insertTime;
    return this;
  }

  public void unsetInsertTime() {
    this.insertTime = null;
  }

  /** Returns true if field insertTime is set (has been assigned a value) and false otherwise */
  public boolean isSetInsertTime() {
    return this.insertTime != null;
  }

  public void setInsertTimeIsSet(boolean value) {
    if (!value) {
      this.insertTime = null;
    }
  }

  public String getCancelTime() {
    return this.cancelTime;
  }

  public CThostFtdcQuoteField setCancelTime(String cancelTime) {
    this.cancelTime = cancelTime;
    return this;
  }

  public void unsetCancelTime() {
    this.cancelTime = null;
  }

  /** Returns true if field cancelTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelTime() {
    return this.cancelTime != null;
  }

  public void setCancelTimeIsSet(boolean value) {
    if (!value) {
      this.cancelTime = null;
    }
  }

  public String getQuoteStatus() {
    return this.quoteStatus;
  }

  public CThostFtdcQuoteField setQuoteStatus(String quoteStatus) {
    this.quoteStatus = quoteStatus;
    return this;
  }

  public void unsetQuoteStatus() {
    this.quoteStatus = null;
  }

  /** Returns true if field quoteStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetQuoteStatus() {
    return this.quoteStatus != null;
  }

  public void setQuoteStatusIsSet(boolean value) {
    if (!value) {
      this.quoteStatus = null;
    }
  }

  public String getClearingPartID() {
    return this.clearingPartID;
  }

  public CThostFtdcQuoteField setClearingPartID(String clearingPartID) {
    this.clearingPartID = clearingPartID;
    return this;
  }

  public void unsetClearingPartID() {
    this.clearingPartID = null;
  }

  /** Returns true if field clearingPartID is set (has been assigned a value) and false otherwise */
  public boolean isSetClearingPartID() {
    return this.clearingPartID != null;
  }

  public void setClearingPartIDIsSet(boolean value) {
    if (!value) {
      this.clearingPartID = null;
    }
  }

  public int getSequenceNo() {
    return this.sequenceNo;
  }

  public CThostFtdcQuoteField setSequenceNo(int sequenceNo) {
    this.sequenceNo = sequenceNo;
    setSequenceNoIsSet(true);
    return this;
  }

  public void unsetSequenceNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQUENCENO_ISSET_ID);
  }

  /** Returns true if field sequenceNo is set (has been assigned a value) and false otherwise */
  public boolean isSetSequenceNo() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQUENCENO_ISSET_ID);
  }

  public void setSequenceNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQUENCENO_ISSET_ID, value);
  }

  public String getAskOrderSysID() {
    return this.askOrderSysID;
  }

  public CThostFtdcQuoteField setAskOrderSysID(String askOrderSysID) {
    this.askOrderSysID = askOrderSysID;
    return this;
  }

  public void unsetAskOrderSysID() {
    this.askOrderSysID = null;
  }

  /** Returns true if field askOrderSysID is set (has been assigned a value) and false otherwise */
  public boolean isSetAskOrderSysID() {
    return this.askOrderSysID != null;
  }

  public void setAskOrderSysIDIsSet(boolean value) {
    if (!value) {
      this.askOrderSysID = null;
    }
  }

  public String getBidOrderSysID() {
    return this.bidOrderSysID;
  }

  public CThostFtdcQuoteField setBidOrderSysID(String bidOrderSysID) {
    this.bidOrderSysID = bidOrderSysID;
    return this;
  }

  public void unsetBidOrderSysID() {
    this.bidOrderSysID = null;
  }

  /** Returns true if field bidOrderSysID is set (has been assigned a value) and false otherwise */
  public boolean isSetBidOrderSysID() {
    return this.bidOrderSysID != null;
  }

  public void setBidOrderSysIDIsSet(boolean value) {
    if (!value) {
      this.bidOrderSysID = null;
    }
  }

  public int getFrontID() {
    return this.frontID;
  }

  public CThostFtdcQuoteField setFrontID(int frontID) {
    this.frontID = frontID;
    setFrontIDIsSet(true);
    return this;
  }

  public void unsetFrontID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FRONTID_ISSET_ID);
  }

  /** Returns true if field frontID is set (has been assigned a value) and false otherwise */
  public boolean isSetFrontID() {
    return EncodingUtils.testBit(__isset_bitfield, __FRONTID_ISSET_ID);
  }

  public void setFrontIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FRONTID_ISSET_ID, value);
  }

  public int getSessionID() {
    return this.sessionID;
  }

  public CThostFtdcQuoteField setSessionID(int sessionID) {
    this.sessionID = sessionID;
    setSessionIDIsSet(true);
    return this;
  }

  public void unsetSessionID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionID() {
    return EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  public void setSessionIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
  }

  public String getUserProductInfo() {
    return this.userProductInfo;
  }

  public CThostFtdcQuoteField setUserProductInfo(String userProductInfo) {
    this.userProductInfo = userProductInfo;
    return this;
  }

  public void unsetUserProductInfo() {
    this.userProductInfo = null;
  }

  /** Returns true if field userProductInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetUserProductInfo() {
    return this.userProductInfo != null;
  }

  public void setUserProductInfoIsSet(boolean value) {
    if (!value) {
      this.userProductInfo = null;
    }
  }

  public String getStatusMsg() {
    return this.statusMsg;
  }

  public CThostFtdcQuoteField setStatusMsg(String statusMsg) {
    this.statusMsg = statusMsg;
    return this;
  }

  public void unsetStatusMsg() {
    this.statusMsg = null;
  }

  /** Returns true if field statusMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusMsg() {
    return this.statusMsg != null;
  }

  public void setStatusMsgIsSet(boolean value) {
    if (!value) {
      this.statusMsg = null;
    }
  }

  public String getActiveUserID() {
    return this.activeUserID;
  }

  public CThostFtdcQuoteField setActiveUserID(String activeUserID) {
    this.activeUserID = activeUserID;
    return this;
  }

  public void unsetActiveUserID() {
    this.activeUserID = null;
  }

  /** Returns true if field activeUserID is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveUserID() {
    return this.activeUserID != null;
  }

  public void setActiveUserIDIsSet(boolean value) {
    if (!value) {
      this.activeUserID = null;
    }
  }

  public int getBrokerQuoteSeq() {
    return this.brokerQuoteSeq;
  }

  public CThostFtdcQuoteField setBrokerQuoteSeq(int brokerQuoteSeq) {
    this.brokerQuoteSeq = brokerQuoteSeq;
    setBrokerQuoteSeqIsSet(true);
    return this;
  }

  public void unsetBrokerQuoteSeq() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BROKERQUOTESEQ_ISSET_ID);
  }

  /** Returns true if field brokerQuoteSeq is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerQuoteSeq() {
    return EncodingUtils.testBit(__isset_bitfield, __BROKERQUOTESEQ_ISSET_ID);
  }

  public void setBrokerQuoteSeqIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BROKERQUOTESEQ_ISSET_ID, value);
  }

  public String getAskOrderRef() {
    return this.askOrderRef;
  }

  public CThostFtdcQuoteField setAskOrderRef(String askOrderRef) {
    this.askOrderRef = askOrderRef;
    return this;
  }

  public void unsetAskOrderRef() {
    this.askOrderRef = null;
  }

  /** Returns true if field askOrderRef is set (has been assigned a value) and false otherwise */
  public boolean isSetAskOrderRef() {
    return this.askOrderRef != null;
  }

  public void setAskOrderRefIsSet(boolean value) {
    if (!value) {
      this.askOrderRef = null;
    }
  }

  public String getBidOrderRef() {
    return this.bidOrderRef;
  }

  public CThostFtdcQuoteField setBidOrderRef(String bidOrderRef) {
    this.bidOrderRef = bidOrderRef;
    return this;
  }

  public void unsetBidOrderRef() {
    this.bidOrderRef = null;
  }

  /** Returns true if field bidOrderRef is set (has been assigned a value) and false otherwise */
  public boolean isSetBidOrderRef() {
    return this.bidOrderRef != null;
  }

  public void setBidOrderRefIsSet(boolean value) {
    if (!value) {
      this.bidOrderRef = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case INVESTOR_ID:
      if (value == null) {
        unsetInvestorID();
      } else {
        setInvestorID((String)value);
      }
      break;

    case INSTRUMENT_ID:
      if (value == null) {
        unsetInstrumentID();
      } else {
        setInstrumentID((String)value);
      }
      break;

    case QUOTE_REF:
      if (value == null) {
        unsetQuoteRef();
      } else {
        setQuoteRef((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserID();
      } else {
        setUserID((String)value);
      }
      break;

    case ASK_PRICE:
      if (value == null) {
        unsetAskPrice();
      } else {
        setAskPrice((Double)value);
      }
      break;

    case BID_PRICE:
      if (value == null) {
        unsetBidPrice();
      } else {
        setBidPrice((Double)value);
      }
      break;

    case ASK_VOLUME:
      if (value == null) {
        unsetAskVolume();
      } else {
        setAskVolume((Integer)value);
      }
      break;

    case BID_VOLUME:
      if (value == null) {
        unsetBidVolume();
      } else {
        setBidVolume((Integer)value);
      }
      break;

    case REQUEST_ID:
      if (value == null) {
        unsetRequestID();
      } else {
        setRequestID((Integer)value);
      }
      break;

    case BUSINESS_UNIT:
      if (value == null) {
        unsetBusinessUnit();
      } else {
        setBusinessUnit((String)value);
      }
      break;

    case ASK_OFFSET_FLAG:
      if (value == null) {
        unsetAskOffsetFlag();
      } else {
        setAskOffsetFlag((String)value);
      }
      break;

    case BID_OFFSET_FLAG:
      if (value == null) {
        unsetBidOffsetFlag();
      } else {
        setBidOffsetFlag((String)value);
      }
      break;

    case ASK_HEDGE_FLAG:
      if (value == null) {
        unsetAskHedgeFlag();
      } else {
        setAskHedgeFlag((String)value);
      }
      break;

    case BID_HEDGE_FLAG:
      if (value == null) {
        unsetBidHedgeFlag();
      } else {
        setBidHedgeFlag((String)value);
      }
      break;

    case QUOTE_LOCAL_ID:
      if (value == null) {
        unsetQuoteLocalID();
      } else {
        setQuoteLocalID((String)value);
      }
      break;

    case EXCHANGE_ID:
      if (value == null) {
        unsetExchangeID();
      } else {
        setExchangeID((String)value);
      }
      break;

    case PARTICIPANT_ID:
      if (value == null) {
        unsetParticipantID();
      } else {
        setParticipantID((String)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientID();
      } else {
        setClientID((String)value);
      }
      break;

    case EXCHANGE_INST_ID:
      if (value == null) {
        unsetExchangeInstID();
      } else {
        setExchangeInstID((String)value);
      }
      break;

    case TRADER_ID:
      if (value == null) {
        unsetTraderID();
      } else {
        setTraderID((String)value);
      }
      break;

    case INSTALL_ID:
      if (value == null) {
        unsetInstallID();
      } else {
        setInstallID((Integer)value);
      }
      break;

    case NOTIFY_SEQUENCE:
      if (value == null) {
        unsetNotifySequence();
      } else {
        setNotifySequence((Integer)value);
      }
      break;

    case ORDER_SUBMIT_STATUS:
      if (value == null) {
        unsetOrderSubmitStatus();
      } else {
        setOrderSubmitStatus((String)value);
      }
      break;

    case TRADING_DAY:
      if (value == null) {
        unsetTradingDay();
      } else {
        setTradingDay((String)value);
      }
      break;

    case SETTLEMENT_ID:
      if (value == null) {
        unsetSettlementID();
      } else {
        setSettlementID((Integer)value);
      }
      break;

    case QUOTE_SYS_ID:
      if (value == null) {
        unsetQuoteSysID();
      } else {
        setQuoteSysID((String)value);
      }
      break;

    case INSERT_DATE:
      if (value == null) {
        unsetInsertDate();
      } else {
        setInsertDate((String)value);
      }
      break;

    case INSERT_TIME:
      if (value == null) {
        unsetInsertTime();
      } else {
        setInsertTime((String)value);
      }
      break;

    case CANCEL_TIME:
      if (value == null) {
        unsetCancelTime();
      } else {
        setCancelTime((String)value);
      }
      break;

    case QUOTE_STATUS:
      if (value == null) {
        unsetQuoteStatus();
      } else {
        setQuoteStatus((String)value);
      }
      break;

    case CLEARING_PART_ID:
      if (value == null) {
        unsetClearingPartID();
      } else {
        setClearingPartID((String)value);
      }
      break;

    case SEQUENCE_NO:
      if (value == null) {
        unsetSequenceNo();
      } else {
        setSequenceNo((Integer)value);
      }
      break;

    case ASK_ORDER_SYS_ID:
      if (value == null) {
        unsetAskOrderSysID();
      } else {
        setAskOrderSysID((String)value);
      }
      break;

    case BID_ORDER_SYS_ID:
      if (value == null) {
        unsetBidOrderSysID();
      } else {
        setBidOrderSysID((String)value);
      }
      break;

    case FRONT_ID:
      if (value == null) {
        unsetFrontID();
      } else {
        setFrontID((Integer)value);
      }
      break;

    case SESSION_ID:
      if (value == null) {
        unsetSessionID();
      } else {
        setSessionID((Integer)value);
      }
      break;

    case USER_PRODUCT_INFO:
      if (value == null) {
        unsetUserProductInfo();
      } else {
        setUserProductInfo((String)value);
      }
      break;

    case STATUS_MSG:
      if (value == null) {
        unsetStatusMsg();
      } else {
        setStatusMsg((String)value);
      }
      break;

    case ACTIVE_USER_ID:
      if (value == null) {
        unsetActiveUserID();
      } else {
        setActiveUserID((String)value);
      }
      break;

    case BROKER_QUOTE_SEQ:
      if (value == null) {
        unsetBrokerQuoteSeq();
      } else {
        setBrokerQuoteSeq((Integer)value);
      }
      break;

    case ASK_ORDER_REF:
      if (value == null) {
        unsetAskOrderRef();
      } else {
        setAskOrderRef((String)value);
      }
      break;

    case BID_ORDER_REF:
      if (value == null) {
        unsetBidOrderRef();
      } else {
        setBidOrderRef((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BROKER_ID:
      return getBrokerID();

    case INVESTOR_ID:
      return getInvestorID();

    case INSTRUMENT_ID:
      return getInstrumentID();

    case QUOTE_REF:
      return getQuoteRef();

    case USER_ID:
      return getUserID();

    case ASK_PRICE:
      return Double.valueOf(getAskPrice());

    case BID_PRICE:
      return Double.valueOf(getBidPrice());

    case ASK_VOLUME:
      return Integer.valueOf(getAskVolume());

    case BID_VOLUME:
      return Integer.valueOf(getBidVolume());

    case REQUEST_ID:
      return Integer.valueOf(getRequestID());

    case BUSINESS_UNIT:
      return getBusinessUnit();

    case ASK_OFFSET_FLAG:
      return getAskOffsetFlag();

    case BID_OFFSET_FLAG:
      return getBidOffsetFlag();

    case ASK_HEDGE_FLAG:
      return getAskHedgeFlag();

    case BID_HEDGE_FLAG:
      return getBidHedgeFlag();

    case QUOTE_LOCAL_ID:
      return getQuoteLocalID();

    case EXCHANGE_ID:
      return getExchangeID();

    case PARTICIPANT_ID:
      return getParticipantID();

    case CLIENT_ID:
      return getClientID();

    case EXCHANGE_INST_ID:
      return getExchangeInstID();

    case TRADER_ID:
      return getTraderID();

    case INSTALL_ID:
      return Integer.valueOf(getInstallID());

    case NOTIFY_SEQUENCE:
      return Integer.valueOf(getNotifySequence());

    case ORDER_SUBMIT_STATUS:
      return getOrderSubmitStatus();

    case TRADING_DAY:
      return getTradingDay();

    case SETTLEMENT_ID:
      return Integer.valueOf(getSettlementID());

    case QUOTE_SYS_ID:
      return getQuoteSysID();

    case INSERT_DATE:
      return getInsertDate();

    case INSERT_TIME:
      return getInsertTime();

    case CANCEL_TIME:
      return getCancelTime();

    case QUOTE_STATUS:
      return getQuoteStatus();

    case CLEARING_PART_ID:
      return getClearingPartID();

    case SEQUENCE_NO:
      return Integer.valueOf(getSequenceNo());

    case ASK_ORDER_SYS_ID:
      return getAskOrderSysID();

    case BID_ORDER_SYS_ID:
      return getBidOrderSysID();

    case FRONT_ID:
      return Integer.valueOf(getFrontID());

    case SESSION_ID:
      return Integer.valueOf(getSessionID());

    case USER_PRODUCT_INFO:
      return getUserProductInfo();

    case STATUS_MSG:
      return getStatusMsg();

    case ACTIVE_USER_ID:
      return getActiveUserID();

    case BROKER_QUOTE_SEQ:
      return Integer.valueOf(getBrokerQuoteSeq());

    case ASK_ORDER_REF:
      return getAskOrderRef();

    case BID_ORDER_REF:
      return getBidOrderRef();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BROKER_ID:
      return isSetBrokerID();
    case INVESTOR_ID:
      return isSetInvestorID();
    case INSTRUMENT_ID:
      return isSetInstrumentID();
    case QUOTE_REF:
      return isSetQuoteRef();
    case USER_ID:
      return isSetUserID();
    case ASK_PRICE:
      return isSetAskPrice();
    case BID_PRICE:
      return isSetBidPrice();
    case ASK_VOLUME:
      return isSetAskVolume();
    case BID_VOLUME:
      return isSetBidVolume();
    case REQUEST_ID:
      return isSetRequestID();
    case BUSINESS_UNIT:
      return isSetBusinessUnit();
    case ASK_OFFSET_FLAG:
      return isSetAskOffsetFlag();
    case BID_OFFSET_FLAG:
      return isSetBidOffsetFlag();
    case ASK_HEDGE_FLAG:
      return isSetAskHedgeFlag();
    case BID_HEDGE_FLAG:
      return isSetBidHedgeFlag();
    case QUOTE_LOCAL_ID:
      return isSetQuoteLocalID();
    case EXCHANGE_ID:
      return isSetExchangeID();
    case PARTICIPANT_ID:
      return isSetParticipantID();
    case CLIENT_ID:
      return isSetClientID();
    case EXCHANGE_INST_ID:
      return isSetExchangeInstID();
    case TRADER_ID:
      return isSetTraderID();
    case INSTALL_ID:
      return isSetInstallID();
    case NOTIFY_SEQUENCE:
      return isSetNotifySequence();
    case ORDER_SUBMIT_STATUS:
      return isSetOrderSubmitStatus();
    case TRADING_DAY:
      return isSetTradingDay();
    case SETTLEMENT_ID:
      return isSetSettlementID();
    case QUOTE_SYS_ID:
      return isSetQuoteSysID();
    case INSERT_DATE:
      return isSetInsertDate();
    case INSERT_TIME:
      return isSetInsertTime();
    case CANCEL_TIME:
      return isSetCancelTime();
    case QUOTE_STATUS:
      return isSetQuoteStatus();
    case CLEARING_PART_ID:
      return isSetClearingPartID();
    case SEQUENCE_NO:
      return isSetSequenceNo();
    case ASK_ORDER_SYS_ID:
      return isSetAskOrderSysID();
    case BID_ORDER_SYS_ID:
      return isSetBidOrderSysID();
    case FRONT_ID:
      return isSetFrontID();
    case SESSION_ID:
      return isSetSessionID();
    case USER_PRODUCT_INFO:
      return isSetUserProductInfo();
    case STATUS_MSG:
      return isSetStatusMsg();
    case ACTIVE_USER_ID:
      return isSetActiveUserID();
    case BROKER_QUOTE_SEQ:
      return isSetBrokerQuoteSeq();
    case ASK_ORDER_REF:
      return isSetAskOrderRef();
    case BID_ORDER_REF:
      return isSetBidOrderRef();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcQuoteField)
      return this.equals((CThostFtdcQuoteField)that);
    return false;
  }

  public boolean equals(CThostFtdcQuoteField that) {
    if (that == null)
      return false;

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_investorID = true && this.isSetInvestorID();
    boolean that_present_investorID = true && that.isSetInvestorID();
    if (this_present_investorID || that_present_investorID) {
      if (!(this_present_investorID && that_present_investorID))
        return false;
      if (!this.investorID.equals(that.investorID))
        return false;
    }

    boolean this_present_instrumentID = true && this.isSetInstrumentID();
    boolean that_present_instrumentID = true && that.isSetInstrumentID();
    if (this_present_instrumentID || that_present_instrumentID) {
      if (!(this_present_instrumentID && that_present_instrumentID))
        return false;
      if (!this.instrumentID.equals(that.instrumentID))
        return false;
    }

    boolean this_present_quoteRef = true && this.isSetQuoteRef();
    boolean that_present_quoteRef = true && that.isSetQuoteRef();
    if (this_present_quoteRef || that_present_quoteRef) {
      if (!(this_present_quoteRef && that_present_quoteRef))
        return false;
      if (!this.quoteRef.equals(that.quoteRef))
        return false;
    }

    boolean this_present_userID = true && this.isSetUserID();
    boolean that_present_userID = true && that.isSetUserID();
    if (this_present_userID || that_present_userID) {
      if (!(this_present_userID && that_present_userID))
        return false;
      if (!this.userID.equals(that.userID))
        return false;
    }

    boolean this_present_askPrice = true;
    boolean that_present_askPrice = true;
    if (this_present_askPrice || that_present_askPrice) {
      if (!(this_present_askPrice && that_present_askPrice))
        return false;
      if (this.askPrice != that.askPrice)
        return false;
    }

    boolean this_present_bidPrice = true;
    boolean that_present_bidPrice = true;
    if (this_present_bidPrice || that_present_bidPrice) {
      if (!(this_present_bidPrice && that_present_bidPrice))
        return false;
      if (this.bidPrice != that.bidPrice)
        return false;
    }

    boolean this_present_askVolume = true;
    boolean that_present_askVolume = true;
    if (this_present_askVolume || that_present_askVolume) {
      if (!(this_present_askVolume && that_present_askVolume))
        return false;
      if (this.askVolume != that.askVolume)
        return false;
    }

    boolean this_present_bidVolume = true;
    boolean that_present_bidVolume = true;
    if (this_present_bidVolume || that_present_bidVolume) {
      if (!(this_present_bidVolume && that_present_bidVolume))
        return false;
      if (this.bidVolume != that.bidVolume)
        return false;
    }

    boolean this_present_requestID = true;
    boolean that_present_requestID = true;
    if (this_present_requestID || that_present_requestID) {
      if (!(this_present_requestID && that_present_requestID))
        return false;
      if (this.requestID != that.requestID)
        return false;
    }

    boolean this_present_businessUnit = true && this.isSetBusinessUnit();
    boolean that_present_businessUnit = true && that.isSetBusinessUnit();
    if (this_present_businessUnit || that_present_businessUnit) {
      if (!(this_present_businessUnit && that_present_businessUnit))
        return false;
      if (!this.businessUnit.equals(that.businessUnit))
        return false;
    }

    boolean this_present_askOffsetFlag = true && this.isSetAskOffsetFlag();
    boolean that_present_askOffsetFlag = true && that.isSetAskOffsetFlag();
    if (this_present_askOffsetFlag || that_present_askOffsetFlag) {
      if (!(this_present_askOffsetFlag && that_present_askOffsetFlag))
        return false;
      if (!this.askOffsetFlag.equals(that.askOffsetFlag))
        return false;
    }

    boolean this_present_bidOffsetFlag = true && this.isSetBidOffsetFlag();
    boolean that_present_bidOffsetFlag = true && that.isSetBidOffsetFlag();
    if (this_present_bidOffsetFlag || that_present_bidOffsetFlag) {
      if (!(this_present_bidOffsetFlag && that_present_bidOffsetFlag))
        return false;
      if (!this.bidOffsetFlag.equals(that.bidOffsetFlag))
        return false;
    }

    boolean this_present_askHedgeFlag = true && this.isSetAskHedgeFlag();
    boolean that_present_askHedgeFlag = true && that.isSetAskHedgeFlag();
    if (this_present_askHedgeFlag || that_present_askHedgeFlag) {
      if (!(this_present_askHedgeFlag && that_present_askHedgeFlag))
        return false;
      if (!this.askHedgeFlag.equals(that.askHedgeFlag))
        return false;
    }

    boolean this_present_bidHedgeFlag = true && this.isSetBidHedgeFlag();
    boolean that_present_bidHedgeFlag = true && that.isSetBidHedgeFlag();
    if (this_present_bidHedgeFlag || that_present_bidHedgeFlag) {
      if (!(this_present_bidHedgeFlag && that_present_bidHedgeFlag))
        return false;
      if (!this.bidHedgeFlag.equals(that.bidHedgeFlag))
        return false;
    }

    boolean this_present_quoteLocalID = true && this.isSetQuoteLocalID();
    boolean that_present_quoteLocalID = true && that.isSetQuoteLocalID();
    if (this_present_quoteLocalID || that_present_quoteLocalID) {
      if (!(this_present_quoteLocalID && that_present_quoteLocalID))
        return false;
      if (!this.quoteLocalID.equals(that.quoteLocalID))
        return false;
    }

    boolean this_present_exchangeID = true && this.isSetExchangeID();
    boolean that_present_exchangeID = true && that.isSetExchangeID();
    if (this_present_exchangeID || that_present_exchangeID) {
      if (!(this_present_exchangeID && that_present_exchangeID))
        return false;
      if (!this.exchangeID.equals(that.exchangeID))
        return false;
    }

    boolean this_present_participantID = true && this.isSetParticipantID();
    boolean that_present_participantID = true && that.isSetParticipantID();
    if (this_present_participantID || that_present_participantID) {
      if (!(this_present_participantID && that_present_participantID))
        return false;
      if (!this.participantID.equals(that.participantID))
        return false;
    }

    boolean this_present_clientID = true && this.isSetClientID();
    boolean that_present_clientID = true && that.isSetClientID();
    if (this_present_clientID || that_present_clientID) {
      if (!(this_present_clientID && that_present_clientID))
        return false;
      if (!this.clientID.equals(that.clientID))
        return false;
    }

    boolean this_present_exchangeInstID = true && this.isSetExchangeInstID();
    boolean that_present_exchangeInstID = true && that.isSetExchangeInstID();
    if (this_present_exchangeInstID || that_present_exchangeInstID) {
      if (!(this_present_exchangeInstID && that_present_exchangeInstID))
        return false;
      if (!this.exchangeInstID.equals(that.exchangeInstID))
        return false;
    }

    boolean this_present_traderID = true && this.isSetTraderID();
    boolean that_present_traderID = true && that.isSetTraderID();
    if (this_present_traderID || that_present_traderID) {
      if (!(this_present_traderID && that_present_traderID))
        return false;
      if (!this.traderID.equals(that.traderID))
        return false;
    }

    boolean this_present_installID = true;
    boolean that_present_installID = true;
    if (this_present_installID || that_present_installID) {
      if (!(this_present_installID && that_present_installID))
        return false;
      if (this.installID != that.installID)
        return false;
    }

    boolean this_present_notifySequence = true;
    boolean that_present_notifySequence = true;
    if (this_present_notifySequence || that_present_notifySequence) {
      if (!(this_present_notifySequence && that_present_notifySequence))
        return false;
      if (this.notifySequence != that.notifySequence)
        return false;
    }

    boolean this_present_orderSubmitStatus = true && this.isSetOrderSubmitStatus();
    boolean that_present_orderSubmitStatus = true && that.isSetOrderSubmitStatus();
    if (this_present_orderSubmitStatus || that_present_orderSubmitStatus) {
      if (!(this_present_orderSubmitStatus && that_present_orderSubmitStatus))
        return false;
      if (!this.orderSubmitStatus.equals(that.orderSubmitStatus))
        return false;
    }

    boolean this_present_tradingDay = true && this.isSetTradingDay();
    boolean that_present_tradingDay = true && that.isSetTradingDay();
    if (this_present_tradingDay || that_present_tradingDay) {
      if (!(this_present_tradingDay && that_present_tradingDay))
        return false;
      if (!this.tradingDay.equals(that.tradingDay))
        return false;
    }

    boolean this_present_settlementID = true;
    boolean that_present_settlementID = true;
    if (this_present_settlementID || that_present_settlementID) {
      if (!(this_present_settlementID && that_present_settlementID))
        return false;
      if (this.settlementID != that.settlementID)
        return false;
    }

    boolean this_present_quoteSysID = true && this.isSetQuoteSysID();
    boolean that_present_quoteSysID = true && that.isSetQuoteSysID();
    if (this_present_quoteSysID || that_present_quoteSysID) {
      if (!(this_present_quoteSysID && that_present_quoteSysID))
        return false;
      if (!this.quoteSysID.equals(that.quoteSysID))
        return false;
    }

    boolean this_present_insertDate = true && this.isSetInsertDate();
    boolean that_present_insertDate = true && that.isSetInsertDate();
    if (this_present_insertDate || that_present_insertDate) {
      if (!(this_present_insertDate && that_present_insertDate))
        return false;
      if (!this.insertDate.equals(that.insertDate))
        return false;
    }

    boolean this_present_insertTime = true && this.isSetInsertTime();
    boolean that_present_insertTime = true && that.isSetInsertTime();
    if (this_present_insertTime || that_present_insertTime) {
      if (!(this_present_insertTime && that_present_insertTime))
        return false;
      if (!this.insertTime.equals(that.insertTime))
        return false;
    }

    boolean this_present_cancelTime = true && this.isSetCancelTime();
    boolean that_present_cancelTime = true && that.isSetCancelTime();
    if (this_present_cancelTime || that_present_cancelTime) {
      if (!(this_present_cancelTime && that_present_cancelTime))
        return false;
      if (!this.cancelTime.equals(that.cancelTime))
        return false;
    }

    boolean this_present_quoteStatus = true && this.isSetQuoteStatus();
    boolean that_present_quoteStatus = true && that.isSetQuoteStatus();
    if (this_present_quoteStatus || that_present_quoteStatus) {
      if (!(this_present_quoteStatus && that_present_quoteStatus))
        return false;
      if (!this.quoteStatus.equals(that.quoteStatus))
        return false;
    }

    boolean this_present_clearingPartID = true && this.isSetClearingPartID();
    boolean that_present_clearingPartID = true && that.isSetClearingPartID();
    if (this_present_clearingPartID || that_present_clearingPartID) {
      if (!(this_present_clearingPartID && that_present_clearingPartID))
        return false;
      if (!this.clearingPartID.equals(that.clearingPartID))
        return false;
    }

    boolean this_present_sequenceNo = true;
    boolean that_present_sequenceNo = true;
    if (this_present_sequenceNo || that_present_sequenceNo) {
      if (!(this_present_sequenceNo && that_present_sequenceNo))
        return false;
      if (this.sequenceNo != that.sequenceNo)
        return false;
    }

    boolean this_present_askOrderSysID = true && this.isSetAskOrderSysID();
    boolean that_present_askOrderSysID = true && that.isSetAskOrderSysID();
    if (this_present_askOrderSysID || that_present_askOrderSysID) {
      if (!(this_present_askOrderSysID && that_present_askOrderSysID))
        return false;
      if (!this.askOrderSysID.equals(that.askOrderSysID))
        return false;
    }

    boolean this_present_bidOrderSysID = true && this.isSetBidOrderSysID();
    boolean that_present_bidOrderSysID = true && that.isSetBidOrderSysID();
    if (this_present_bidOrderSysID || that_present_bidOrderSysID) {
      if (!(this_present_bidOrderSysID && that_present_bidOrderSysID))
        return false;
      if (!this.bidOrderSysID.equals(that.bidOrderSysID))
        return false;
    }

    boolean this_present_frontID = true;
    boolean that_present_frontID = true;
    if (this_present_frontID || that_present_frontID) {
      if (!(this_present_frontID && that_present_frontID))
        return false;
      if (this.frontID != that.frontID)
        return false;
    }

    boolean this_present_sessionID = true;
    boolean that_present_sessionID = true;
    if (this_present_sessionID || that_present_sessionID) {
      if (!(this_present_sessionID && that_present_sessionID))
        return false;
      if (this.sessionID != that.sessionID)
        return false;
    }

    boolean this_present_userProductInfo = true && this.isSetUserProductInfo();
    boolean that_present_userProductInfo = true && that.isSetUserProductInfo();
    if (this_present_userProductInfo || that_present_userProductInfo) {
      if (!(this_present_userProductInfo && that_present_userProductInfo))
        return false;
      if (!this.userProductInfo.equals(that.userProductInfo))
        return false;
    }

    boolean this_present_statusMsg = true && this.isSetStatusMsg();
    boolean that_present_statusMsg = true && that.isSetStatusMsg();
    if (this_present_statusMsg || that_present_statusMsg) {
      if (!(this_present_statusMsg && that_present_statusMsg))
        return false;
      if (!this.statusMsg.equals(that.statusMsg))
        return false;
    }

    boolean this_present_activeUserID = true && this.isSetActiveUserID();
    boolean that_present_activeUserID = true && that.isSetActiveUserID();
    if (this_present_activeUserID || that_present_activeUserID) {
      if (!(this_present_activeUserID && that_present_activeUserID))
        return false;
      if (!this.activeUserID.equals(that.activeUserID))
        return false;
    }

    boolean this_present_brokerQuoteSeq = true;
    boolean that_present_brokerQuoteSeq = true;
    if (this_present_brokerQuoteSeq || that_present_brokerQuoteSeq) {
      if (!(this_present_brokerQuoteSeq && that_present_brokerQuoteSeq))
        return false;
      if (this.brokerQuoteSeq != that.brokerQuoteSeq)
        return false;
    }

    boolean this_present_askOrderRef = true && this.isSetAskOrderRef();
    boolean that_present_askOrderRef = true && that.isSetAskOrderRef();
    if (this_present_askOrderRef || that_present_askOrderRef) {
      if (!(this_present_askOrderRef && that_present_askOrderRef))
        return false;
      if (!this.askOrderRef.equals(that.askOrderRef))
        return false;
    }

    boolean this_present_bidOrderRef = true && this.isSetBidOrderRef();
    boolean that_present_bidOrderRef = true && that.isSetBidOrderRef();
    if (this_present_bidOrderRef || that_present_bidOrderRef) {
      if (!(this_present_bidOrderRef && that_present_bidOrderRef))
        return false;
      if (!this.bidOrderRef.equals(that.bidOrderRef))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcQuoteField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestorID()).compareTo(other.isSetInvestorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorID, other.investorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstrumentID()).compareTo(other.isSetInstrumentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstrumentID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instrumentID, other.instrumentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuoteRef()).compareTo(other.isSetQuoteRef());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuoteRef()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quoteRef, other.quoteRef);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserID()).compareTo(other.isSetUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, other.userID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAskPrice()).compareTo(other.isSetAskPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAskPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.askPrice, other.askPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidPrice()).compareTo(other.isSetBidPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidPrice, other.bidPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAskVolume()).compareTo(other.isSetAskVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAskVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.askVolume, other.askVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidVolume()).compareTo(other.isSetBidVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidVolume, other.bidVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestID()).compareTo(other.isSetRequestID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestID, other.requestID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessUnit()).compareTo(other.isSetBusinessUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessUnit, other.businessUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAskOffsetFlag()).compareTo(other.isSetAskOffsetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAskOffsetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.askOffsetFlag, other.askOffsetFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidOffsetFlag()).compareTo(other.isSetBidOffsetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidOffsetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidOffsetFlag, other.bidOffsetFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAskHedgeFlag()).compareTo(other.isSetAskHedgeFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAskHedgeFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.askHedgeFlag, other.askHedgeFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidHedgeFlag()).compareTo(other.isSetBidHedgeFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidHedgeFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidHedgeFlag, other.bidHedgeFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuoteLocalID()).compareTo(other.isSetQuoteLocalID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuoteLocalID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quoteLocalID, other.quoteLocalID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeID()).compareTo(other.isSetExchangeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeID, other.exchangeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParticipantID()).compareTo(other.isSetParticipantID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParticipantID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.participantID, other.participantID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientID()).compareTo(other.isSetClientID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientID, other.clientID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeInstID()).compareTo(other.isSetExchangeInstID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeInstID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeInstID, other.exchangeInstID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraderID()).compareTo(other.isSetTraderID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraderID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traderID, other.traderID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstallID()).compareTo(other.isSetInstallID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstallID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.installID, other.installID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotifySequence()).compareTo(other.isSetNotifySequence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotifySequence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifySequence, other.notifySequence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderSubmitStatus()).compareTo(other.isSetOrderSubmitStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderSubmitStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderSubmitStatus, other.orderSubmitStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradingDay()).compareTo(other.isSetTradingDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradingDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradingDay, other.tradingDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettlementID()).compareTo(other.isSetSettlementID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettlementID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settlementID, other.settlementID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuoteSysID()).compareTo(other.isSetQuoteSysID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuoteSysID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quoteSysID, other.quoteSysID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInsertDate()).compareTo(other.isSetInsertDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInsertDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insertDate, other.insertDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInsertTime()).compareTo(other.isSetInsertTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInsertTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insertTime, other.insertTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelTime()).compareTo(other.isSetCancelTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelTime, other.cancelTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuoteStatus()).compareTo(other.isSetQuoteStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuoteStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quoteStatus, other.quoteStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClearingPartID()).compareTo(other.isSetClearingPartID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClearingPartID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clearingPartID, other.clearingPartID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSequenceNo()).compareTo(other.isSetSequenceNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequenceNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequenceNo, other.sequenceNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAskOrderSysID()).compareTo(other.isSetAskOrderSysID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAskOrderSysID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.askOrderSysID, other.askOrderSysID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidOrderSysID()).compareTo(other.isSetBidOrderSysID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidOrderSysID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidOrderSysID, other.bidOrderSysID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrontID()).compareTo(other.isSetFrontID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrontID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frontID, other.frontID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserProductInfo()).compareTo(other.isSetUserProductInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserProductInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userProductInfo, other.userProductInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusMsg()).compareTo(other.isSetStatusMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusMsg, other.statusMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveUserID()).compareTo(other.isSetActiveUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveUserID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeUserID, other.activeUserID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerQuoteSeq()).compareTo(other.isSetBrokerQuoteSeq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerQuoteSeq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerQuoteSeq, other.brokerQuoteSeq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAskOrderRef()).compareTo(other.isSetAskOrderRef());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAskOrderRef()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.askOrderRef, other.askOrderRef);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidOrderRef()).compareTo(other.isSetBidOrderRef());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidOrderRef()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidOrderRef, other.bidOrderRef);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcQuoteField(");
    boolean first = true;

    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("investorID:");
    if (this.investorID == null) {
      sb.append("null");
    } else {
      sb.append(this.investorID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("instrumentID:");
    if (this.instrumentID == null) {
      sb.append("null");
    } else {
      sb.append(this.instrumentID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("quoteRef:");
    if (this.quoteRef == null) {
      sb.append("null");
    } else {
      sb.append(this.quoteRef);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userID:");
    if (this.userID == null) {
      sb.append("null");
    } else {
      sb.append(this.userID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("askPrice:");
    sb.append(this.askPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bidPrice:");
    sb.append(this.bidPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("askVolume:");
    sb.append(this.askVolume);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bidVolume:");
    sb.append(this.bidVolume);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestID:");
    sb.append(this.requestID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessUnit:");
    if (this.businessUnit == null) {
      sb.append("null");
    } else {
      sb.append(this.businessUnit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("askOffsetFlag:");
    if (this.askOffsetFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.askOffsetFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bidOffsetFlag:");
    if (this.bidOffsetFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.bidOffsetFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("askHedgeFlag:");
    if (this.askHedgeFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.askHedgeFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bidHedgeFlag:");
    if (this.bidHedgeFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.bidHedgeFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("quoteLocalID:");
    if (this.quoteLocalID == null) {
      sb.append("null");
    } else {
      sb.append(this.quoteLocalID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchangeID:");
    if (this.exchangeID == null) {
      sb.append("null");
    } else {
      sb.append(this.exchangeID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("participantID:");
    if (this.participantID == null) {
      sb.append("null");
    } else {
      sb.append(this.participantID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientID:");
    if (this.clientID == null) {
      sb.append("null");
    } else {
      sb.append(this.clientID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchangeInstID:");
    if (this.exchangeInstID == null) {
      sb.append("null");
    } else {
      sb.append(this.exchangeInstID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("traderID:");
    if (this.traderID == null) {
      sb.append("null");
    } else {
      sb.append(this.traderID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("installID:");
    sb.append(this.installID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notifySequence:");
    sb.append(this.notifySequence);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderSubmitStatus:");
    if (this.orderSubmitStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.orderSubmitStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradingDay:");
    if (this.tradingDay == null) {
      sb.append("null");
    } else {
      sb.append(this.tradingDay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settlementID:");
    sb.append(this.settlementID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("quoteSysID:");
    if (this.quoteSysID == null) {
      sb.append("null");
    } else {
      sb.append(this.quoteSysID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("insertDate:");
    if (this.insertDate == null) {
      sb.append("null");
    } else {
      sb.append(this.insertDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("insertTime:");
    if (this.insertTime == null) {
      sb.append("null");
    } else {
      sb.append(this.insertTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cancelTime:");
    if (this.cancelTime == null) {
      sb.append("null");
    } else {
      sb.append(this.cancelTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("quoteStatus:");
    if (this.quoteStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.quoteStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clearingPartID:");
    if (this.clearingPartID == null) {
      sb.append("null");
    } else {
      sb.append(this.clearingPartID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sequenceNo:");
    sb.append(this.sequenceNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("askOrderSysID:");
    if (this.askOrderSysID == null) {
      sb.append("null");
    } else {
      sb.append(this.askOrderSysID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bidOrderSysID:");
    if (this.bidOrderSysID == null) {
      sb.append("null");
    } else {
      sb.append(this.bidOrderSysID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("frontID:");
    sb.append(this.frontID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sessionID:");
    sb.append(this.sessionID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userProductInfo:");
    if (this.userProductInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.userProductInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("statusMsg:");
    if (this.statusMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.statusMsg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeUserID:");
    if (this.activeUserID == null) {
      sb.append("null");
    } else {
      sb.append(this.activeUserID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerQuoteSeq:");
    sb.append(this.brokerQuoteSeq);
    first = false;
    if (!first) sb.append(", ");
    sb.append("askOrderRef:");
    if (this.askOrderRef == null) {
      sb.append("null");
    } else {
      sb.append(this.askOrderRef);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bidOrderRef:");
    if (this.bidOrderRef == null) {
      sb.append("null");
    } else {
      sb.append(this.bidOrderRef);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcQuoteFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcQuoteFieldStandardScheme getScheme() {
      return new CThostFtdcQuoteFieldStandardScheme();
    }
  }

  private static class CThostFtdcQuoteFieldStandardScheme extends StandardScheme<CThostFtdcQuoteField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcQuoteField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INVESTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorID = iprot.readString();
              struct.setInvestorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INSTRUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instrumentID = iprot.readString();
              struct.setInstrumentIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QUOTE_REF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.quoteRef = iprot.readString();
              struct.setQuoteRefIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userID = iprot.readString();
              struct.setUserIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ASK_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.askPrice = iprot.readDouble();
              struct.setAskPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BID_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bidPrice = iprot.readDouble();
              struct.setBidPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ASK_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.askVolume = iprot.readI32();
              struct.setAskVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BID_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bidVolume = iprot.readI32();
              struct.setBidVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestID = iprot.readI32();
              struct.setRequestIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BUSINESS_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessUnit = iprot.readString();
              struct.setBusinessUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ASK_OFFSET_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.askOffsetFlag = iprot.readString();
              struct.setAskOffsetFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BID_OFFSET_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bidOffsetFlag = iprot.readString();
              struct.setBidOffsetFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ASK_HEDGE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.askHedgeFlag = iprot.readString();
              struct.setAskHedgeFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // BID_HEDGE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bidHedgeFlag = iprot.readString();
              struct.setBidHedgeFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // QUOTE_LOCAL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.quoteLocalID = iprot.readString();
              struct.setQuoteLocalIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // EXCHANGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeID = iprot.readString();
              struct.setExchangeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PARTICIPANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.participantID = iprot.readString();
              struct.setParticipantIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientID = iprot.readString();
              struct.setClientIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // EXCHANGE_INST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeInstID = iprot.readString();
              struct.setExchangeInstIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // TRADER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traderID = iprot.readString();
              struct.setTraderIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // INSTALL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.installID = iprot.readI32();
              struct.setInstallIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // NOTIFY_SEQUENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.notifySequence = iprot.readI32();
              struct.setNotifySequenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // ORDER_SUBMIT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderSubmitStatus = iprot.readString();
              struct.setOrderSubmitStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // TRADING_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradingDay = iprot.readString();
              struct.setTradingDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // SETTLEMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.settlementID = iprot.readI32();
              struct.setSettlementIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // QUOTE_SYS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.quoteSysID = iprot.readString();
              struct.setQuoteSysIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // INSERT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.insertDate = iprot.readString();
              struct.setInsertDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // INSERT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.insertTime = iprot.readString();
              struct.setInsertTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // CANCEL_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cancelTime = iprot.readString();
              struct.setCancelTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // QUOTE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.quoteStatus = iprot.readString();
              struct.setQuoteStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // CLEARING_PART_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clearingPartID = iprot.readString();
              struct.setClearingPartIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // SEQUENCE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sequenceNo = iprot.readI32();
              struct.setSequenceNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // ASK_ORDER_SYS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.askOrderSysID = iprot.readString();
              struct.setAskOrderSysIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // BID_ORDER_SYS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bidOrderSysID = iprot.readString();
              struct.setBidOrderSysIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // FRONT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.frontID = iprot.readI32();
              struct.setFrontIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sessionID = iprot.readI32();
              struct.setSessionIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // USER_PRODUCT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userProductInfo = iprot.readString();
              struct.setUserProductInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // STATUS_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.statusMsg = iprot.readString();
              struct.setStatusMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // ACTIVE_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeUserID = iprot.readString();
              struct.setActiveUserIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // BROKER_QUOTE_SEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.brokerQuoteSeq = iprot.readI32();
              struct.setBrokerQuoteSeqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // ASK_ORDER_REF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.askOrderRef = iprot.readString();
              struct.setAskOrderRefIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // BID_ORDER_REF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bidOrderRef = iprot.readString();
              struct.setBidOrderRefIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcQuoteField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.investorID != null) {
        oprot.writeFieldBegin(INVESTOR_ID_FIELD_DESC);
        oprot.writeString(struct.investorID);
        oprot.writeFieldEnd();
      }
      if (struct.instrumentID != null) {
        oprot.writeFieldBegin(INSTRUMENT_ID_FIELD_DESC);
        oprot.writeString(struct.instrumentID);
        oprot.writeFieldEnd();
      }
      if (struct.quoteRef != null) {
        oprot.writeFieldBegin(QUOTE_REF_FIELD_DESC);
        oprot.writeString(struct.quoteRef);
        oprot.writeFieldEnd();
      }
      if (struct.userID != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ASK_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.askPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BID_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.bidPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ASK_VOLUME_FIELD_DESC);
      oprot.writeI32(struct.askVolume);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BID_VOLUME_FIELD_DESC);
      oprot.writeI32(struct.bidVolume);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
      oprot.writeI32(struct.requestID);
      oprot.writeFieldEnd();
      if (struct.businessUnit != null) {
        oprot.writeFieldBegin(BUSINESS_UNIT_FIELD_DESC);
        oprot.writeString(struct.businessUnit);
        oprot.writeFieldEnd();
      }
      if (struct.askOffsetFlag != null) {
        oprot.writeFieldBegin(ASK_OFFSET_FLAG_FIELD_DESC);
        oprot.writeString(struct.askOffsetFlag);
        oprot.writeFieldEnd();
      }
      if (struct.bidOffsetFlag != null) {
        oprot.writeFieldBegin(BID_OFFSET_FLAG_FIELD_DESC);
        oprot.writeString(struct.bidOffsetFlag);
        oprot.writeFieldEnd();
      }
      if (struct.askHedgeFlag != null) {
        oprot.writeFieldBegin(ASK_HEDGE_FLAG_FIELD_DESC);
        oprot.writeString(struct.askHedgeFlag);
        oprot.writeFieldEnd();
      }
      if (struct.bidHedgeFlag != null) {
        oprot.writeFieldBegin(BID_HEDGE_FLAG_FIELD_DESC);
        oprot.writeString(struct.bidHedgeFlag);
        oprot.writeFieldEnd();
      }
      if (struct.quoteLocalID != null) {
        oprot.writeFieldBegin(QUOTE_LOCAL_ID_FIELD_DESC);
        oprot.writeString(struct.quoteLocalID);
        oprot.writeFieldEnd();
      }
      if (struct.exchangeID != null) {
        oprot.writeFieldBegin(EXCHANGE_ID_FIELD_DESC);
        oprot.writeString(struct.exchangeID);
        oprot.writeFieldEnd();
      }
      if (struct.participantID != null) {
        oprot.writeFieldBegin(PARTICIPANT_ID_FIELD_DESC);
        oprot.writeString(struct.participantID);
        oprot.writeFieldEnd();
      }
      if (struct.clientID != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientID);
        oprot.writeFieldEnd();
      }
      if (struct.exchangeInstID != null) {
        oprot.writeFieldBegin(EXCHANGE_INST_ID_FIELD_DESC);
        oprot.writeString(struct.exchangeInstID);
        oprot.writeFieldEnd();
      }
      if (struct.traderID != null) {
        oprot.writeFieldBegin(TRADER_ID_FIELD_DESC);
        oprot.writeString(struct.traderID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INSTALL_ID_FIELD_DESC);
      oprot.writeI32(struct.installID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTIFY_SEQUENCE_FIELD_DESC);
      oprot.writeI32(struct.notifySequence);
      oprot.writeFieldEnd();
      if (struct.orderSubmitStatus != null) {
        oprot.writeFieldBegin(ORDER_SUBMIT_STATUS_FIELD_DESC);
        oprot.writeString(struct.orderSubmitStatus);
        oprot.writeFieldEnd();
      }
      if (struct.tradingDay != null) {
        oprot.writeFieldBegin(TRADING_DAY_FIELD_DESC);
        oprot.writeString(struct.tradingDay);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SETTLEMENT_ID_FIELD_DESC);
      oprot.writeI32(struct.settlementID);
      oprot.writeFieldEnd();
      if (struct.quoteSysID != null) {
        oprot.writeFieldBegin(QUOTE_SYS_ID_FIELD_DESC);
        oprot.writeString(struct.quoteSysID);
        oprot.writeFieldEnd();
      }
      if (struct.insertDate != null) {
        oprot.writeFieldBegin(INSERT_DATE_FIELD_DESC);
        oprot.writeString(struct.insertDate);
        oprot.writeFieldEnd();
      }
      if (struct.insertTime != null) {
        oprot.writeFieldBegin(INSERT_TIME_FIELD_DESC);
        oprot.writeString(struct.insertTime);
        oprot.writeFieldEnd();
      }
      if (struct.cancelTime != null) {
        oprot.writeFieldBegin(CANCEL_TIME_FIELD_DESC);
        oprot.writeString(struct.cancelTime);
        oprot.writeFieldEnd();
      }
      if (struct.quoteStatus != null) {
        oprot.writeFieldBegin(QUOTE_STATUS_FIELD_DESC);
        oprot.writeString(struct.quoteStatus);
        oprot.writeFieldEnd();
      }
      if (struct.clearingPartID != null) {
        oprot.writeFieldBegin(CLEARING_PART_ID_FIELD_DESC);
        oprot.writeString(struct.clearingPartID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEQUENCE_NO_FIELD_DESC);
      oprot.writeI32(struct.sequenceNo);
      oprot.writeFieldEnd();
      if (struct.askOrderSysID != null) {
        oprot.writeFieldBegin(ASK_ORDER_SYS_ID_FIELD_DESC);
        oprot.writeString(struct.askOrderSysID);
        oprot.writeFieldEnd();
      }
      if (struct.bidOrderSysID != null) {
        oprot.writeFieldBegin(BID_ORDER_SYS_ID_FIELD_DESC);
        oprot.writeString(struct.bidOrderSysID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FRONT_ID_FIELD_DESC);
      oprot.writeI32(struct.frontID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeI32(struct.sessionID);
      oprot.writeFieldEnd();
      if (struct.userProductInfo != null) {
        oprot.writeFieldBegin(USER_PRODUCT_INFO_FIELD_DESC);
        oprot.writeString(struct.userProductInfo);
        oprot.writeFieldEnd();
      }
      if (struct.statusMsg != null) {
        oprot.writeFieldBegin(STATUS_MSG_FIELD_DESC);
        oprot.writeString(struct.statusMsg);
        oprot.writeFieldEnd();
      }
      if (struct.activeUserID != null) {
        oprot.writeFieldBegin(ACTIVE_USER_ID_FIELD_DESC);
        oprot.writeString(struct.activeUserID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BROKER_QUOTE_SEQ_FIELD_DESC);
      oprot.writeI32(struct.brokerQuoteSeq);
      oprot.writeFieldEnd();
      if (struct.askOrderRef != null) {
        oprot.writeFieldBegin(ASK_ORDER_REF_FIELD_DESC);
        oprot.writeString(struct.askOrderRef);
        oprot.writeFieldEnd();
      }
      if (struct.bidOrderRef != null) {
        oprot.writeFieldBegin(BID_ORDER_REF_FIELD_DESC);
        oprot.writeString(struct.bidOrderRef);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcQuoteFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcQuoteFieldTupleScheme getScheme() {
      return new CThostFtdcQuoteFieldTupleScheme();
    }
  }

  private static class CThostFtdcQuoteFieldTupleScheme extends TupleScheme<CThostFtdcQuoteField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcQuoteField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBrokerID()) {
        optionals.set(0);
      }
      if (struct.isSetInvestorID()) {
        optionals.set(1);
      }
      if (struct.isSetInstrumentID()) {
        optionals.set(2);
      }
      if (struct.isSetQuoteRef()) {
        optionals.set(3);
      }
      if (struct.isSetUserID()) {
        optionals.set(4);
      }
      if (struct.isSetAskPrice()) {
        optionals.set(5);
      }
      if (struct.isSetBidPrice()) {
        optionals.set(6);
      }
      if (struct.isSetAskVolume()) {
        optionals.set(7);
      }
      if (struct.isSetBidVolume()) {
        optionals.set(8);
      }
      if (struct.isSetRequestID()) {
        optionals.set(9);
      }
      if (struct.isSetBusinessUnit()) {
        optionals.set(10);
      }
      if (struct.isSetAskOffsetFlag()) {
        optionals.set(11);
      }
      if (struct.isSetBidOffsetFlag()) {
        optionals.set(12);
      }
      if (struct.isSetAskHedgeFlag()) {
        optionals.set(13);
      }
      if (struct.isSetBidHedgeFlag()) {
        optionals.set(14);
      }
      if (struct.isSetQuoteLocalID()) {
        optionals.set(15);
      }
      if (struct.isSetExchangeID()) {
        optionals.set(16);
      }
      if (struct.isSetParticipantID()) {
        optionals.set(17);
      }
      if (struct.isSetClientID()) {
        optionals.set(18);
      }
      if (struct.isSetExchangeInstID()) {
        optionals.set(19);
      }
      if (struct.isSetTraderID()) {
        optionals.set(20);
      }
      if (struct.isSetInstallID()) {
        optionals.set(21);
      }
      if (struct.isSetNotifySequence()) {
        optionals.set(22);
      }
      if (struct.isSetOrderSubmitStatus()) {
        optionals.set(23);
      }
      if (struct.isSetTradingDay()) {
        optionals.set(24);
      }
      if (struct.isSetSettlementID()) {
        optionals.set(25);
      }
      if (struct.isSetQuoteSysID()) {
        optionals.set(26);
      }
      if (struct.isSetInsertDate()) {
        optionals.set(27);
      }
      if (struct.isSetInsertTime()) {
        optionals.set(28);
      }
      if (struct.isSetCancelTime()) {
        optionals.set(29);
      }
      if (struct.isSetQuoteStatus()) {
        optionals.set(30);
      }
      if (struct.isSetClearingPartID()) {
        optionals.set(31);
      }
      if (struct.isSetSequenceNo()) {
        optionals.set(32);
      }
      if (struct.isSetAskOrderSysID()) {
        optionals.set(33);
      }
      if (struct.isSetBidOrderSysID()) {
        optionals.set(34);
      }
      if (struct.isSetFrontID()) {
        optionals.set(35);
      }
      if (struct.isSetSessionID()) {
        optionals.set(36);
      }
      if (struct.isSetUserProductInfo()) {
        optionals.set(37);
      }
      if (struct.isSetStatusMsg()) {
        optionals.set(38);
      }
      if (struct.isSetActiveUserID()) {
        optionals.set(39);
      }
      if (struct.isSetBrokerQuoteSeq()) {
        optionals.set(40);
      }
      if (struct.isSetAskOrderRef()) {
        optionals.set(41);
      }
      if (struct.isSetBidOrderRef()) {
        optionals.set(42);
      }
      oprot.writeBitSet(optionals, 43);
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetInvestorID()) {
        oprot.writeString(struct.investorID);
      }
      if (struct.isSetInstrumentID()) {
        oprot.writeString(struct.instrumentID);
      }
      if (struct.isSetQuoteRef()) {
        oprot.writeString(struct.quoteRef);
      }
      if (struct.isSetUserID()) {
        oprot.writeString(struct.userID);
      }
      if (struct.isSetAskPrice()) {
        oprot.writeDouble(struct.askPrice);
      }
      if (struct.isSetBidPrice()) {
        oprot.writeDouble(struct.bidPrice);
      }
      if (struct.isSetAskVolume()) {
        oprot.writeI32(struct.askVolume);
      }
      if (struct.isSetBidVolume()) {
        oprot.writeI32(struct.bidVolume);
      }
      if (struct.isSetRequestID()) {
        oprot.writeI32(struct.requestID);
      }
      if (struct.isSetBusinessUnit()) {
        oprot.writeString(struct.businessUnit);
      }
      if (struct.isSetAskOffsetFlag()) {
        oprot.writeString(struct.askOffsetFlag);
      }
      if (struct.isSetBidOffsetFlag()) {
        oprot.writeString(struct.bidOffsetFlag);
      }
      if (struct.isSetAskHedgeFlag()) {
        oprot.writeString(struct.askHedgeFlag);
      }
      if (struct.isSetBidHedgeFlag()) {
        oprot.writeString(struct.bidHedgeFlag);
      }
      if (struct.isSetQuoteLocalID()) {
        oprot.writeString(struct.quoteLocalID);
      }
      if (struct.isSetExchangeID()) {
        oprot.writeString(struct.exchangeID);
      }
      if (struct.isSetParticipantID()) {
        oprot.writeString(struct.participantID);
      }
      if (struct.isSetClientID()) {
        oprot.writeString(struct.clientID);
      }
      if (struct.isSetExchangeInstID()) {
        oprot.writeString(struct.exchangeInstID);
      }
      if (struct.isSetTraderID()) {
        oprot.writeString(struct.traderID);
      }
      if (struct.isSetInstallID()) {
        oprot.writeI32(struct.installID);
      }
      if (struct.isSetNotifySequence()) {
        oprot.writeI32(struct.notifySequence);
      }
      if (struct.isSetOrderSubmitStatus()) {
        oprot.writeString(struct.orderSubmitStatus);
      }
      if (struct.isSetTradingDay()) {
        oprot.writeString(struct.tradingDay);
      }
      if (struct.isSetSettlementID()) {
        oprot.writeI32(struct.settlementID);
      }
      if (struct.isSetQuoteSysID()) {
        oprot.writeString(struct.quoteSysID);
      }
      if (struct.isSetInsertDate()) {
        oprot.writeString(struct.insertDate);
      }
      if (struct.isSetInsertTime()) {
        oprot.writeString(struct.insertTime);
      }
      if (struct.isSetCancelTime()) {
        oprot.writeString(struct.cancelTime);
      }
      if (struct.isSetQuoteStatus()) {
        oprot.writeString(struct.quoteStatus);
      }
      if (struct.isSetClearingPartID()) {
        oprot.writeString(struct.clearingPartID);
      }
      if (struct.isSetSequenceNo()) {
        oprot.writeI32(struct.sequenceNo);
      }
      if (struct.isSetAskOrderSysID()) {
        oprot.writeString(struct.askOrderSysID);
      }
      if (struct.isSetBidOrderSysID()) {
        oprot.writeString(struct.bidOrderSysID);
      }
      if (struct.isSetFrontID()) {
        oprot.writeI32(struct.frontID);
      }
      if (struct.isSetSessionID()) {
        oprot.writeI32(struct.sessionID);
      }
      if (struct.isSetUserProductInfo()) {
        oprot.writeString(struct.userProductInfo);
      }
      if (struct.isSetStatusMsg()) {
        oprot.writeString(struct.statusMsg);
      }
      if (struct.isSetActiveUserID()) {
        oprot.writeString(struct.activeUserID);
      }
      if (struct.isSetBrokerQuoteSeq()) {
        oprot.writeI32(struct.brokerQuoteSeq);
      }
      if (struct.isSetAskOrderRef()) {
        oprot.writeString(struct.askOrderRef);
      }
      if (struct.isSetBidOrderRef()) {
        oprot.writeString(struct.bidOrderRef);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcQuoteField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(43);
      if (incoming.get(0)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.investorID = iprot.readString();
        struct.setInvestorIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.instrumentID = iprot.readString();
        struct.setInstrumentIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.quoteRef = iprot.readString();
        struct.setQuoteRefIsSet(true);
      }
      if (incoming.get(4)) {
        struct.userID = iprot.readString();
        struct.setUserIDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.askPrice = iprot.readDouble();
        struct.setAskPriceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.bidPrice = iprot.readDouble();
        struct.setBidPriceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.askVolume = iprot.readI32();
        struct.setAskVolumeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.bidVolume = iprot.readI32();
        struct.setBidVolumeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.requestID = iprot.readI32();
        struct.setRequestIDIsSet(true);
      }
      if (incoming.get(10)) {
        struct.businessUnit = iprot.readString();
        struct.setBusinessUnitIsSet(true);
      }
      if (incoming.get(11)) {
        struct.askOffsetFlag = iprot.readString();
        struct.setAskOffsetFlagIsSet(true);
      }
      if (incoming.get(12)) {
        struct.bidOffsetFlag = iprot.readString();
        struct.setBidOffsetFlagIsSet(true);
      }
      if (incoming.get(13)) {
        struct.askHedgeFlag = iprot.readString();
        struct.setAskHedgeFlagIsSet(true);
      }
      if (incoming.get(14)) {
        struct.bidHedgeFlag = iprot.readString();
        struct.setBidHedgeFlagIsSet(true);
      }
      if (incoming.get(15)) {
        struct.quoteLocalID = iprot.readString();
        struct.setQuoteLocalIDIsSet(true);
      }
      if (incoming.get(16)) {
        struct.exchangeID = iprot.readString();
        struct.setExchangeIDIsSet(true);
      }
      if (incoming.get(17)) {
        struct.participantID = iprot.readString();
        struct.setParticipantIDIsSet(true);
      }
      if (incoming.get(18)) {
        struct.clientID = iprot.readString();
        struct.setClientIDIsSet(true);
      }
      if (incoming.get(19)) {
        struct.exchangeInstID = iprot.readString();
        struct.setExchangeInstIDIsSet(true);
      }
      if (incoming.get(20)) {
        struct.traderID = iprot.readString();
        struct.setTraderIDIsSet(true);
      }
      if (incoming.get(21)) {
        struct.installID = iprot.readI32();
        struct.setInstallIDIsSet(true);
      }
      if (incoming.get(22)) {
        struct.notifySequence = iprot.readI32();
        struct.setNotifySequenceIsSet(true);
      }
      if (incoming.get(23)) {
        struct.orderSubmitStatus = iprot.readString();
        struct.setOrderSubmitStatusIsSet(true);
      }
      if (incoming.get(24)) {
        struct.tradingDay = iprot.readString();
        struct.setTradingDayIsSet(true);
      }
      if (incoming.get(25)) {
        struct.settlementID = iprot.readI32();
        struct.setSettlementIDIsSet(true);
      }
      if (incoming.get(26)) {
        struct.quoteSysID = iprot.readString();
        struct.setQuoteSysIDIsSet(true);
      }
      if (incoming.get(27)) {
        struct.insertDate = iprot.readString();
        struct.setInsertDateIsSet(true);
      }
      if (incoming.get(28)) {
        struct.insertTime = iprot.readString();
        struct.setInsertTimeIsSet(true);
      }
      if (incoming.get(29)) {
        struct.cancelTime = iprot.readString();
        struct.setCancelTimeIsSet(true);
      }
      if (incoming.get(30)) {
        struct.quoteStatus = iprot.readString();
        struct.setQuoteStatusIsSet(true);
      }
      if (incoming.get(31)) {
        struct.clearingPartID = iprot.readString();
        struct.setClearingPartIDIsSet(true);
      }
      if (incoming.get(32)) {
        struct.sequenceNo = iprot.readI32();
        struct.setSequenceNoIsSet(true);
      }
      if (incoming.get(33)) {
        struct.askOrderSysID = iprot.readString();
        struct.setAskOrderSysIDIsSet(true);
      }
      if (incoming.get(34)) {
        struct.bidOrderSysID = iprot.readString();
        struct.setBidOrderSysIDIsSet(true);
      }
      if (incoming.get(35)) {
        struct.frontID = iprot.readI32();
        struct.setFrontIDIsSet(true);
      }
      if (incoming.get(36)) {
        struct.sessionID = iprot.readI32();
        struct.setSessionIDIsSet(true);
      }
      if (incoming.get(37)) {
        struct.userProductInfo = iprot.readString();
        struct.setUserProductInfoIsSet(true);
      }
      if (incoming.get(38)) {
        struct.statusMsg = iprot.readString();
        struct.setStatusMsgIsSet(true);
      }
      if (incoming.get(39)) {
        struct.activeUserID = iprot.readString();
        struct.setActiveUserIDIsSet(true);
      }
      if (incoming.get(40)) {
        struct.brokerQuoteSeq = iprot.readI32();
        struct.setBrokerQuoteSeqIsSet(true);
      }
      if (incoming.get(41)) {
        struct.askOrderRef = iprot.readString();
        struct.setAskOrderRefIsSet(true);
      }
      if (incoming.get(42)) {
        struct.bidOrderRef = iprot.readString();
        struct.setBidOrderRefIsSet(true);
      }
    }
  }

}

