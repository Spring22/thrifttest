/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcBrokerDepositField implements org.apache.thrift.TBase<CThostFtdcBrokerDepositField, CThostFtdcBrokerDepositField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcBrokerDepositField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcBrokerDepositField");

  private static final org.apache.thrift.protocol.TField TRADING_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("tradingDay", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PARTICIPANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("participantID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EXCHANGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeID", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PRE_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("preBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField CURRMARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("currmargin", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField CLOSE_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("closeProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("balance", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField DEPOSIT_FIELD_DESC = new org.apache.thrift.protocol.TField("deposit", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField WITHDRAW_FIELD_DESC = new org.apache.thrift.protocol.TField("withdraw", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField AVAILABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("available", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField RESERVE_FIELD_DESC = new org.apache.thrift.protocol.TField("reserve", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField FROZEN_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("frozenMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcBrokerDepositFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcBrokerDepositFieldTupleSchemeFactory());
  }

  public String tradingDay; // required
  public String brokerID; // required
  public String participantID; // required
  public String exchangeID; // required
  public double preBalance; // required
  public double currmargin; // required
  public double closeProfit; // required
  public double balance; // required
  public double deposit; // required
  public double withdraw; // required
  public double available; // required
  public double reserve; // required
  public double frozenMargin; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRADING_DAY((short)1, "tradingDay"),
    BROKER_ID((short)2, "brokerID"),
    PARTICIPANT_ID((short)3, "participantID"),
    EXCHANGE_ID((short)4, "exchangeID"),
    PRE_BALANCE((short)5, "preBalance"),
    CURRMARGIN((short)6, "currmargin"),
    CLOSE_PROFIT((short)7, "closeProfit"),
    BALANCE((short)8, "balance"),
    DEPOSIT((short)9, "deposit"),
    WITHDRAW((short)10, "withdraw"),
    AVAILABLE((short)11, "available"),
    RESERVE((short)12, "reserve"),
    FROZEN_MARGIN((short)13, "frozenMargin");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRADING_DAY
          return TRADING_DAY;
        case 2: // BROKER_ID
          return BROKER_ID;
        case 3: // PARTICIPANT_ID
          return PARTICIPANT_ID;
        case 4: // EXCHANGE_ID
          return EXCHANGE_ID;
        case 5: // PRE_BALANCE
          return PRE_BALANCE;
        case 6: // CURRMARGIN
          return CURRMARGIN;
        case 7: // CLOSE_PROFIT
          return CLOSE_PROFIT;
        case 8: // BALANCE
          return BALANCE;
        case 9: // DEPOSIT
          return DEPOSIT;
        case 10: // WITHDRAW
          return WITHDRAW;
        case 11: // AVAILABLE
          return AVAILABLE;
        case 12: // RESERVE
          return RESERVE;
        case 13: // FROZEN_MARGIN
          return FROZEN_MARGIN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PREBALANCE_ISSET_ID = 0;
  private static final int __CURRMARGIN_ISSET_ID = 1;
  private static final int __CLOSEPROFIT_ISSET_ID = 2;
  private static final int __BALANCE_ISSET_ID = 3;
  private static final int __DEPOSIT_ISSET_ID = 4;
  private static final int __WITHDRAW_ISSET_ID = 5;
  private static final int __AVAILABLE_ISSET_ID = 6;
  private static final int __RESERVE_ISSET_ID = 7;
  private static final int __FROZENMARGIN_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRADING_DAY, new org.apache.thrift.meta_data.FieldMetaData("tradingDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeDateType")));
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.PARTICIPANT_ID, new org.apache.thrift.meta_data.FieldMetaData("participantID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcParticipantIDType")));
    tmpMap.put(_Fields.EXCHANGE_ID, new org.apache.thrift.meta_data.FieldMetaData("exchangeID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcExchangeIDType")));
    tmpMap.put(_Fields.PRE_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("preBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.CURRMARGIN, new org.apache.thrift.meta_data.FieldMetaData("currmargin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.CLOSE_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("closeProfit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.BALANCE, new org.apache.thrift.meta_data.FieldMetaData("balance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.DEPOSIT, new org.apache.thrift.meta_data.FieldMetaData("deposit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.WITHDRAW, new org.apache.thrift.meta_data.FieldMetaData("withdraw", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.AVAILABLE, new org.apache.thrift.meta_data.FieldMetaData("available", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.RESERVE, new org.apache.thrift.meta_data.FieldMetaData("reserve", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.FROZEN_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("frozenMargin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcBrokerDepositField.class, metaDataMap);
  }

  public CThostFtdcBrokerDepositField() {
  }

  public CThostFtdcBrokerDepositField(
    String tradingDay,
    String brokerID,
    String participantID,
    String exchangeID,
    double preBalance,
    double currmargin,
    double closeProfit,
    double balance,
    double deposit,
    double withdraw,
    double available,
    double reserve,
    double frozenMargin)
  {
    this();
    this.tradingDay = tradingDay;
    this.brokerID = brokerID;
    this.participantID = participantID;
    this.exchangeID = exchangeID;
    this.preBalance = preBalance;
    setPreBalanceIsSet(true);
    this.currmargin = currmargin;
    setCurrmarginIsSet(true);
    this.closeProfit = closeProfit;
    setCloseProfitIsSet(true);
    this.balance = balance;
    setBalanceIsSet(true);
    this.deposit = deposit;
    setDepositIsSet(true);
    this.withdraw = withdraw;
    setWithdrawIsSet(true);
    this.available = available;
    setAvailableIsSet(true);
    this.reserve = reserve;
    setReserveIsSet(true);
    this.frozenMargin = frozenMargin;
    setFrozenMarginIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcBrokerDepositField(CThostFtdcBrokerDepositField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTradingDay()) {
      this.tradingDay = other.tradingDay;
    }
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetParticipantID()) {
      this.participantID = other.participantID;
    }
    if (other.isSetExchangeID()) {
      this.exchangeID = other.exchangeID;
    }
    this.preBalance = other.preBalance;
    this.currmargin = other.currmargin;
    this.closeProfit = other.closeProfit;
    this.balance = other.balance;
    this.deposit = other.deposit;
    this.withdraw = other.withdraw;
    this.available = other.available;
    this.reserve = other.reserve;
    this.frozenMargin = other.frozenMargin;
  }

  public CThostFtdcBrokerDepositField deepCopy() {
    return new CThostFtdcBrokerDepositField(this);
  }

  @Override
  public void clear() {
    this.tradingDay = null;
    this.brokerID = null;
    this.participantID = null;
    this.exchangeID = null;
    setPreBalanceIsSet(false);
    this.preBalance = 0.0;
    setCurrmarginIsSet(false);
    this.currmargin = 0.0;
    setCloseProfitIsSet(false);
    this.closeProfit = 0.0;
    setBalanceIsSet(false);
    this.balance = 0.0;
    setDepositIsSet(false);
    this.deposit = 0.0;
    setWithdrawIsSet(false);
    this.withdraw = 0.0;
    setAvailableIsSet(false);
    this.available = 0.0;
    setReserveIsSet(false);
    this.reserve = 0.0;
    setFrozenMarginIsSet(false);
    this.frozenMargin = 0.0;
  }

  public String getTradingDay() {
    return this.tradingDay;
  }

  public CThostFtdcBrokerDepositField setTradingDay(String tradingDay) {
    this.tradingDay = tradingDay;
    return this;
  }

  public void unsetTradingDay() {
    this.tradingDay = null;
  }

  /** Returns true if field tradingDay is set (has been assigned a value) and false otherwise */
  public boolean isSetTradingDay() {
    return this.tradingDay != null;
  }

  public void setTradingDayIsSet(boolean value) {
    if (!value) {
      this.tradingDay = null;
    }
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcBrokerDepositField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getParticipantID() {
    return this.participantID;
  }

  public CThostFtdcBrokerDepositField setParticipantID(String participantID) {
    this.participantID = participantID;
    return this;
  }

  public void unsetParticipantID() {
    this.participantID = null;
  }

  /** Returns true if field participantID is set (has been assigned a value) and false otherwise */
  public boolean isSetParticipantID() {
    return this.participantID != null;
  }

  public void setParticipantIDIsSet(boolean value) {
    if (!value) {
      this.participantID = null;
    }
  }

  public String getExchangeID() {
    return this.exchangeID;
  }

  public CThostFtdcBrokerDepositField setExchangeID(String exchangeID) {
    this.exchangeID = exchangeID;
    return this;
  }

  public void unsetExchangeID() {
    this.exchangeID = null;
  }

  /** Returns true if field exchangeID is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeID() {
    return this.exchangeID != null;
  }

  public void setExchangeIDIsSet(boolean value) {
    if (!value) {
      this.exchangeID = null;
    }
  }

  public double getPreBalance() {
    return this.preBalance;
  }

  public CThostFtdcBrokerDepositField setPreBalance(double preBalance) {
    this.preBalance = preBalance;
    setPreBalanceIsSet(true);
    return this;
  }

  public void unsetPreBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREBALANCE_ISSET_ID);
  }

  /** Returns true if field preBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetPreBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __PREBALANCE_ISSET_ID);
  }

  public void setPreBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREBALANCE_ISSET_ID, value);
  }

  public double getCurrmargin() {
    return this.currmargin;
  }

  public CThostFtdcBrokerDepositField setCurrmargin(double currmargin) {
    this.currmargin = currmargin;
    setCurrmarginIsSet(true);
    return this;
  }

  public void unsetCurrmargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRMARGIN_ISSET_ID);
  }

  /** Returns true if field currmargin is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrmargin() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRMARGIN_ISSET_ID);
  }

  public void setCurrmarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRMARGIN_ISSET_ID, value);
  }

  public double getCloseProfit() {
    return this.closeProfit;
  }

  public CThostFtdcBrokerDepositField setCloseProfit(double closeProfit) {
    this.closeProfit = closeProfit;
    setCloseProfitIsSet(true);
    return this;
  }

  public void unsetCloseProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID);
  }

  /** Returns true if field closeProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID);
  }

  public void setCloseProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID, value);
  }

  public double getBalance() {
    return this.balance;
  }

  public CThostFtdcBrokerDepositField setBalance(double balance) {
    this.balance = balance;
    setBalanceIsSet(true);
    return this;
  }

  public void unsetBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BALANCE_ISSET_ID);
  }

  /** Returns true if field balance is set (has been assigned a value) and false otherwise */
  public boolean isSetBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __BALANCE_ISSET_ID);
  }

  public void setBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BALANCE_ISSET_ID, value);
  }

  public double getDeposit() {
    return this.deposit;
  }

  public CThostFtdcBrokerDepositField setDeposit(double deposit) {
    this.deposit = deposit;
    setDepositIsSet(true);
    return this;
  }

  public void unsetDeposit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPOSIT_ISSET_ID);
  }

  /** Returns true if field deposit is set (has been assigned a value) and false otherwise */
  public boolean isSetDeposit() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPOSIT_ISSET_ID);
  }

  public void setDepositIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPOSIT_ISSET_ID, value);
  }

  public double getWithdraw() {
    return this.withdraw;
  }

  public CThostFtdcBrokerDepositField setWithdraw(double withdraw) {
    this.withdraw = withdraw;
    setWithdrawIsSet(true);
    return this;
  }

  public void unsetWithdraw() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WITHDRAW_ISSET_ID);
  }

  /** Returns true if field withdraw is set (has been assigned a value) and false otherwise */
  public boolean isSetWithdraw() {
    return EncodingUtils.testBit(__isset_bitfield, __WITHDRAW_ISSET_ID);
  }

  public void setWithdrawIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WITHDRAW_ISSET_ID, value);
  }

  public double getAvailable() {
    return this.available;
  }

  public CThostFtdcBrokerDepositField setAvailable(double available) {
    this.available = available;
    setAvailableIsSet(true);
    return this;
  }

  public void unsetAvailable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVAILABLE_ISSET_ID);
  }

  /** Returns true if field available is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailable() {
    return EncodingUtils.testBit(__isset_bitfield, __AVAILABLE_ISSET_ID);
  }

  public void setAvailableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVAILABLE_ISSET_ID, value);
  }

  public double getReserve() {
    return this.reserve;
  }

  public CThostFtdcBrokerDepositField setReserve(double reserve) {
    this.reserve = reserve;
    setReserveIsSet(true);
    return this;
  }

  public void unsetReserve() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESERVE_ISSET_ID);
  }

  /** Returns true if field reserve is set (has been assigned a value) and false otherwise */
  public boolean isSetReserve() {
    return EncodingUtils.testBit(__isset_bitfield, __RESERVE_ISSET_ID);
  }

  public void setReserveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESERVE_ISSET_ID, value);
  }

  public double getFrozenMargin() {
    return this.frozenMargin;
  }

  public CThostFtdcBrokerDepositField setFrozenMargin(double frozenMargin) {
    this.frozenMargin = frozenMargin;
    setFrozenMarginIsSet(true);
    return this;
  }

  public void unsetFrozenMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROZENMARGIN_ISSET_ID);
  }

  /** Returns true if field frozenMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozenMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __FROZENMARGIN_ISSET_ID);
  }

  public void setFrozenMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROZENMARGIN_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRADING_DAY:
      if (value == null) {
        unsetTradingDay();
      } else {
        setTradingDay((String)value);
      }
      break;

    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case PARTICIPANT_ID:
      if (value == null) {
        unsetParticipantID();
      } else {
        setParticipantID((String)value);
      }
      break;

    case EXCHANGE_ID:
      if (value == null) {
        unsetExchangeID();
      } else {
        setExchangeID((String)value);
      }
      break;

    case PRE_BALANCE:
      if (value == null) {
        unsetPreBalance();
      } else {
        setPreBalance((Double)value);
      }
      break;

    case CURRMARGIN:
      if (value == null) {
        unsetCurrmargin();
      } else {
        setCurrmargin((Double)value);
      }
      break;

    case CLOSE_PROFIT:
      if (value == null) {
        unsetCloseProfit();
      } else {
        setCloseProfit((Double)value);
      }
      break;

    case BALANCE:
      if (value == null) {
        unsetBalance();
      } else {
        setBalance((Double)value);
      }
      break;

    case DEPOSIT:
      if (value == null) {
        unsetDeposit();
      } else {
        setDeposit((Double)value);
      }
      break;

    case WITHDRAW:
      if (value == null) {
        unsetWithdraw();
      } else {
        setWithdraw((Double)value);
      }
      break;

    case AVAILABLE:
      if (value == null) {
        unsetAvailable();
      } else {
        setAvailable((Double)value);
      }
      break;

    case RESERVE:
      if (value == null) {
        unsetReserve();
      } else {
        setReserve((Double)value);
      }
      break;

    case FROZEN_MARGIN:
      if (value == null) {
        unsetFrozenMargin();
      } else {
        setFrozenMargin((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRADING_DAY:
      return getTradingDay();

    case BROKER_ID:
      return getBrokerID();

    case PARTICIPANT_ID:
      return getParticipantID();

    case EXCHANGE_ID:
      return getExchangeID();

    case PRE_BALANCE:
      return Double.valueOf(getPreBalance());

    case CURRMARGIN:
      return Double.valueOf(getCurrmargin());

    case CLOSE_PROFIT:
      return Double.valueOf(getCloseProfit());

    case BALANCE:
      return Double.valueOf(getBalance());

    case DEPOSIT:
      return Double.valueOf(getDeposit());

    case WITHDRAW:
      return Double.valueOf(getWithdraw());

    case AVAILABLE:
      return Double.valueOf(getAvailable());

    case RESERVE:
      return Double.valueOf(getReserve());

    case FROZEN_MARGIN:
      return Double.valueOf(getFrozenMargin());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRADING_DAY:
      return isSetTradingDay();
    case BROKER_ID:
      return isSetBrokerID();
    case PARTICIPANT_ID:
      return isSetParticipantID();
    case EXCHANGE_ID:
      return isSetExchangeID();
    case PRE_BALANCE:
      return isSetPreBalance();
    case CURRMARGIN:
      return isSetCurrmargin();
    case CLOSE_PROFIT:
      return isSetCloseProfit();
    case BALANCE:
      return isSetBalance();
    case DEPOSIT:
      return isSetDeposit();
    case WITHDRAW:
      return isSetWithdraw();
    case AVAILABLE:
      return isSetAvailable();
    case RESERVE:
      return isSetReserve();
    case FROZEN_MARGIN:
      return isSetFrozenMargin();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcBrokerDepositField)
      return this.equals((CThostFtdcBrokerDepositField)that);
    return false;
  }

  public boolean equals(CThostFtdcBrokerDepositField that) {
    if (that == null)
      return false;

    boolean this_present_tradingDay = true && this.isSetTradingDay();
    boolean that_present_tradingDay = true && that.isSetTradingDay();
    if (this_present_tradingDay || that_present_tradingDay) {
      if (!(this_present_tradingDay && that_present_tradingDay))
        return false;
      if (!this.tradingDay.equals(that.tradingDay))
        return false;
    }

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_participantID = true && this.isSetParticipantID();
    boolean that_present_participantID = true && that.isSetParticipantID();
    if (this_present_participantID || that_present_participantID) {
      if (!(this_present_participantID && that_present_participantID))
        return false;
      if (!this.participantID.equals(that.participantID))
        return false;
    }

    boolean this_present_exchangeID = true && this.isSetExchangeID();
    boolean that_present_exchangeID = true && that.isSetExchangeID();
    if (this_present_exchangeID || that_present_exchangeID) {
      if (!(this_present_exchangeID && that_present_exchangeID))
        return false;
      if (!this.exchangeID.equals(that.exchangeID))
        return false;
    }

    boolean this_present_preBalance = true;
    boolean that_present_preBalance = true;
    if (this_present_preBalance || that_present_preBalance) {
      if (!(this_present_preBalance && that_present_preBalance))
        return false;
      if (this.preBalance != that.preBalance)
        return false;
    }

    boolean this_present_currmargin = true;
    boolean that_present_currmargin = true;
    if (this_present_currmargin || that_present_currmargin) {
      if (!(this_present_currmargin && that_present_currmargin))
        return false;
      if (this.currmargin != that.currmargin)
        return false;
    }

    boolean this_present_closeProfit = true;
    boolean that_present_closeProfit = true;
    if (this_present_closeProfit || that_present_closeProfit) {
      if (!(this_present_closeProfit && that_present_closeProfit))
        return false;
      if (this.closeProfit != that.closeProfit)
        return false;
    }

    boolean this_present_balance = true;
    boolean that_present_balance = true;
    if (this_present_balance || that_present_balance) {
      if (!(this_present_balance && that_present_balance))
        return false;
      if (this.balance != that.balance)
        return false;
    }

    boolean this_present_deposit = true;
    boolean that_present_deposit = true;
    if (this_present_deposit || that_present_deposit) {
      if (!(this_present_deposit && that_present_deposit))
        return false;
      if (this.deposit != that.deposit)
        return false;
    }

    boolean this_present_withdraw = true;
    boolean that_present_withdraw = true;
    if (this_present_withdraw || that_present_withdraw) {
      if (!(this_present_withdraw && that_present_withdraw))
        return false;
      if (this.withdraw != that.withdraw)
        return false;
    }

    boolean this_present_available = true;
    boolean that_present_available = true;
    if (this_present_available || that_present_available) {
      if (!(this_present_available && that_present_available))
        return false;
      if (this.available != that.available)
        return false;
    }

    boolean this_present_reserve = true;
    boolean that_present_reserve = true;
    if (this_present_reserve || that_present_reserve) {
      if (!(this_present_reserve && that_present_reserve))
        return false;
      if (this.reserve != that.reserve)
        return false;
    }

    boolean this_present_frozenMargin = true;
    boolean that_present_frozenMargin = true;
    if (this_present_frozenMargin || that_present_frozenMargin) {
      if (!(this_present_frozenMargin && that_present_frozenMargin))
        return false;
      if (this.frozenMargin != that.frozenMargin)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcBrokerDepositField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTradingDay()).compareTo(other.isSetTradingDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradingDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradingDay, other.tradingDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParticipantID()).compareTo(other.isSetParticipantID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParticipantID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.participantID, other.participantID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeID()).compareTo(other.isSetExchangeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeID, other.exchangeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreBalance()).compareTo(other.isSetPreBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preBalance, other.preBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrmargin()).compareTo(other.isSetCurrmargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrmargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currmargin, other.currmargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseProfit()).compareTo(other.isSetCloseProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeProfit, other.closeProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBalance()).compareTo(other.isSetBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balance, other.balance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeposit()).compareTo(other.isSetDeposit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeposit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deposit, other.deposit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWithdraw()).compareTo(other.isSetWithdraw());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWithdraw()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withdraw, other.withdraw);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvailable()).compareTo(other.isSetAvailable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.available, other.available);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReserve()).compareTo(other.isSetReserve());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReserve()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reserve, other.reserve);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozenMargin()).compareTo(other.isSetFrozenMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozenMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozenMargin, other.frozenMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcBrokerDepositField(");
    boolean first = true;

    sb.append("tradingDay:");
    if (this.tradingDay == null) {
      sb.append("null");
    } else {
      sb.append(this.tradingDay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("participantID:");
    if (this.participantID == null) {
      sb.append("null");
    } else {
      sb.append(this.participantID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchangeID:");
    if (this.exchangeID == null) {
      sb.append("null");
    } else {
      sb.append(this.exchangeID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("preBalance:");
    sb.append(this.preBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currmargin:");
    sb.append(this.currmargin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("closeProfit:");
    sb.append(this.closeProfit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("balance:");
    sb.append(this.balance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deposit:");
    sb.append(this.deposit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("withdraw:");
    sb.append(this.withdraw);
    first = false;
    if (!first) sb.append(", ");
    sb.append("available:");
    sb.append(this.available);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reserve:");
    sb.append(this.reserve);
    first = false;
    if (!first) sb.append(", ");
    sb.append("frozenMargin:");
    sb.append(this.frozenMargin);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcBrokerDepositFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcBrokerDepositFieldStandardScheme getScheme() {
      return new CThostFtdcBrokerDepositFieldStandardScheme();
    }
  }

  private static class CThostFtdcBrokerDepositFieldStandardScheme extends StandardScheme<CThostFtdcBrokerDepositField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcBrokerDepositField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRADING_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradingDay = iprot.readString();
              struct.setTradingDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARTICIPANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.participantID = iprot.readString();
              struct.setParticipantIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXCHANGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeID = iprot.readString();
              struct.setExchangeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRE_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.preBalance = iprot.readDouble();
              struct.setPreBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CURRMARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.currmargin = iprot.readDouble();
              struct.setCurrmarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CLOSE_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.closeProfit = iprot.readDouble();
              struct.setCloseProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.balance = iprot.readDouble();
              struct.setBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DEPOSIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.deposit = iprot.readDouble();
              struct.setDepositIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // WITHDRAW
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.withdraw = iprot.readDouble();
              struct.setWithdrawIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // AVAILABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.available = iprot.readDouble();
              struct.setAvailableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RESERVE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.reserve = iprot.readDouble();
              struct.setReserveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FROZEN_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.frozenMargin = iprot.readDouble();
              struct.setFrozenMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcBrokerDepositField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tradingDay != null) {
        oprot.writeFieldBegin(TRADING_DAY_FIELD_DESC);
        oprot.writeString(struct.tradingDay);
        oprot.writeFieldEnd();
      }
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.participantID != null) {
        oprot.writeFieldBegin(PARTICIPANT_ID_FIELD_DESC);
        oprot.writeString(struct.participantID);
        oprot.writeFieldEnd();
      }
      if (struct.exchangeID != null) {
        oprot.writeFieldBegin(EXCHANGE_ID_FIELD_DESC);
        oprot.writeString(struct.exchangeID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRE_BALANCE_FIELD_DESC);
      oprot.writeDouble(struct.preBalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURRMARGIN_FIELD_DESC);
      oprot.writeDouble(struct.currmargin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CLOSE_PROFIT_FIELD_DESC);
      oprot.writeDouble(struct.closeProfit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BALANCE_FIELD_DESC);
      oprot.writeDouble(struct.balance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEPOSIT_FIELD_DESC);
      oprot.writeDouble(struct.deposit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WITHDRAW_FIELD_DESC);
      oprot.writeDouble(struct.withdraw);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVAILABLE_FIELD_DESC);
      oprot.writeDouble(struct.available);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESERVE_FIELD_DESC);
      oprot.writeDouble(struct.reserve);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FROZEN_MARGIN_FIELD_DESC);
      oprot.writeDouble(struct.frozenMargin);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcBrokerDepositFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcBrokerDepositFieldTupleScheme getScheme() {
      return new CThostFtdcBrokerDepositFieldTupleScheme();
    }
  }

  private static class CThostFtdcBrokerDepositFieldTupleScheme extends TupleScheme<CThostFtdcBrokerDepositField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcBrokerDepositField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTradingDay()) {
        optionals.set(0);
      }
      if (struct.isSetBrokerID()) {
        optionals.set(1);
      }
      if (struct.isSetParticipantID()) {
        optionals.set(2);
      }
      if (struct.isSetExchangeID()) {
        optionals.set(3);
      }
      if (struct.isSetPreBalance()) {
        optionals.set(4);
      }
      if (struct.isSetCurrmargin()) {
        optionals.set(5);
      }
      if (struct.isSetCloseProfit()) {
        optionals.set(6);
      }
      if (struct.isSetBalance()) {
        optionals.set(7);
      }
      if (struct.isSetDeposit()) {
        optionals.set(8);
      }
      if (struct.isSetWithdraw()) {
        optionals.set(9);
      }
      if (struct.isSetAvailable()) {
        optionals.set(10);
      }
      if (struct.isSetReserve()) {
        optionals.set(11);
      }
      if (struct.isSetFrozenMargin()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetTradingDay()) {
        oprot.writeString(struct.tradingDay);
      }
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetParticipantID()) {
        oprot.writeString(struct.participantID);
      }
      if (struct.isSetExchangeID()) {
        oprot.writeString(struct.exchangeID);
      }
      if (struct.isSetPreBalance()) {
        oprot.writeDouble(struct.preBalance);
      }
      if (struct.isSetCurrmargin()) {
        oprot.writeDouble(struct.currmargin);
      }
      if (struct.isSetCloseProfit()) {
        oprot.writeDouble(struct.closeProfit);
      }
      if (struct.isSetBalance()) {
        oprot.writeDouble(struct.balance);
      }
      if (struct.isSetDeposit()) {
        oprot.writeDouble(struct.deposit);
      }
      if (struct.isSetWithdraw()) {
        oprot.writeDouble(struct.withdraw);
      }
      if (struct.isSetAvailable()) {
        oprot.writeDouble(struct.available);
      }
      if (struct.isSetReserve()) {
        oprot.writeDouble(struct.reserve);
      }
      if (struct.isSetFrozenMargin()) {
        oprot.writeDouble(struct.frozenMargin);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcBrokerDepositField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.tradingDay = iprot.readString();
        struct.setTradingDayIsSet(true);
      }
      if (incoming.get(1)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.participantID = iprot.readString();
        struct.setParticipantIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.exchangeID = iprot.readString();
        struct.setExchangeIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.preBalance = iprot.readDouble();
        struct.setPreBalanceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.currmargin = iprot.readDouble();
        struct.setCurrmarginIsSet(true);
      }
      if (incoming.get(6)) {
        struct.closeProfit = iprot.readDouble();
        struct.setCloseProfitIsSet(true);
      }
      if (incoming.get(7)) {
        struct.balance = iprot.readDouble();
        struct.setBalanceIsSet(true);
      }
      if (incoming.get(8)) {
        struct.deposit = iprot.readDouble();
        struct.setDepositIsSet(true);
      }
      if (incoming.get(9)) {
        struct.withdraw = iprot.readDouble();
        struct.setWithdrawIsSet(true);
      }
      if (incoming.get(10)) {
        struct.available = iprot.readDouble();
        struct.setAvailableIsSet(true);
      }
      if (incoming.get(11)) {
        struct.reserve = iprot.readDouble();
        struct.setReserveIsSet(true);
      }
      if (incoming.get(12)) {
        struct.frozenMargin = iprot.readDouble();
        struct.setFrozenMarginIsSet(true);
      }
    }
  }

}

