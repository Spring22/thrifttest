/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcQryTradeField implements org.apache.thrift.TBase<CThostFtdcQryTradeField, CThostFtdcQryTradeField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcQryTradeField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcQryTradeField");

  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INVESTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("investorID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INSTRUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instrumentID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EXCHANGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeID", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TRADE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeID", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TRADE_TIME_START_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeTimeStart", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TRADE_TIME_END_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeTimeEnd", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcQryTradeFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcQryTradeFieldTupleSchemeFactory());
  }

  public String brokerID; // required
  public String investorID; // required
  public String instrumentID; // required
  public String exchangeID; // required
  public String tradeID; // required
  public String tradeTimeStart; // required
  public String tradeTimeEnd; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BROKER_ID((short)1, "brokerID"),
    INVESTOR_ID((short)2, "investorID"),
    INSTRUMENT_ID((short)3, "instrumentID"),
    EXCHANGE_ID((short)4, "exchangeID"),
    TRADE_ID((short)5, "tradeID"),
    TRADE_TIME_START((short)6, "tradeTimeStart"),
    TRADE_TIME_END((short)7, "tradeTimeEnd");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BROKER_ID
          return BROKER_ID;
        case 2: // INVESTOR_ID
          return INVESTOR_ID;
        case 3: // INSTRUMENT_ID
          return INSTRUMENT_ID;
        case 4: // EXCHANGE_ID
          return EXCHANGE_ID;
        case 5: // TRADE_ID
          return TRADE_ID;
        case 6: // TRADE_TIME_START
          return TRADE_TIME_START;
        case 7: // TRADE_TIME_END
          return TRADE_TIME_END;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.INVESTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("investorID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInvestorIDType")));
    tmpMap.put(_Fields.INSTRUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("instrumentID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInstrumentIDType")));
    tmpMap.put(_Fields.EXCHANGE_ID, new org.apache.thrift.meta_data.FieldMetaData("exchangeID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcExchangeIDType")));
    tmpMap.put(_Fields.TRADE_ID, new org.apache.thrift.meta_data.FieldMetaData("tradeID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeIDType")));
    tmpMap.put(_Fields.TRADE_TIME_START, new org.apache.thrift.meta_data.FieldMetaData("tradeTimeStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeType")));
    tmpMap.put(_Fields.TRADE_TIME_END, new org.apache.thrift.meta_data.FieldMetaData("tradeTimeEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcQryTradeField.class, metaDataMap);
  }

  public CThostFtdcQryTradeField() {
  }

  public CThostFtdcQryTradeField(
    String brokerID,
    String investorID,
    String instrumentID,
    String exchangeID,
    String tradeID,
    String tradeTimeStart,
    String tradeTimeEnd)
  {
    this();
    this.brokerID = brokerID;
    this.investorID = investorID;
    this.instrumentID = instrumentID;
    this.exchangeID = exchangeID;
    this.tradeID = tradeID;
    this.tradeTimeStart = tradeTimeStart;
    this.tradeTimeEnd = tradeTimeEnd;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcQryTradeField(CThostFtdcQryTradeField other) {
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetInvestorID()) {
      this.investorID = other.investorID;
    }
    if (other.isSetInstrumentID()) {
      this.instrumentID = other.instrumentID;
    }
    if (other.isSetExchangeID()) {
      this.exchangeID = other.exchangeID;
    }
    if (other.isSetTradeID()) {
      this.tradeID = other.tradeID;
    }
    if (other.isSetTradeTimeStart()) {
      this.tradeTimeStart = other.tradeTimeStart;
    }
    if (other.isSetTradeTimeEnd()) {
      this.tradeTimeEnd = other.tradeTimeEnd;
    }
  }

  public CThostFtdcQryTradeField deepCopy() {
    return new CThostFtdcQryTradeField(this);
  }

  @Override
  public void clear() {
    this.brokerID = null;
    this.investorID = null;
    this.instrumentID = null;
    this.exchangeID = null;
    this.tradeID = null;
    this.tradeTimeStart = null;
    this.tradeTimeEnd = null;
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcQryTradeField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getInvestorID() {
    return this.investorID;
  }

  public CThostFtdcQryTradeField setInvestorID(String investorID) {
    this.investorID = investorID;
    return this;
  }

  public void unsetInvestorID() {
    this.investorID = null;
  }

  /** Returns true if field investorID is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorID() {
    return this.investorID != null;
  }

  public void setInvestorIDIsSet(boolean value) {
    if (!value) {
      this.investorID = null;
    }
  }

  public String getInstrumentID() {
    return this.instrumentID;
  }

  public CThostFtdcQryTradeField setInstrumentID(String instrumentID) {
    this.instrumentID = instrumentID;
    return this;
  }

  public void unsetInstrumentID() {
    this.instrumentID = null;
  }

  /** Returns true if field instrumentID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstrumentID() {
    return this.instrumentID != null;
  }

  public void setInstrumentIDIsSet(boolean value) {
    if (!value) {
      this.instrumentID = null;
    }
  }

  public String getExchangeID() {
    return this.exchangeID;
  }

  public CThostFtdcQryTradeField setExchangeID(String exchangeID) {
    this.exchangeID = exchangeID;
    return this;
  }

  public void unsetExchangeID() {
    this.exchangeID = null;
  }

  /** Returns true if field exchangeID is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeID() {
    return this.exchangeID != null;
  }

  public void setExchangeIDIsSet(boolean value) {
    if (!value) {
      this.exchangeID = null;
    }
  }

  public String getTradeID() {
    return this.tradeID;
  }

  public CThostFtdcQryTradeField setTradeID(String tradeID) {
    this.tradeID = tradeID;
    return this;
  }

  public void unsetTradeID() {
    this.tradeID = null;
  }

  /** Returns true if field tradeID is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeID() {
    return this.tradeID != null;
  }

  public void setTradeIDIsSet(boolean value) {
    if (!value) {
      this.tradeID = null;
    }
  }

  public String getTradeTimeStart() {
    return this.tradeTimeStart;
  }

  public CThostFtdcQryTradeField setTradeTimeStart(String tradeTimeStart) {
    this.tradeTimeStart = tradeTimeStart;
    return this;
  }

  public void unsetTradeTimeStart() {
    this.tradeTimeStart = null;
  }

  /** Returns true if field tradeTimeStart is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeTimeStart() {
    return this.tradeTimeStart != null;
  }

  public void setTradeTimeStartIsSet(boolean value) {
    if (!value) {
      this.tradeTimeStart = null;
    }
  }

  public String getTradeTimeEnd() {
    return this.tradeTimeEnd;
  }

  public CThostFtdcQryTradeField setTradeTimeEnd(String tradeTimeEnd) {
    this.tradeTimeEnd = tradeTimeEnd;
    return this;
  }

  public void unsetTradeTimeEnd() {
    this.tradeTimeEnd = null;
  }

  /** Returns true if field tradeTimeEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeTimeEnd() {
    return this.tradeTimeEnd != null;
  }

  public void setTradeTimeEndIsSet(boolean value) {
    if (!value) {
      this.tradeTimeEnd = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case INVESTOR_ID:
      if (value == null) {
        unsetInvestorID();
      } else {
        setInvestorID((String)value);
      }
      break;

    case INSTRUMENT_ID:
      if (value == null) {
        unsetInstrumentID();
      } else {
        setInstrumentID((String)value);
      }
      break;

    case EXCHANGE_ID:
      if (value == null) {
        unsetExchangeID();
      } else {
        setExchangeID((String)value);
      }
      break;

    case TRADE_ID:
      if (value == null) {
        unsetTradeID();
      } else {
        setTradeID((String)value);
      }
      break;

    case TRADE_TIME_START:
      if (value == null) {
        unsetTradeTimeStart();
      } else {
        setTradeTimeStart((String)value);
      }
      break;

    case TRADE_TIME_END:
      if (value == null) {
        unsetTradeTimeEnd();
      } else {
        setTradeTimeEnd((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BROKER_ID:
      return getBrokerID();

    case INVESTOR_ID:
      return getInvestorID();

    case INSTRUMENT_ID:
      return getInstrumentID();

    case EXCHANGE_ID:
      return getExchangeID();

    case TRADE_ID:
      return getTradeID();

    case TRADE_TIME_START:
      return getTradeTimeStart();

    case TRADE_TIME_END:
      return getTradeTimeEnd();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BROKER_ID:
      return isSetBrokerID();
    case INVESTOR_ID:
      return isSetInvestorID();
    case INSTRUMENT_ID:
      return isSetInstrumentID();
    case EXCHANGE_ID:
      return isSetExchangeID();
    case TRADE_ID:
      return isSetTradeID();
    case TRADE_TIME_START:
      return isSetTradeTimeStart();
    case TRADE_TIME_END:
      return isSetTradeTimeEnd();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcQryTradeField)
      return this.equals((CThostFtdcQryTradeField)that);
    return false;
  }

  public boolean equals(CThostFtdcQryTradeField that) {
    if (that == null)
      return false;

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_investorID = true && this.isSetInvestorID();
    boolean that_present_investorID = true && that.isSetInvestorID();
    if (this_present_investorID || that_present_investorID) {
      if (!(this_present_investorID && that_present_investorID))
        return false;
      if (!this.investorID.equals(that.investorID))
        return false;
    }

    boolean this_present_instrumentID = true && this.isSetInstrumentID();
    boolean that_present_instrumentID = true && that.isSetInstrumentID();
    if (this_present_instrumentID || that_present_instrumentID) {
      if (!(this_present_instrumentID && that_present_instrumentID))
        return false;
      if (!this.instrumentID.equals(that.instrumentID))
        return false;
    }

    boolean this_present_exchangeID = true && this.isSetExchangeID();
    boolean that_present_exchangeID = true && that.isSetExchangeID();
    if (this_present_exchangeID || that_present_exchangeID) {
      if (!(this_present_exchangeID && that_present_exchangeID))
        return false;
      if (!this.exchangeID.equals(that.exchangeID))
        return false;
    }

    boolean this_present_tradeID = true && this.isSetTradeID();
    boolean that_present_tradeID = true && that.isSetTradeID();
    if (this_present_tradeID || that_present_tradeID) {
      if (!(this_present_tradeID && that_present_tradeID))
        return false;
      if (!this.tradeID.equals(that.tradeID))
        return false;
    }

    boolean this_present_tradeTimeStart = true && this.isSetTradeTimeStart();
    boolean that_present_tradeTimeStart = true && that.isSetTradeTimeStart();
    if (this_present_tradeTimeStart || that_present_tradeTimeStart) {
      if (!(this_present_tradeTimeStart && that_present_tradeTimeStart))
        return false;
      if (!this.tradeTimeStart.equals(that.tradeTimeStart))
        return false;
    }

    boolean this_present_tradeTimeEnd = true && this.isSetTradeTimeEnd();
    boolean that_present_tradeTimeEnd = true && that.isSetTradeTimeEnd();
    if (this_present_tradeTimeEnd || that_present_tradeTimeEnd) {
      if (!(this_present_tradeTimeEnd && that_present_tradeTimeEnd))
        return false;
      if (!this.tradeTimeEnd.equals(that.tradeTimeEnd))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcQryTradeField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestorID()).compareTo(other.isSetInvestorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorID, other.investorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstrumentID()).compareTo(other.isSetInstrumentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstrumentID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instrumentID, other.instrumentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeID()).compareTo(other.isSetExchangeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeID, other.exchangeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeID()).compareTo(other.isSetTradeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeID, other.tradeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeTimeStart()).compareTo(other.isSetTradeTimeStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeTimeStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeTimeStart, other.tradeTimeStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeTimeEnd()).compareTo(other.isSetTradeTimeEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeTimeEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeTimeEnd, other.tradeTimeEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcQryTradeField(");
    boolean first = true;

    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("investorID:");
    if (this.investorID == null) {
      sb.append("null");
    } else {
      sb.append(this.investorID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("instrumentID:");
    if (this.instrumentID == null) {
      sb.append("null");
    } else {
      sb.append(this.instrumentID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchangeID:");
    if (this.exchangeID == null) {
      sb.append("null");
    } else {
      sb.append(this.exchangeID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeID:");
    if (this.tradeID == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeTimeStart:");
    if (this.tradeTimeStart == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeTimeStart);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeTimeEnd:");
    if (this.tradeTimeEnd == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeTimeEnd);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcQryTradeFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcQryTradeFieldStandardScheme getScheme() {
      return new CThostFtdcQryTradeFieldStandardScheme();
    }
  }

  private static class CThostFtdcQryTradeFieldStandardScheme extends StandardScheme<CThostFtdcQryTradeField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcQryTradeField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INVESTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorID = iprot.readString();
              struct.setInvestorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INSTRUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instrumentID = iprot.readString();
              struct.setInstrumentIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXCHANGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeID = iprot.readString();
              struct.setExchangeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TRADE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeID = iprot.readString();
              struct.setTradeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRADE_TIME_START
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeTimeStart = iprot.readString();
              struct.setTradeTimeStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TRADE_TIME_END
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeTimeEnd = iprot.readString();
              struct.setTradeTimeEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcQryTradeField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.investorID != null) {
        oprot.writeFieldBegin(INVESTOR_ID_FIELD_DESC);
        oprot.writeString(struct.investorID);
        oprot.writeFieldEnd();
      }
      if (struct.instrumentID != null) {
        oprot.writeFieldBegin(INSTRUMENT_ID_FIELD_DESC);
        oprot.writeString(struct.instrumentID);
        oprot.writeFieldEnd();
      }
      if (struct.exchangeID != null) {
        oprot.writeFieldBegin(EXCHANGE_ID_FIELD_DESC);
        oprot.writeString(struct.exchangeID);
        oprot.writeFieldEnd();
      }
      if (struct.tradeID != null) {
        oprot.writeFieldBegin(TRADE_ID_FIELD_DESC);
        oprot.writeString(struct.tradeID);
        oprot.writeFieldEnd();
      }
      if (struct.tradeTimeStart != null) {
        oprot.writeFieldBegin(TRADE_TIME_START_FIELD_DESC);
        oprot.writeString(struct.tradeTimeStart);
        oprot.writeFieldEnd();
      }
      if (struct.tradeTimeEnd != null) {
        oprot.writeFieldBegin(TRADE_TIME_END_FIELD_DESC);
        oprot.writeString(struct.tradeTimeEnd);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcQryTradeFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcQryTradeFieldTupleScheme getScheme() {
      return new CThostFtdcQryTradeFieldTupleScheme();
    }
  }

  private static class CThostFtdcQryTradeFieldTupleScheme extends TupleScheme<CThostFtdcQryTradeField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcQryTradeField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBrokerID()) {
        optionals.set(0);
      }
      if (struct.isSetInvestorID()) {
        optionals.set(1);
      }
      if (struct.isSetInstrumentID()) {
        optionals.set(2);
      }
      if (struct.isSetExchangeID()) {
        optionals.set(3);
      }
      if (struct.isSetTradeID()) {
        optionals.set(4);
      }
      if (struct.isSetTradeTimeStart()) {
        optionals.set(5);
      }
      if (struct.isSetTradeTimeEnd()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetInvestorID()) {
        oprot.writeString(struct.investorID);
      }
      if (struct.isSetInstrumentID()) {
        oprot.writeString(struct.instrumentID);
      }
      if (struct.isSetExchangeID()) {
        oprot.writeString(struct.exchangeID);
      }
      if (struct.isSetTradeID()) {
        oprot.writeString(struct.tradeID);
      }
      if (struct.isSetTradeTimeStart()) {
        oprot.writeString(struct.tradeTimeStart);
      }
      if (struct.isSetTradeTimeEnd()) {
        oprot.writeString(struct.tradeTimeEnd);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcQryTradeField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.investorID = iprot.readString();
        struct.setInvestorIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.instrumentID = iprot.readString();
        struct.setInstrumentIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.exchangeID = iprot.readString();
        struct.setExchangeIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.tradeID = iprot.readString();
        struct.setTradeIDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.tradeTimeStart = iprot.readString();
        struct.setTradeTimeStartIsSet(true);
      }
      if (incoming.get(6)) {
        struct.tradeTimeEnd = iprot.readString();
        struct.setTradeTimeEndIsSet(true);
      }
    }
  }

}

