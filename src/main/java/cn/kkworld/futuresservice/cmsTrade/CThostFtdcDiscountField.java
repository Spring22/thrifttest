/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcDiscountField implements org.apache.thrift.TBase<CThostFtdcDiscountField, CThostFtdcDiscountField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcDiscountField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcDiscountField");

  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INVESTOR_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("investorRange", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INVESTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("investorID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DISCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("discount", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcDiscountFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcDiscountFieldTupleSchemeFactory());
  }

  public String brokerID; // required
  public String investorRange; // required
  public String investorID; // required
  public double discount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BROKER_ID((short)1, "brokerID"),
    INVESTOR_RANGE((short)2, "investorRange"),
    INVESTOR_ID((short)3, "investorID"),
    DISCOUNT((short)4, "discount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BROKER_ID
          return BROKER_ID;
        case 2: // INVESTOR_RANGE
          return INVESTOR_RANGE;
        case 3: // INVESTOR_ID
          return INVESTOR_ID;
        case 4: // DISCOUNT
          return DISCOUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DISCOUNT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.INVESTOR_RANGE, new org.apache.thrift.meta_data.FieldMetaData("investorRange", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInvestorRangeType")));
    tmpMap.put(_Fields.INVESTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("investorID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInvestorIDType")));
    tmpMap.put(_Fields.DISCOUNT, new org.apache.thrift.meta_data.FieldMetaData("discount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcRatioType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcDiscountField.class, metaDataMap);
  }

  public CThostFtdcDiscountField() {
  }

  public CThostFtdcDiscountField(
    String brokerID,
    String investorRange,
    String investorID,
    double discount)
  {
    this();
    this.brokerID = brokerID;
    this.investorRange = investorRange;
    this.investorID = investorID;
    this.discount = discount;
    setDiscountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcDiscountField(CThostFtdcDiscountField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetInvestorRange()) {
      this.investorRange = other.investorRange;
    }
    if (other.isSetInvestorID()) {
      this.investorID = other.investorID;
    }
    this.discount = other.discount;
  }

  public CThostFtdcDiscountField deepCopy() {
    return new CThostFtdcDiscountField(this);
  }

  @Override
  public void clear() {
    this.brokerID = null;
    this.investorRange = null;
    this.investorID = null;
    setDiscountIsSet(false);
    this.discount = 0.0;
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcDiscountField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getInvestorRange() {
    return this.investorRange;
  }

  public CThostFtdcDiscountField setInvestorRange(String investorRange) {
    this.investorRange = investorRange;
    return this;
  }

  public void unsetInvestorRange() {
    this.investorRange = null;
  }

  /** Returns true if field investorRange is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorRange() {
    return this.investorRange != null;
  }

  public void setInvestorRangeIsSet(boolean value) {
    if (!value) {
      this.investorRange = null;
    }
  }

  public String getInvestorID() {
    return this.investorID;
  }

  public CThostFtdcDiscountField setInvestorID(String investorID) {
    this.investorID = investorID;
    return this;
  }

  public void unsetInvestorID() {
    this.investorID = null;
  }

  /** Returns true if field investorID is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorID() {
    return this.investorID != null;
  }

  public void setInvestorIDIsSet(boolean value) {
    if (!value) {
      this.investorID = null;
    }
  }

  public double getDiscount() {
    return this.discount;
  }

  public CThostFtdcDiscountField setDiscount(double discount) {
    this.discount = discount;
    setDiscountIsSet(true);
    return this;
  }

  public void unsetDiscount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISCOUNT_ISSET_ID);
  }

  /** Returns true if field discount is set (has been assigned a value) and false otherwise */
  public boolean isSetDiscount() {
    return EncodingUtils.testBit(__isset_bitfield, __DISCOUNT_ISSET_ID);
  }

  public void setDiscountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case INVESTOR_RANGE:
      if (value == null) {
        unsetInvestorRange();
      } else {
        setInvestorRange((String)value);
      }
      break;

    case INVESTOR_ID:
      if (value == null) {
        unsetInvestorID();
      } else {
        setInvestorID((String)value);
      }
      break;

    case DISCOUNT:
      if (value == null) {
        unsetDiscount();
      } else {
        setDiscount((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BROKER_ID:
      return getBrokerID();

    case INVESTOR_RANGE:
      return getInvestorRange();

    case INVESTOR_ID:
      return getInvestorID();

    case DISCOUNT:
      return Double.valueOf(getDiscount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BROKER_ID:
      return isSetBrokerID();
    case INVESTOR_RANGE:
      return isSetInvestorRange();
    case INVESTOR_ID:
      return isSetInvestorID();
    case DISCOUNT:
      return isSetDiscount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcDiscountField)
      return this.equals((CThostFtdcDiscountField)that);
    return false;
  }

  public boolean equals(CThostFtdcDiscountField that) {
    if (that == null)
      return false;

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_investorRange = true && this.isSetInvestorRange();
    boolean that_present_investorRange = true && that.isSetInvestorRange();
    if (this_present_investorRange || that_present_investorRange) {
      if (!(this_present_investorRange && that_present_investorRange))
        return false;
      if (!this.investorRange.equals(that.investorRange))
        return false;
    }

    boolean this_present_investorID = true && this.isSetInvestorID();
    boolean that_present_investorID = true && that.isSetInvestorID();
    if (this_present_investorID || that_present_investorID) {
      if (!(this_present_investorID && that_present_investorID))
        return false;
      if (!this.investorID.equals(that.investorID))
        return false;
    }

    boolean this_present_discount = true;
    boolean that_present_discount = true;
    if (this_present_discount || that_present_discount) {
      if (!(this_present_discount && that_present_discount))
        return false;
      if (this.discount != that.discount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcDiscountField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestorRange()).compareTo(other.isSetInvestorRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorRange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorRange, other.investorRange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestorID()).compareTo(other.isSetInvestorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorID, other.investorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiscount()).compareTo(other.isSetDiscount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiscount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.discount, other.discount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcDiscountField(");
    boolean first = true;

    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("investorRange:");
    if (this.investorRange == null) {
      sb.append("null");
    } else {
      sb.append(this.investorRange);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("investorID:");
    if (this.investorID == null) {
      sb.append("null");
    } else {
      sb.append(this.investorID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("discount:");
    sb.append(this.discount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcDiscountFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcDiscountFieldStandardScheme getScheme() {
      return new CThostFtdcDiscountFieldStandardScheme();
    }
  }

  private static class CThostFtdcDiscountFieldStandardScheme extends StandardScheme<CThostFtdcDiscountField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcDiscountField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INVESTOR_RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorRange = iprot.readString();
              struct.setInvestorRangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INVESTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorID = iprot.readString();
              struct.setInvestorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DISCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.discount = iprot.readDouble();
              struct.setDiscountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcDiscountField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.investorRange != null) {
        oprot.writeFieldBegin(INVESTOR_RANGE_FIELD_DESC);
        oprot.writeString(struct.investorRange);
        oprot.writeFieldEnd();
      }
      if (struct.investorID != null) {
        oprot.writeFieldBegin(INVESTOR_ID_FIELD_DESC);
        oprot.writeString(struct.investorID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DISCOUNT_FIELD_DESC);
      oprot.writeDouble(struct.discount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcDiscountFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcDiscountFieldTupleScheme getScheme() {
      return new CThostFtdcDiscountFieldTupleScheme();
    }
  }

  private static class CThostFtdcDiscountFieldTupleScheme extends TupleScheme<CThostFtdcDiscountField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcDiscountField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBrokerID()) {
        optionals.set(0);
      }
      if (struct.isSetInvestorRange()) {
        optionals.set(1);
      }
      if (struct.isSetInvestorID()) {
        optionals.set(2);
      }
      if (struct.isSetDiscount()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetInvestorRange()) {
        oprot.writeString(struct.investorRange);
      }
      if (struct.isSetInvestorID()) {
        oprot.writeString(struct.investorID);
      }
      if (struct.isSetDiscount()) {
        oprot.writeDouble(struct.discount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcDiscountField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.investorRange = iprot.readString();
        struct.setInvestorRangeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.investorID = iprot.readString();
        struct.setInvestorIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.discount = iprot.readDouble();
        struct.setDiscountIsSet(true);
      }
    }
  }

}

