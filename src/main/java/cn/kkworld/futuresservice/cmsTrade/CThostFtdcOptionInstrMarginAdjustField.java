/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcOptionInstrMarginAdjustField implements org.apache.thrift.TBase<CThostFtdcOptionInstrMarginAdjustField, CThostFtdcOptionInstrMarginAdjustField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcOptionInstrMarginAdjustField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcOptionInstrMarginAdjustField");

  private static final org.apache.thrift.protocol.TField INSTRUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instrumentID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INVESTOR_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("investorRange", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField INVESTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("investorID", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField S_SHORT_MARGIN_RATIO_BY_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("sShortMarginRatioByMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField S_SHORT_MARGIN_RATIO_BY_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("sShortMarginRatioByVolume", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField H_SHORT_MARGIN_RATIO_BY_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("hShortMarginRatioByMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField H_SHORT_MARGIN_RATIO_BY_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("hShortMarginRatioByVolume", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField A_SHORT_MARGIN_RATIO_BY_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("aShortMarginRatioByMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField A_SHORT_MARGIN_RATIO_BY_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("aShortMarginRatioByVolume", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField IS_RELATIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("isRelative", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcOptionInstrMarginAdjustFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcOptionInstrMarginAdjustFieldTupleSchemeFactory());
  }

  public String instrumentID; // required
  public String investorRange; // required
  public String brokerID; // required
  public String investorID; // required
  public double sShortMarginRatioByMoney; // required
  public double sShortMarginRatioByVolume; // required
  public double hShortMarginRatioByMoney; // required
  public double hShortMarginRatioByVolume; // required
  public double aShortMarginRatioByMoney; // required
  public double aShortMarginRatioByVolume; // required
  public int isRelative; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INSTRUMENT_ID((short)1, "instrumentID"),
    INVESTOR_RANGE((short)2, "investorRange"),
    BROKER_ID((short)3, "brokerID"),
    INVESTOR_ID((short)4, "investorID"),
    S_SHORT_MARGIN_RATIO_BY_MONEY((short)5, "sShortMarginRatioByMoney"),
    S_SHORT_MARGIN_RATIO_BY_VOLUME((short)6, "sShortMarginRatioByVolume"),
    H_SHORT_MARGIN_RATIO_BY_MONEY((short)7, "hShortMarginRatioByMoney"),
    H_SHORT_MARGIN_RATIO_BY_VOLUME((short)8, "hShortMarginRatioByVolume"),
    A_SHORT_MARGIN_RATIO_BY_MONEY((short)9, "aShortMarginRatioByMoney"),
    A_SHORT_MARGIN_RATIO_BY_VOLUME((short)10, "aShortMarginRatioByVolume"),
    IS_RELATIVE((short)11, "isRelative");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INSTRUMENT_ID
          return INSTRUMENT_ID;
        case 2: // INVESTOR_RANGE
          return INVESTOR_RANGE;
        case 3: // BROKER_ID
          return BROKER_ID;
        case 4: // INVESTOR_ID
          return INVESTOR_ID;
        case 5: // S_SHORT_MARGIN_RATIO_BY_MONEY
          return S_SHORT_MARGIN_RATIO_BY_MONEY;
        case 6: // S_SHORT_MARGIN_RATIO_BY_VOLUME
          return S_SHORT_MARGIN_RATIO_BY_VOLUME;
        case 7: // H_SHORT_MARGIN_RATIO_BY_MONEY
          return H_SHORT_MARGIN_RATIO_BY_MONEY;
        case 8: // H_SHORT_MARGIN_RATIO_BY_VOLUME
          return H_SHORT_MARGIN_RATIO_BY_VOLUME;
        case 9: // A_SHORT_MARGIN_RATIO_BY_MONEY
          return A_SHORT_MARGIN_RATIO_BY_MONEY;
        case 10: // A_SHORT_MARGIN_RATIO_BY_VOLUME
          return A_SHORT_MARGIN_RATIO_BY_VOLUME;
        case 11: // IS_RELATIVE
          return IS_RELATIVE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SSHORTMARGINRATIOBYMONEY_ISSET_ID = 0;
  private static final int __SSHORTMARGINRATIOBYVOLUME_ISSET_ID = 1;
  private static final int __HSHORTMARGINRATIOBYMONEY_ISSET_ID = 2;
  private static final int __HSHORTMARGINRATIOBYVOLUME_ISSET_ID = 3;
  private static final int __ASHORTMARGINRATIOBYMONEY_ISSET_ID = 4;
  private static final int __ASHORTMARGINRATIOBYVOLUME_ISSET_ID = 5;
  private static final int __ISRELATIVE_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INSTRUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("instrumentID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInstrumentIDType")));
    tmpMap.put(_Fields.INVESTOR_RANGE, new org.apache.thrift.meta_data.FieldMetaData("investorRange", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInvestorRangeType")));
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.INVESTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("investorID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInvestorIDType")));
    tmpMap.put(_Fields.S_SHORT_MARGIN_RATIO_BY_MONEY, new org.apache.thrift.meta_data.FieldMetaData("sShortMarginRatioByMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcRatioType")));
    tmpMap.put(_Fields.S_SHORT_MARGIN_RATIO_BY_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("sShortMarginRatioByVolume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.H_SHORT_MARGIN_RATIO_BY_MONEY, new org.apache.thrift.meta_data.FieldMetaData("hShortMarginRatioByMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcRatioType")));
    tmpMap.put(_Fields.H_SHORT_MARGIN_RATIO_BY_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("hShortMarginRatioByVolume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.A_SHORT_MARGIN_RATIO_BY_MONEY, new org.apache.thrift.meta_data.FieldMetaData("aShortMarginRatioByMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcRatioType")));
    tmpMap.put(_Fields.A_SHORT_MARGIN_RATIO_BY_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("aShortMarginRatioByVolume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.IS_RELATIVE, new org.apache.thrift.meta_data.FieldMetaData("isRelative", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcBoolType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcOptionInstrMarginAdjustField.class, metaDataMap);
  }

  public CThostFtdcOptionInstrMarginAdjustField() {
  }

  public CThostFtdcOptionInstrMarginAdjustField(
    String instrumentID,
    String investorRange,
    String brokerID,
    String investorID,
    double sShortMarginRatioByMoney,
    double sShortMarginRatioByVolume,
    double hShortMarginRatioByMoney,
    double hShortMarginRatioByVolume,
    double aShortMarginRatioByMoney,
    double aShortMarginRatioByVolume,
    int isRelative)
  {
    this();
    this.instrumentID = instrumentID;
    this.investorRange = investorRange;
    this.brokerID = brokerID;
    this.investorID = investorID;
    this.sShortMarginRatioByMoney = sShortMarginRatioByMoney;
    setSShortMarginRatioByMoneyIsSet(true);
    this.sShortMarginRatioByVolume = sShortMarginRatioByVolume;
    setSShortMarginRatioByVolumeIsSet(true);
    this.hShortMarginRatioByMoney = hShortMarginRatioByMoney;
    setHShortMarginRatioByMoneyIsSet(true);
    this.hShortMarginRatioByVolume = hShortMarginRatioByVolume;
    setHShortMarginRatioByVolumeIsSet(true);
    this.aShortMarginRatioByMoney = aShortMarginRatioByMoney;
    setAShortMarginRatioByMoneyIsSet(true);
    this.aShortMarginRatioByVolume = aShortMarginRatioByVolume;
    setAShortMarginRatioByVolumeIsSet(true);
    this.isRelative = isRelative;
    setIsRelativeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcOptionInstrMarginAdjustField(CThostFtdcOptionInstrMarginAdjustField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetInstrumentID()) {
      this.instrumentID = other.instrumentID;
    }
    if (other.isSetInvestorRange()) {
      this.investorRange = other.investorRange;
    }
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetInvestorID()) {
      this.investorID = other.investorID;
    }
    this.sShortMarginRatioByMoney = other.sShortMarginRatioByMoney;
    this.sShortMarginRatioByVolume = other.sShortMarginRatioByVolume;
    this.hShortMarginRatioByMoney = other.hShortMarginRatioByMoney;
    this.hShortMarginRatioByVolume = other.hShortMarginRatioByVolume;
    this.aShortMarginRatioByMoney = other.aShortMarginRatioByMoney;
    this.aShortMarginRatioByVolume = other.aShortMarginRatioByVolume;
    this.isRelative = other.isRelative;
  }

  public CThostFtdcOptionInstrMarginAdjustField deepCopy() {
    return new CThostFtdcOptionInstrMarginAdjustField(this);
  }

  @Override
  public void clear() {
    this.instrumentID = null;
    this.investorRange = null;
    this.brokerID = null;
    this.investorID = null;
    setSShortMarginRatioByMoneyIsSet(false);
    this.sShortMarginRatioByMoney = 0.0;
    setSShortMarginRatioByVolumeIsSet(false);
    this.sShortMarginRatioByVolume = 0.0;
    setHShortMarginRatioByMoneyIsSet(false);
    this.hShortMarginRatioByMoney = 0.0;
    setHShortMarginRatioByVolumeIsSet(false);
    this.hShortMarginRatioByVolume = 0.0;
    setAShortMarginRatioByMoneyIsSet(false);
    this.aShortMarginRatioByMoney = 0.0;
    setAShortMarginRatioByVolumeIsSet(false);
    this.aShortMarginRatioByVolume = 0.0;
    setIsRelativeIsSet(false);
    this.isRelative = 0;
  }

  public String getInstrumentID() {
    return this.instrumentID;
  }

  public CThostFtdcOptionInstrMarginAdjustField setInstrumentID(String instrumentID) {
    this.instrumentID = instrumentID;
    return this;
  }

  public void unsetInstrumentID() {
    this.instrumentID = null;
  }

  /** Returns true if field instrumentID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstrumentID() {
    return this.instrumentID != null;
  }

  public void setInstrumentIDIsSet(boolean value) {
    if (!value) {
      this.instrumentID = null;
    }
  }

  public String getInvestorRange() {
    return this.investorRange;
  }

  public CThostFtdcOptionInstrMarginAdjustField setInvestorRange(String investorRange) {
    this.investorRange = investorRange;
    return this;
  }

  public void unsetInvestorRange() {
    this.investorRange = null;
  }

  /** Returns true if field investorRange is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorRange() {
    return this.investorRange != null;
  }

  public void setInvestorRangeIsSet(boolean value) {
    if (!value) {
      this.investorRange = null;
    }
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcOptionInstrMarginAdjustField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getInvestorID() {
    return this.investorID;
  }

  public CThostFtdcOptionInstrMarginAdjustField setInvestorID(String investorID) {
    this.investorID = investorID;
    return this;
  }

  public void unsetInvestorID() {
    this.investorID = null;
  }

  /** Returns true if field investorID is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorID() {
    return this.investorID != null;
  }

  public void setInvestorIDIsSet(boolean value) {
    if (!value) {
      this.investorID = null;
    }
  }

  public double getSShortMarginRatioByMoney() {
    return this.sShortMarginRatioByMoney;
  }

  public CThostFtdcOptionInstrMarginAdjustField setSShortMarginRatioByMoney(double sShortMarginRatioByMoney) {
    this.sShortMarginRatioByMoney = sShortMarginRatioByMoney;
    setSShortMarginRatioByMoneyIsSet(true);
    return this;
  }

  public void unsetSShortMarginRatioByMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SSHORTMARGINRATIOBYMONEY_ISSET_ID);
  }

  /** Returns true if field sShortMarginRatioByMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetSShortMarginRatioByMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __SSHORTMARGINRATIOBYMONEY_ISSET_ID);
  }

  public void setSShortMarginRatioByMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SSHORTMARGINRATIOBYMONEY_ISSET_ID, value);
  }

  public double getSShortMarginRatioByVolume() {
    return this.sShortMarginRatioByVolume;
  }

  public CThostFtdcOptionInstrMarginAdjustField setSShortMarginRatioByVolume(double sShortMarginRatioByVolume) {
    this.sShortMarginRatioByVolume = sShortMarginRatioByVolume;
    setSShortMarginRatioByVolumeIsSet(true);
    return this;
  }

  public void unsetSShortMarginRatioByVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SSHORTMARGINRATIOBYVOLUME_ISSET_ID);
  }

  /** Returns true if field sShortMarginRatioByVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetSShortMarginRatioByVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __SSHORTMARGINRATIOBYVOLUME_ISSET_ID);
  }

  public void setSShortMarginRatioByVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SSHORTMARGINRATIOBYVOLUME_ISSET_ID, value);
  }

  public double getHShortMarginRatioByMoney() {
    return this.hShortMarginRatioByMoney;
  }

  public CThostFtdcOptionInstrMarginAdjustField setHShortMarginRatioByMoney(double hShortMarginRatioByMoney) {
    this.hShortMarginRatioByMoney = hShortMarginRatioByMoney;
    setHShortMarginRatioByMoneyIsSet(true);
    return this;
  }

  public void unsetHShortMarginRatioByMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HSHORTMARGINRATIOBYMONEY_ISSET_ID);
  }

  /** Returns true if field hShortMarginRatioByMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetHShortMarginRatioByMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __HSHORTMARGINRATIOBYMONEY_ISSET_ID);
  }

  public void setHShortMarginRatioByMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HSHORTMARGINRATIOBYMONEY_ISSET_ID, value);
  }

  public double getHShortMarginRatioByVolume() {
    return this.hShortMarginRatioByVolume;
  }

  public CThostFtdcOptionInstrMarginAdjustField setHShortMarginRatioByVolume(double hShortMarginRatioByVolume) {
    this.hShortMarginRatioByVolume = hShortMarginRatioByVolume;
    setHShortMarginRatioByVolumeIsSet(true);
    return this;
  }

  public void unsetHShortMarginRatioByVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HSHORTMARGINRATIOBYVOLUME_ISSET_ID);
  }

  /** Returns true if field hShortMarginRatioByVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetHShortMarginRatioByVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __HSHORTMARGINRATIOBYVOLUME_ISSET_ID);
  }

  public void setHShortMarginRatioByVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HSHORTMARGINRATIOBYVOLUME_ISSET_ID, value);
  }

  public double getAShortMarginRatioByMoney() {
    return this.aShortMarginRatioByMoney;
  }

  public CThostFtdcOptionInstrMarginAdjustField setAShortMarginRatioByMoney(double aShortMarginRatioByMoney) {
    this.aShortMarginRatioByMoney = aShortMarginRatioByMoney;
    setAShortMarginRatioByMoneyIsSet(true);
    return this;
  }

  public void unsetAShortMarginRatioByMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASHORTMARGINRATIOBYMONEY_ISSET_ID);
  }

  /** Returns true if field aShortMarginRatioByMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetAShortMarginRatioByMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __ASHORTMARGINRATIOBYMONEY_ISSET_ID);
  }

  public void setAShortMarginRatioByMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASHORTMARGINRATIOBYMONEY_ISSET_ID, value);
  }

  public double getAShortMarginRatioByVolume() {
    return this.aShortMarginRatioByVolume;
  }

  public CThostFtdcOptionInstrMarginAdjustField setAShortMarginRatioByVolume(double aShortMarginRatioByVolume) {
    this.aShortMarginRatioByVolume = aShortMarginRatioByVolume;
    setAShortMarginRatioByVolumeIsSet(true);
    return this;
  }

  public void unsetAShortMarginRatioByVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASHORTMARGINRATIOBYVOLUME_ISSET_ID);
  }

  /** Returns true if field aShortMarginRatioByVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetAShortMarginRatioByVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __ASHORTMARGINRATIOBYVOLUME_ISSET_ID);
  }

  public void setAShortMarginRatioByVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASHORTMARGINRATIOBYVOLUME_ISSET_ID, value);
  }

  public int getIsRelative() {
    return this.isRelative;
  }

  public CThostFtdcOptionInstrMarginAdjustField setIsRelative(int isRelative) {
    this.isRelative = isRelative;
    setIsRelativeIsSet(true);
    return this;
  }

  public void unsetIsRelative() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISRELATIVE_ISSET_ID);
  }

  /** Returns true if field isRelative is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRelative() {
    return EncodingUtils.testBit(__isset_bitfield, __ISRELATIVE_ISSET_ID);
  }

  public void setIsRelativeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISRELATIVE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INSTRUMENT_ID:
      if (value == null) {
        unsetInstrumentID();
      } else {
        setInstrumentID((String)value);
      }
      break;

    case INVESTOR_RANGE:
      if (value == null) {
        unsetInvestorRange();
      } else {
        setInvestorRange((String)value);
      }
      break;

    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case INVESTOR_ID:
      if (value == null) {
        unsetInvestorID();
      } else {
        setInvestorID((String)value);
      }
      break;

    case S_SHORT_MARGIN_RATIO_BY_MONEY:
      if (value == null) {
        unsetSShortMarginRatioByMoney();
      } else {
        setSShortMarginRatioByMoney((Double)value);
      }
      break;

    case S_SHORT_MARGIN_RATIO_BY_VOLUME:
      if (value == null) {
        unsetSShortMarginRatioByVolume();
      } else {
        setSShortMarginRatioByVolume((Double)value);
      }
      break;

    case H_SHORT_MARGIN_RATIO_BY_MONEY:
      if (value == null) {
        unsetHShortMarginRatioByMoney();
      } else {
        setHShortMarginRatioByMoney((Double)value);
      }
      break;

    case H_SHORT_MARGIN_RATIO_BY_VOLUME:
      if (value == null) {
        unsetHShortMarginRatioByVolume();
      } else {
        setHShortMarginRatioByVolume((Double)value);
      }
      break;

    case A_SHORT_MARGIN_RATIO_BY_MONEY:
      if (value == null) {
        unsetAShortMarginRatioByMoney();
      } else {
        setAShortMarginRatioByMoney((Double)value);
      }
      break;

    case A_SHORT_MARGIN_RATIO_BY_VOLUME:
      if (value == null) {
        unsetAShortMarginRatioByVolume();
      } else {
        setAShortMarginRatioByVolume((Double)value);
      }
      break;

    case IS_RELATIVE:
      if (value == null) {
        unsetIsRelative();
      } else {
        setIsRelative((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INSTRUMENT_ID:
      return getInstrumentID();

    case INVESTOR_RANGE:
      return getInvestorRange();

    case BROKER_ID:
      return getBrokerID();

    case INVESTOR_ID:
      return getInvestorID();

    case S_SHORT_MARGIN_RATIO_BY_MONEY:
      return Double.valueOf(getSShortMarginRatioByMoney());

    case S_SHORT_MARGIN_RATIO_BY_VOLUME:
      return Double.valueOf(getSShortMarginRatioByVolume());

    case H_SHORT_MARGIN_RATIO_BY_MONEY:
      return Double.valueOf(getHShortMarginRatioByMoney());

    case H_SHORT_MARGIN_RATIO_BY_VOLUME:
      return Double.valueOf(getHShortMarginRatioByVolume());

    case A_SHORT_MARGIN_RATIO_BY_MONEY:
      return Double.valueOf(getAShortMarginRatioByMoney());

    case A_SHORT_MARGIN_RATIO_BY_VOLUME:
      return Double.valueOf(getAShortMarginRatioByVolume());

    case IS_RELATIVE:
      return Integer.valueOf(getIsRelative());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INSTRUMENT_ID:
      return isSetInstrumentID();
    case INVESTOR_RANGE:
      return isSetInvestorRange();
    case BROKER_ID:
      return isSetBrokerID();
    case INVESTOR_ID:
      return isSetInvestorID();
    case S_SHORT_MARGIN_RATIO_BY_MONEY:
      return isSetSShortMarginRatioByMoney();
    case S_SHORT_MARGIN_RATIO_BY_VOLUME:
      return isSetSShortMarginRatioByVolume();
    case H_SHORT_MARGIN_RATIO_BY_MONEY:
      return isSetHShortMarginRatioByMoney();
    case H_SHORT_MARGIN_RATIO_BY_VOLUME:
      return isSetHShortMarginRatioByVolume();
    case A_SHORT_MARGIN_RATIO_BY_MONEY:
      return isSetAShortMarginRatioByMoney();
    case A_SHORT_MARGIN_RATIO_BY_VOLUME:
      return isSetAShortMarginRatioByVolume();
    case IS_RELATIVE:
      return isSetIsRelative();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcOptionInstrMarginAdjustField)
      return this.equals((CThostFtdcOptionInstrMarginAdjustField)that);
    return false;
  }

  public boolean equals(CThostFtdcOptionInstrMarginAdjustField that) {
    if (that == null)
      return false;

    boolean this_present_instrumentID = true && this.isSetInstrumentID();
    boolean that_present_instrumentID = true && that.isSetInstrumentID();
    if (this_present_instrumentID || that_present_instrumentID) {
      if (!(this_present_instrumentID && that_present_instrumentID))
        return false;
      if (!this.instrumentID.equals(that.instrumentID))
        return false;
    }

    boolean this_present_investorRange = true && this.isSetInvestorRange();
    boolean that_present_investorRange = true && that.isSetInvestorRange();
    if (this_present_investorRange || that_present_investorRange) {
      if (!(this_present_investorRange && that_present_investorRange))
        return false;
      if (!this.investorRange.equals(that.investorRange))
        return false;
    }

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_investorID = true && this.isSetInvestorID();
    boolean that_present_investorID = true && that.isSetInvestorID();
    if (this_present_investorID || that_present_investorID) {
      if (!(this_present_investorID && that_present_investorID))
        return false;
      if (!this.investorID.equals(that.investorID))
        return false;
    }

    boolean this_present_sShortMarginRatioByMoney = true;
    boolean that_present_sShortMarginRatioByMoney = true;
    if (this_present_sShortMarginRatioByMoney || that_present_sShortMarginRatioByMoney) {
      if (!(this_present_sShortMarginRatioByMoney && that_present_sShortMarginRatioByMoney))
        return false;
      if (this.sShortMarginRatioByMoney != that.sShortMarginRatioByMoney)
        return false;
    }

    boolean this_present_sShortMarginRatioByVolume = true;
    boolean that_present_sShortMarginRatioByVolume = true;
    if (this_present_sShortMarginRatioByVolume || that_present_sShortMarginRatioByVolume) {
      if (!(this_present_sShortMarginRatioByVolume && that_present_sShortMarginRatioByVolume))
        return false;
      if (this.sShortMarginRatioByVolume != that.sShortMarginRatioByVolume)
        return false;
    }

    boolean this_present_hShortMarginRatioByMoney = true;
    boolean that_present_hShortMarginRatioByMoney = true;
    if (this_present_hShortMarginRatioByMoney || that_present_hShortMarginRatioByMoney) {
      if (!(this_present_hShortMarginRatioByMoney && that_present_hShortMarginRatioByMoney))
        return false;
      if (this.hShortMarginRatioByMoney != that.hShortMarginRatioByMoney)
        return false;
    }

    boolean this_present_hShortMarginRatioByVolume = true;
    boolean that_present_hShortMarginRatioByVolume = true;
    if (this_present_hShortMarginRatioByVolume || that_present_hShortMarginRatioByVolume) {
      if (!(this_present_hShortMarginRatioByVolume && that_present_hShortMarginRatioByVolume))
        return false;
      if (this.hShortMarginRatioByVolume != that.hShortMarginRatioByVolume)
        return false;
    }

    boolean this_present_aShortMarginRatioByMoney = true;
    boolean that_present_aShortMarginRatioByMoney = true;
    if (this_present_aShortMarginRatioByMoney || that_present_aShortMarginRatioByMoney) {
      if (!(this_present_aShortMarginRatioByMoney && that_present_aShortMarginRatioByMoney))
        return false;
      if (this.aShortMarginRatioByMoney != that.aShortMarginRatioByMoney)
        return false;
    }

    boolean this_present_aShortMarginRatioByVolume = true;
    boolean that_present_aShortMarginRatioByVolume = true;
    if (this_present_aShortMarginRatioByVolume || that_present_aShortMarginRatioByVolume) {
      if (!(this_present_aShortMarginRatioByVolume && that_present_aShortMarginRatioByVolume))
        return false;
      if (this.aShortMarginRatioByVolume != that.aShortMarginRatioByVolume)
        return false;
    }

    boolean this_present_isRelative = true;
    boolean that_present_isRelative = true;
    if (this_present_isRelative || that_present_isRelative) {
      if (!(this_present_isRelative && that_present_isRelative))
        return false;
      if (this.isRelative != that.isRelative)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcOptionInstrMarginAdjustField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInstrumentID()).compareTo(other.isSetInstrumentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstrumentID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instrumentID, other.instrumentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestorRange()).compareTo(other.isSetInvestorRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorRange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorRange, other.investorRange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestorID()).compareTo(other.isSetInvestorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorID, other.investorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSShortMarginRatioByMoney()).compareTo(other.isSetSShortMarginRatioByMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSShortMarginRatioByMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sShortMarginRatioByMoney, other.sShortMarginRatioByMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSShortMarginRatioByVolume()).compareTo(other.isSetSShortMarginRatioByVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSShortMarginRatioByVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sShortMarginRatioByVolume, other.sShortMarginRatioByVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHShortMarginRatioByMoney()).compareTo(other.isSetHShortMarginRatioByMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHShortMarginRatioByMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hShortMarginRatioByMoney, other.hShortMarginRatioByMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHShortMarginRatioByVolume()).compareTo(other.isSetHShortMarginRatioByVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHShortMarginRatioByVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hShortMarginRatioByVolume, other.hShortMarginRatioByVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAShortMarginRatioByMoney()).compareTo(other.isSetAShortMarginRatioByMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAShortMarginRatioByMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aShortMarginRatioByMoney, other.aShortMarginRatioByMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAShortMarginRatioByVolume()).compareTo(other.isSetAShortMarginRatioByVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAShortMarginRatioByVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aShortMarginRatioByVolume, other.aShortMarginRatioByVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsRelative()).compareTo(other.isSetIsRelative());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRelative()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRelative, other.isRelative);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcOptionInstrMarginAdjustField(");
    boolean first = true;

    sb.append("instrumentID:");
    if (this.instrumentID == null) {
      sb.append("null");
    } else {
      sb.append(this.instrumentID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("investorRange:");
    if (this.investorRange == null) {
      sb.append("null");
    } else {
      sb.append(this.investorRange);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("investorID:");
    if (this.investorID == null) {
      sb.append("null");
    } else {
      sb.append(this.investorID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sShortMarginRatioByMoney:");
    sb.append(this.sShortMarginRatioByMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sShortMarginRatioByVolume:");
    sb.append(this.sShortMarginRatioByVolume);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hShortMarginRatioByMoney:");
    sb.append(this.hShortMarginRatioByMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hShortMarginRatioByVolume:");
    sb.append(this.hShortMarginRatioByVolume);
    first = false;
    if (!first) sb.append(", ");
    sb.append("aShortMarginRatioByMoney:");
    sb.append(this.aShortMarginRatioByMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("aShortMarginRatioByVolume:");
    sb.append(this.aShortMarginRatioByVolume);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isRelative:");
    sb.append(this.isRelative);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcOptionInstrMarginAdjustFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcOptionInstrMarginAdjustFieldStandardScheme getScheme() {
      return new CThostFtdcOptionInstrMarginAdjustFieldStandardScheme();
    }
  }

  private static class CThostFtdcOptionInstrMarginAdjustFieldStandardScheme extends StandardScheme<CThostFtdcOptionInstrMarginAdjustField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcOptionInstrMarginAdjustField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INSTRUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instrumentID = iprot.readString();
              struct.setInstrumentIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INVESTOR_RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorRange = iprot.readString();
              struct.setInvestorRangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INVESTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorID = iprot.readString();
              struct.setInvestorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // S_SHORT_MARGIN_RATIO_BY_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.sShortMarginRatioByMoney = iprot.readDouble();
              struct.setSShortMarginRatioByMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // S_SHORT_MARGIN_RATIO_BY_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.sShortMarginRatioByVolume = iprot.readDouble();
              struct.setSShortMarginRatioByVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // H_SHORT_MARGIN_RATIO_BY_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.hShortMarginRatioByMoney = iprot.readDouble();
              struct.setHShortMarginRatioByMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // H_SHORT_MARGIN_RATIO_BY_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.hShortMarginRatioByVolume = iprot.readDouble();
              struct.setHShortMarginRatioByVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // A_SHORT_MARGIN_RATIO_BY_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.aShortMarginRatioByMoney = iprot.readDouble();
              struct.setAShortMarginRatioByMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // A_SHORT_MARGIN_RATIO_BY_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.aShortMarginRatioByVolume = iprot.readDouble();
              struct.setAShortMarginRatioByVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IS_RELATIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isRelative = iprot.readI32();
              struct.setIsRelativeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcOptionInstrMarginAdjustField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.instrumentID != null) {
        oprot.writeFieldBegin(INSTRUMENT_ID_FIELD_DESC);
        oprot.writeString(struct.instrumentID);
        oprot.writeFieldEnd();
      }
      if (struct.investorRange != null) {
        oprot.writeFieldBegin(INVESTOR_RANGE_FIELD_DESC);
        oprot.writeString(struct.investorRange);
        oprot.writeFieldEnd();
      }
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.investorID != null) {
        oprot.writeFieldBegin(INVESTOR_ID_FIELD_DESC);
        oprot.writeString(struct.investorID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(S_SHORT_MARGIN_RATIO_BY_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.sShortMarginRatioByMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(S_SHORT_MARGIN_RATIO_BY_VOLUME_FIELD_DESC);
      oprot.writeDouble(struct.sShortMarginRatioByVolume);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(H_SHORT_MARGIN_RATIO_BY_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.hShortMarginRatioByMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(H_SHORT_MARGIN_RATIO_BY_VOLUME_FIELD_DESC);
      oprot.writeDouble(struct.hShortMarginRatioByVolume);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(A_SHORT_MARGIN_RATIO_BY_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.aShortMarginRatioByMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(A_SHORT_MARGIN_RATIO_BY_VOLUME_FIELD_DESC);
      oprot.writeDouble(struct.aShortMarginRatioByVolume);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_RELATIVE_FIELD_DESC);
      oprot.writeI32(struct.isRelative);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcOptionInstrMarginAdjustFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcOptionInstrMarginAdjustFieldTupleScheme getScheme() {
      return new CThostFtdcOptionInstrMarginAdjustFieldTupleScheme();
    }
  }

  private static class CThostFtdcOptionInstrMarginAdjustFieldTupleScheme extends TupleScheme<CThostFtdcOptionInstrMarginAdjustField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcOptionInstrMarginAdjustField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInstrumentID()) {
        optionals.set(0);
      }
      if (struct.isSetInvestorRange()) {
        optionals.set(1);
      }
      if (struct.isSetBrokerID()) {
        optionals.set(2);
      }
      if (struct.isSetInvestorID()) {
        optionals.set(3);
      }
      if (struct.isSetSShortMarginRatioByMoney()) {
        optionals.set(4);
      }
      if (struct.isSetSShortMarginRatioByVolume()) {
        optionals.set(5);
      }
      if (struct.isSetHShortMarginRatioByMoney()) {
        optionals.set(6);
      }
      if (struct.isSetHShortMarginRatioByVolume()) {
        optionals.set(7);
      }
      if (struct.isSetAShortMarginRatioByMoney()) {
        optionals.set(8);
      }
      if (struct.isSetAShortMarginRatioByVolume()) {
        optionals.set(9);
      }
      if (struct.isSetIsRelative()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetInstrumentID()) {
        oprot.writeString(struct.instrumentID);
      }
      if (struct.isSetInvestorRange()) {
        oprot.writeString(struct.investorRange);
      }
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetInvestorID()) {
        oprot.writeString(struct.investorID);
      }
      if (struct.isSetSShortMarginRatioByMoney()) {
        oprot.writeDouble(struct.sShortMarginRatioByMoney);
      }
      if (struct.isSetSShortMarginRatioByVolume()) {
        oprot.writeDouble(struct.sShortMarginRatioByVolume);
      }
      if (struct.isSetHShortMarginRatioByMoney()) {
        oprot.writeDouble(struct.hShortMarginRatioByMoney);
      }
      if (struct.isSetHShortMarginRatioByVolume()) {
        oprot.writeDouble(struct.hShortMarginRatioByVolume);
      }
      if (struct.isSetAShortMarginRatioByMoney()) {
        oprot.writeDouble(struct.aShortMarginRatioByMoney);
      }
      if (struct.isSetAShortMarginRatioByVolume()) {
        oprot.writeDouble(struct.aShortMarginRatioByVolume);
      }
      if (struct.isSetIsRelative()) {
        oprot.writeI32(struct.isRelative);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcOptionInstrMarginAdjustField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.instrumentID = iprot.readString();
        struct.setInstrumentIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.investorRange = iprot.readString();
        struct.setInvestorRangeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.investorID = iprot.readString();
        struct.setInvestorIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sShortMarginRatioByMoney = iprot.readDouble();
        struct.setSShortMarginRatioByMoneyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sShortMarginRatioByVolume = iprot.readDouble();
        struct.setSShortMarginRatioByVolumeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.hShortMarginRatioByMoney = iprot.readDouble();
        struct.setHShortMarginRatioByMoneyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.hShortMarginRatioByVolume = iprot.readDouble();
        struct.setHShortMarginRatioByVolumeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.aShortMarginRatioByMoney = iprot.readDouble();
        struct.setAShortMarginRatioByMoneyIsSet(true);
      }
      if (incoming.get(9)) {
        struct.aShortMarginRatioByVolume = iprot.readDouble();
        struct.setAShortMarginRatioByVolumeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.isRelative = iprot.readI32();
        struct.setIsRelativeIsSet(true);
      }
    }
  }

}

