/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcTradeField implements org.apache.thrift.TBase<CThostFtdcTradeField, CThostFtdcTradeField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcTradeField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcTradeField");

  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INVESTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("investorID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INSTRUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instrumentID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ORDER_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("orderRef", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EXCHANGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeID", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TRADE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeID", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("direction", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ORDER_SYS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderSysID", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PARTICIPANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("participantID", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientID", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField TRADING_ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("tradingRole", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField EXCHANGE_INST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeInstID", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField OFFSET_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("offsetFlag", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField FEDGE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("fedgeFlag", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("volume", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField TRADE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeDate", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField TRADE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeTime", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField TRADE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeType", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField PRICE_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("priceSource", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField TRADER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("traderID", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField ORDER_LOCAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderLocalID", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField CLEARING_PART_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clearingPartID", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField BUSINESS_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("businessUnit", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField SEQUENCE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("sequenceNo", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField TRADING_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("tradingDay", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField SETTLEMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("settlementID", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField BROKER_ORDER_SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerOrderSeq", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField TRADE_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeSource", org.apache.thrift.protocol.TType.STRING, (short)30);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcTradeFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcTradeFieldTupleSchemeFactory());
  }

  public String brokerID; // required
  public String investorID; // required
  public String instrumentID; // required
  public String orderRef; // required
  public String userID; // required
  public String exchangeID; // required
  public String tradeID; // required
  public String direction; // required
  public String orderSysID; // required
  public String participantID; // required
  public String clientID; // required
  public String tradingRole; // required
  public String exchangeInstID; // required
  public String offsetFlag; // required
  public String fedgeFlag; // required
  public double price; // required
  public int volume; // required
  public String tradeDate; // required
  public String tradeTime; // required
  public String tradeType; // required
  public String priceSource; // required
  public String traderID; // required
  public String orderLocalID; // required
  public String clearingPartID; // required
  public String businessUnit; // required
  public int sequenceNo; // required
  public String tradingDay; // required
  public int settlementID; // required
  public int brokerOrderSeq; // required
  public String tradeSource; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BROKER_ID((short)1, "brokerID"),
    INVESTOR_ID((short)2, "investorID"),
    INSTRUMENT_ID((short)3, "instrumentID"),
    ORDER_REF((short)4, "orderRef"),
    USER_ID((short)5, "userID"),
    EXCHANGE_ID((short)6, "exchangeID"),
    TRADE_ID((short)7, "tradeID"),
    DIRECTION((short)8, "direction"),
    ORDER_SYS_ID((short)9, "orderSysID"),
    PARTICIPANT_ID((short)10, "participantID"),
    CLIENT_ID((short)11, "clientID"),
    TRADING_ROLE((short)12, "tradingRole"),
    EXCHANGE_INST_ID((short)13, "exchangeInstID"),
    OFFSET_FLAG((short)14, "offsetFlag"),
    FEDGE_FLAG((short)15, "fedgeFlag"),
    PRICE((short)16, "price"),
    VOLUME((short)17, "volume"),
    TRADE_DATE((short)18, "tradeDate"),
    TRADE_TIME((short)19, "tradeTime"),
    TRADE_TYPE((short)20, "tradeType"),
    PRICE_SOURCE((short)21, "priceSource"),
    TRADER_ID((short)22, "traderID"),
    ORDER_LOCAL_ID((short)23, "orderLocalID"),
    CLEARING_PART_ID((short)24, "clearingPartID"),
    BUSINESS_UNIT((short)25, "businessUnit"),
    SEQUENCE_NO((short)26, "sequenceNo"),
    TRADING_DAY((short)27, "tradingDay"),
    SETTLEMENT_ID((short)28, "settlementID"),
    BROKER_ORDER_SEQ((short)29, "brokerOrderSeq"),
    TRADE_SOURCE((short)30, "tradeSource");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BROKER_ID
          return BROKER_ID;
        case 2: // INVESTOR_ID
          return INVESTOR_ID;
        case 3: // INSTRUMENT_ID
          return INSTRUMENT_ID;
        case 4: // ORDER_REF
          return ORDER_REF;
        case 5: // USER_ID
          return USER_ID;
        case 6: // EXCHANGE_ID
          return EXCHANGE_ID;
        case 7: // TRADE_ID
          return TRADE_ID;
        case 8: // DIRECTION
          return DIRECTION;
        case 9: // ORDER_SYS_ID
          return ORDER_SYS_ID;
        case 10: // PARTICIPANT_ID
          return PARTICIPANT_ID;
        case 11: // CLIENT_ID
          return CLIENT_ID;
        case 12: // TRADING_ROLE
          return TRADING_ROLE;
        case 13: // EXCHANGE_INST_ID
          return EXCHANGE_INST_ID;
        case 14: // OFFSET_FLAG
          return OFFSET_FLAG;
        case 15: // FEDGE_FLAG
          return FEDGE_FLAG;
        case 16: // PRICE
          return PRICE;
        case 17: // VOLUME
          return VOLUME;
        case 18: // TRADE_DATE
          return TRADE_DATE;
        case 19: // TRADE_TIME
          return TRADE_TIME;
        case 20: // TRADE_TYPE
          return TRADE_TYPE;
        case 21: // PRICE_SOURCE
          return PRICE_SOURCE;
        case 22: // TRADER_ID
          return TRADER_ID;
        case 23: // ORDER_LOCAL_ID
          return ORDER_LOCAL_ID;
        case 24: // CLEARING_PART_ID
          return CLEARING_PART_ID;
        case 25: // BUSINESS_UNIT
          return BUSINESS_UNIT;
        case 26: // SEQUENCE_NO
          return SEQUENCE_NO;
        case 27: // TRADING_DAY
          return TRADING_DAY;
        case 28: // SETTLEMENT_ID
          return SETTLEMENT_ID;
        case 29: // BROKER_ORDER_SEQ
          return BROKER_ORDER_SEQ;
        case 30: // TRADE_SOURCE
          return TRADE_SOURCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRICE_ISSET_ID = 0;
  private static final int __VOLUME_ISSET_ID = 1;
  private static final int __SEQUENCENO_ISSET_ID = 2;
  private static final int __SETTLEMENTID_ISSET_ID = 3;
  private static final int __BROKERORDERSEQ_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.INVESTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("investorID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInvestorIDType")));
    tmpMap.put(_Fields.INSTRUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("instrumentID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInstrumentIDType")));
    tmpMap.put(_Fields.ORDER_REF, new org.apache.thrift.meta_data.FieldMetaData("orderRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderRefType")));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcUserIDType")));
    tmpMap.put(_Fields.EXCHANGE_ID, new org.apache.thrift.meta_data.FieldMetaData("exchangeID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcExchangeIDType")));
    tmpMap.put(_Fields.TRADE_ID, new org.apache.thrift.meta_data.FieldMetaData("tradeID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeIDType")));
    tmpMap.put(_Fields.DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("direction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDirectionType")));
    tmpMap.put(_Fields.ORDER_SYS_ID, new org.apache.thrift.meta_data.FieldMetaData("orderSysID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderSysIDType")));
    tmpMap.put(_Fields.PARTICIPANT_ID, new org.apache.thrift.meta_data.FieldMetaData("participantID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcParticipantIDType")));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcClientIDType")));
    tmpMap.put(_Fields.TRADING_ROLE, new org.apache.thrift.meta_data.FieldMetaData("tradingRole", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradingRoleType")));
    tmpMap.put(_Fields.EXCHANGE_INST_ID, new org.apache.thrift.meta_data.FieldMetaData("exchangeInstID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcExchangeInstIDType")));
    tmpMap.put(_Fields.OFFSET_FLAG, new org.apache.thrift.meta_data.FieldMetaData("offsetFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOffsetFlagType")));
    tmpMap.put(_Fields.FEDGE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("fedgeFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcHedgeFlagType")));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.VOLUME, new org.apache.thrift.meta_data.FieldMetaData("volume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcVolumeType")));
    tmpMap.put(_Fields.TRADE_DATE, new org.apache.thrift.meta_data.FieldMetaData("tradeDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    tmpMap.put(_Fields.TRADE_TIME, new org.apache.thrift.meta_data.FieldMetaData("tradeTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeType")));
    tmpMap.put(_Fields.TRADE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("tradeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeTypeType")));
    tmpMap.put(_Fields.PRICE_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("priceSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcPriceSourceType")));
    tmpMap.put(_Fields.TRADER_ID, new org.apache.thrift.meta_data.FieldMetaData("traderID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTraderIDType")));
    tmpMap.put(_Fields.ORDER_LOCAL_ID, new org.apache.thrift.meta_data.FieldMetaData("orderLocalID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderLocalIDType")));
    tmpMap.put(_Fields.CLEARING_PART_ID, new org.apache.thrift.meta_data.FieldMetaData("clearingPartID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcParticipantIDType")));
    tmpMap.put(_Fields.BUSINESS_UNIT, new org.apache.thrift.meta_data.FieldMetaData("businessUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBusinessUnitType")));
    tmpMap.put(_Fields.SEQUENCE_NO, new org.apache.thrift.meta_data.FieldMetaData("sequenceNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcSequenceNoType")));
    tmpMap.put(_Fields.TRADING_DAY, new org.apache.thrift.meta_data.FieldMetaData("tradingDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    tmpMap.put(_Fields.SETTLEMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("settlementID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcSettlementIDType")));
    tmpMap.put(_Fields.BROKER_ORDER_SEQ, new org.apache.thrift.meta_data.FieldMetaData("brokerOrderSeq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcSequenceNoType")));
    tmpMap.put(_Fields.TRADE_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("tradeSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeSourceType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcTradeField.class, metaDataMap);
  }

  public CThostFtdcTradeField() {
  }

  public CThostFtdcTradeField(
    String brokerID,
    String investorID,
    String instrumentID,
    String orderRef,
    String userID,
    String exchangeID,
    String tradeID,
    String direction,
    String orderSysID,
    String participantID,
    String clientID,
    String tradingRole,
    String exchangeInstID,
    String offsetFlag,
    String fedgeFlag,
    double price,
    int volume,
    String tradeDate,
    String tradeTime,
    String tradeType,
    String priceSource,
    String traderID,
    String orderLocalID,
    String clearingPartID,
    String businessUnit,
    int sequenceNo,
    String tradingDay,
    int settlementID,
    int brokerOrderSeq,
    String tradeSource)
  {
    this();
    this.brokerID = brokerID;
    this.investorID = investorID;
    this.instrumentID = instrumentID;
    this.orderRef = orderRef;
    this.userID = userID;
    this.exchangeID = exchangeID;
    this.tradeID = tradeID;
    this.direction = direction;
    this.orderSysID = orderSysID;
    this.participantID = participantID;
    this.clientID = clientID;
    this.tradingRole = tradingRole;
    this.exchangeInstID = exchangeInstID;
    this.offsetFlag = offsetFlag;
    this.fedgeFlag = fedgeFlag;
    this.price = price;
    setPriceIsSet(true);
    this.volume = volume;
    setVolumeIsSet(true);
    this.tradeDate = tradeDate;
    this.tradeTime = tradeTime;
    this.tradeType = tradeType;
    this.priceSource = priceSource;
    this.traderID = traderID;
    this.orderLocalID = orderLocalID;
    this.clearingPartID = clearingPartID;
    this.businessUnit = businessUnit;
    this.sequenceNo = sequenceNo;
    setSequenceNoIsSet(true);
    this.tradingDay = tradingDay;
    this.settlementID = settlementID;
    setSettlementIDIsSet(true);
    this.brokerOrderSeq = brokerOrderSeq;
    setBrokerOrderSeqIsSet(true);
    this.tradeSource = tradeSource;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcTradeField(CThostFtdcTradeField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetInvestorID()) {
      this.investorID = other.investorID;
    }
    if (other.isSetInstrumentID()) {
      this.instrumentID = other.instrumentID;
    }
    if (other.isSetOrderRef()) {
      this.orderRef = other.orderRef;
    }
    if (other.isSetUserID()) {
      this.userID = other.userID;
    }
    if (other.isSetExchangeID()) {
      this.exchangeID = other.exchangeID;
    }
    if (other.isSetTradeID()) {
      this.tradeID = other.tradeID;
    }
    if (other.isSetDirection()) {
      this.direction = other.direction;
    }
    if (other.isSetOrderSysID()) {
      this.orderSysID = other.orderSysID;
    }
    if (other.isSetParticipantID()) {
      this.participantID = other.participantID;
    }
    if (other.isSetClientID()) {
      this.clientID = other.clientID;
    }
    if (other.isSetTradingRole()) {
      this.tradingRole = other.tradingRole;
    }
    if (other.isSetExchangeInstID()) {
      this.exchangeInstID = other.exchangeInstID;
    }
    if (other.isSetOffsetFlag()) {
      this.offsetFlag = other.offsetFlag;
    }
    if (other.isSetFedgeFlag()) {
      this.fedgeFlag = other.fedgeFlag;
    }
    this.price = other.price;
    this.volume = other.volume;
    if (other.isSetTradeDate()) {
      this.tradeDate = other.tradeDate;
    }
    if (other.isSetTradeTime()) {
      this.tradeTime = other.tradeTime;
    }
    if (other.isSetTradeType()) {
      this.tradeType = other.tradeType;
    }
    if (other.isSetPriceSource()) {
      this.priceSource = other.priceSource;
    }
    if (other.isSetTraderID()) {
      this.traderID = other.traderID;
    }
    if (other.isSetOrderLocalID()) {
      this.orderLocalID = other.orderLocalID;
    }
    if (other.isSetClearingPartID()) {
      this.clearingPartID = other.clearingPartID;
    }
    if (other.isSetBusinessUnit()) {
      this.businessUnit = other.businessUnit;
    }
    this.sequenceNo = other.sequenceNo;
    if (other.isSetTradingDay()) {
      this.tradingDay = other.tradingDay;
    }
    this.settlementID = other.settlementID;
    this.brokerOrderSeq = other.brokerOrderSeq;
    if (other.isSetTradeSource()) {
      this.tradeSource = other.tradeSource;
    }
  }

  public CThostFtdcTradeField deepCopy() {
    return new CThostFtdcTradeField(this);
  }

  @Override
  public void clear() {
    this.brokerID = null;
    this.investorID = null;
    this.instrumentID = null;
    this.orderRef = null;
    this.userID = null;
    this.exchangeID = null;
    this.tradeID = null;
    this.direction = null;
    this.orderSysID = null;
    this.participantID = null;
    this.clientID = null;
    this.tradingRole = null;
    this.exchangeInstID = null;
    this.offsetFlag = null;
    this.fedgeFlag = null;
    setPriceIsSet(false);
    this.price = 0.0;
    setVolumeIsSet(false);
    this.volume = 0;
    this.tradeDate = null;
    this.tradeTime = null;
    this.tradeType = null;
    this.priceSource = null;
    this.traderID = null;
    this.orderLocalID = null;
    this.clearingPartID = null;
    this.businessUnit = null;
    setSequenceNoIsSet(false);
    this.sequenceNo = 0;
    this.tradingDay = null;
    setSettlementIDIsSet(false);
    this.settlementID = 0;
    setBrokerOrderSeqIsSet(false);
    this.brokerOrderSeq = 0;
    this.tradeSource = null;
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcTradeField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getInvestorID() {
    return this.investorID;
  }

  public CThostFtdcTradeField setInvestorID(String investorID) {
    this.investorID = investorID;
    return this;
  }

  public void unsetInvestorID() {
    this.investorID = null;
  }

  /** Returns true if field investorID is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorID() {
    return this.investorID != null;
  }

  public void setInvestorIDIsSet(boolean value) {
    if (!value) {
      this.investorID = null;
    }
  }

  public String getInstrumentID() {
    return this.instrumentID;
  }

  public CThostFtdcTradeField setInstrumentID(String instrumentID) {
    this.instrumentID = instrumentID;
    return this;
  }

  public void unsetInstrumentID() {
    this.instrumentID = null;
  }

  /** Returns true if field instrumentID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstrumentID() {
    return this.instrumentID != null;
  }

  public void setInstrumentIDIsSet(boolean value) {
    if (!value) {
      this.instrumentID = null;
    }
  }

  public String getOrderRef() {
    return this.orderRef;
  }

  public CThostFtdcTradeField setOrderRef(String orderRef) {
    this.orderRef = orderRef;
    return this;
  }

  public void unsetOrderRef() {
    this.orderRef = null;
  }

  /** Returns true if field orderRef is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderRef() {
    return this.orderRef != null;
  }

  public void setOrderRefIsSet(boolean value) {
    if (!value) {
      this.orderRef = null;
    }
  }

  public String getUserID() {
    return this.userID;
  }

  public CThostFtdcTradeField setUserID(String userID) {
    this.userID = userID;
    return this;
  }

  public void unsetUserID() {
    this.userID = null;
  }

  /** Returns true if field userID is set (has been assigned a value) and false otherwise */
  public boolean isSetUserID() {
    return this.userID != null;
  }

  public void setUserIDIsSet(boolean value) {
    if (!value) {
      this.userID = null;
    }
  }

  public String getExchangeID() {
    return this.exchangeID;
  }

  public CThostFtdcTradeField setExchangeID(String exchangeID) {
    this.exchangeID = exchangeID;
    return this;
  }

  public void unsetExchangeID() {
    this.exchangeID = null;
  }

  /** Returns true if field exchangeID is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeID() {
    return this.exchangeID != null;
  }

  public void setExchangeIDIsSet(boolean value) {
    if (!value) {
      this.exchangeID = null;
    }
  }

  public String getTradeID() {
    return this.tradeID;
  }

  public CThostFtdcTradeField setTradeID(String tradeID) {
    this.tradeID = tradeID;
    return this;
  }

  public void unsetTradeID() {
    this.tradeID = null;
  }

  /** Returns true if field tradeID is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeID() {
    return this.tradeID != null;
  }

  public void setTradeIDIsSet(boolean value) {
    if (!value) {
      this.tradeID = null;
    }
  }

  public String getDirection() {
    return this.direction;
  }

  public CThostFtdcTradeField setDirection(String direction) {
    this.direction = direction;
    return this;
  }

  public void unsetDirection() {
    this.direction = null;
  }

  /** Returns true if field direction is set (has been assigned a value) and false otherwise */
  public boolean isSetDirection() {
    return this.direction != null;
  }

  public void setDirectionIsSet(boolean value) {
    if (!value) {
      this.direction = null;
    }
  }

  public String getOrderSysID() {
    return this.orderSysID;
  }

  public CThostFtdcTradeField setOrderSysID(String orderSysID) {
    this.orderSysID = orderSysID;
    return this;
  }

  public void unsetOrderSysID() {
    this.orderSysID = null;
  }

  /** Returns true if field orderSysID is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderSysID() {
    return this.orderSysID != null;
  }

  public void setOrderSysIDIsSet(boolean value) {
    if (!value) {
      this.orderSysID = null;
    }
  }

  public String getParticipantID() {
    return this.participantID;
  }

  public CThostFtdcTradeField setParticipantID(String participantID) {
    this.participantID = participantID;
    return this;
  }

  public void unsetParticipantID() {
    this.participantID = null;
  }

  /** Returns true if field participantID is set (has been assigned a value) and false otherwise */
  public boolean isSetParticipantID() {
    return this.participantID != null;
  }

  public void setParticipantIDIsSet(boolean value) {
    if (!value) {
      this.participantID = null;
    }
  }

  public String getClientID() {
    return this.clientID;
  }

  public CThostFtdcTradeField setClientID(String clientID) {
    this.clientID = clientID;
    return this;
  }

  public void unsetClientID() {
    this.clientID = null;
  }

  /** Returns true if field clientID is set (has been assigned a value) and false otherwise */
  public boolean isSetClientID() {
    return this.clientID != null;
  }

  public void setClientIDIsSet(boolean value) {
    if (!value) {
      this.clientID = null;
    }
  }

  public String getTradingRole() {
    return this.tradingRole;
  }

  public CThostFtdcTradeField setTradingRole(String tradingRole) {
    this.tradingRole = tradingRole;
    return this;
  }

  public void unsetTradingRole() {
    this.tradingRole = null;
  }

  /** Returns true if field tradingRole is set (has been assigned a value) and false otherwise */
  public boolean isSetTradingRole() {
    return this.tradingRole != null;
  }

  public void setTradingRoleIsSet(boolean value) {
    if (!value) {
      this.tradingRole = null;
    }
  }

  public String getExchangeInstID() {
    return this.exchangeInstID;
  }

  public CThostFtdcTradeField setExchangeInstID(String exchangeInstID) {
    this.exchangeInstID = exchangeInstID;
    return this;
  }

  public void unsetExchangeInstID() {
    this.exchangeInstID = null;
  }

  /** Returns true if field exchangeInstID is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeInstID() {
    return this.exchangeInstID != null;
  }

  public void setExchangeInstIDIsSet(boolean value) {
    if (!value) {
      this.exchangeInstID = null;
    }
  }

  public String getOffsetFlag() {
    return this.offsetFlag;
  }

  public CThostFtdcTradeField setOffsetFlag(String offsetFlag) {
    this.offsetFlag = offsetFlag;
    return this;
  }

  public void unsetOffsetFlag() {
    this.offsetFlag = null;
  }

  /** Returns true if field offsetFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetOffsetFlag() {
    return this.offsetFlag != null;
  }

  public void setOffsetFlagIsSet(boolean value) {
    if (!value) {
      this.offsetFlag = null;
    }
  }

  public String getFedgeFlag() {
    return this.fedgeFlag;
  }

  public CThostFtdcTradeField setFedgeFlag(String fedgeFlag) {
    this.fedgeFlag = fedgeFlag;
    return this;
  }

  public void unsetFedgeFlag() {
    this.fedgeFlag = null;
  }

  /** Returns true if field fedgeFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetFedgeFlag() {
    return this.fedgeFlag != null;
  }

  public void setFedgeFlagIsSet(boolean value) {
    if (!value) {
      this.fedgeFlag = null;
    }
  }

  public double getPrice() {
    return this.price;
  }

  public CThostFtdcTradeField setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  public int getVolume() {
    return this.volume;
  }

  public CThostFtdcTradeField setVolume(int volume) {
    this.volume = volume;
    setVolumeIsSet(true);
    return this;
  }

  public void unsetVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLUME_ISSET_ID);
  }

  /** Returns true if field volume is set (has been assigned a value) and false otherwise */
  public boolean isSetVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __VOLUME_ISSET_ID);
  }

  public void setVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLUME_ISSET_ID, value);
  }

  public String getTradeDate() {
    return this.tradeDate;
  }

  public CThostFtdcTradeField setTradeDate(String tradeDate) {
    this.tradeDate = tradeDate;
    return this;
  }

  public void unsetTradeDate() {
    this.tradeDate = null;
  }

  /** Returns true if field tradeDate is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeDate() {
    return this.tradeDate != null;
  }

  public void setTradeDateIsSet(boolean value) {
    if (!value) {
      this.tradeDate = null;
    }
  }

  public String getTradeTime() {
    return this.tradeTime;
  }

  public CThostFtdcTradeField setTradeTime(String tradeTime) {
    this.tradeTime = tradeTime;
    return this;
  }

  public void unsetTradeTime() {
    this.tradeTime = null;
  }

  /** Returns true if field tradeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeTime() {
    return this.tradeTime != null;
  }

  public void setTradeTimeIsSet(boolean value) {
    if (!value) {
      this.tradeTime = null;
    }
  }

  public String getTradeType() {
    return this.tradeType;
  }

  public CThostFtdcTradeField setTradeType(String tradeType) {
    this.tradeType = tradeType;
    return this;
  }

  public void unsetTradeType() {
    this.tradeType = null;
  }

  /** Returns true if field tradeType is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeType() {
    return this.tradeType != null;
  }

  public void setTradeTypeIsSet(boolean value) {
    if (!value) {
      this.tradeType = null;
    }
  }

  public String getPriceSource() {
    return this.priceSource;
  }

  public CThostFtdcTradeField setPriceSource(String priceSource) {
    this.priceSource = priceSource;
    return this;
  }

  public void unsetPriceSource() {
    this.priceSource = null;
  }

  /** Returns true if field priceSource is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceSource() {
    return this.priceSource != null;
  }

  public void setPriceSourceIsSet(boolean value) {
    if (!value) {
      this.priceSource = null;
    }
  }

  public String getTraderID() {
    return this.traderID;
  }

  public CThostFtdcTradeField setTraderID(String traderID) {
    this.traderID = traderID;
    return this;
  }

  public void unsetTraderID() {
    this.traderID = null;
  }

  /** Returns true if field traderID is set (has been assigned a value) and false otherwise */
  public boolean isSetTraderID() {
    return this.traderID != null;
  }

  public void setTraderIDIsSet(boolean value) {
    if (!value) {
      this.traderID = null;
    }
  }

  public String getOrderLocalID() {
    return this.orderLocalID;
  }

  public CThostFtdcTradeField setOrderLocalID(String orderLocalID) {
    this.orderLocalID = orderLocalID;
    return this;
  }

  public void unsetOrderLocalID() {
    this.orderLocalID = null;
  }

  /** Returns true if field orderLocalID is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderLocalID() {
    return this.orderLocalID != null;
  }

  public void setOrderLocalIDIsSet(boolean value) {
    if (!value) {
      this.orderLocalID = null;
    }
  }

  public String getClearingPartID() {
    return this.clearingPartID;
  }

  public CThostFtdcTradeField setClearingPartID(String clearingPartID) {
    this.clearingPartID = clearingPartID;
    return this;
  }

  public void unsetClearingPartID() {
    this.clearingPartID = null;
  }

  /** Returns true if field clearingPartID is set (has been assigned a value) and false otherwise */
  public boolean isSetClearingPartID() {
    return this.clearingPartID != null;
  }

  public void setClearingPartIDIsSet(boolean value) {
    if (!value) {
      this.clearingPartID = null;
    }
  }

  public String getBusinessUnit() {
    return this.businessUnit;
  }

  public CThostFtdcTradeField setBusinessUnit(String businessUnit) {
    this.businessUnit = businessUnit;
    return this;
  }

  public void unsetBusinessUnit() {
    this.businessUnit = null;
  }

  /** Returns true if field businessUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessUnit() {
    return this.businessUnit != null;
  }

  public void setBusinessUnitIsSet(boolean value) {
    if (!value) {
      this.businessUnit = null;
    }
  }

  public int getSequenceNo() {
    return this.sequenceNo;
  }

  public CThostFtdcTradeField setSequenceNo(int sequenceNo) {
    this.sequenceNo = sequenceNo;
    setSequenceNoIsSet(true);
    return this;
  }

  public void unsetSequenceNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQUENCENO_ISSET_ID);
  }

  /** Returns true if field sequenceNo is set (has been assigned a value) and false otherwise */
  public boolean isSetSequenceNo() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQUENCENO_ISSET_ID);
  }

  public void setSequenceNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQUENCENO_ISSET_ID, value);
  }

  public String getTradingDay() {
    return this.tradingDay;
  }

  public CThostFtdcTradeField setTradingDay(String tradingDay) {
    this.tradingDay = tradingDay;
    return this;
  }

  public void unsetTradingDay() {
    this.tradingDay = null;
  }

  /** Returns true if field tradingDay is set (has been assigned a value) and false otherwise */
  public boolean isSetTradingDay() {
    return this.tradingDay != null;
  }

  public void setTradingDayIsSet(boolean value) {
    if (!value) {
      this.tradingDay = null;
    }
  }

  public int getSettlementID() {
    return this.settlementID;
  }

  public CThostFtdcTradeField setSettlementID(int settlementID) {
    this.settlementID = settlementID;
    setSettlementIDIsSet(true);
    return this;
  }

  public void unsetSettlementID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID);
  }

  /** Returns true if field settlementID is set (has been assigned a value) and false otherwise */
  public boolean isSetSettlementID() {
    return EncodingUtils.testBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID);
  }

  public void setSettlementIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID, value);
  }

  public int getBrokerOrderSeq() {
    return this.brokerOrderSeq;
  }

  public CThostFtdcTradeField setBrokerOrderSeq(int brokerOrderSeq) {
    this.brokerOrderSeq = brokerOrderSeq;
    setBrokerOrderSeqIsSet(true);
    return this;
  }

  public void unsetBrokerOrderSeq() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BROKERORDERSEQ_ISSET_ID);
  }

  /** Returns true if field brokerOrderSeq is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerOrderSeq() {
    return EncodingUtils.testBit(__isset_bitfield, __BROKERORDERSEQ_ISSET_ID);
  }

  public void setBrokerOrderSeqIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BROKERORDERSEQ_ISSET_ID, value);
  }

  public String getTradeSource() {
    return this.tradeSource;
  }

  public CThostFtdcTradeField setTradeSource(String tradeSource) {
    this.tradeSource = tradeSource;
    return this;
  }

  public void unsetTradeSource() {
    this.tradeSource = null;
  }

  /** Returns true if field tradeSource is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeSource() {
    return this.tradeSource != null;
  }

  public void setTradeSourceIsSet(boolean value) {
    if (!value) {
      this.tradeSource = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case INVESTOR_ID:
      if (value == null) {
        unsetInvestorID();
      } else {
        setInvestorID((String)value);
      }
      break;

    case INSTRUMENT_ID:
      if (value == null) {
        unsetInstrumentID();
      } else {
        setInstrumentID((String)value);
      }
      break;

    case ORDER_REF:
      if (value == null) {
        unsetOrderRef();
      } else {
        setOrderRef((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserID();
      } else {
        setUserID((String)value);
      }
      break;

    case EXCHANGE_ID:
      if (value == null) {
        unsetExchangeID();
      } else {
        setExchangeID((String)value);
      }
      break;

    case TRADE_ID:
      if (value == null) {
        unsetTradeID();
      } else {
        setTradeID((String)value);
      }
      break;

    case DIRECTION:
      if (value == null) {
        unsetDirection();
      } else {
        setDirection((String)value);
      }
      break;

    case ORDER_SYS_ID:
      if (value == null) {
        unsetOrderSysID();
      } else {
        setOrderSysID((String)value);
      }
      break;

    case PARTICIPANT_ID:
      if (value == null) {
        unsetParticipantID();
      } else {
        setParticipantID((String)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientID();
      } else {
        setClientID((String)value);
      }
      break;

    case TRADING_ROLE:
      if (value == null) {
        unsetTradingRole();
      } else {
        setTradingRole((String)value);
      }
      break;

    case EXCHANGE_INST_ID:
      if (value == null) {
        unsetExchangeInstID();
      } else {
        setExchangeInstID((String)value);
      }
      break;

    case OFFSET_FLAG:
      if (value == null) {
        unsetOffsetFlag();
      } else {
        setOffsetFlag((String)value);
      }
      break;

    case FEDGE_FLAG:
      if (value == null) {
        unsetFedgeFlag();
      } else {
        setFedgeFlag((String)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    case VOLUME:
      if (value == null) {
        unsetVolume();
      } else {
        setVolume((Integer)value);
      }
      break;

    case TRADE_DATE:
      if (value == null) {
        unsetTradeDate();
      } else {
        setTradeDate((String)value);
      }
      break;

    case TRADE_TIME:
      if (value == null) {
        unsetTradeTime();
      } else {
        setTradeTime((String)value);
      }
      break;

    case TRADE_TYPE:
      if (value == null) {
        unsetTradeType();
      } else {
        setTradeType((String)value);
      }
      break;

    case PRICE_SOURCE:
      if (value == null) {
        unsetPriceSource();
      } else {
        setPriceSource((String)value);
      }
      break;

    case TRADER_ID:
      if (value == null) {
        unsetTraderID();
      } else {
        setTraderID((String)value);
      }
      break;

    case ORDER_LOCAL_ID:
      if (value == null) {
        unsetOrderLocalID();
      } else {
        setOrderLocalID((String)value);
      }
      break;

    case CLEARING_PART_ID:
      if (value == null) {
        unsetClearingPartID();
      } else {
        setClearingPartID((String)value);
      }
      break;

    case BUSINESS_UNIT:
      if (value == null) {
        unsetBusinessUnit();
      } else {
        setBusinessUnit((String)value);
      }
      break;

    case SEQUENCE_NO:
      if (value == null) {
        unsetSequenceNo();
      } else {
        setSequenceNo((Integer)value);
      }
      break;

    case TRADING_DAY:
      if (value == null) {
        unsetTradingDay();
      } else {
        setTradingDay((String)value);
      }
      break;

    case SETTLEMENT_ID:
      if (value == null) {
        unsetSettlementID();
      } else {
        setSettlementID((Integer)value);
      }
      break;

    case BROKER_ORDER_SEQ:
      if (value == null) {
        unsetBrokerOrderSeq();
      } else {
        setBrokerOrderSeq((Integer)value);
      }
      break;

    case TRADE_SOURCE:
      if (value == null) {
        unsetTradeSource();
      } else {
        setTradeSource((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BROKER_ID:
      return getBrokerID();

    case INVESTOR_ID:
      return getInvestorID();

    case INSTRUMENT_ID:
      return getInstrumentID();

    case ORDER_REF:
      return getOrderRef();

    case USER_ID:
      return getUserID();

    case EXCHANGE_ID:
      return getExchangeID();

    case TRADE_ID:
      return getTradeID();

    case DIRECTION:
      return getDirection();

    case ORDER_SYS_ID:
      return getOrderSysID();

    case PARTICIPANT_ID:
      return getParticipantID();

    case CLIENT_ID:
      return getClientID();

    case TRADING_ROLE:
      return getTradingRole();

    case EXCHANGE_INST_ID:
      return getExchangeInstID();

    case OFFSET_FLAG:
      return getOffsetFlag();

    case FEDGE_FLAG:
      return getFedgeFlag();

    case PRICE:
      return Double.valueOf(getPrice());

    case VOLUME:
      return Integer.valueOf(getVolume());

    case TRADE_DATE:
      return getTradeDate();

    case TRADE_TIME:
      return getTradeTime();

    case TRADE_TYPE:
      return getTradeType();

    case PRICE_SOURCE:
      return getPriceSource();

    case TRADER_ID:
      return getTraderID();

    case ORDER_LOCAL_ID:
      return getOrderLocalID();

    case CLEARING_PART_ID:
      return getClearingPartID();

    case BUSINESS_UNIT:
      return getBusinessUnit();

    case SEQUENCE_NO:
      return Integer.valueOf(getSequenceNo());

    case TRADING_DAY:
      return getTradingDay();

    case SETTLEMENT_ID:
      return Integer.valueOf(getSettlementID());

    case BROKER_ORDER_SEQ:
      return Integer.valueOf(getBrokerOrderSeq());

    case TRADE_SOURCE:
      return getTradeSource();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BROKER_ID:
      return isSetBrokerID();
    case INVESTOR_ID:
      return isSetInvestorID();
    case INSTRUMENT_ID:
      return isSetInstrumentID();
    case ORDER_REF:
      return isSetOrderRef();
    case USER_ID:
      return isSetUserID();
    case EXCHANGE_ID:
      return isSetExchangeID();
    case TRADE_ID:
      return isSetTradeID();
    case DIRECTION:
      return isSetDirection();
    case ORDER_SYS_ID:
      return isSetOrderSysID();
    case PARTICIPANT_ID:
      return isSetParticipantID();
    case CLIENT_ID:
      return isSetClientID();
    case TRADING_ROLE:
      return isSetTradingRole();
    case EXCHANGE_INST_ID:
      return isSetExchangeInstID();
    case OFFSET_FLAG:
      return isSetOffsetFlag();
    case FEDGE_FLAG:
      return isSetFedgeFlag();
    case PRICE:
      return isSetPrice();
    case VOLUME:
      return isSetVolume();
    case TRADE_DATE:
      return isSetTradeDate();
    case TRADE_TIME:
      return isSetTradeTime();
    case TRADE_TYPE:
      return isSetTradeType();
    case PRICE_SOURCE:
      return isSetPriceSource();
    case TRADER_ID:
      return isSetTraderID();
    case ORDER_LOCAL_ID:
      return isSetOrderLocalID();
    case CLEARING_PART_ID:
      return isSetClearingPartID();
    case BUSINESS_UNIT:
      return isSetBusinessUnit();
    case SEQUENCE_NO:
      return isSetSequenceNo();
    case TRADING_DAY:
      return isSetTradingDay();
    case SETTLEMENT_ID:
      return isSetSettlementID();
    case BROKER_ORDER_SEQ:
      return isSetBrokerOrderSeq();
    case TRADE_SOURCE:
      return isSetTradeSource();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcTradeField)
      return this.equals((CThostFtdcTradeField)that);
    return false;
  }

  public boolean equals(CThostFtdcTradeField that) {
    if (that == null)
      return false;

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_investorID = true && this.isSetInvestorID();
    boolean that_present_investorID = true && that.isSetInvestorID();
    if (this_present_investorID || that_present_investorID) {
      if (!(this_present_investorID && that_present_investorID))
        return false;
      if (!this.investorID.equals(that.investorID))
        return false;
    }

    boolean this_present_instrumentID = true && this.isSetInstrumentID();
    boolean that_present_instrumentID = true && that.isSetInstrumentID();
    if (this_present_instrumentID || that_present_instrumentID) {
      if (!(this_present_instrumentID && that_present_instrumentID))
        return false;
      if (!this.instrumentID.equals(that.instrumentID))
        return false;
    }

    boolean this_present_orderRef = true && this.isSetOrderRef();
    boolean that_present_orderRef = true && that.isSetOrderRef();
    if (this_present_orderRef || that_present_orderRef) {
      if (!(this_present_orderRef && that_present_orderRef))
        return false;
      if (!this.orderRef.equals(that.orderRef))
        return false;
    }

    boolean this_present_userID = true && this.isSetUserID();
    boolean that_present_userID = true && that.isSetUserID();
    if (this_present_userID || that_present_userID) {
      if (!(this_present_userID && that_present_userID))
        return false;
      if (!this.userID.equals(that.userID))
        return false;
    }

    boolean this_present_exchangeID = true && this.isSetExchangeID();
    boolean that_present_exchangeID = true && that.isSetExchangeID();
    if (this_present_exchangeID || that_present_exchangeID) {
      if (!(this_present_exchangeID && that_present_exchangeID))
        return false;
      if (!this.exchangeID.equals(that.exchangeID))
        return false;
    }

    boolean this_present_tradeID = true && this.isSetTradeID();
    boolean that_present_tradeID = true && that.isSetTradeID();
    if (this_present_tradeID || that_present_tradeID) {
      if (!(this_present_tradeID && that_present_tradeID))
        return false;
      if (!this.tradeID.equals(that.tradeID))
        return false;
    }

    boolean this_present_direction = true && this.isSetDirection();
    boolean that_present_direction = true && that.isSetDirection();
    if (this_present_direction || that_present_direction) {
      if (!(this_present_direction && that_present_direction))
        return false;
      if (!this.direction.equals(that.direction))
        return false;
    }

    boolean this_present_orderSysID = true && this.isSetOrderSysID();
    boolean that_present_orderSysID = true && that.isSetOrderSysID();
    if (this_present_orderSysID || that_present_orderSysID) {
      if (!(this_present_orderSysID && that_present_orderSysID))
        return false;
      if (!this.orderSysID.equals(that.orderSysID))
        return false;
    }

    boolean this_present_participantID = true && this.isSetParticipantID();
    boolean that_present_participantID = true && that.isSetParticipantID();
    if (this_present_participantID || that_present_participantID) {
      if (!(this_present_participantID && that_present_participantID))
        return false;
      if (!this.participantID.equals(that.participantID))
        return false;
    }

    boolean this_present_clientID = true && this.isSetClientID();
    boolean that_present_clientID = true && that.isSetClientID();
    if (this_present_clientID || that_present_clientID) {
      if (!(this_present_clientID && that_present_clientID))
        return false;
      if (!this.clientID.equals(that.clientID))
        return false;
    }

    boolean this_present_tradingRole = true && this.isSetTradingRole();
    boolean that_present_tradingRole = true && that.isSetTradingRole();
    if (this_present_tradingRole || that_present_tradingRole) {
      if (!(this_present_tradingRole && that_present_tradingRole))
        return false;
      if (!this.tradingRole.equals(that.tradingRole))
        return false;
    }

    boolean this_present_exchangeInstID = true && this.isSetExchangeInstID();
    boolean that_present_exchangeInstID = true && that.isSetExchangeInstID();
    if (this_present_exchangeInstID || that_present_exchangeInstID) {
      if (!(this_present_exchangeInstID && that_present_exchangeInstID))
        return false;
      if (!this.exchangeInstID.equals(that.exchangeInstID))
        return false;
    }

    boolean this_present_offsetFlag = true && this.isSetOffsetFlag();
    boolean that_present_offsetFlag = true && that.isSetOffsetFlag();
    if (this_present_offsetFlag || that_present_offsetFlag) {
      if (!(this_present_offsetFlag && that_present_offsetFlag))
        return false;
      if (!this.offsetFlag.equals(that.offsetFlag))
        return false;
    }

    boolean this_present_fedgeFlag = true && this.isSetFedgeFlag();
    boolean that_present_fedgeFlag = true && that.isSetFedgeFlag();
    if (this_present_fedgeFlag || that_present_fedgeFlag) {
      if (!(this_present_fedgeFlag && that_present_fedgeFlag))
        return false;
      if (!this.fedgeFlag.equals(that.fedgeFlag))
        return false;
    }

    boolean this_present_price = true;
    boolean that_present_price = true;
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_volume = true;
    boolean that_present_volume = true;
    if (this_present_volume || that_present_volume) {
      if (!(this_present_volume && that_present_volume))
        return false;
      if (this.volume != that.volume)
        return false;
    }

    boolean this_present_tradeDate = true && this.isSetTradeDate();
    boolean that_present_tradeDate = true && that.isSetTradeDate();
    if (this_present_tradeDate || that_present_tradeDate) {
      if (!(this_present_tradeDate && that_present_tradeDate))
        return false;
      if (!this.tradeDate.equals(that.tradeDate))
        return false;
    }

    boolean this_present_tradeTime = true && this.isSetTradeTime();
    boolean that_present_tradeTime = true && that.isSetTradeTime();
    if (this_present_tradeTime || that_present_tradeTime) {
      if (!(this_present_tradeTime && that_present_tradeTime))
        return false;
      if (!this.tradeTime.equals(that.tradeTime))
        return false;
    }

    boolean this_present_tradeType = true && this.isSetTradeType();
    boolean that_present_tradeType = true && that.isSetTradeType();
    if (this_present_tradeType || that_present_tradeType) {
      if (!(this_present_tradeType && that_present_tradeType))
        return false;
      if (!this.tradeType.equals(that.tradeType))
        return false;
    }

    boolean this_present_priceSource = true && this.isSetPriceSource();
    boolean that_present_priceSource = true && that.isSetPriceSource();
    if (this_present_priceSource || that_present_priceSource) {
      if (!(this_present_priceSource && that_present_priceSource))
        return false;
      if (!this.priceSource.equals(that.priceSource))
        return false;
    }

    boolean this_present_traderID = true && this.isSetTraderID();
    boolean that_present_traderID = true && that.isSetTraderID();
    if (this_present_traderID || that_present_traderID) {
      if (!(this_present_traderID && that_present_traderID))
        return false;
      if (!this.traderID.equals(that.traderID))
        return false;
    }

    boolean this_present_orderLocalID = true && this.isSetOrderLocalID();
    boolean that_present_orderLocalID = true && that.isSetOrderLocalID();
    if (this_present_orderLocalID || that_present_orderLocalID) {
      if (!(this_present_orderLocalID && that_present_orderLocalID))
        return false;
      if (!this.orderLocalID.equals(that.orderLocalID))
        return false;
    }

    boolean this_present_clearingPartID = true && this.isSetClearingPartID();
    boolean that_present_clearingPartID = true && that.isSetClearingPartID();
    if (this_present_clearingPartID || that_present_clearingPartID) {
      if (!(this_present_clearingPartID && that_present_clearingPartID))
        return false;
      if (!this.clearingPartID.equals(that.clearingPartID))
        return false;
    }

    boolean this_present_businessUnit = true && this.isSetBusinessUnit();
    boolean that_present_businessUnit = true && that.isSetBusinessUnit();
    if (this_present_businessUnit || that_present_businessUnit) {
      if (!(this_present_businessUnit && that_present_businessUnit))
        return false;
      if (!this.businessUnit.equals(that.businessUnit))
        return false;
    }

    boolean this_present_sequenceNo = true;
    boolean that_present_sequenceNo = true;
    if (this_present_sequenceNo || that_present_sequenceNo) {
      if (!(this_present_sequenceNo && that_present_sequenceNo))
        return false;
      if (this.sequenceNo != that.sequenceNo)
        return false;
    }

    boolean this_present_tradingDay = true && this.isSetTradingDay();
    boolean that_present_tradingDay = true && that.isSetTradingDay();
    if (this_present_tradingDay || that_present_tradingDay) {
      if (!(this_present_tradingDay && that_present_tradingDay))
        return false;
      if (!this.tradingDay.equals(that.tradingDay))
        return false;
    }

    boolean this_present_settlementID = true;
    boolean that_present_settlementID = true;
    if (this_present_settlementID || that_present_settlementID) {
      if (!(this_present_settlementID && that_present_settlementID))
        return false;
      if (this.settlementID != that.settlementID)
        return false;
    }

    boolean this_present_brokerOrderSeq = true;
    boolean that_present_brokerOrderSeq = true;
    if (this_present_brokerOrderSeq || that_present_brokerOrderSeq) {
      if (!(this_present_brokerOrderSeq && that_present_brokerOrderSeq))
        return false;
      if (this.brokerOrderSeq != that.brokerOrderSeq)
        return false;
    }

    boolean this_present_tradeSource = true && this.isSetTradeSource();
    boolean that_present_tradeSource = true && that.isSetTradeSource();
    if (this_present_tradeSource || that_present_tradeSource) {
      if (!(this_present_tradeSource && that_present_tradeSource))
        return false;
      if (!this.tradeSource.equals(that.tradeSource))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcTradeField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestorID()).compareTo(other.isSetInvestorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorID, other.investorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstrumentID()).compareTo(other.isSetInstrumentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstrumentID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instrumentID, other.instrumentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderRef()).compareTo(other.isSetOrderRef());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderRef()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderRef, other.orderRef);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserID()).compareTo(other.isSetUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, other.userID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeID()).compareTo(other.isSetExchangeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeID, other.exchangeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeID()).compareTo(other.isSetTradeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeID, other.tradeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDirection()).compareTo(other.isSetDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direction, other.direction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderSysID()).compareTo(other.isSetOrderSysID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderSysID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderSysID, other.orderSysID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParticipantID()).compareTo(other.isSetParticipantID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParticipantID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.participantID, other.participantID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientID()).compareTo(other.isSetClientID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientID, other.clientID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradingRole()).compareTo(other.isSetTradingRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradingRole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradingRole, other.tradingRole);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeInstID()).compareTo(other.isSetExchangeInstID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeInstID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeInstID, other.exchangeInstID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffsetFlag()).compareTo(other.isSetOffsetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffsetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offsetFlag, other.offsetFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFedgeFlag()).compareTo(other.isSetFedgeFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFedgeFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fedgeFlag, other.fedgeFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolume()).compareTo(other.isSetVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volume, other.volume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeDate()).compareTo(other.isSetTradeDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeDate, other.tradeDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeTime()).compareTo(other.isSetTradeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeTime, other.tradeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeType()).compareTo(other.isSetTradeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeType, other.tradeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriceSource()).compareTo(other.isSetPriceSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceSource, other.priceSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraderID()).compareTo(other.isSetTraderID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraderID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traderID, other.traderID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderLocalID()).compareTo(other.isSetOrderLocalID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderLocalID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderLocalID, other.orderLocalID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClearingPartID()).compareTo(other.isSetClearingPartID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClearingPartID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clearingPartID, other.clearingPartID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessUnit()).compareTo(other.isSetBusinessUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessUnit, other.businessUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSequenceNo()).compareTo(other.isSetSequenceNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequenceNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequenceNo, other.sequenceNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradingDay()).compareTo(other.isSetTradingDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradingDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradingDay, other.tradingDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettlementID()).compareTo(other.isSetSettlementID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettlementID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settlementID, other.settlementID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerOrderSeq()).compareTo(other.isSetBrokerOrderSeq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerOrderSeq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerOrderSeq, other.brokerOrderSeq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeSource()).compareTo(other.isSetTradeSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeSource, other.tradeSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcTradeField(");
    boolean first = true;

    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("investorID:");
    if (this.investorID == null) {
      sb.append("null");
    } else {
      sb.append(this.investorID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("instrumentID:");
    if (this.instrumentID == null) {
      sb.append("null");
    } else {
      sb.append(this.instrumentID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderRef:");
    if (this.orderRef == null) {
      sb.append("null");
    } else {
      sb.append(this.orderRef);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userID:");
    if (this.userID == null) {
      sb.append("null");
    } else {
      sb.append(this.userID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchangeID:");
    if (this.exchangeID == null) {
      sb.append("null");
    } else {
      sb.append(this.exchangeID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeID:");
    if (this.tradeID == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("direction:");
    if (this.direction == null) {
      sb.append("null");
    } else {
      sb.append(this.direction);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderSysID:");
    if (this.orderSysID == null) {
      sb.append("null");
    } else {
      sb.append(this.orderSysID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("participantID:");
    if (this.participantID == null) {
      sb.append("null");
    } else {
      sb.append(this.participantID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientID:");
    if (this.clientID == null) {
      sb.append("null");
    } else {
      sb.append(this.clientID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradingRole:");
    if (this.tradingRole == null) {
      sb.append("null");
    } else {
      sb.append(this.tradingRole);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchangeInstID:");
    if (this.exchangeInstID == null) {
      sb.append("null");
    } else {
      sb.append(this.exchangeInstID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("offsetFlag:");
    if (this.offsetFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.offsetFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fedgeFlag:");
    if (this.fedgeFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.fedgeFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    sb.append(this.price);
    first = false;
    if (!first) sb.append(", ");
    sb.append("volume:");
    sb.append(this.volume);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeDate:");
    if (this.tradeDate == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeTime:");
    if (this.tradeTime == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeType:");
    if (this.tradeType == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("priceSource:");
    if (this.priceSource == null) {
      sb.append("null");
    } else {
      sb.append(this.priceSource);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("traderID:");
    if (this.traderID == null) {
      sb.append("null");
    } else {
      sb.append(this.traderID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderLocalID:");
    if (this.orderLocalID == null) {
      sb.append("null");
    } else {
      sb.append(this.orderLocalID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clearingPartID:");
    if (this.clearingPartID == null) {
      sb.append("null");
    } else {
      sb.append(this.clearingPartID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessUnit:");
    if (this.businessUnit == null) {
      sb.append("null");
    } else {
      sb.append(this.businessUnit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sequenceNo:");
    sb.append(this.sequenceNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradingDay:");
    if (this.tradingDay == null) {
      sb.append("null");
    } else {
      sb.append(this.tradingDay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settlementID:");
    sb.append(this.settlementID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerOrderSeq:");
    sb.append(this.brokerOrderSeq);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeSource:");
    if (this.tradeSource == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeSource);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcTradeFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcTradeFieldStandardScheme getScheme() {
      return new CThostFtdcTradeFieldStandardScheme();
    }
  }

  private static class CThostFtdcTradeFieldStandardScheme extends StandardScheme<CThostFtdcTradeField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcTradeField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INVESTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorID = iprot.readString();
              struct.setInvestorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INSTRUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instrumentID = iprot.readString();
              struct.setInstrumentIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORDER_REF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderRef = iprot.readString();
              struct.setOrderRefIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userID = iprot.readString();
              struct.setUserIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXCHANGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeID = iprot.readString();
              struct.setExchangeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TRADE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeID = iprot.readString();
              struct.setTradeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.direction = iprot.readString();
              struct.setDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ORDER_SYS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderSysID = iprot.readString();
              struct.setOrderSysIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PARTICIPANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.participantID = iprot.readString();
              struct.setParticipantIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientID = iprot.readString();
              struct.setClientIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TRADING_ROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradingRole = iprot.readString();
              struct.setTradingRoleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // EXCHANGE_INST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeInstID = iprot.readString();
              struct.setExchangeInstIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // OFFSET_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.offsetFlag = iprot.readString();
              struct.setOffsetFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // FEDGE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fedgeFlag = iprot.readString();
              struct.setFedgeFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.price = iprot.readDouble();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.volume = iprot.readI32();
              struct.setVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TRADE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeDate = iprot.readString();
              struct.setTradeDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // TRADE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeTime = iprot.readString();
              struct.setTradeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // TRADE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeType = iprot.readString();
              struct.setTradeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // PRICE_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.priceSource = iprot.readString();
              struct.setPriceSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // TRADER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traderID = iprot.readString();
              struct.setTraderIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // ORDER_LOCAL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderLocalID = iprot.readString();
              struct.setOrderLocalIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // CLEARING_PART_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clearingPartID = iprot.readString();
              struct.setClearingPartIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // BUSINESS_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessUnit = iprot.readString();
              struct.setBusinessUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // SEQUENCE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sequenceNo = iprot.readI32();
              struct.setSequenceNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // TRADING_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradingDay = iprot.readString();
              struct.setTradingDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // SETTLEMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.settlementID = iprot.readI32();
              struct.setSettlementIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // BROKER_ORDER_SEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.brokerOrderSeq = iprot.readI32();
              struct.setBrokerOrderSeqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // TRADE_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeSource = iprot.readString();
              struct.setTradeSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcTradeField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.investorID != null) {
        oprot.writeFieldBegin(INVESTOR_ID_FIELD_DESC);
        oprot.writeString(struct.investorID);
        oprot.writeFieldEnd();
      }
      if (struct.instrumentID != null) {
        oprot.writeFieldBegin(INSTRUMENT_ID_FIELD_DESC);
        oprot.writeString(struct.instrumentID);
        oprot.writeFieldEnd();
      }
      if (struct.orderRef != null) {
        oprot.writeFieldBegin(ORDER_REF_FIELD_DESC);
        oprot.writeString(struct.orderRef);
        oprot.writeFieldEnd();
      }
      if (struct.userID != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userID);
        oprot.writeFieldEnd();
      }
      if (struct.exchangeID != null) {
        oprot.writeFieldBegin(EXCHANGE_ID_FIELD_DESC);
        oprot.writeString(struct.exchangeID);
        oprot.writeFieldEnd();
      }
      if (struct.tradeID != null) {
        oprot.writeFieldBegin(TRADE_ID_FIELD_DESC);
        oprot.writeString(struct.tradeID);
        oprot.writeFieldEnd();
      }
      if (struct.direction != null) {
        oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
        oprot.writeString(struct.direction);
        oprot.writeFieldEnd();
      }
      if (struct.orderSysID != null) {
        oprot.writeFieldBegin(ORDER_SYS_ID_FIELD_DESC);
        oprot.writeString(struct.orderSysID);
        oprot.writeFieldEnd();
      }
      if (struct.participantID != null) {
        oprot.writeFieldBegin(PARTICIPANT_ID_FIELD_DESC);
        oprot.writeString(struct.participantID);
        oprot.writeFieldEnd();
      }
      if (struct.clientID != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientID);
        oprot.writeFieldEnd();
      }
      if (struct.tradingRole != null) {
        oprot.writeFieldBegin(TRADING_ROLE_FIELD_DESC);
        oprot.writeString(struct.tradingRole);
        oprot.writeFieldEnd();
      }
      if (struct.exchangeInstID != null) {
        oprot.writeFieldBegin(EXCHANGE_INST_ID_FIELD_DESC);
        oprot.writeString(struct.exchangeInstID);
        oprot.writeFieldEnd();
      }
      if (struct.offsetFlag != null) {
        oprot.writeFieldBegin(OFFSET_FLAG_FIELD_DESC);
        oprot.writeString(struct.offsetFlag);
        oprot.writeFieldEnd();
      }
      if (struct.fedgeFlag != null) {
        oprot.writeFieldBegin(FEDGE_FLAG_FIELD_DESC);
        oprot.writeString(struct.fedgeFlag);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRICE_FIELD_DESC);
      oprot.writeDouble(struct.price);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VOLUME_FIELD_DESC);
      oprot.writeI32(struct.volume);
      oprot.writeFieldEnd();
      if (struct.tradeDate != null) {
        oprot.writeFieldBegin(TRADE_DATE_FIELD_DESC);
        oprot.writeString(struct.tradeDate);
        oprot.writeFieldEnd();
      }
      if (struct.tradeTime != null) {
        oprot.writeFieldBegin(TRADE_TIME_FIELD_DESC);
        oprot.writeString(struct.tradeTime);
        oprot.writeFieldEnd();
      }
      if (struct.tradeType != null) {
        oprot.writeFieldBegin(TRADE_TYPE_FIELD_DESC);
        oprot.writeString(struct.tradeType);
        oprot.writeFieldEnd();
      }
      if (struct.priceSource != null) {
        oprot.writeFieldBegin(PRICE_SOURCE_FIELD_DESC);
        oprot.writeString(struct.priceSource);
        oprot.writeFieldEnd();
      }
      if (struct.traderID != null) {
        oprot.writeFieldBegin(TRADER_ID_FIELD_DESC);
        oprot.writeString(struct.traderID);
        oprot.writeFieldEnd();
      }
      if (struct.orderLocalID != null) {
        oprot.writeFieldBegin(ORDER_LOCAL_ID_FIELD_DESC);
        oprot.writeString(struct.orderLocalID);
        oprot.writeFieldEnd();
      }
      if (struct.clearingPartID != null) {
        oprot.writeFieldBegin(CLEARING_PART_ID_FIELD_DESC);
        oprot.writeString(struct.clearingPartID);
        oprot.writeFieldEnd();
      }
      if (struct.businessUnit != null) {
        oprot.writeFieldBegin(BUSINESS_UNIT_FIELD_DESC);
        oprot.writeString(struct.businessUnit);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEQUENCE_NO_FIELD_DESC);
      oprot.writeI32(struct.sequenceNo);
      oprot.writeFieldEnd();
      if (struct.tradingDay != null) {
        oprot.writeFieldBegin(TRADING_DAY_FIELD_DESC);
        oprot.writeString(struct.tradingDay);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SETTLEMENT_ID_FIELD_DESC);
      oprot.writeI32(struct.settlementID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BROKER_ORDER_SEQ_FIELD_DESC);
      oprot.writeI32(struct.brokerOrderSeq);
      oprot.writeFieldEnd();
      if (struct.tradeSource != null) {
        oprot.writeFieldBegin(TRADE_SOURCE_FIELD_DESC);
        oprot.writeString(struct.tradeSource);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcTradeFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcTradeFieldTupleScheme getScheme() {
      return new CThostFtdcTradeFieldTupleScheme();
    }
  }

  private static class CThostFtdcTradeFieldTupleScheme extends TupleScheme<CThostFtdcTradeField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcTradeField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBrokerID()) {
        optionals.set(0);
      }
      if (struct.isSetInvestorID()) {
        optionals.set(1);
      }
      if (struct.isSetInstrumentID()) {
        optionals.set(2);
      }
      if (struct.isSetOrderRef()) {
        optionals.set(3);
      }
      if (struct.isSetUserID()) {
        optionals.set(4);
      }
      if (struct.isSetExchangeID()) {
        optionals.set(5);
      }
      if (struct.isSetTradeID()) {
        optionals.set(6);
      }
      if (struct.isSetDirection()) {
        optionals.set(7);
      }
      if (struct.isSetOrderSysID()) {
        optionals.set(8);
      }
      if (struct.isSetParticipantID()) {
        optionals.set(9);
      }
      if (struct.isSetClientID()) {
        optionals.set(10);
      }
      if (struct.isSetTradingRole()) {
        optionals.set(11);
      }
      if (struct.isSetExchangeInstID()) {
        optionals.set(12);
      }
      if (struct.isSetOffsetFlag()) {
        optionals.set(13);
      }
      if (struct.isSetFedgeFlag()) {
        optionals.set(14);
      }
      if (struct.isSetPrice()) {
        optionals.set(15);
      }
      if (struct.isSetVolume()) {
        optionals.set(16);
      }
      if (struct.isSetTradeDate()) {
        optionals.set(17);
      }
      if (struct.isSetTradeTime()) {
        optionals.set(18);
      }
      if (struct.isSetTradeType()) {
        optionals.set(19);
      }
      if (struct.isSetPriceSource()) {
        optionals.set(20);
      }
      if (struct.isSetTraderID()) {
        optionals.set(21);
      }
      if (struct.isSetOrderLocalID()) {
        optionals.set(22);
      }
      if (struct.isSetClearingPartID()) {
        optionals.set(23);
      }
      if (struct.isSetBusinessUnit()) {
        optionals.set(24);
      }
      if (struct.isSetSequenceNo()) {
        optionals.set(25);
      }
      if (struct.isSetTradingDay()) {
        optionals.set(26);
      }
      if (struct.isSetSettlementID()) {
        optionals.set(27);
      }
      if (struct.isSetBrokerOrderSeq()) {
        optionals.set(28);
      }
      if (struct.isSetTradeSource()) {
        optionals.set(29);
      }
      oprot.writeBitSet(optionals, 30);
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetInvestorID()) {
        oprot.writeString(struct.investorID);
      }
      if (struct.isSetInstrumentID()) {
        oprot.writeString(struct.instrumentID);
      }
      if (struct.isSetOrderRef()) {
        oprot.writeString(struct.orderRef);
      }
      if (struct.isSetUserID()) {
        oprot.writeString(struct.userID);
      }
      if (struct.isSetExchangeID()) {
        oprot.writeString(struct.exchangeID);
      }
      if (struct.isSetTradeID()) {
        oprot.writeString(struct.tradeID);
      }
      if (struct.isSetDirection()) {
        oprot.writeString(struct.direction);
      }
      if (struct.isSetOrderSysID()) {
        oprot.writeString(struct.orderSysID);
      }
      if (struct.isSetParticipantID()) {
        oprot.writeString(struct.participantID);
      }
      if (struct.isSetClientID()) {
        oprot.writeString(struct.clientID);
      }
      if (struct.isSetTradingRole()) {
        oprot.writeString(struct.tradingRole);
      }
      if (struct.isSetExchangeInstID()) {
        oprot.writeString(struct.exchangeInstID);
      }
      if (struct.isSetOffsetFlag()) {
        oprot.writeString(struct.offsetFlag);
      }
      if (struct.isSetFedgeFlag()) {
        oprot.writeString(struct.fedgeFlag);
      }
      if (struct.isSetPrice()) {
        oprot.writeDouble(struct.price);
      }
      if (struct.isSetVolume()) {
        oprot.writeI32(struct.volume);
      }
      if (struct.isSetTradeDate()) {
        oprot.writeString(struct.tradeDate);
      }
      if (struct.isSetTradeTime()) {
        oprot.writeString(struct.tradeTime);
      }
      if (struct.isSetTradeType()) {
        oprot.writeString(struct.tradeType);
      }
      if (struct.isSetPriceSource()) {
        oprot.writeString(struct.priceSource);
      }
      if (struct.isSetTraderID()) {
        oprot.writeString(struct.traderID);
      }
      if (struct.isSetOrderLocalID()) {
        oprot.writeString(struct.orderLocalID);
      }
      if (struct.isSetClearingPartID()) {
        oprot.writeString(struct.clearingPartID);
      }
      if (struct.isSetBusinessUnit()) {
        oprot.writeString(struct.businessUnit);
      }
      if (struct.isSetSequenceNo()) {
        oprot.writeI32(struct.sequenceNo);
      }
      if (struct.isSetTradingDay()) {
        oprot.writeString(struct.tradingDay);
      }
      if (struct.isSetSettlementID()) {
        oprot.writeI32(struct.settlementID);
      }
      if (struct.isSetBrokerOrderSeq()) {
        oprot.writeI32(struct.brokerOrderSeq);
      }
      if (struct.isSetTradeSource()) {
        oprot.writeString(struct.tradeSource);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcTradeField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(30);
      if (incoming.get(0)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.investorID = iprot.readString();
        struct.setInvestorIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.instrumentID = iprot.readString();
        struct.setInstrumentIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.orderRef = iprot.readString();
        struct.setOrderRefIsSet(true);
      }
      if (incoming.get(4)) {
        struct.userID = iprot.readString();
        struct.setUserIDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.exchangeID = iprot.readString();
        struct.setExchangeIDIsSet(true);
      }
      if (incoming.get(6)) {
        struct.tradeID = iprot.readString();
        struct.setTradeIDIsSet(true);
      }
      if (incoming.get(7)) {
        struct.direction = iprot.readString();
        struct.setDirectionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.orderSysID = iprot.readString();
        struct.setOrderSysIDIsSet(true);
      }
      if (incoming.get(9)) {
        struct.participantID = iprot.readString();
        struct.setParticipantIDIsSet(true);
      }
      if (incoming.get(10)) {
        struct.clientID = iprot.readString();
        struct.setClientIDIsSet(true);
      }
      if (incoming.get(11)) {
        struct.tradingRole = iprot.readString();
        struct.setTradingRoleIsSet(true);
      }
      if (incoming.get(12)) {
        struct.exchangeInstID = iprot.readString();
        struct.setExchangeInstIDIsSet(true);
      }
      if (incoming.get(13)) {
        struct.offsetFlag = iprot.readString();
        struct.setOffsetFlagIsSet(true);
      }
      if (incoming.get(14)) {
        struct.fedgeFlag = iprot.readString();
        struct.setFedgeFlagIsSet(true);
      }
      if (incoming.get(15)) {
        struct.price = iprot.readDouble();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(16)) {
        struct.volume = iprot.readI32();
        struct.setVolumeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.tradeDate = iprot.readString();
        struct.setTradeDateIsSet(true);
      }
      if (incoming.get(18)) {
        struct.tradeTime = iprot.readString();
        struct.setTradeTimeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.tradeType = iprot.readString();
        struct.setTradeTypeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.priceSource = iprot.readString();
        struct.setPriceSourceIsSet(true);
      }
      if (incoming.get(21)) {
        struct.traderID = iprot.readString();
        struct.setTraderIDIsSet(true);
      }
      if (incoming.get(22)) {
        struct.orderLocalID = iprot.readString();
        struct.setOrderLocalIDIsSet(true);
      }
      if (incoming.get(23)) {
        struct.clearingPartID = iprot.readString();
        struct.setClearingPartIDIsSet(true);
      }
      if (incoming.get(24)) {
        struct.businessUnit = iprot.readString();
        struct.setBusinessUnitIsSet(true);
      }
      if (incoming.get(25)) {
        struct.sequenceNo = iprot.readI32();
        struct.setSequenceNoIsSet(true);
      }
      if (incoming.get(26)) {
        struct.tradingDay = iprot.readString();
        struct.setTradingDayIsSet(true);
      }
      if (incoming.get(27)) {
        struct.settlementID = iprot.readI32();
        struct.setSettlementIDIsSet(true);
      }
      if (incoming.get(28)) {
        struct.brokerOrderSeq = iprot.readI32();
        struct.setBrokerOrderSeqIsSet(true);
      }
      if (incoming.get(29)) {
        struct.tradeSource = iprot.readString();
        struct.setTradeSourceIsSet(true);
      }
    }
  }

}

