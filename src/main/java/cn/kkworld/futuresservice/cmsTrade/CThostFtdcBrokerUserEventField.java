/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcBrokerUserEventField implements org.apache.thrift.TBase<CThostFtdcBrokerUserEventField, CThostFtdcBrokerUserEventField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcBrokerUserEventField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcBrokerUserEventField");

  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USER_EVENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userEventType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EVENT_SEQUENCE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("eventSequenceNo", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField EVENT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("eventDate", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EVENT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("eventTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField USER_EVENT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("userEventInfo", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField INVESTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("investorID", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField INSTRUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instrumentID", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcBrokerUserEventFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcBrokerUserEventFieldTupleSchemeFactory());
  }

  public String brokerID; // required
  public String userID; // required
  public String userEventType; // required
  public int eventSequenceNo; // required
  public String eventDate; // required
  public String eventTime; // required
  public String userEventInfo; // required
  public String investorID; // required
  public String instrumentID; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BROKER_ID((short)1, "brokerID"),
    USER_ID((short)2, "userID"),
    USER_EVENT_TYPE((short)3, "userEventType"),
    EVENT_SEQUENCE_NO((short)4, "eventSequenceNo"),
    EVENT_DATE((short)5, "eventDate"),
    EVENT_TIME((short)6, "eventTime"),
    USER_EVENT_INFO((short)7, "userEventInfo"),
    INVESTOR_ID((short)8, "investorID"),
    INSTRUMENT_ID((short)9, "instrumentID");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BROKER_ID
          return BROKER_ID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // USER_EVENT_TYPE
          return USER_EVENT_TYPE;
        case 4: // EVENT_SEQUENCE_NO
          return EVENT_SEQUENCE_NO;
        case 5: // EVENT_DATE
          return EVENT_DATE;
        case 6: // EVENT_TIME
          return EVENT_TIME;
        case 7: // USER_EVENT_INFO
          return USER_EVENT_INFO;
        case 8: // INVESTOR_ID
          return INVESTOR_ID;
        case 9: // INSTRUMENT_ID
          return INSTRUMENT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EVENTSEQUENCENO_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcUserIDType")));
    tmpMap.put(_Fields.USER_EVENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userEventType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcUserEventTypeType")));
    tmpMap.put(_Fields.EVENT_SEQUENCE_NO, new org.apache.thrift.meta_data.FieldMetaData("eventSequenceNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcSequenceNoType")));
    tmpMap.put(_Fields.EVENT_DATE, new org.apache.thrift.meta_data.FieldMetaData("eventDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    tmpMap.put(_Fields.EVENT_TIME, new org.apache.thrift.meta_data.FieldMetaData("eventTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeType")));
    tmpMap.put(_Fields.USER_EVENT_INFO, new org.apache.thrift.meta_data.FieldMetaData("userEventInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcUserEventInfoType")));
    tmpMap.put(_Fields.INVESTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("investorID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInvestorIDType")));
    tmpMap.put(_Fields.INSTRUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("instrumentID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInstrumentIDType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcBrokerUserEventField.class, metaDataMap);
  }

  public CThostFtdcBrokerUserEventField() {
  }

  public CThostFtdcBrokerUserEventField(
    String brokerID,
    String userID,
    String userEventType,
    int eventSequenceNo,
    String eventDate,
    String eventTime,
    String userEventInfo,
    String investorID,
    String instrumentID)
  {
    this();
    this.brokerID = brokerID;
    this.userID = userID;
    this.userEventType = userEventType;
    this.eventSequenceNo = eventSequenceNo;
    setEventSequenceNoIsSet(true);
    this.eventDate = eventDate;
    this.eventTime = eventTime;
    this.userEventInfo = userEventInfo;
    this.investorID = investorID;
    this.instrumentID = instrumentID;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcBrokerUserEventField(CThostFtdcBrokerUserEventField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetUserID()) {
      this.userID = other.userID;
    }
    if (other.isSetUserEventType()) {
      this.userEventType = other.userEventType;
    }
    this.eventSequenceNo = other.eventSequenceNo;
    if (other.isSetEventDate()) {
      this.eventDate = other.eventDate;
    }
    if (other.isSetEventTime()) {
      this.eventTime = other.eventTime;
    }
    if (other.isSetUserEventInfo()) {
      this.userEventInfo = other.userEventInfo;
    }
    if (other.isSetInvestorID()) {
      this.investorID = other.investorID;
    }
    if (other.isSetInstrumentID()) {
      this.instrumentID = other.instrumentID;
    }
  }

  public CThostFtdcBrokerUserEventField deepCopy() {
    return new CThostFtdcBrokerUserEventField(this);
  }

  @Override
  public void clear() {
    this.brokerID = null;
    this.userID = null;
    this.userEventType = null;
    setEventSequenceNoIsSet(false);
    this.eventSequenceNo = 0;
    this.eventDate = null;
    this.eventTime = null;
    this.userEventInfo = null;
    this.investorID = null;
    this.instrumentID = null;
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcBrokerUserEventField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getUserID() {
    return this.userID;
  }

  public CThostFtdcBrokerUserEventField setUserID(String userID) {
    this.userID = userID;
    return this;
  }

  public void unsetUserID() {
    this.userID = null;
  }

  /** Returns true if field userID is set (has been assigned a value) and false otherwise */
  public boolean isSetUserID() {
    return this.userID != null;
  }

  public void setUserIDIsSet(boolean value) {
    if (!value) {
      this.userID = null;
    }
  }

  public String getUserEventType() {
    return this.userEventType;
  }

  public CThostFtdcBrokerUserEventField setUserEventType(String userEventType) {
    this.userEventType = userEventType;
    return this;
  }

  public void unsetUserEventType() {
    this.userEventType = null;
  }

  /** Returns true if field userEventType is set (has been assigned a value) and false otherwise */
  public boolean isSetUserEventType() {
    return this.userEventType != null;
  }

  public void setUserEventTypeIsSet(boolean value) {
    if (!value) {
      this.userEventType = null;
    }
  }

  public int getEventSequenceNo() {
    return this.eventSequenceNo;
  }

  public CThostFtdcBrokerUserEventField setEventSequenceNo(int eventSequenceNo) {
    this.eventSequenceNo = eventSequenceNo;
    setEventSequenceNoIsSet(true);
    return this;
  }

  public void unsetEventSequenceNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTSEQUENCENO_ISSET_ID);
  }

  /** Returns true if field eventSequenceNo is set (has been assigned a value) and false otherwise */
  public boolean isSetEventSequenceNo() {
    return EncodingUtils.testBit(__isset_bitfield, __EVENTSEQUENCENO_ISSET_ID);
  }

  public void setEventSequenceNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTSEQUENCENO_ISSET_ID, value);
  }

  public String getEventDate() {
    return this.eventDate;
  }

  public CThostFtdcBrokerUserEventField setEventDate(String eventDate) {
    this.eventDate = eventDate;
    return this;
  }

  public void unsetEventDate() {
    this.eventDate = null;
  }

  /** Returns true if field eventDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEventDate() {
    return this.eventDate != null;
  }

  public void setEventDateIsSet(boolean value) {
    if (!value) {
      this.eventDate = null;
    }
  }

  public String getEventTime() {
    return this.eventTime;
  }

  public CThostFtdcBrokerUserEventField setEventTime(String eventTime) {
    this.eventTime = eventTime;
    return this;
  }

  public void unsetEventTime() {
    this.eventTime = null;
  }

  /** Returns true if field eventTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEventTime() {
    return this.eventTime != null;
  }

  public void setEventTimeIsSet(boolean value) {
    if (!value) {
      this.eventTime = null;
    }
  }

  public String getUserEventInfo() {
    return this.userEventInfo;
  }

  public CThostFtdcBrokerUserEventField setUserEventInfo(String userEventInfo) {
    this.userEventInfo = userEventInfo;
    return this;
  }

  public void unsetUserEventInfo() {
    this.userEventInfo = null;
  }

  /** Returns true if field userEventInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetUserEventInfo() {
    return this.userEventInfo != null;
  }

  public void setUserEventInfoIsSet(boolean value) {
    if (!value) {
      this.userEventInfo = null;
    }
  }

  public String getInvestorID() {
    return this.investorID;
  }

  public CThostFtdcBrokerUserEventField setInvestorID(String investorID) {
    this.investorID = investorID;
    return this;
  }

  public void unsetInvestorID() {
    this.investorID = null;
  }

  /** Returns true if field investorID is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorID() {
    return this.investorID != null;
  }

  public void setInvestorIDIsSet(boolean value) {
    if (!value) {
      this.investorID = null;
    }
  }

  public String getInstrumentID() {
    return this.instrumentID;
  }

  public CThostFtdcBrokerUserEventField setInstrumentID(String instrumentID) {
    this.instrumentID = instrumentID;
    return this;
  }

  public void unsetInstrumentID() {
    this.instrumentID = null;
  }

  /** Returns true if field instrumentID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstrumentID() {
    return this.instrumentID != null;
  }

  public void setInstrumentIDIsSet(boolean value) {
    if (!value) {
      this.instrumentID = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserID();
      } else {
        setUserID((String)value);
      }
      break;

    case USER_EVENT_TYPE:
      if (value == null) {
        unsetUserEventType();
      } else {
        setUserEventType((String)value);
      }
      break;

    case EVENT_SEQUENCE_NO:
      if (value == null) {
        unsetEventSequenceNo();
      } else {
        setEventSequenceNo((Integer)value);
      }
      break;

    case EVENT_DATE:
      if (value == null) {
        unsetEventDate();
      } else {
        setEventDate((String)value);
      }
      break;

    case EVENT_TIME:
      if (value == null) {
        unsetEventTime();
      } else {
        setEventTime((String)value);
      }
      break;

    case USER_EVENT_INFO:
      if (value == null) {
        unsetUserEventInfo();
      } else {
        setUserEventInfo((String)value);
      }
      break;

    case INVESTOR_ID:
      if (value == null) {
        unsetInvestorID();
      } else {
        setInvestorID((String)value);
      }
      break;

    case INSTRUMENT_ID:
      if (value == null) {
        unsetInstrumentID();
      } else {
        setInstrumentID((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BROKER_ID:
      return getBrokerID();

    case USER_ID:
      return getUserID();

    case USER_EVENT_TYPE:
      return getUserEventType();

    case EVENT_SEQUENCE_NO:
      return Integer.valueOf(getEventSequenceNo());

    case EVENT_DATE:
      return getEventDate();

    case EVENT_TIME:
      return getEventTime();

    case USER_EVENT_INFO:
      return getUserEventInfo();

    case INVESTOR_ID:
      return getInvestorID();

    case INSTRUMENT_ID:
      return getInstrumentID();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BROKER_ID:
      return isSetBrokerID();
    case USER_ID:
      return isSetUserID();
    case USER_EVENT_TYPE:
      return isSetUserEventType();
    case EVENT_SEQUENCE_NO:
      return isSetEventSequenceNo();
    case EVENT_DATE:
      return isSetEventDate();
    case EVENT_TIME:
      return isSetEventTime();
    case USER_EVENT_INFO:
      return isSetUserEventInfo();
    case INVESTOR_ID:
      return isSetInvestorID();
    case INSTRUMENT_ID:
      return isSetInstrumentID();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcBrokerUserEventField)
      return this.equals((CThostFtdcBrokerUserEventField)that);
    return false;
  }

  public boolean equals(CThostFtdcBrokerUserEventField that) {
    if (that == null)
      return false;

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_userID = true && this.isSetUserID();
    boolean that_present_userID = true && that.isSetUserID();
    if (this_present_userID || that_present_userID) {
      if (!(this_present_userID && that_present_userID))
        return false;
      if (!this.userID.equals(that.userID))
        return false;
    }

    boolean this_present_userEventType = true && this.isSetUserEventType();
    boolean that_present_userEventType = true && that.isSetUserEventType();
    if (this_present_userEventType || that_present_userEventType) {
      if (!(this_present_userEventType && that_present_userEventType))
        return false;
      if (!this.userEventType.equals(that.userEventType))
        return false;
    }

    boolean this_present_eventSequenceNo = true;
    boolean that_present_eventSequenceNo = true;
    if (this_present_eventSequenceNo || that_present_eventSequenceNo) {
      if (!(this_present_eventSequenceNo && that_present_eventSequenceNo))
        return false;
      if (this.eventSequenceNo != that.eventSequenceNo)
        return false;
    }

    boolean this_present_eventDate = true && this.isSetEventDate();
    boolean that_present_eventDate = true && that.isSetEventDate();
    if (this_present_eventDate || that_present_eventDate) {
      if (!(this_present_eventDate && that_present_eventDate))
        return false;
      if (!this.eventDate.equals(that.eventDate))
        return false;
    }

    boolean this_present_eventTime = true && this.isSetEventTime();
    boolean that_present_eventTime = true && that.isSetEventTime();
    if (this_present_eventTime || that_present_eventTime) {
      if (!(this_present_eventTime && that_present_eventTime))
        return false;
      if (!this.eventTime.equals(that.eventTime))
        return false;
    }

    boolean this_present_userEventInfo = true && this.isSetUserEventInfo();
    boolean that_present_userEventInfo = true && that.isSetUserEventInfo();
    if (this_present_userEventInfo || that_present_userEventInfo) {
      if (!(this_present_userEventInfo && that_present_userEventInfo))
        return false;
      if (!this.userEventInfo.equals(that.userEventInfo))
        return false;
    }

    boolean this_present_investorID = true && this.isSetInvestorID();
    boolean that_present_investorID = true && that.isSetInvestorID();
    if (this_present_investorID || that_present_investorID) {
      if (!(this_present_investorID && that_present_investorID))
        return false;
      if (!this.investorID.equals(that.investorID))
        return false;
    }

    boolean this_present_instrumentID = true && this.isSetInstrumentID();
    boolean that_present_instrumentID = true && that.isSetInstrumentID();
    if (this_present_instrumentID || that_present_instrumentID) {
      if (!(this_present_instrumentID && that_present_instrumentID))
        return false;
      if (!this.instrumentID.equals(that.instrumentID))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcBrokerUserEventField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserID()).compareTo(other.isSetUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, other.userID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserEventType()).compareTo(other.isSetUserEventType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserEventType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userEventType, other.userEventType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventSequenceNo()).compareTo(other.isSetEventSequenceNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventSequenceNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventSequenceNo, other.eventSequenceNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventDate()).compareTo(other.isSetEventDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventDate, other.eventDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventTime()).compareTo(other.isSetEventTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventTime, other.eventTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserEventInfo()).compareTo(other.isSetUserEventInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserEventInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userEventInfo, other.userEventInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestorID()).compareTo(other.isSetInvestorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorID, other.investorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstrumentID()).compareTo(other.isSetInstrumentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstrumentID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instrumentID, other.instrumentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcBrokerUserEventField(");
    boolean first = true;

    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userID:");
    if (this.userID == null) {
      sb.append("null");
    } else {
      sb.append(this.userID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userEventType:");
    if (this.userEventType == null) {
      sb.append("null");
    } else {
      sb.append(this.userEventType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eventSequenceNo:");
    sb.append(this.eventSequenceNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("eventDate:");
    if (this.eventDate == null) {
      sb.append("null");
    } else {
      sb.append(this.eventDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eventTime:");
    if (this.eventTime == null) {
      sb.append("null");
    } else {
      sb.append(this.eventTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userEventInfo:");
    if (this.userEventInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.userEventInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("investorID:");
    if (this.investorID == null) {
      sb.append("null");
    } else {
      sb.append(this.investorID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("instrumentID:");
    if (this.instrumentID == null) {
      sb.append("null");
    } else {
      sb.append(this.instrumentID);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcBrokerUserEventFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcBrokerUserEventFieldStandardScheme getScheme() {
      return new CThostFtdcBrokerUserEventFieldStandardScheme();
    }
  }

  private static class CThostFtdcBrokerUserEventFieldStandardScheme extends StandardScheme<CThostFtdcBrokerUserEventField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcBrokerUserEventField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userID = iprot.readString();
              struct.setUserIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_EVENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userEventType = iprot.readString();
              struct.setUserEventTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EVENT_SEQUENCE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.eventSequenceNo = iprot.readI32();
              struct.setEventSequenceNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EVENT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eventDate = iprot.readString();
              struct.setEventDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EVENT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eventTime = iprot.readString();
              struct.setEventTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USER_EVENT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userEventInfo = iprot.readString();
              struct.setUserEventInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // INVESTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorID = iprot.readString();
              struct.setInvestorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // INSTRUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instrumentID = iprot.readString();
              struct.setInstrumentIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcBrokerUserEventField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.userID != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userID);
        oprot.writeFieldEnd();
      }
      if (struct.userEventType != null) {
        oprot.writeFieldBegin(USER_EVENT_TYPE_FIELD_DESC);
        oprot.writeString(struct.userEventType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EVENT_SEQUENCE_NO_FIELD_DESC);
      oprot.writeI32(struct.eventSequenceNo);
      oprot.writeFieldEnd();
      if (struct.eventDate != null) {
        oprot.writeFieldBegin(EVENT_DATE_FIELD_DESC);
        oprot.writeString(struct.eventDate);
        oprot.writeFieldEnd();
      }
      if (struct.eventTime != null) {
        oprot.writeFieldBegin(EVENT_TIME_FIELD_DESC);
        oprot.writeString(struct.eventTime);
        oprot.writeFieldEnd();
      }
      if (struct.userEventInfo != null) {
        oprot.writeFieldBegin(USER_EVENT_INFO_FIELD_DESC);
        oprot.writeString(struct.userEventInfo);
        oprot.writeFieldEnd();
      }
      if (struct.investorID != null) {
        oprot.writeFieldBegin(INVESTOR_ID_FIELD_DESC);
        oprot.writeString(struct.investorID);
        oprot.writeFieldEnd();
      }
      if (struct.instrumentID != null) {
        oprot.writeFieldBegin(INSTRUMENT_ID_FIELD_DESC);
        oprot.writeString(struct.instrumentID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcBrokerUserEventFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcBrokerUserEventFieldTupleScheme getScheme() {
      return new CThostFtdcBrokerUserEventFieldTupleScheme();
    }
  }

  private static class CThostFtdcBrokerUserEventFieldTupleScheme extends TupleScheme<CThostFtdcBrokerUserEventField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcBrokerUserEventField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBrokerID()) {
        optionals.set(0);
      }
      if (struct.isSetUserID()) {
        optionals.set(1);
      }
      if (struct.isSetUserEventType()) {
        optionals.set(2);
      }
      if (struct.isSetEventSequenceNo()) {
        optionals.set(3);
      }
      if (struct.isSetEventDate()) {
        optionals.set(4);
      }
      if (struct.isSetEventTime()) {
        optionals.set(5);
      }
      if (struct.isSetUserEventInfo()) {
        optionals.set(6);
      }
      if (struct.isSetInvestorID()) {
        optionals.set(7);
      }
      if (struct.isSetInstrumentID()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetUserID()) {
        oprot.writeString(struct.userID);
      }
      if (struct.isSetUserEventType()) {
        oprot.writeString(struct.userEventType);
      }
      if (struct.isSetEventSequenceNo()) {
        oprot.writeI32(struct.eventSequenceNo);
      }
      if (struct.isSetEventDate()) {
        oprot.writeString(struct.eventDate);
      }
      if (struct.isSetEventTime()) {
        oprot.writeString(struct.eventTime);
      }
      if (struct.isSetUserEventInfo()) {
        oprot.writeString(struct.userEventInfo);
      }
      if (struct.isSetInvestorID()) {
        oprot.writeString(struct.investorID);
      }
      if (struct.isSetInstrumentID()) {
        oprot.writeString(struct.instrumentID);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcBrokerUserEventField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userID = iprot.readString();
        struct.setUserIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userEventType = iprot.readString();
        struct.setUserEventTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.eventSequenceNo = iprot.readI32();
        struct.setEventSequenceNoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.eventDate = iprot.readString();
        struct.setEventDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.eventTime = iprot.readString();
        struct.setEventTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.userEventInfo = iprot.readString();
        struct.setUserEventInfoIsSet(true);
      }
      if (incoming.get(7)) {
        struct.investorID = iprot.readString();
        struct.setInvestorIDIsSet(true);
      }
      if (incoming.get(8)) {
        struct.instrumentID = iprot.readString();
        struct.setInstrumentIDIsSet(true);
      }
    }
  }

}

