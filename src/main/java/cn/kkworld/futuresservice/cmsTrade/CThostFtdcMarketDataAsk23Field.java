/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcMarketDataAsk23Field implements org.apache.thrift.TBase<CThostFtdcMarketDataAsk23Field, CThostFtdcMarketDataAsk23Field._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcMarketDataAsk23Field> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcMarketDataAsk23Field");

  private static final org.apache.thrift.protocol.TField ASK_PRICE2_FIELD_DESC = new org.apache.thrift.protocol.TField("askPrice2", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField ASK_VOLUME2_FIELD_DESC = new org.apache.thrift.protocol.TField("askVolume2", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ASK_PRICE3_FIELD_DESC = new org.apache.thrift.protocol.TField("askPrice3", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField ASK_VOLUME3_FIELD_DESC = new org.apache.thrift.protocol.TField("askVolume3", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcMarketDataAsk23FieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcMarketDataAsk23FieldTupleSchemeFactory());
  }

  public double askPrice2; // required
  public int askVolume2; // required
  public double askPrice3; // required
  public int askVolume3; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ASK_PRICE2((short)1, "askPrice2"),
    ASK_VOLUME2((short)2, "askVolume2"),
    ASK_PRICE3((short)3, "askPrice3"),
    ASK_VOLUME3((short)4, "askVolume3");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ASK_PRICE2
          return ASK_PRICE2;
        case 2: // ASK_VOLUME2
          return ASK_VOLUME2;
        case 3: // ASK_PRICE3
          return ASK_PRICE3;
        case 4: // ASK_VOLUME3
          return ASK_VOLUME3;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ASKPRICE2_ISSET_ID = 0;
  private static final int __ASKVOLUME2_ISSET_ID = 1;
  private static final int __ASKPRICE3_ISSET_ID = 2;
  private static final int __ASKVOLUME3_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ASK_PRICE2, new org.apache.thrift.meta_data.FieldMetaData("askPrice2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.ASK_VOLUME2, new org.apache.thrift.meta_data.FieldMetaData("askVolume2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcVolumeType")));
    tmpMap.put(_Fields.ASK_PRICE3, new org.apache.thrift.meta_data.FieldMetaData("askPrice3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.ASK_VOLUME3, new org.apache.thrift.meta_data.FieldMetaData("askVolume3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcVolumeType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcMarketDataAsk23Field.class, metaDataMap);
  }

  public CThostFtdcMarketDataAsk23Field() {
  }

  public CThostFtdcMarketDataAsk23Field(
    double askPrice2,
    int askVolume2,
    double askPrice3,
    int askVolume3)
  {
    this();
    this.askPrice2 = askPrice2;
    setAskPrice2IsSet(true);
    this.askVolume2 = askVolume2;
    setAskVolume2IsSet(true);
    this.askPrice3 = askPrice3;
    setAskPrice3IsSet(true);
    this.askVolume3 = askVolume3;
    setAskVolume3IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcMarketDataAsk23Field(CThostFtdcMarketDataAsk23Field other) {
    __isset_bitfield = other.__isset_bitfield;
    this.askPrice2 = other.askPrice2;
    this.askVolume2 = other.askVolume2;
    this.askPrice3 = other.askPrice3;
    this.askVolume3 = other.askVolume3;
  }

  public CThostFtdcMarketDataAsk23Field deepCopy() {
    return new CThostFtdcMarketDataAsk23Field(this);
  }

  @Override
  public void clear() {
    setAskPrice2IsSet(false);
    this.askPrice2 = 0.0;
    setAskVolume2IsSet(false);
    this.askVolume2 = 0;
    setAskPrice3IsSet(false);
    this.askPrice3 = 0.0;
    setAskVolume3IsSet(false);
    this.askVolume3 = 0;
  }

  public double getAskPrice2() {
    return this.askPrice2;
  }

  public CThostFtdcMarketDataAsk23Field setAskPrice2(double askPrice2) {
    this.askPrice2 = askPrice2;
    setAskPrice2IsSet(true);
    return this;
  }

  public void unsetAskPrice2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASKPRICE2_ISSET_ID);
  }

  /** Returns true if field askPrice2 is set (has been assigned a value) and false otherwise */
  public boolean isSetAskPrice2() {
    return EncodingUtils.testBit(__isset_bitfield, __ASKPRICE2_ISSET_ID);
  }

  public void setAskPrice2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASKPRICE2_ISSET_ID, value);
  }

  public int getAskVolume2() {
    return this.askVolume2;
  }

  public CThostFtdcMarketDataAsk23Field setAskVolume2(int askVolume2) {
    this.askVolume2 = askVolume2;
    setAskVolume2IsSet(true);
    return this;
  }

  public void unsetAskVolume2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASKVOLUME2_ISSET_ID);
  }

  /** Returns true if field askVolume2 is set (has been assigned a value) and false otherwise */
  public boolean isSetAskVolume2() {
    return EncodingUtils.testBit(__isset_bitfield, __ASKVOLUME2_ISSET_ID);
  }

  public void setAskVolume2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASKVOLUME2_ISSET_ID, value);
  }

  public double getAskPrice3() {
    return this.askPrice3;
  }

  public CThostFtdcMarketDataAsk23Field setAskPrice3(double askPrice3) {
    this.askPrice3 = askPrice3;
    setAskPrice3IsSet(true);
    return this;
  }

  public void unsetAskPrice3() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASKPRICE3_ISSET_ID);
  }

  /** Returns true if field askPrice3 is set (has been assigned a value) and false otherwise */
  public boolean isSetAskPrice3() {
    return EncodingUtils.testBit(__isset_bitfield, __ASKPRICE3_ISSET_ID);
  }

  public void setAskPrice3IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASKPRICE3_ISSET_ID, value);
  }

  public int getAskVolume3() {
    return this.askVolume3;
  }

  public CThostFtdcMarketDataAsk23Field setAskVolume3(int askVolume3) {
    this.askVolume3 = askVolume3;
    setAskVolume3IsSet(true);
    return this;
  }

  public void unsetAskVolume3() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASKVOLUME3_ISSET_ID);
  }

  /** Returns true if field askVolume3 is set (has been assigned a value) and false otherwise */
  public boolean isSetAskVolume3() {
    return EncodingUtils.testBit(__isset_bitfield, __ASKVOLUME3_ISSET_ID);
  }

  public void setAskVolume3IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASKVOLUME3_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ASK_PRICE2:
      if (value == null) {
        unsetAskPrice2();
      } else {
        setAskPrice2((Double)value);
      }
      break;

    case ASK_VOLUME2:
      if (value == null) {
        unsetAskVolume2();
      } else {
        setAskVolume2((Integer)value);
      }
      break;

    case ASK_PRICE3:
      if (value == null) {
        unsetAskPrice3();
      } else {
        setAskPrice3((Double)value);
      }
      break;

    case ASK_VOLUME3:
      if (value == null) {
        unsetAskVolume3();
      } else {
        setAskVolume3((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ASK_PRICE2:
      return Double.valueOf(getAskPrice2());

    case ASK_VOLUME2:
      return Integer.valueOf(getAskVolume2());

    case ASK_PRICE3:
      return Double.valueOf(getAskPrice3());

    case ASK_VOLUME3:
      return Integer.valueOf(getAskVolume3());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ASK_PRICE2:
      return isSetAskPrice2();
    case ASK_VOLUME2:
      return isSetAskVolume2();
    case ASK_PRICE3:
      return isSetAskPrice3();
    case ASK_VOLUME3:
      return isSetAskVolume3();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcMarketDataAsk23Field)
      return this.equals((CThostFtdcMarketDataAsk23Field)that);
    return false;
  }

  public boolean equals(CThostFtdcMarketDataAsk23Field that) {
    if (that == null)
      return false;

    boolean this_present_askPrice2 = true;
    boolean that_present_askPrice2 = true;
    if (this_present_askPrice2 || that_present_askPrice2) {
      if (!(this_present_askPrice2 && that_present_askPrice2))
        return false;
      if (this.askPrice2 != that.askPrice2)
        return false;
    }

    boolean this_present_askVolume2 = true;
    boolean that_present_askVolume2 = true;
    if (this_present_askVolume2 || that_present_askVolume2) {
      if (!(this_present_askVolume2 && that_present_askVolume2))
        return false;
      if (this.askVolume2 != that.askVolume2)
        return false;
    }

    boolean this_present_askPrice3 = true;
    boolean that_present_askPrice3 = true;
    if (this_present_askPrice3 || that_present_askPrice3) {
      if (!(this_present_askPrice3 && that_present_askPrice3))
        return false;
      if (this.askPrice3 != that.askPrice3)
        return false;
    }

    boolean this_present_askVolume3 = true;
    boolean that_present_askVolume3 = true;
    if (this_present_askVolume3 || that_present_askVolume3) {
      if (!(this_present_askVolume3 && that_present_askVolume3))
        return false;
      if (this.askVolume3 != that.askVolume3)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcMarketDataAsk23Field other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAskPrice2()).compareTo(other.isSetAskPrice2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAskPrice2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.askPrice2, other.askPrice2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAskVolume2()).compareTo(other.isSetAskVolume2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAskVolume2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.askVolume2, other.askVolume2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAskPrice3()).compareTo(other.isSetAskPrice3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAskPrice3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.askPrice3, other.askPrice3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAskVolume3()).compareTo(other.isSetAskVolume3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAskVolume3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.askVolume3, other.askVolume3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcMarketDataAsk23Field(");
    boolean first = true;

    sb.append("askPrice2:");
    sb.append(this.askPrice2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("askVolume2:");
    sb.append(this.askVolume2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("askPrice3:");
    sb.append(this.askPrice3);
    first = false;
    if (!first) sb.append(", ");
    sb.append("askVolume3:");
    sb.append(this.askVolume3);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcMarketDataAsk23FieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcMarketDataAsk23FieldStandardScheme getScheme() {
      return new CThostFtdcMarketDataAsk23FieldStandardScheme();
    }
  }

  private static class CThostFtdcMarketDataAsk23FieldStandardScheme extends StandardScheme<CThostFtdcMarketDataAsk23Field> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcMarketDataAsk23Field struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ASK_PRICE2
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.askPrice2 = iprot.readDouble();
              struct.setAskPrice2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ASK_VOLUME2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.askVolume2 = iprot.readI32();
              struct.setAskVolume2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ASK_PRICE3
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.askPrice3 = iprot.readDouble();
              struct.setAskPrice3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ASK_VOLUME3
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.askVolume3 = iprot.readI32();
              struct.setAskVolume3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcMarketDataAsk23Field struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ASK_PRICE2_FIELD_DESC);
      oprot.writeDouble(struct.askPrice2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ASK_VOLUME2_FIELD_DESC);
      oprot.writeI32(struct.askVolume2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ASK_PRICE3_FIELD_DESC);
      oprot.writeDouble(struct.askPrice3);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ASK_VOLUME3_FIELD_DESC);
      oprot.writeI32(struct.askVolume3);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcMarketDataAsk23FieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcMarketDataAsk23FieldTupleScheme getScheme() {
      return new CThostFtdcMarketDataAsk23FieldTupleScheme();
    }
  }

  private static class CThostFtdcMarketDataAsk23FieldTupleScheme extends TupleScheme<CThostFtdcMarketDataAsk23Field> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcMarketDataAsk23Field struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAskPrice2()) {
        optionals.set(0);
      }
      if (struct.isSetAskVolume2()) {
        optionals.set(1);
      }
      if (struct.isSetAskPrice3()) {
        optionals.set(2);
      }
      if (struct.isSetAskVolume3()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetAskPrice2()) {
        oprot.writeDouble(struct.askPrice2);
      }
      if (struct.isSetAskVolume2()) {
        oprot.writeI32(struct.askVolume2);
      }
      if (struct.isSetAskPrice3()) {
        oprot.writeDouble(struct.askPrice3);
      }
      if (struct.isSetAskVolume3()) {
        oprot.writeI32(struct.askVolume3);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcMarketDataAsk23Field struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.askPrice2 = iprot.readDouble();
        struct.setAskPrice2IsSet(true);
      }
      if (incoming.get(1)) {
        struct.askVolume2 = iprot.readI32();
        struct.setAskVolume2IsSet(true);
      }
      if (incoming.get(2)) {
        struct.askPrice3 = iprot.readDouble();
        struct.setAskPrice3IsSet(true);
      }
      if (incoming.get(3)) {
        struct.askVolume3 = iprot.readI32();
        struct.setAskVolume3IsSet(true);
      }
    }
  }

}

