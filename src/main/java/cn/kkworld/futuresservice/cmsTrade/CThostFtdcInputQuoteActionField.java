/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcInputQuoteActionField implements org.apache.thrift.TBase<CThostFtdcInputQuoteActionField, CThostFtdcInputQuoteActionField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcInputQuoteActionField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcInputQuoteActionField");

  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INVESTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("investorID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField QUOTE_ACTION_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("quoteActionRef", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField QUOTE_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("quoteRef", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestID", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField FRONT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("frontID", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField EXCHANGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeID", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField QUOTE_SYS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("quoteSysID", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ACTION_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("actionFlag", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField INSTRUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instrumentID", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcInputQuoteActionFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcInputQuoteActionFieldTupleSchemeFactory());
  }

  public String brokerID; // required
  public String investorID; // required
  public int quoteActionRef; // required
  public String quoteRef; // required
  public int requestID; // required
  public int frontID; // required
  public int sessionID; // required
  public String exchangeID; // required
  public String quoteSysID; // required
  public String actionFlag; // required
  public String userID; // required
  public String instrumentID; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BROKER_ID((short)1, "brokerID"),
    INVESTOR_ID((short)2, "investorID"),
    QUOTE_ACTION_REF((short)3, "quoteActionRef"),
    QUOTE_REF((short)4, "quoteRef"),
    REQUEST_ID((short)5, "requestID"),
    FRONT_ID((short)6, "frontID"),
    SESSION_ID((short)7, "sessionID"),
    EXCHANGE_ID((short)8, "exchangeID"),
    QUOTE_SYS_ID((short)9, "quoteSysID"),
    ACTION_FLAG((short)10, "actionFlag"),
    USER_ID((short)11, "userID"),
    INSTRUMENT_ID((short)12, "instrumentID");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BROKER_ID
          return BROKER_ID;
        case 2: // INVESTOR_ID
          return INVESTOR_ID;
        case 3: // QUOTE_ACTION_REF
          return QUOTE_ACTION_REF;
        case 4: // QUOTE_REF
          return QUOTE_REF;
        case 5: // REQUEST_ID
          return REQUEST_ID;
        case 6: // FRONT_ID
          return FRONT_ID;
        case 7: // SESSION_ID
          return SESSION_ID;
        case 8: // EXCHANGE_ID
          return EXCHANGE_ID;
        case 9: // QUOTE_SYS_ID
          return QUOTE_SYS_ID;
        case 10: // ACTION_FLAG
          return ACTION_FLAG;
        case 11: // USER_ID
          return USER_ID;
        case 12: // INSTRUMENT_ID
          return INSTRUMENT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __QUOTEACTIONREF_ISSET_ID = 0;
  private static final int __REQUESTID_ISSET_ID = 1;
  private static final int __FRONTID_ISSET_ID = 2;
  private static final int __SESSIONID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.INVESTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("investorID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInvestorIDType")));
    tmpMap.put(_Fields.QUOTE_ACTION_REF, new org.apache.thrift.meta_data.FieldMetaData("quoteActionRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcOrderActionRefType")));
    tmpMap.put(_Fields.QUOTE_REF, new org.apache.thrift.meta_data.FieldMetaData("quoteRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderRefType")));
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcRequestIDType")));
    tmpMap.put(_Fields.FRONT_ID, new org.apache.thrift.meta_data.FieldMetaData("frontID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcFrontIDType")));
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcSessionIDType")));
    tmpMap.put(_Fields.EXCHANGE_ID, new org.apache.thrift.meta_data.FieldMetaData("exchangeID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcExchangeIDType")));
    tmpMap.put(_Fields.QUOTE_SYS_ID, new org.apache.thrift.meta_data.FieldMetaData("quoteSysID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderSysIDType")));
    tmpMap.put(_Fields.ACTION_FLAG, new org.apache.thrift.meta_data.FieldMetaData("actionFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcActionFlagType")));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcUserIDType")));
    tmpMap.put(_Fields.INSTRUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("instrumentID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInstrumentIDType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcInputQuoteActionField.class, metaDataMap);
  }

  public CThostFtdcInputQuoteActionField() {
  }

  public CThostFtdcInputQuoteActionField(
    String brokerID,
    String investorID,
    int quoteActionRef,
    String quoteRef,
    int requestID,
    int frontID,
    int sessionID,
    String exchangeID,
    String quoteSysID,
    String actionFlag,
    String userID,
    String instrumentID)
  {
    this();
    this.brokerID = brokerID;
    this.investorID = investorID;
    this.quoteActionRef = quoteActionRef;
    setQuoteActionRefIsSet(true);
    this.quoteRef = quoteRef;
    this.requestID = requestID;
    setRequestIDIsSet(true);
    this.frontID = frontID;
    setFrontIDIsSet(true);
    this.sessionID = sessionID;
    setSessionIDIsSet(true);
    this.exchangeID = exchangeID;
    this.quoteSysID = quoteSysID;
    this.actionFlag = actionFlag;
    this.userID = userID;
    this.instrumentID = instrumentID;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcInputQuoteActionField(CThostFtdcInputQuoteActionField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetInvestorID()) {
      this.investorID = other.investorID;
    }
    this.quoteActionRef = other.quoteActionRef;
    if (other.isSetQuoteRef()) {
      this.quoteRef = other.quoteRef;
    }
    this.requestID = other.requestID;
    this.frontID = other.frontID;
    this.sessionID = other.sessionID;
    if (other.isSetExchangeID()) {
      this.exchangeID = other.exchangeID;
    }
    if (other.isSetQuoteSysID()) {
      this.quoteSysID = other.quoteSysID;
    }
    if (other.isSetActionFlag()) {
      this.actionFlag = other.actionFlag;
    }
    if (other.isSetUserID()) {
      this.userID = other.userID;
    }
    if (other.isSetInstrumentID()) {
      this.instrumentID = other.instrumentID;
    }
  }

  public CThostFtdcInputQuoteActionField deepCopy() {
    return new CThostFtdcInputQuoteActionField(this);
  }

  @Override
  public void clear() {
    this.brokerID = null;
    this.investorID = null;
    setQuoteActionRefIsSet(false);
    this.quoteActionRef = 0;
    this.quoteRef = null;
    setRequestIDIsSet(false);
    this.requestID = 0;
    setFrontIDIsSet(false);
    this.frontID = 0;
    setSessionIDIsSet(false);
    this.sessionID = 0;
    this.exchangeID = null;
    this.quoteSysID = null;
    this.actionFlag = null;
    this.userID = null;
    this.instrumentID = null;
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcInputQuoteActionField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getInvestorID() {
    return this.investorID;
  }

  public CThostFtdcInputQuoteActionField setInvestorID(String investorID) {
    this.investorID = investorID;
    return this;
  }

  public void unsetInvestorID() {
    this.investorID = null;
  }

  /** Returns true if field investorID is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorID() {
    return this.investorID != null;
  }

  public void setInvestorIDIsSet(boolean value) {
    if (!value) {
      this.investorID = null;
    }
  }

  public int getQuoteActionRef() {
    return this.quoteActionRef;
  }

  public CThostFtdcInputQuoteActionField setQuoteActionRef(int quoteActionRef) {
    this.quoteActionRef = quoteActionRef;
    setQuoteActionRefIsSet(true);
    return this;
  }

  public void unsetQuoteActionRef() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUOTEACTIONREF_ISSET_ID);
  }

  /** Returns true if field quoteActionRef is set (has been assigned a value) and false otherwise */
  public boolean isSetQuoteActionRef() {
    return EncodingUtils.testBit(__isset_bitfield, __QUOTEACTIONREF_ISSET_ID);
  }

  public void setQuoteActionRefIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUOTEACTIONREF_ISSET_ID, value);
  }

  public String getQuoteRef() {
    return this.quoteRef;
  }

  public CThostFtdcInputQuoteActionField setQuoteRef(String quoteRef) {
    this.quoteRef = quoteRef;
    return this;
  }

  public void unsetQuoteRef() {
    this.quoteRef = null;
  }

  /** Returns true if field quoteRef is set (has been assigned a value) and false otherwise */
  public boolean isSetQuoteRef() {
    return this.quoteRef != null;
  }

  public void setQuoteRefIsSet(boolean value) {
    if (!value) {
      this.quoteRef = null;
    }
  }

  public int getRequestID() {
    return this.requestID;
  }

  public CThostFtdcInputQuoteActionField setRequestID(int requestID) {
    this.requestID = requestID;
    setRequestIDIsSet(true);
    return this;
  }

  public void unsetRequestID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  /** Returns true if field requestID is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestID() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  public void setRequestIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
  }

  public int getFrontID() {
    return this.frontID;
  }

  public CThostFtdcInputQuoteActionField setFrontID(int frontID) {
    this.frontID = frontID;
    setFrontIDIsSet(true);
    return this;
  }

  public void unsetFrontID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FRONTID_ISSET_ID);
  }

  /** Returns true if field frontID is set (has been assigned a value) and false otherwise */
  public boolean isSetFrontID() {
    return EncodingUtils.testBit(__isset_bitfield, __FRONTID_ISSET_ID);
  }

  public void setFrontIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FRONTID_ISSET_ID, value);
  }

  public int getSessionID() {
    return this.sessionID;
  }

  public CThostFtdcInputQuoteActionField setSessionID(int sessionID) {
    this.sessionID = sessionID;
    setSessionIDIsSet(true);
    return this;
  }

  public void unsetSessionID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionID() {
    return EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  public void setSessionIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
  }

  public String getExchangeID() {
    return this.exchangeID;
  }

  public CThostFtdcInputQuoteActionField setExchangeID(String exchangeID) {
    this.exchangeID = exchangeID;
    return this;
  }

  public void unsetExchangeID() {
    this.exchangeID = null;
  }

  /** Returns true if field exchangeID is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeID() {
    return this.exchangeID != null;
  }

  public void setExchangeIDIsSet(boolean value) {
    if (!value) {
      this.exchangeID = null;
    }
  }

  public String getQuoteSysID() {
    return this.quoteSysID;
  }

  public CThostFtdcInputQuoteActionField setQuoteSysID(String quoteSysID) {
    this.quoteSysID = quoteSysID;
    return this;
  }

  public void unsetQuoteSysID() {
    this.quoteSysID = null;
  }

  /** Returns true if field quoteSysID is set (has been assigned a value) and false otherwise */
  public boolean isSetQuoteSysID() {
    return this.quoteSysID != null;
  }

  public void setQuoteSysIDIsSet(boolean value) {
    if (!value) {
      this.quoteSysID = null;
    }
  }

  public String getActionFlag() {
    return this.actionFlag;
  }

  public CThostFtdcInputQuoteActionField setActionFlag(String actionFlag) {
    this.actionFlag = actionFlag;
    return this;
  }

  public void unsetActionFlag() {
    this.actionFlag = null;
  }

  /** Returns true if field actionFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetActionFlag() {
    return this.actionFlag != null;
  }

  public void setActionFlagIsSet(boolean value) {
    if (!value) {
      this.actionFlag = null;
    }
  }

  public String getUserID() {
    return this.userID;
  }

  public CThostFtdcInputQuoteActionField setUserID(String userID) {
    this.userID = userID;
    return this;
  }

  public void unsetUserID() {
    this.userID = null;
  }

  /** Returns true if field userID is set (has been assigned a value) and false otherwise */
  public boolean isSetUserID() {
    return this.userID != null;
  }

  public void setUserIDIsSet(boolean value) {
    if (!value) {
      this.userID = null;
    }
  }

  public String getInstrumentID() {
    return this.instrumentID;
  }

  public CThostFtdcInputQuoteActionField setInstrumentID(String instrumentID) {
    this.instrumentID = instrumentID;
    return this;
  }

  public void unsetInstrumentID() {
    this.instrumentID = null;
  }

  /** Returns true if field instrumentID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstrumentID() {
    return this.instrumentID != null;
  }

  public void setInstrumentIDIsSet(boolean value) {
    if (!value) {
      this.instrumentID = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case INVESTOR_ID:
      if (value == null) {
        unsetInvestorID();
      } else {
        setInvestorID((String)value);
      }
      break;

    case QUOTE_ACTION_REF:
      if (value == null) {
        unsetQuoteActionRef();
      } else {
        setQuoteActionRef((Integer)value);
      }
      break;

    case QUOTE_REF:
      if (value == null) {
        unsetQuoteRef();
      } else {
        setQuoteRef((String)value);
      }
      break;

    case REQUEST_ID:
      if (value == null) {
        unsetRequestID();
      } else {
        setRequestID((Integer)value);
      }
      break;

    case FRONT_ID:
      if (value == null) {
        unsetFrontID();
      } else {
        setFrontID((Integer)value);
      }
      break;

    case SESSION_ID:
      if (value == null) {
        unsetSessionID();
      } else {
        setSessionID((Integer)value);
      }
      break;

    case EXCHANGE_ID:
      if (value == null) {
        unsetExchangeID();
      } else {
        setExchangeID((String)value);
      }
      break;

    case QUOTE_SYS_ID:
      if (value == null) {
        unsetQuoteSysID();
      } else {
        setQuoteSysID((String)value);
      }
      break;

    case ACTION_FLAG:
      if (value == null) {
        unsetActionFlag();
      } else {
        setActionFlag((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserID();
      } else {
        setUserID((String)value);
      }
      break;

    case INSTRUMENT_ID:
      if (value == null) {
        unsetInstrumentID();
      } else {
        setInstrumentID((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BROKER_ID:
      return getBrokerID();

    case INVESTOR_ID:
      return getInvestorID();

    case QUOTE_ACTION_REF:
      return Integer.valueOf(getQuoteActionRef());

    case QUOTE_REF:
      return getQuoteRef();

    case REQUEST_ID:
      return Integer.valueOf(getRequestID());

    case FRONT_ID:
      return Integer.valueOf(getFrontID());

    case SESSION_ID:
      return Integer.valueOf(getSessionID());

    case EXCHANGE_ID:
      return getExchangeID();

    case QUOTE_SYS_ID:
      return getQuoteSysID();

    case ACTION_FLAG:
      return getActionFlag();

    case USER_ID:
      return getUserID();

    case INSTRUMENT_ID:
      return getInstrumentID();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BROKER_ID:
      return isSetBrokerID();
    case INVESTOR_ID:
      return isSetInvestorID();
    case QUOTE_ACTION_REF:
      return isSetQuoteActionRef();
    case QUOTE_REF:
      return isSetQuoteRef();
    case REQUEST_ID:
      return isSetRequestID();
    case FRONT_ID:
      return isSetFrontID();
    case SESSION_ID:
      return isSetSessionID();
    case EXCHANGE_ID:
      return isSetExchangeID();
    case QUOTE_SYS_ID:
      return isSetQuoteSysID();
    case ACTION_FLAG:
      return isSetActionFlag();
    case USER_ID:
      return isSetUserID();
    case INSTRUMENT_ID:
      return isSetInstrumentID();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcInputQuoteActionField)
      return this.equals((CThostFtdcInputQuoteActionField)that);
    return false;
  }

  public boolean equals(CThostFtdcInputQuoteActionField that) {
    if (that == null)
      return false;

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_investorID = true && this.isSetInvestorID();
    boolean that_present_investorID = true && that.isSetInvestorID();
    if (this_present_investorID || that_present_investorID) {
      if (!(this_present_investorID && that_present_investorID))
        return false;
      if (!this.investorID.equals(that.investorID))
        return false;
    }

    boolean this_present_quoteActionRef = true;
    boolean that_present_quoteActionRef = true;
    if (this_present_quoteActionRef || that_present_quoteActionRef) {
      if (!(this_present_quoteActionRef && that_present_quoteActionRef))
        return false;
      if (this.quoteActionRef != that.quoteActionRef)
        return false;
    }

    boolean this_present_quoteRef = true && this.isSetQuoteRef();
    boolean that_present_quoteRef = true && that.isSetQuoteRef();
    if (this_present_quoteRef || that_present_quoteRef) {
      if (!(this_present_quoteRef && that_present_quoteRef))
        return false;
      if (!this.quoteRef.equals(that.quoteRef))
        return false;
    }

    boolean this_present_requestID = true;
    boolean that_present_requestID = true;
    if (this_present_requestID || that_present_requestID) {
      if (!(this_present_requestID && that_present_requestID))
        return false;
      if (this.requestID != that.requestID)
        return false;
    }

    boolean this_present_frontID = true;
    boolean that_present_frontID = true;
    if (this_present_frontID || that_present_frontID) {
      if (!(this_present_frontID && that_present_frontID))
        return false;
      if (this.frontID != that.frontID)
        return false;
    }

    boolean this_present_sessionID = true;
    boolean that_present_sessionID = true;
    if (this_present_sessionID || that_present_sessionID) {
      if (!(this_present_sessionID && that_present_sessionID))
        return false;
      if (this.sessionID != that.sessionID)
        return false;
    }

    boolean this_present_exchangeID = true && this.isSetExchangeID();
    boolean that_present_exchangeID = true && that.isSetExchangeID();
    if (this_present_exchangeID || that_present_exchangeID) {
      if (!(this_present_exchangeID && that_present_exchangeID))
        return false;
      if (!this.exchangeID.equals(that.exchangeID))
        return false;
    }

    boolean this_present_quoteSysID = true && this.isSetQuoteSysID();
    boolean that_present_quoteSysID = true && that.isSetQuoteSysID();
    if (this_present_quoteSysID || that_present_quoteSysID) {
      if (!(this_present_quoteSysID && that_present_quoteSysID))
        return false;
      if (!this.quoteSysID.equals(that.quoteSysID))
        return false;
    }

    boolean this_present_actionFlag = true && this.isSetActionFlag();
    boolean that_present_actionFlag = true && that.isSetActionFlag();
    if (this_present_actionFlag || that_present_actionFlag) {
      if (!(this_present_actionFlag && that_present_actionFlag))
        return false;
      if (!this.actionFlag.equals(that.actionFlag))
        return false;
    }

    boolean this_present_userID = true && this.isSetUserID();
    boolean that_present_userID = true && that.isSetUserID();
    if (this_present_userID || that_present_userID) {
      if (!(this_present_userID && that_present_userID))
        return false;
      if (!this.userID.equals(that.userID))
        return false;
    }

    boolean this_present_instrumentID = true && this.isSetInstrumentID();
    boolean that_present_instrumentID = true && that.isSetInstrumentID();
    if (this_present_instrumentID || that_present_instrumentID) {
      if (!(this_present_instrumentID && that_present_instrumentID))
        return false;
      if (!this.instrumentID.equals(that.instrumentID))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcInputQuoteActionField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestorID()).compareTo(other.isSetInvestorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorID, other.investorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuoteActionRef()).compareTo(other.isSetQuoteActionRef());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuoteActionRef()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quoteActionRef, other.quoteActionRef);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuoteRef()).compareTo(other.isSetQuoteRef());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuoteRef()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quoteRef, other.quoteRef);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestID()).compareTo(other.isSetRequestID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestID, other.requestID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrontID()).compareTo(other.isSetFrontID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrontID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frontID, other.frontID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeID()).compareTo(other.isSetExchangeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeID, other.exchangeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuoteSysID()).compareTo(other.isSetQuoteSysID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuoteSysID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quoteSysID, other.quoteSysID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionFlag()).compareTo(other.isSetActionFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionFlag, other.actionFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserID()).compareTo(other.isSetUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, other.userID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstrumentID()).compareTo(other.isSetInstrumentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstrumentID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instrumentID, other.instrumentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcInputQuoteActionField(");
    boolean first = true;

    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("investorID:");
    if (this.investorID == null) {
      sb.append("null");
    } else {
      sb.append(this.investorID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("quoteActionRef:");
    sb.append(this.quoteActionRef);
    first = false;
    if (!first) sb.append(", ");
    sb.append("quoteRef:");
    if (this.quoteRef == null) {
      sb.append("null");
    } else {
      sb.append(this.quoteRef);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestID:");
    sb.append(this.requestID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("frontID:");
    sb.append(this.frontID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sessionID:");
    sb.append(this.sessionID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchangeID:");
    if (this.exchangeID == null) {
      sb.append("null");
    } else {
      sb.append(this.exchangeID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("quoteSysID:");
    if (this.quoteSysID == null) {
      sb.append("null");
    } else {
      sb.append(this.quoteSysID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actionFlag:");
    if (this.actionFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.actionFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userID:");
    if (this.userID == null) {
      sb.append("null");
    } else {
      sb.append(this.userID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("instrumentID:");
    if (this.instrumentID == null) {
      sb.append("null");
    } else {
      sb.append(this.instrumentID);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcInputQuoteActionFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcInputQuoteActionFieldStandardScheme getScheme() {
      return new CThostFtdcInputQuoteActionFieldStandardScheme();
    }
  }

  private static class CThostFtdcInputQuoteActionFieldStandardScheme extends StandardScheme<CThostFtdcInputQuoteActionField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcInputQuoteActionField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INVESTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorID = iprot.readString();
              struct.setInvestorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUOTE_ACTION_REF
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.quoteActionRef = iprot.readI32();
              struct.setQuoteActionRefIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QUOTE_REF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.quoteRef = iprot.readString();
              struct.setQuoteRefIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestID = iprot.readI32();
              struct.setRequestIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FRONT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.frontID = iprot.readI32();
              struct.setFrontIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sessionID = iprot.readI32();
              struct.setSessionIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXCHANGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeID = iprot.readString();
              struct.setExchangeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // QUOTE_SYS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.quoteSysID = iprot.readString();
              struct.setQuoteSysIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ACTION_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actionFlag = iprot.readString();
              struct.setActionFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userID = iprot.readString();
              struct.setUserIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // INSTRUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instrumentID = iprot.readString();
              struct.setInstrumentIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcInputQuoteActionField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.investorID != null) {
        oprot.writeFieldBegin(INVESTOR_ID_FIELD_DESC);
        oprot.writeString(struct.investorID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QUOTE_ACTION_REF_FIELD_DESC);
      oprot.writeI32(struct.quoteActionRef);
      oprot.writeFieldEnd();
      if (struct.quoteRef != null) {
        oprot.writeFieldBegin(QUOTE_REF_FIELD_DESC);
        oprot.writeString(struct.quoteRef);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
      oprot.writeI32(struct.requestID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FRONT_ID_FIELD_DESC);
      oprot.writeI32(struct.frontID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeI32(struct.sessionID);
      oprot.writeFieldEnd();
      if (struct.exchangeID != null) {
        oprot.writeFieldBegin(EXCHANGE_ID_FIELD_DESC);
        oprot.writeString(struct.exchangeID);
        oprot.writeFieldEnd();
      }
      if (struct.quoteSysID != null) {
        oprot.writeFieldBegin(QUOTE_SYS_ID_FIELD_DESC);
        oprot.writeString(struct.quoteSysID);
        oprot.writeFieldEnd();
      }
      if (struct.actionFlag != null) {
        oprot.writeFieldBegin(ACTION_FLAG_FIELD_DESC);
        oprot.writeString(struct.actionFlag);
        oprot.writeFieldEnd();
      }
      if (struct.userID != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userID);
        oprot.writeFieldEnd();
      }
      if (struct.instrumentID != null) {
        oprot.writeFieldBegin(INSTRUMENT_ID_FIELD_DESC);
        oprot.writeString(struct.instrumentID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcInputQuoteActionFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcInputQuoteActionFieldTupleScheme getScheme() {
      return new CThostFtdcInputQuoteActionFieldTupleScheme();
    }
  }

  private static class CThostFtdcInputQuoteActionFieldTupleScheme extends TupleScheme<CThostFtdcInputQuoteActionField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcInputQuoteActionField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBrokerID()) {
        optionals.set(0);
      }
      if (struct.isSetInvestorID()) {
        optionals.set(1);
      }
      if (struct.isSetQuoteActionRef()) {
        optionals.set(2);
      }
      if (struct.isSetQuoteRef()) {
        optionals.set(3);
      }
      if (struct.isSetRequestID()) {
        optionals.set(4);
      }
      if (struct.isSetFrontID()) {
        optionals.set(5);
      }
      if (struct.isSetSessionID()) {
        optionals.set(6);
      }
      if (struct.isSetExchangeID()) {
        optionals.set(7);
      }
      if (struct.isSetQuoteSysID()) {
        optionals.set(8);
      }
      if (struct.isSetActionFlag()) {
        optionals.set(9);
      }
      if (struct.isSetUserID()) {
        optionals.set(10);
      }
      if (struct.isSetInstrumentID()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetInvestorID()) {
        oprot.writeString(struct.investorID);
      }
      if (struct.isSetQuoteActionRef()) {
        oprot.writeI32(struct.quoteActionRef);
      }
      if (struct.isSetQuoteRef()) {
        oprot.writeString(struct.quoteRef);
      }
      if (struct.isSetRequestID()) {
        oprot.writeI32(struct.requestID);
      }
      if (struct.isSetFrontID()) {
        oprot.writeI32(struct.frontID);
      }
      if (struct.isSetSessionID()) {
        oprot.writeI32(struct.sessionID);
      }
      if (struct.isSetExchangeID()) {
        oprot.writeString(struct.exchangeID);
      }
      if (struct.isSetQuoteSysID()) {
        oprot.writeString(struct.quoteSysID);
      }
      if (struct.isSetActionFlag()) {
        oprot.writeString(struct.actionFlag);
      }
      if (struct.isSetUserID()) {
        oprot.writeString(struct.userID);
      }
      if (struct.isSetInstrumentID()) {
        oprot.writeString(struct.instrumentID);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcInputQuoteActionField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.investorID = iprot.readString();
        struct.setInvestorIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.quoteActionRef = iprot.readI32();
        struct.setQuoteActionRefIsSet(true);
      }
      if (incoming.get(3)) {
        struct.quoteRef = iprot.readString();
        struct.setQuoteRefIsSet(true);
      }
      if (incoming.get(4)) {
        struct.requestID = iprot.readI32();
        struct.setRequestIDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.frontID = iprot.readI32();
        struct.setFrontIDIsSet(true);
      }
      if (incoming.get(6)) {
        struct.sessionID = iprot.readI32();
        struct.setSessionIDIsSet(true);
      }
      if (incoming.get(7)) {
        struct.exchangeID = iprot.readString();
        struct.setExchangeIDIsSet(true);
      }
      if (incoming.get(8)) {
        struct.quoteSysID = iprot.readString();
        struct.setQuoteSysIDIsSet(true);
      }
      if (incoming.get(9)) {
        struct.actionFlag = iprot.readString();
        struct.setActionFlagIsSet(true);
      }
      if (incoming.get(10)) {
        struct.userID = iprot.readString();
        struct.setUserIDIsSet(true);
      }
      if (incoming.get(11)) {
        struct.instrumentID = iprot.readString();
        struct.setInstrumentIDIsSet(true);
      }
    }
  }

}

