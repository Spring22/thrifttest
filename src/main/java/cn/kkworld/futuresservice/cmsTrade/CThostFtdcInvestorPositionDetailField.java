/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcInvestorPositionDetailField implements org.apache.thrift.TBase<CThostFtdcInvestorPositionDetailField, CThostFtdcInvestorPositionDetailField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcInvestorPositionDetailField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcInvestorPositionDetailField");

  private static final org.apache.thrift.protocol.TField INSTRUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instrumentID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INVESTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("investorID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField HEDGE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("hedgeFlag", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("direction", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField OPEN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("openDate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TRADE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeID", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("volume", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField OPEN_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("openPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField TRADING_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("tradingDay", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SETTLEMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("settlementID", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField TRADE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeType", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField COMB_INSTRUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("combInstrumentID", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField EXCHANGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeID", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField CLOSE_PROFIT_BY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("closeProfitByDate", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField CLOSE_PROFIT_BY_TRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("closeProfitByTrade", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField POSITION_PROFIT_BY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("positionProfitByDate", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField POSITION_PROFIT_BY_TRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("positionProfitByTrade", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("margin", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField EXCH_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("exchMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField MARGIN_RATE_BY_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("marginRateByMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField MARGIN_RATE_BY_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("marginRateByVolume", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField LAST_SETTLEMENT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastSettlementPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField SETTLEMENT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("settlementPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField CLOSE_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("closeVolume", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField CLOSE_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("closeAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)26);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcInvestorPositionDetailFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcInvestorPositionDetailFieldTupleSchemeFactory());
  }

  public String instrumentID; // required
  public String brokerID; // required
  public String investorID; // required
  public String hedgeFlag; // required
  public String direction; // required
  public String openDate; // required
  public String tradeID; // required
  public int volume; // required
  public double openPrice; // required
  public String tradingDay; // required
  public int settlementID; // required
  public String tradeType; // required
  public String combInstrumentID; // required
  public String exchangeID; // required
  public double closeProfitByDate; // required
  public double closeProfitByTrade; // required
  public double positionProfitByDate; // required
  public double positionProfitByTrade; // required
  public double margin; // required
  public double exchMargin; // required
  public double marginRateByMoney; // required
  public double marginRateByVolume; // required
  public double lastSettlementPrice; // required
  public double settlementPrice; // required
  public int closeVolume; // required
  public double closeAmount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INSTRUMENT_ID((short)1, "instrumentID"),
    BROKER_ID((short)2, "brokerID"),
    INVESTOR_ID((short)3, "investorID"),
    HEDGE_FLAG((short)4, "hedgeFlag"),
    DIRECTION((short)5, "direction"),
    OPEN_DATE((short)6, "openDate"),
    TRADE_ID((short)7, "tradeID"),
    VOLUME((short)8, "volume"),
    OPEN_PRICE((short)9, "openPrice"),
    TRADING_DAY((short)10, "tradingDay"),
    SETTLEMENT_ID((short)11, "settlementID"),
    TRADE_TYPE((short)12, "tradeType"),
    COMB_INSTRUMENT_ID((short)13, "combInstrumentID"),
    EXCHANGE_ID((short)14, "exchangeID"),
    CLOSE_PROFIT_BY_DATE((short)15, "closeProfitByDate"),
    CLOSE_PROFIT_BY_TRADE((short)16, "closeProfitByTrade"),
    POSITION_PROFIT_BY_DATE((short)17, "positionProfitByDate"),
    POSITION_PROFIT_BY_TRADE((short)18, "positionProfitByTrade"),
    MARGIN((short)19, "margin"),
    EXCH_MARGIN((short)20, "exchMargin"),
    MARGIN_RATE_BY_MONEY((short)21, "marginRateByMoney"),
    MARGIN_RATE_BY_VOLUME((short)22, "marginRateByVolume"),
    LAST_SETTLEMENT_PRICE((short)23, "lastSettlementPrice"),
    SETTLEMENT_PRICE((short)24, "settlementPrice"),
    CLOSE_VOLUME((short)25, "closeVolume"),
    CLOSE_AMOUNT((short)26, "closeAmount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INSTRUMENT_ID
          return INSTRUMENT_ID;
        case 2: // BROKER_ID
          return BROKER_ID;
        case 3: // INVESTOR_ID
          return INVESTOR_ID;
        case 4: // HEDGE_FLAG
          return HEDGE_FLAG;
        case 5: // DIRECTION
          return DIRECTION;
        case 6: // OPEN_DATE
          return OPEN_DATE;
        case 7: // TRADE_ID
          return TRADE_ID;
        case 8: // VOLUME
          return VOLUME;
        case 9: // OPEN_PRICE
          return OPEN_PRICE;
        case 10: // TRADING_DAY
          return TRADING_DAY;
        case 11: // SETTLEMENT_ID
          return SETTLEMENT_ID;
        case 12: // TRADE_TYPE
          return TRADE_TYPE;
        case 13: // COMB_INSTRUMENT_ID
          return COMB_INSTRUMENT_ID;
        case 14: // EXCHANGE_ID
          return EXCHANGE_ID;
        case 15: // CLOSE_PROFIT_BY_DATE
          return CLOSE_PROFIT_BY_DATE;
        case 16: // CLOSE_PROFIT_BY_TRADE
          return CLOSE_PROFIT_BY_TRADE;
        case 17: // POSITION_PROFIT_BY_DATE
          return POSITION_PROFIT_BY_DATE;
        case 18: // POSITION_PROFIT_BY_TRADE
          return POSITION_PROFIT_BY_TRADE;
        case 19: // MARGIN
          return MARGIN;
        case 20: // EXCH_MARGIN
          return EXCH_MARGIN;
        case 21: // MARGIN_RATE_BY_MONEY
          return MARGIN_RATE_BY_MONEY;
        case 22: // MARGIN_RATE_BY_VOLUME
          return MARGIN_RATE_BY_VOLUME;
        case 23: // LAST_SETTLEMENT_PRICE
          return LAST_SETTLEMENT_PRICE;
        case 24: // SETTLEMENT_PRICE
          return SETTLEMENT_PRICE;
        case 25: // CLOSE_VOLUME
          return CLOSE_VOLUME;
        case 26: // CLOSE_AMOUNT
          return CLOSE_AMOUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VOLUME_ISSET_ID = 0;
  private static final int __OPENPRICE_ISSET_ID = 1;
  private static final int __SETTLEMENTID_ISSET_ID = 2;
  private static final int __CLOSEPROFITBYDATE_ISSET_ID = 3;
  private static final int __CLOSEPROFITBYTRADE_ISSET_ID = 4;
  private static final int __POSITIONPROFITBYDATE_ISSET_ID = 5;
  private static final int __POSITIONPROFITBYTRADE_ISSET_ID = 6;
  private static final int __MARGIN_ISSET_ID = 7;
  private static final int __EXCHMARGIN_ISSET_ID = 8;
  private static final int __MARGINRATEBYMONEY_ISSET_ID = 9;
  private static final int __MARGINRATEBYVOLUME_ISSET_ID = 10;
  private static final int __LASTSETTLEMENTPRICE_ISSET_ID = 11;
  private static final int __SETTLEMENTPRICE_ISSET_ID = 12;
  private static final int __CLOSEVOLUME_ISSET_ID = 13;
  private static final int __CLOSEAMOUNT_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INSTRUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("instrumentID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInstrumentIDType")));
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.INVESTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("investorID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInvestorIDType")));
    tmpMap.put(_Fields.HEDGE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("hedgeFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcHedgeFlagType")));
    tmpMap.put(_Fields.DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("direction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDirectionType")));
    tmpMap.put(_Fields.OPEN_DATE, new org.apache.thrift.meta_data.FieldMetaData("openDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    tmpMap.put(_Fields.TRADE_ID, new org.apache.thrift.meta_data.FieldMetaData("tradeID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeIDType")));
    tmpMap.put(_Fields.VOLUME, new org.apache.thrift.meta_data.FieldMetaData("volume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcVolumeType")));
    tmpMap.put(_Fields.OPEN_PRICE, new org.apache.thrift.meta_data.FieldMetaData("openPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.TRADING_DAY, new org.apache.thrift.meta_data.FieldMetaData("tradingDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    tmpMap.put(_Fields.SETTLEMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("settlementID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcSettlementIDType")));
    tmpMap.put(_Fields.TRADE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("tradeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeTypeType")));
    tmpMap.put(_Fields.COMB_INSTRUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("combInstrumentID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInstrumentIDType")));
    tmpMap.put(_Fields.EXCHANGE_ID, new org.apache.thrift.meta_data.FieldMetaData("exchangeID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcExchangeIDType")));
    tmpMap.put(_Fields.CLOSE_PROFIT_BY_DATE, new org.apache.thrift.meta_data.FieldMetaData("closeProfitByDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.CLOSE_PROFIT_BY_TRADE, new org.apache.thrift.meta_data.FieldMetaData("closeProfitByTrade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.POSITION_PROFIT_BY_DATE, new org.apache.thrift.meta_data.FieldMetaData("positionProfitByDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.POSITION_PROFIT_BY_TRADE, new org.apache.thrift.meta_data.FieldMetaData("positionProfitByTrade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.MARGIN, new org.apache.thrift.meta_data.FieldMetaData("margin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.EXCH_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("exchMargin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.MARGIN_RATE_BY_MONEY, new org.apache.thrift.meta_data.FieldMetaData("marginRateByMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcRatioType")));
    tmpMap.put(_Fields.MARGIN_RATE_BY_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("marginRateByVolume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcRatioType")));
    tmpMap.put(_Fields.LAST_SETTLEMENT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("lastSettlementPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.SETTLEMENT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("settlementPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.CLOSE_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("closeVolume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcVolumeType")));
    tmpMap.put(_Fields.CLOSE_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("closeAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcInvestorPositionDetailField.class, metaDataMap);
  }

  public CThostFtdcInvestorPositionDetailField() {
  }

  public CThostFtdcInvestorPositionDetailField(
    String instrumentID,
    String brokerID,
    String investorID,
    String hedgeFlag,
    String direction,
    String openDate,
    String tradeID,
    int volume,
    double openPrice,
    String tradingDay,
    int settlementID,
    String tradeType,
    String combInstrumentID,
    String exchangeID,
    double closeProfitByDate,
    double closeProfitByTrade,
    double positionProfitByDate,
    double positionProfitByTrade,
    double margin,
    double exchMargin,
    double marginRateByMoney,
    double marginRateByVolume,
    double lastSettlementPrice,
    double settlementPrice,
    int closeVolume,
    double closeAmount)
  {
    this();
    this.instrumentID = instrumentID;
    this.brokerID = brokerID;
    this.investorID = investorID;
    this.hedgeFlag = hedgeFlag;
    this.direction = direction;
    this.openDate = openDate;
    this.tradeID = tradeID;
    this.volume = volume;
    setVolumeIsSet(true);
    this.openPrice = openPrice;
    setOpenPriceIsSet(true);
    this.tradingDay = tradingDay;
    this.settlementID = settlementID;
    setSettlementIDIsSet(true);
    this.tradeType = tradeType;
    this.combInstrumentID = combInstrumentID;
    this.exchangeID = exchangeID;
    this.closeProfitByDate = closeProfitByDate;
    setCloseProfitByDateIsSet(true);
    this.closeProfitByTrade = closeProfitByTrade;
    setCloseProfitByTradeIsSet(true);
    this.positionProfitByDate = positionProfitByDate;
    setPositionProfitByDateIsSet(true);
    this.positionProfitByTrade = positionProfitByTrade;
    setPositionProfitByTradeIsSet(true);
    this.margin = margin;
    setMarginIsSet(true);
    this.exchMargin = exchMargin;
    setExchMarginIsSet(true);
    this.marginRateByMoney = marginRateByMoney;
    setMarginRateByMoneyIsSet(true);
    this.marginRateByVolume = marginRateByVolume;
    setMarginRateByVolumeIsSet(true);
    this.lastSettlementPrice = lastSettlementPrice;
    setLastSettlementPriceIsSet(true);
    this.settlementPrice = settlementPrice;
    setSettlementPriceIsSet(true);
    this.closeVolume = closeVolume;
    setCloseVolumeIsSet(true);
    this.closeAmount = closeAmount;
    setCloseAmountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcInvestorPositionDetailField(CThostFtdcInvestorPositionDetailField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetInstrumentID()) {
      this.instrumentID = other.instrumentID;
    }
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetInvestorID()) {
      this.investorID = other.investorID;
    }
    if (other.isSetHedgeFlag()) {
      this.hedgeFlag = other.hedgeFlag;
    }
    if (other.isSetDirection()) {
      this.direction = other.direction;
    }
    if (other.isSetOpenDate()) {
      this.openDate = other.openDate;
    }
    if (other.isSetTradeID()) {
      this.tradeID = other.tradeID;
    }
    this.volume = other.volume;
    this.openPrice = other.openPrice;
    if (other.isSetTradingDay()) {
      this.tradingDay = other.tradingDay;
    }
    this.settlementID = other.settlementID;
    if (other.isSetTradeType()) {
      this.tradeType = other.tradeType;
    }
    if (other.isSetCombInstrumentID()) {
      this.combInstrumentID = other.combInstrumentID;
    }
    if (other.isSetExchangeID()) {
      this.exchangeID = other.exchangeID;
    }
    this.closeProfitByDate = other.closeProfitByDate;
    this.closeProfitByTrade = other.closeProfitByTrade;
    this.positionProfitByDate = other.positionProfitByDate;
    this.positionProfitByTrade = other.positionProfitByTrade;
    this.margin = other.margin;
    this.exchMargin = other.exchMargin;
    this.marginRateByMoney = other.marginRateByMoney;
    this.marginRateByVolume = other.marginRateByVolume;
    this.lastSettlementPrice = other.lastSettlementPrice;
    this.settlementPrice = other.settlementPrice;
    this.closeVolume = other.closeVolume;
    this.closeAmount = other.closeAmount;
  }

  public CThostFtdcInvestorPositionDetailField deepCopy() {
    return new CThostFtdcInvestorPositionDetailField(this);
  }

  @Override
  public void clear() {
    this.instrumentID = null;
    this.brokerID = null;
    this.investorID = null;
    this.hedgeFlag = null;
    this.direction = null;
    this.openDate = null;
    this.tradeID = null;
    setVolumeIsSet(false);
    this.volume = 0;
    setOpenPriceIsSet(false);
    this.openPrice = 0.0;
    this.tradingDay = null;
    setSettlementIDIsSet(false);
    this.settlementID = 0;
    this.tradeType = null;
    this.combInstrumentID = null;
    this.exchangeID = null;
    setCloseProfitByDateIsSet(false);
    this.closeProfitByDate = 0.0;
    setCloseProfitByTradeIsSet(false);
    this.closeProfitByTrade = 0.0;
    setPositionProfitByDateIsSet(false);
    this.positionProfitByDate = 0.0;
    setPositionProfitByTradeIsSet(false);
    this.positionProfitByTrade = 0.0;
    setMarginIsSet(false);
    this.margin = 0.0;
    setExchMarginIsSet(false);
    this.exchMargin = 0.0;
    setMarginRateByMoneyIsSet(false);
    this.marginRateByMoney = 0.0;
    setMarginRateByVolumeIsSet(false);
    this.marginRateByVolume = 0.0;
    setLastSettlementPriceIsSet(false);
    this.lastSettlementPrice = 0.0;
    setSettlementPriceIsSet(false);
    this.settlementPrice = 0.0;
    setCloseVolumeIsSet(false);
    this.closeVolume = 0;
    setCloseAmountIsSet(false);
    this.closeAmount = 0.0;
  }

  public String getInstrumentID() {
    return this.instrumentID;
  }

  public CThostFtdcInvestorPositionDetailField setInstrumentID(String instrumentID) {
    this.instrumentID = instrumentID;
    return this;
  }

  public void unsetInstrumentID() {
    this.instrumentID = null;
  }

  /** Returns true if field instrumentID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstrumentID() {
    return this.instrumentID != null;
  }

  public void setInstrumentIDIsSet(boolean value) {
    if (!value) {
      this.instrumentID = null;
    }
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcInvestorPositionDetailField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getInvestorID() {
    return this.investorID;
  }

  public CThostFtdcInvestorPositionDetailField setInvestorID(String investorID) {
    this.investorID = investorID;
    return this;
  }

  public void unsetInvestorID() {
    this.investorID = null;
  }

  /** Returns true if field investorID is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorID() {
    return this.investorID != null;
  }

  public void setInvestorIDIsSet(boolean value) {
    if (!value) {
      this.investorID = null;
    }
  }

  public String getHedgeFlag() {
    return this.hedgeFlag;
  }

  public CThostFtdcInvestorPositionDetailField setHedgeFlag(String hedgeFlag) {
    this.hedgeFlag = hedgeFlag;
    return this;
  }

  public void unsetHedgeFlag() {
    this.hedgeFlag = null;
  }

  /** Returns true if field hedgeFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetHedgeFlag() {
    return this.hedgeFlag != null;
  }

  public void setHedgeFlagIsSet(boolean value) {
    if (!value) {
      this.hedgeFlag = null;
    }
  }

  public String getDirection() {
    return this.direction;
  }

  public CThostFtdcInvestorPositionDetailField setDirection(String direction) {
    this.direction = direction;
    return this;
  }

  public void unsetDirection() {
    this.direction = null;
  }

  /** Returns true if field direction is set (has been assigned a value) and false otherwise */
  public boolean isSetDirection() {
    return this.direction != null;
  }

  public void setDirectionIsSet(boolean value) {
    if (!value) {
      this.direction = null;
    }
  }

  public String getOpenDate() {
    return this.openDate;
  }

  public CThostFtdcInvestorPositionDetailField setOpenDate(String openDate) {
    this.openDate = openDate;
    return this;
  }

  public void unsetOpenDate() {
    this.openDate = null;
  }

  /** Returns true if field openDate is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenDate() {
    return this.openDate != null;
  }

  public void setOpenDateIsSet(boolean value) {
    if (!value) {
      this.openDate = null;
    }
  }

  public String getTradeID() {
    return this.tradeID;
  }

  public CThostFtdcInvestorPositionDetailField setTradeID(String tradeID) {
    this.tradeID = tradeID;
    return this;
  }

  public void unsetTradeID() {
    this.tradeID = null;
  }

  /** Returns true if field tradeID is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeID() {
    return this.tradeID != null;
  }

  public void setTradeIDIsSet(boolean value) {
    if (!value) {
      this.tradeID = null;
    }
  }

  public int getVolume() {
    return this.volume;
  }

  public CThostFtdcInvestorPositionDetailField setVolume(int volume) {
    this.volume = volume;
    setVolumeIsSet(true);
    return this;
  }

  public void unsetVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLUME_ISSET_ID);
  }

  /** Returns true if field volume is set (has been assigned a value) and false otherwise */
  public boolean isSetVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __VOLUME_ISSET_ID);
  }

  public void setVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLUME_ISSET_ID, value);
  }

  public double getOpenPrice() {
    return this.openPrice;
  }

  public CThostFtdcInvestorPositionDetailField setOpenPrice(double openPrice) {
    this.openPrice = openPrice;
    setOpenPriceIsSet(true);
    return this;
  }

  public void unsetOpenPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPENPRICE_ISSET_ID);
  }

  /** Returns true if field openPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __OPENPRICE_ISSET_ID);
  }

  public void setOpenPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPENPRICE_ISSET_ID, value);
  }

  public String getTradingDay() {
    return this.tradingDay;
  }

  public CThostFtdcInvestorPositionDetailField setTradingDay(String tradingDay) {
    this.tradingDay = tradingDay;
    return this;
  }

  public void unsetTradingDay() {
    this.tradingDay = null;
  }

  /** Returns true if field tradingDay is set (has been assigned a value) and false otherwise */
  public boolean isSetTradingDay() {
    return this.tradingDay != null;
  }

  public void setTradingDayIsSet(boolean value) {
    if (!value) {
      this.tradingDay = null;
    }
  }

  public int getSettlementID() {
    return this.settlementID;
  }

  public CThostFtdcInvestorPositionDetailField setSettlementID(int settlementID) {
    this.settlementID = settlementID;
    setSettlementIDIsSet(true);
    return this;
  }

  public void unsetSettlementID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID);
  }

  /** Returns true if field settlementID is set (has been assigned a value) and false otherwise */
  public boolean isSetSettlementID() {
    return EncodingUtils.testBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID);
  }

  public void setSettlementIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID, value);
  }

  public String getTradeType() {
    return this.tradeType;
  }

  public CThostFtdcInvestorPositionDetailField setTradeType(String tradeType) {
    this.tradeType = tradeType;
    return this;
  }

  public void unsetTradeType() {
    this.tradeType = null;
  }

  /** Returns true if field tradeType is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeType() {
    return this.tradeType != null;
  }

  public void setTradeTypeIsSet(boolean value) {
    if (!value) {
      this.tradeType = null;
    }
  }

  public String getCombInstrumentID() {
    return this.combInstrumentID;
  }

  public CThostFtdcInvestorPositionDetailField setCombInstrumentID(String combInstrumentID) {
    this.combInstrumentID = combInstrumentID;
    return this;
  }

  public void unsetCombInstrumentID() {
    this.combInstrumentID = null;
  }

  /** Returns true if field combInstrumentID is set (has been assigned a value) and false otherwise */
  public boolean isSetCombInstrumentID() {
    return this.combInstrumentID != null;
  }

  public void setCombInstrumentIDIsSet(boolean value) {
    if (!value) {
      this.combInstrumentID = null;
    }
  }

  public String getExchangeID() {
    return this.exchangeID;
  }

  public CThostFtdcInvestorPositionDetailField setExchangeID(String exchangeID) {
    this.exchangeID = exchangeID;
    return this;
  }

  public void unsetExchangeID() {
    this.exchangeID = null;
  }

  /** Returns true if field exchangeID is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeID() {
    return this.exchangeID != null;
  }

  public void setExchangeIDIsSet(boolean value) {
    if (!value) {
      this.exchangeID = null;
    }
  }

  public double getCloseProfitByDate() {
    return this.closeProfitByDate;
  }

  public CThostFtdcInvestorPositionDetailField setCloseProfitByDate(double closeProfitByDate) {
    this.closeProfitByDate = closeProfitByDate;
    setCloseProfitByDateIsSet(true);
    return this;
  }

  public void unsetCloseProfitByDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSEPROFITBYDATE_ISSET_ID);
  }

  /** Returns true if field closeProfitByDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseProfitByDate() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSEPROFITBYDATE_ISSET_ID);
  }

  public void setCloseProfitByDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSEPROFITBYDATE_ISSET_ID, value);
  }

  public double getCloseProfitByTrade() {
    return this.closeProfitByTrade;
  }

  public CThostFtdcInvestorPositionDetailField setCloseProfitByTrade(double closeProfitByTrade) {
    this.closeProfitByTrade = closeProfitByTrade;
    setCloseProfitByTradeIsSet(true);
    return this;
  }

  public void unsetCloseProfitByTrade() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSEPROFITBYTRADE_ISSET_ID);
  }

  /** Returns true if field closeProfitByTrade is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseProfitByTrade() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSEPROFITBYTRADE_ISSET_ID);
  }

  public void setCloseProfitByTradeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSEPROFITBYTRADE_ISSET_ID, value);
  }

  public double getPositionProfitByDate() {
    return this.positionProfitByDate;
  }

  public CThostFtdcInvestorPositionDetailField setPositionProfitByDate(double positionProfitByDate) {
    this.positionProfitByDate = positionProfitByDate;
    setPositionProfitByDateIsSet(true);
    return this;
  }

  public void unsetPositionProfitByDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONPROFITBYDATE_ISSET_ID);
  }

  /** Returns true if field positionProfitByDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionProfitByDate() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONPROFITBYDATE_ISSET_ID);
  }

  public void setPositionProfitByDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONPROFITBYDATE_ISSET_ID, value);
  }

  public double getPositionProfitByTrade() {
    return this.positionProfitByTrade;
  }

  public CThostFtdcInvestorPositionDetailField setPositionProfitByTrade(double positionProfitByTrade) {
    this.positionProfitByTrade = positionProfitByTrade;
    setPositionProfitByTradeIsSet(true);
    return this;
  }

  public void unsetPositionProfitByTrade() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONPROFITBYTRADE_ISSET_ID);
  }

  /** Returns true if field positionProfitByTrade is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionProfitByTrade() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONPROFITBYTRADE_ISSET_ID);
  }

  public void setPositionProfitByTradeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONPROFITBYTRADE_ISSET_ID, value);
  }

  public double getMargin() {
    return this.margin;
  }

  public CThostFtdcInvestorPositionDetailField setMargin(double margin) {
    this.margin = margin;
    setMarginIsSet(true);
    return this;
  }

  public void unsetMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MARGIN_ISSET_ID);
  }

  /** Returns true if field margin is set (has been assigned a value) and false otherwise */
  public boolean isSetMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __MARGIN_ISSET_ID);
  }

  public void setMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MARGIN_ISSET_ID, value);
  }

  public double getExchMargin() {
    return this.exchMargin;
  }

  public CThostFtdcInvestorPositionDetailField setExchMargin(double exchMargin) {
    this.exchMargin = exchMargin;
    setExchMarginIsSet(true);
    return this;
  }

  public void unsetExchMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXCHMARGIN_ISSET_ID);
  }

  /** Returns true if field exchMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetExchMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __EXCHMARGIN_ISSET_ID);
  }

  public void setExchMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXCHMARGIN_ISSET_ID, value);
  }

  public double getMarginRateByMoney() {
    return this.marginRateByMoney;
  }

  public CThostFtdcInvestorPositionDetailField setMarginRateByMoney(double marginRateByMoney) {
    this.marginRateByMoney = marginRateByMoney;
    setMarginRateByMoneyIsSet(true);
    return this;
  }

  public void unsetMarginRateByMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MARGINRATEBYMONEY_ISSET_ID);
  }

  /** Returns true if field marginRateByMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetMarginRateByMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __MARGINRATEBYMONEY_ISSET_ID);
  }

  public void setMarginRateByMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MARGINRATEBYMONEY_ISSET_ID, value);
  }

  public double getMarginRateByVolume() {
    return this.marginRateByVolume;
  }

  public CThostFtdcInvestorPositionDetailField setMarginRateByVolume(double marginRateByVolume) {
    this.marginRateByVolume = marginRateByVolume;
    setMarginRateByVolumeIsSet(true);
    return this;
  }

  public void unsetMarginRateByVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MARGINRATEBYVOLUME_ISSET_ID);
  }

  /** Returns true if field marginRateByVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetMarginRateByVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __MARGINRATEBYVOLUME_ISSET_ID);
  }

  public void setMarginRateByVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MARGINRATEBYVOLUME_ISSET_ID, value);
  }

  public double getLastSettlementPrice() {
    return this.lastSettlementPrice;
  }

  public CThostFtdcInvestorPositionDetailField setLastSettlementPrice(double lastSettlementPrice) {
    this.lastSettlementPrice = lastSettlementPrice;
    setLastSettlementPriceIsSet(true);
    return this;
  }

  public void unsetLastSettlementPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTSETTLEMENTPRICE_ISSET_ID);
  }

  /** Returns true if field lastSettlementPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetLastSettlementPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTSETTLEMENTPRICE_ISSET_ID);
  }

  public void setLastSettlementPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTSETTLEMENTPRICE_ISSET_ID, value);
  }

  public double getSettlementPrice() {
    return this.settlementPrice;
  }

  public CThostFtdcInvestorPositionDetailField setSettlementPrice(double settlementPrice) {
    this.settlementPrice = settlementPrice;
    setSettlementPriceIsSet(true);
    return this;
  }

  public void unsetSettlementPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SETTLEMENTPRICE_ISSET_ID);
  }

  /** Returns true if field settlementPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetSettlementPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __SETTLEMENTPRICE_ISSET_ID);
  }

  public void setSettlementPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SETTLEMENTPRICE_ISSET_ID, value);
  }

  public int getCloseVolume() {
    return this.closeVolume;
  }

  public CThostFtdcInvestorPositionDetailField setCloseVolume(int closeVolume) {
    this.closeVolume = closeVolume;
    setCloseVolumeIsSet(true);
    return this;
  }

  public void unsetCloseVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSEVOLUME_ISSET_ID);
  }

  /** Returns true if field closeVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSEVOLUME_ISSET_ID);
  }

  public void setCloseVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSEVOLUME_ISSET_ID, value);
  }

  public double getCloseAmount() {
    return this.closeAmount;
  }

  public CThostFtdcInvestorPositionDetailField setCloseAmount(double closeAmount) {
    this.closeAmount = closeAmount;
    setCloseAmountIsSet(true);
    return this;
  }

  public void unsetCloseAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSEAMOUNT_ISSET_ID);
  }

  /** Returns true if field closeAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSEAMOUNT_ISSET_ID);
  }

  public void setCloseAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSEAMOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INSTRUMENT_ID:
      if (value == null) {
        unsetInstrumentID();
      } else {
        setInstrumentID((String)value);
      }
      break;

    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case INVESTOR_ID:
      if (value == null) {
        unsetInvestorID();
      } else {
        setInvestorID((String)value);
      }
      break;

    case HEDGE_FLAG:
      if (value == null) {
        unsetHedgeFlag();
      } else {
        setHedgeFlag((String)value);
      }
      break;

    case DIRECTION:
      if (value == null) {
        unsetDirection();
      } else {
        setDirection((String)value);
      }
      break;

    case OPEN_DATE:
      if (value == null) {
        unsetOpenDate();
      } else {
        setOpenDate((String)value);
      }
      break;

    case TRADE_ID:
      if (value == null) {
        unsetTradeID();
      } else {
        setTradeID((String)value);
      }
      break;

    case VOLUME:
      if (value == null) {
        unsetVolume();
      } else {
        setVolume((Integer)value);
      }
      break;

    case OPEN_PRICE:
      if (value == null) {
        unsetOpenPrice();
      } else {
        setOpenPrice((Double)value);
      }
      break;

    case TRADING_DAY:
      if (value == null) {
        unsetTradingDay();
      } else {
        setTradingDay((String)value);
      }
      break;

    case SETTLEMENT_ID:
      if (value == null) {
        unsetSettlementID();
      } else {
        setSettlementID((Integer)value);
      }
      break;

    case TRADE_TYPE:
      if (value == null) {
        unsetTradeType();
      } else {
        setTradeType((String)value);
      }
      break;

    case COMB_INSTRUMENT_ID:
      if (value == null) {
        unsetCombInstrumentID();
      } else {
        setCombInstrumentID((String)value);
      }
      break;

    case EXCHANGE_ID:
      if (value == null) {
        unsetExchangeID();
      } else {
        setExchangeID((String)value);
      }
      break;

    case CLOSE_PROFIT_BY_DATE:
      if (value == null) {
        unsetCloseProfitByDate();
      } else {
        setCloseProfitByDate((Double)value);
      }
      break;

    case CLOSE_PROFIT_BY_TRADE:
      if (value == null) {
        unsetCloseProfitByTrade();
      } else {
        setCloseProfitByTrade((Double)value);
      }
      break;

    case POSITION_PROFIT_BY_DATE:
      if (value == null) {
        unsetPositionProfitByDate();
      } else {
        setPositionProfitByDate((Double)value);
      }
      break;

    case POSITION_PROFIT_BY_TRADE:
      if (value == null) {
        unsetPositionProfitByTrade();
      } else {
        setPositionProfitByTrade((Double)value);
      }
      break;

    case MARGIN:
      if (value == null) {
        unsetMargin();
      } else {
        setMargin((Double)value);
      }
      break;

    case EXCH_MARGIN:
      if (value == null) {
        unsetExchMargin();
      } else {
        setExchMargin((Double)value);
      }
      break;

    case MARGIN_RATE_BY_MONEY:
      if (value == null) {
        unsetMarginRateByMoney();
      } else {
        setMarginRateByMoney((Double)value);
      }
      break;

    case MARGIN_RATE_BY_VOLUME:
      if (value == null) {
        unsetMarginRateByVolume();
      } else {
        setMarginRateByVolume((Double)value);
      }
      break;

    case LAST_SETTLEMENT_PRICE:
      if (value == null) {
        unsetLastSettlementPrice();
      } else {
        setLastSettlementPrice((Double)value);
      }
      break;

    case SETTLEMENT_PRICE:
      if (value == null) {
        unsetSettlementPrice();
      } else {
        setSettlementPrice((Double)value);
      }
      break;

    case CLOSE_VOLUME:
      if (value == null) {
        unsetCloseVolume();
      } else {
        setCloseVolume((Integer)value);
      }
      break;

    case CLOSE_AMOUNT:
      if (value == null) {
        unsetCloseAmount();
      } else {
        setCloseAmount((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INSTRUMENT_ID:
      return getInstrumentID();

    case BROKER_ID:
      return getBrokerID();

    case INVESTOR_ID:
      return getInvestorID();

    case HEDGE_FLAG:
      return getHedgeFlag();

    case DIRECTION:
      return getDirection();

    case OPEN_DATE:
      return getOpenDate();

    case TRADE_ID:
      return getTradeID();

    case VOLUME:
      return Integer.valueOf(getVolume());

    case OPEN_PRICE:
      return Double.valueOf(getOpenPrice());

    case TRADING_DAY:
      return getTradingDay();

    case SETTLEMENT_ID:
      return Integer.valueOf(getSettlementID());

    case TRADE_TYPE:
      return getTradeType();

    case COMB_INSTRUMENT_ID:
      return getCombInstrumentID();

    case EXCHANGE_ID:
      return getExchangeID();

    case CLOSE_PROFIT_BY_DATE:
      return Double.valueOf(getCloseProfitByDate());

    case CLOSE_PROFIT_BY_TRADE:
      return Double.valueOf(getCloseProfitByTrade());

    case POSITION_PROFIT_BY_DATE:
      return Double.valueOf(getPositionProfitByDate());

    case POSITION_PROFIT_BY_TRADE:
      return Double.valueOf(getPositionProfitByTrade());

    case MARGIN:
      return Double.valueOf(getMargin());

    case EXCH_MARGIN:
      return Double.valueOf(getExchMargin());

    case MARGIN_RATE_BY_MONEY:
      return Double.valueOf(getMarginRateByMoney());

    case MARGIN_RATE_BY_VOLUME:
      return Double.valueOf(getMarginRateByVolume());

    case LAST_SETTLEMENT_PRICE:
      return Double.valueOf(getLastSettlementPrice());

    case SETTLEMENT_PRICE:
      return Double.valueOf(getSettlementPrice());

    case CLOSE_VOLUME:
      return Integer.valueOf(getCloseVolume());

    case CLOSE_AMOUNT:
      return Double.valueOf(getCloseAmount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INSTRUMENT_ID:
      return isSetInstrumentID();
    case BROKER_ID:
      return isSetBrokerID();
    case INVESTOR_ID:
      return isSetInvestorID();
    case HEDGE_FLAG:
      return isSetHedgeFlag();
    case DIRECTION:
      return isSetDirection();
    case OPEN_DATE:
      return isSetOpenDate();
    case TRADE_ID:
      return isSetTradeID();
    case VOLUME:
      return isSetVolume();
    case OPEN_PRICE:
      return isSetOpenPrice();
    case TRADING_DAY:
      return isSetTradingDay();
    case SETTLEMENT_ID:
      return isSetSettlementID();
    case TRADE_TYPE:
      return isSetTradeType();
    case COMB_INSTRUMENT_ID:
      return isSetCombInstrumentID();
    case EXCHANGE_ID:
      return isSetExchangeID();
    case CLOSE_PROFIT_BY_DATE:
      return isSetCloseProfitByDate();
    case CLOSE_PROFIT_BY_TRADE:
      return isSetCloseProfitByTrade();
    case POSITION_PROFIT_BY_DATE:
      return isSetPositionProfitByDate();
    case POSITION_PROFIT_BY_TRADE:
      return isSetPositionProfitByTrade();
    case MARGIN:
      return isSetMargin();
    case EXCH_MARGIN:
      return isSetExchMargin();
    case MARGIN_RATE_BY_MONEY:
      return isSetMarginRateByMoney();
    case MARGIN_RATE_BY_VOLUME:
      return isSetMarginRateByVolume();
    case LAST_SETTLEMENT_PRICE:
      return isSetLastSettlementPrice();
    case SETTLEMENT_PRICE:
      return isSetSettlementPrice();
    case CLOSE_VOLUME:
      return isSetCloseVolume();
    case CLOSE_AMOUNT:
      return isSetCloseAmount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcInvestorPositionDetailField)
      return this.equals((CThostFtdcInvestorPositionDetailField)that);
    return false;
  }

  public boolean equals(CThostFtdcInvestorPositionDetailField that) {
    if (that == null)
      return false;

    boolean this_present_instrumentID = true && this.isSetInstrumentID();
    boolean that_present_instrumentID = true && that.isSetInstrumentID();
    if (this_present_instrumentID || that_present_instrumentID) {
      if (!(this_present_instrumentID && that_present_instrumentID))
        return false;
      if (!this.instrumentID.equals(that.instrumentID))
        return false;
    }

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_investorID = true && this.isSetInvestorID();
    boolean that_present_investorID = true && that.isSetInvestorID();
    if (this_present_investorID || that_present_investorID) {
      if (!(this_present_investorID && that_present_investorID))
        return false;
      if (!this.investorID.equals(that.investorID))
        return false;
    }

    boolean this_present_hedgeFlag = true && this.isSetHedgeFlag();
    boolean that_present_hedgeFlag = true && that.isSetHedgeFlag();
    if (this_present_hedgeFlag || that_present_hedgeFlag) {
      if (!(this_present_hedgeFlag && that_present_hedgeFlag))
        return false;
      if (!this.hedgeFlag.equals(that.hedgeFlag))
        return false;
    }

    boolean this_present_direction = true && this.isSetDirection();
    boolean that_present_direction = true && that.isSetDirection();
    if (this_present_direction || that_present_direction) {
      if (!(this_present_direction && that_present_direction))
        return false;
      if (!this.direction.equals(that.direction))
        return false;
    }

    boolean this_present_openDate = true && this.isSetOpenDate();
    boolean that_present_openDate = true && that.isSetOpenDate();
    if (this_present_openDate || that_present_openDate) {
      if (!(this_present_openDate && that_present_openDate))
        return false;
      if (!this.openDate.equals(that.openDate))
        return false;
    }

    boolean this_present_tradeID = true && this.isSetTradeID();
    boolean that_present_tradeID = true && that.isSetTradeID();
    if (this_present_tradeID || that_present_tradeID) {
      if (!(this_present_tradeID && that_present_tradeID))
        return false;
      if (!this.tradeID.equals(that.tradeID))
        return false;
    }

    boolean this_present_volume = true;
    boolean that_present_volume = true;
    if (this_present_volume || that_present_volume) {
      if (!(this_present_volume && that_present_volume))
        return false;
      if (this.volume != that.volume)
        return false;
    }

    boolean this_present_openPrice = true;
    boolean that_present_openPrice = true;
    if (this_present_openPrice || that_present_openPrice) {
      if (!(this_present_openPrice && that_present_openPrice))
        return false;
      if (this.openPrice != that.openPrice)
        return false;
    }

    boolean this_present_tradingDay = true && this.isSetTradingDay();
    boolean that_present_tradingDay = true && that.isSetTradingDay();
    if (this_present_tradingDay || that_present_tradingDay) {
      if (!(this_present_tradingDay && that_present_tradingDay))
        return false;
      if (!this.tradingDay.equals(that.tradingDay))
        return false;
    }

    boolean this_present_settlementID = true;
    boolean that_present_settlementID = true;
    if (this_present_settlementID || that_present_settlementID) {
      if (!(this_present_settlementID && that_present_settlementID))
        return false;
      if (this.settlementID != that.settlementID)
        return false;
    }

    boolean this_present_tradeType = true && this.isSetTradeType();
    boolean that_present_tradeType = true && that.isSetTradeType();
    if (this_present_tradeType || that_present_tradeType) {
      if (!(this_present_tradeType && that_present_tradeType))
        return false;
      if (!this.tradeType.equals(that.tradeType))
        return false;
    }

    boolean this_present_combInstrumentID = true && this.isSetCombInstrumentID();
    boolean that_present_combInstrumentID = true && that.isSetCombInstrumentID();
    if (this_present_combInstrumentID || that_present_combInstrumentID) {
      if (!(this_present_combInstrumentID && that_present_combInstrumentID))
        return false;
      if (!this.combInstrumentID.equals(that.combInstrumentID))
        return false;
    }

    boolean this_present_exchangeID = true && this.isSetExchangeID();
    boolean that_present_exchangeID = true && that.isSetExchangeID();
    if (this_present_exchangeID || that_present_exchangeID) {
      if (!(this_present_exchangeID && that_present_exchangeID))
        return false;
      if (!this.exchangeID.equals(that.exchangeID))
        return false;
    }

    boolean this_present_closeProfitByDate = true;
    boolean that_present_closeProfitByDate = true;
    if (this_present_closeProfitByDate || that_present_closeProfitByDate) {
      if (!(this_present_closeProfitByDate && that_present_closeProfitByDate))
        return false;
      if (this.closeProfitByDate != that.closeProfitByDate)
        return false;
    }

    boolean this_present_closeProfitByTrade = true;
    boolean that_present_closeProfitByTrade = true;
    if (this_present_closeProfitByTrade || that_present_closeProfitByTrade) {
      if (!(this_present_closeProfitByTrade && that_present_closeProfitByTrade))
        return false;
      if (this.closeProfitByTrade != that.closeProfitByTrade)
        return false;
    }

    boolean this_present_positionProfitByDate = true;
    boolean that_present_positionProfitByDate = true;
    if (this_present_positionProfitByDate || that_present_positionProfitByDate) {
      if (!(this_present_positionProfitByDate && that_present_positionProfitByDate))
        return false;
      if (this.positionProfitByDate != that.positionProfitByDate)
        return false;
    }

    boolean this_present_positionProfitByTrade = true;
    boolean that_present_positionProfitByTrade = true;
    if (this_present_positionProfitByTrade || that_present_positionProfitByTrade) {
      if (!(this_present_positionProfitByTrade && that_present_positionProfitByTrade))
        return false;
      if (this.positionProfitByTrade != that.positionProfitByTrade)
        return false;
    }

    boolean this_present_margin = true;
    boolean that_present_margin = true;
    if (this_present_margin || that_present_margin) {
      if (!(this_present_margin && that_present_margin))
        return false;
      if (this.margin != that.margin)
        return false;
    }

    boolean this_present_exchMargin = true;
    boolean that_present_exchMargin = true;
    if (this_present_exchMargin || that_present_exchMargin) {
      if (!(this_present_exchMargin && that_present_exchMargin))
        return false;
      if (this.exchMargin != that.exchMargin)
        return false;
    }

    boolean this_present_marginRateByMoney = true;
    boolean that_present_marginRateByMoney = true;
    if (this_present_marginRateByMoney || that_present_marginRateByMoney) {
      if (!(this_present_marginRateByMoney && that_present_marginRateByMoney))
        return false;
      if (this.marginRateByMoney != that.marginRateByMoney)
        return false;
    }

    boolean this_present_marginRateByVolume = true;
    boolean that_present_marginRateByVolume = true;
    if (this_present_marginRateByVolume || that_present_marginRateByVolume) {
      if (!(this_present_marginRateByVolume && that_present_marginRateByVolume))
        return false;
      if (this.marginRateByVolume != that.marginRateByVolume)
        return false;
    }

    boolean this_present_lastSettlementPrice = true;
    boolean that_present_lastSettlementPrice = true;
    if (this_present_lastSettlementPrice || that_present_lastSettlementPrice) {
      if (!(this_present_lastSettlementPrice && that_present_lastSettlementPrice))
        return false;
      if (this.lastSettlementPrice != that.lastSettlementPrice)
        return false;
    }

    boolean this_present_settlementPrice = true;
    boolean that_present_settlementPrice = true;
    if (this_present_settlementPrice || that_present_settlementPrice) {
      if (!(this_present_settlementPrice && that_present_settlementPrice))
        return false;
      if (this.settlementPrice != that.settlementPrice)
        return false;
    }

    boolean this_present_closeVolume = true;
    boolean that_present_closeVolume = true;
    if (this_present_closeVolume || that_present_closeVolume) {
      if (!(this_present_closeVolume && that_present_closeVolume))
        return false;
      if (this.closeVolume != that.closeVolume)
        return false;
    }

    boolean this_present_closeAmount = true;
    boolean that_present_closeAmount = true;
    if (this_present_closeAmount || that_present_closeAmount) {
      if (!(this_present_closeAmount && that_present_closeAmount))
        return false;
      if (this.closeAmount != that.closeAmount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcInvestorPositionDetailField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInstrumentID()).compareTo(other.isSetInstrumentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstrumentID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instrumentID, other.instrumentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestorID()).compareTo(other.isSetInvestorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorID, other.investorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHedgeFlag()).compareTo(other.isSetHedgeFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHedgeFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hedgeFlag, other.hedgeFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDirection()).compareTo(other.isSetDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direction, other.direction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenDate()).compareTo(other.isSetOpenDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openDate, other.openDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeID()).compareTo(other.isSetTradeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeID, other.tradeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolume()).compareTo(other.isSetVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volume, other.volume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenPrice()).compareTo(other.isSetOpenPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openPrice, other.openPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradingDay()).compareTo(other.isSetTradingDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradingDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradingDay, other.tradingDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettlementID()).compareTo(other.isSetSettlementID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettlementID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settlementID, other.settlementID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeType()).compareTo(other.isSetTradeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeType, other.tradeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCombInstrumentID()).compareTo(other.isSetCombInstrumentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCombInstrumentID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.combInstrumentID, other.combInstrumentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeID()).compareTo(other.isSetExchangeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeID, other.exchangeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseProfitByDate()).compareTo(other.isSetCloseProfitByDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseProfitByDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeProfitByDate, other.closeProfitByDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseProfitByTrade()).compareTo(other.isSetCloseProfitByTrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseProfitByTrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeProfitByTrade, other.closeProfitByTrade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionProfitByDate()).compareTo(other.isSetPositionProfitByDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionProfitByDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionProfitByDate, other.positionProfitByDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionProfitByTrade()).compareTo(other.isSetPositionProfitByTrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionProfitByTrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionProfitByTrade, other.positionProfitByTrade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMargin()).compareTo(other.isSetMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.margin, other.margin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchMargin()).compareTo(other.isSetExchMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchMargin, other.exchMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarginRateByMoney()).compareTo(other.isSetMarginRateByMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarginRateByMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marginRateByMoney, other.marginRateByMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarginRateByVolume()).compareTo(other.isSetMarginRateByVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarginRateByVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marginRateByVolume, other.marginRateByVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastSettlementPrice()).compareTo(other.isSetLastSettlementPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastSettlementPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastSettlementPrice, other.lastSettlementPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettlementPrice()).compareTo(other.isSetSettlementPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettlementPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settlementPrice, other.settlementPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseVolume()).compareTo(other.isSetCloseVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeVolume, other.closeVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseAmount()).compareTo(other.isSetCloseAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeAmount, other.closeAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcInvestorPositionDetailField(");
    boolean first = true;

    sb.append("instrumentID:");
    if (this.instrumentID == null) {
      sb.append("null");
    } else {
      sb.append(this.instrumentID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("investorID:");
    if (this.investorID == null) {
      sb.append("null");
    } else {
      sb.append(this.investorID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hedgeFlag:");
    if (this.hedgeFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.hedgeFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("direction:");
    if (this.direction == null) {
      sb.append("null");
    } else {
      sb.append(this.direction);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("openDate:");
    if (this.openDate == null) {
      sb.append("null");
    } else {
      sb.append(this.openDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeID:");
    if (this.tradeID == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("volume:");
    sb.append(this.volume);
    first = false;
    if (!first) sb.append(", ");
    sb.append("openPrice:");
    sb.append(this.openPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradingDay:");
    if (this.tradingDay == null) {
      sb.append("null");
    } else {
      sb.append(this.tradingDay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settlementID:");
    sb.append(this.settlementID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeType:");
    if (this.tradeType == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("combInstrumentID:");
    if (this.combInstrumentID == null) {
      sb.append("null");
    } else {
      sb.append(this.combInstrumentID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchangeID:");
    if (this.exchangeID == null) {
      sb.append("null");
    } else {
      sb.append(this.exchangeID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("closeProfitByDate:");
    sb.append(this.closeProfitByDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("closeProfitByTrade:");
    sb.append(this.closeProfitByTrade);
    first = false;
    if (!first) sb.append(", ");
    sb.append("positionProfitByDate:");
    sb.append(this.positionProfitByDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("positionProfitByTrade:");
    sb.append(this.positionProfitByTrade);
    first = false;
    if (!first) sb.append(", ");
    sb.append("margin:");
    sb.append(this.margin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchMargin:");
    sb.append(this.exchMargin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("marginRateByMoney:");
    sb.append(this.marginRateByMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("marginRateByVolume:");
    sb.append(this.marginRateByVolume);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastSettlementPrice:");
    sb.append(this.lastSettlementPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("settlementPrice:");
    sb.append(this.settlementPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("closeVolume:");
    sb.append(this.closeVolume);
    first = false;
    if (!first) sb.append(", ");
    sb.append("closeAmount:");
    sb.append(this.closeAmount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcInvestorPositionDetailFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcInvestorPositionDetailFieldStandardScheme getScheme() {
      return new CThostFtdcInvestorPositionDetailFieldStandardScheme();
    }
  }

  private static class CThostFtdcInvestorPositionDetailFieldStandardScheme extends StandardScheme<CThostFtdcInvestorPositionDetailField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcInvestorPositionDetailField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INSTRUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instrumentID = iprot.readString();
              struct.setInstrumentIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INVESTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorID = iprot.readString();
              struct.setInvestorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HEDGE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hedgeFlag = iprot.readString();
              struct.setHedgeFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.direction = iprot.readString();
              struct.setDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OPEN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.openDate = iprot.readString();
              struct.setOpenDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TRADE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeID = iprot.readString();
              struct.setTradeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.volume = iprot.readI32();
              struct.setVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OPEN_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.openPrice = iprot.readDouble();
              struct.setOpenPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TRADING_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradingDay = iprot.readString();
              struct.setTradingDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SETTLEMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.settlementID = iprot.readI32();
              struct.setSettlementIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TRADE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeType = iprot.readString();
              struct.setTradeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // COMB_INSTRUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.combInstrumentID = iprot.readString();
              struct.setCombInstrumentIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // EXCHANGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeID = iprot.readString();
              struct.setExchangeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CLOSE_PROFIT_BY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.closeProfitByDate = iprot.readDouble();
              struct.setCloseProfitByDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CLOSE_PROFIT_BY_TRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.closeProfitByTrade = iprot.readDouble();
              struct.setCloseProfitByTradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // POSITION_PROFIT_BY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.positionProfitByDate = iprot.readDouble();
              struct.setPositionProfitByDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // POSITION_PROFIT_BY_TRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.positionProfitByTrade = iprot.readDouble();
              struct.setPositionProfitByTradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.margin = iprot.readDouble();
              struct.setMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // EXCH_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.exchMargin = iprot.readDouble();
              struct.setExchMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // MARGIN_RATE_BY_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.marginRateByMoney = iprot.readDouble();
              struct.setMarginRateByMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // MARGIN_RATE_BY_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.marginRateByVolume = iprot.readDouble();
              struct.setMarginRateByVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // LAST_SETTLEMENT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lastSettlementPrice = iprot.readDouble();
              struct.setLastSettlementPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // SETTLEMENT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.settlementPrice = iprot.readDouble();
              struct.setSettlementPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // CLOSE_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.closeVolume = iprot.readI32();
              struct.setCloseVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // CLOSE_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.closeAmount = iprot.readDouble();
              struct.setCloseAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcInvestorPositionDetailField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.instrumentID != null) {
        oprot.writeFieldBegin(INSTRUMENT_ID_FIELD_DESC);
        oprot.writeString(struct.instrumentID);
        oprot.writeFieldEnd();
      }
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.investorID != null) {
        oprot.writeFieldBegin(INVESTOR_ID_FIELD_DESC);
        oprot.writeString(struct.investorID);
        oprot.writeFieldEnd();
      }
      if (struct.hedgeFlag != null) {
        oprot.writeFieldBegin(HEDGE_FLAG_FIELD_DESC);
        oprot.writeString(struct.hedgeFlag);
        oprot.writeFieldEnd();
      }
      if (struct.direction != null) {
        oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
        oprot.writeString(struct.direction);
        oprot.writeFieldEnd();
      }
      if (struct.openDate != null) {
        oprot.writeFieldBegin(OPEN_DATE_FIELD_DESC);
        oprot.writeString(struct.openDate);
        oprot.writeFieldEnd();
      }
      if (struct.tradeID != null) {
        oprot.writeFieldBegin(TRADE_ID_FIELD_DESC);
        oprot.writeString(struct.tradeID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VOLUME_FIELD_DESC);
      oprot.writeI32(struct.volume);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPEN_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.openPrice);
      oprot.writeFieldEnd();
      if (struct.tradingDay != null) {
        oprot.writeFieldBegin(TRADING_DAY_FIELD_DESC);
        oprot.writeString(struct.tradingDay);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SETTLEMENT_ID_FIELD_DESC);
      oprot.writeI32(struct.settlementID);
      oprot.writeFieldEnd();
      if (struct.tradeType != null) {
        oprot.writeFieldBegin(TRADE_TYPE_FIELD_DESC);
        oprot.writeString(struct.tradeType);
        oprot.writeFieldEnd();
      }
      if (struct.combInstrumentID != null) {
        oprot.writeFieldBegin(COMB_INSTRUMENT_ID_FIELD_DESC);
        oprot.writeString(struct.combInstrumentID);
        oprot.writeFieldEnd();
      }
      if (struct.exchangeID != null) {
        oprot.writeFieldBegin(EXCHANGE_ID_FIELD_DESC);
        oprot.writeString(struct.exchangeID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CLOSE_PROFIT_BY_DATE_FIELD_DESC);
      oprot.writeDouble(struct.closeProfitByDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CLOSE_PROFIT_BY_TRADE_FIELD_DESC);
      oprot.writeDouble(struct.closeProfitByTrade);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POSITION_PROFIT_BY_DATE_FIELD_DESC);
      oprot.writeDouble(struct.positionProfitByDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POSITION_PROFIT_BY_TRADE_FIELD_DESC);
      oprot.writeDouble(struct.positionProfitByTrade);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MARGIN_FIELD_DESC);
      oprot.writeDouble(struct.margin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXCH_MARGIN_FIELD_DESC);
      oprot.writeDouble(struct.exchMargin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MARGIN_RATE_BY_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.marginRateByMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MARGIN_RATE_BY_VOLUME_FIELD_DESC);
      oprot.writeDouble(struct.marginRateByVolume);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_SETTLEMENT_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.lastSettlementPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SETTLEMENT_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.settlementPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CLOSE_VOLUME_FIELD_DESC);
      oprot.writeI32(struct.closeVolume);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CLOSE_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.closeAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcInvestorPositionDetailFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcInvestorPositionDetailFieldTupleScheme getScheme() {
      return new CThostFtdcInvestorPositionDetailFieldTupleScheme();
    }
  }

  private static class CThostFtdcInvestorPositionDetailFieldTupleScheme extends TupleScheme<CThostFtdcInvestorPositionDetailField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcInvestorPositionDetailField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInstrumentID()) {
        optionals.set(0);
      }
      if (struct.isSetBrokerID()) {
        optionals.set(1);
      }
      if (struct.isSetInvestorID()) {
        optionals.set(2);
      }
      if (struct.isSetHedgeFlag()) {
        optionals.set(3);
      }
      if (struct.isSetDirection()) {
        optionals.set(4);
      }
      if (struct.isSetOpenDate()) {
        optionals.set(5);
      }
      if (struct.isSetTradeID()) {
        optionals.set(6);
      }
      if (struct.isSetVolume()) {
        optionals.set(7);
      }
      if (struct.isSetOpenPrice()) {
        optionals.set(8);
      }
      if (struct.isSetTradingDay()) {
        optionals.set(9);
      }
      if (struct.isSetSettlementID()) {
        optionals.set(10);
      }
      if (struct.isSetTradeType()) {
        optionals.set(11);
      }
      if (struct.isSetCombInstrumentID()) {
        optionals.set(12);
      }
      if (struct.isSetExchangeID()) {
        optionals.set(13);
      }
      if (struct.isSetCloseProfitByDate()) {
        optionals.set(14);
      }
      if (struct.isSetCloseProfitByTrade()) {
        optionals.set(15);
      }
      if (struct.isSetPositionProfitByDate()) {
        optionals.set(16);
      }
      if (struct.isSetPositionProfitByTrade()) {
        optionals.set(17);
      }
      if (struct.isSetMargin()) {
        optionals.set(18);
      }
      if (struct.isSetExchMargin()) {
        optionals.set(19);
      }
      if (struct.isSetMarginRateByMoney()) {
        optionals.set(20);
      }
      if (struct.isSetMarginRateByVolume()) {
        optionals.set(21);
      }
      if (struct.isSetLastSettlementPrice()) {
        optionals.set(22);
      }
      if (struct.isSetSettlementPrice()) {
        optionals.set(23);
      }
      if (struct.isSetCloseVolume()) {
        optionals.set(24);
      }
      if (struct.isSetCloseAmount()) {
        optionals.set(25);
      }
      oprot.writeBitSet(optionals, 26);
      if (struct.isSetInstrumentID()) {
        oprot.writeString(struct.instrumentID);
      }
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetInvestorID()) {
        oprot.writeString(struct.investorID);
      }
      if (struct.isSetHedgeFlag()) {
        oprot.writeString(struct.hedgeFlag);
      }
      if (struct.isSetDirection()) {
        oprot.writeString(struct.direction);
      }
      if (struct.isSetOpenDate()) {
        oprot.writeString(struct.openDate);
      }
      if (struct.isSetTradeID()) {
        oprot.writeString(struct.tradeID);
      }
      if (struct.isSetVolume()) {
        oprot.writeI32(struct.volume);
      }
      if (struct.isSetOpenPrice()) {
        oprot.writeDouble(struct.openPrice);
      }
      if (struct.isSetTradingDay()) {
        oprot.writeString(struct.tradingDay);
      }
      if (struct.isSetSettlementID()) {
        oprot.writeI32(struct.settlementID);
      }
      if (struct.isSetTradeType()) {
        oprot.writeString(struct.tradeType);
      }
      if (struct.isSetCombInstrumentID()) {
        oprot.writeString(struct.combInstrumentID);
      }
      if (struct.isSetExchangeID()) {
        oprot.writeString(struct.exchangeID);
      }
      if (struct.isSetCloseProfitByDate()) {
        oprot.writeDouble(struct.closeProfitByDate);
      }
      if (struct.isSetCloseProfitByTrade()) {
        oprot.writeDouble(struct.closeProfitByTrade);
      }
      if (struct.isSetPositionProfitByDate()) {
        oprot.writeDouble(struct.positionProfitByDate);
      }
      if (struct.isSetPositionProfitByTrade()) {
        oprot.writeDouble(struct.positionProfitByTrade);
      }
      if (struct.isSetMargin()) {
        oprot.writeDouble(struct.margin);
      }
      if (struct.isSetExchMargin()) {
        oprot.writeDouble(struct.exchMargin);
      }
      if (struct.isSetMarginRateByMoney()) {
        oprot.writeDouble(struct.marginRateByMoney);
      }
      if (struct.isSetMarginRateByVolume()) {
        oprot.writeDouble(struct.marginRateByVolume);
      }
      if (struct.isSetLastSettlementPrice()) {
        oprot.writeDouble(struct.lastSettlementPrice);
      }
      if (struct.isSetSettlementPrice()) {
        oprot.writeDouble(struct.settlementPrice);
      }
      if (struct.isSetCloseVolume()) {
        oprot.writeI32(struct.closeVolume);
      }
      if (struct.isSetCloseAmount()) {
        oprot.writeDouble(struct.closeAmount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcInvestorPositionDetailField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(26);
      if (incoming.get(0)) {
        struct.instrumentID = iprot.readString();
        struct.setInstrumentIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.investorID = iprot.readString();
        struct.setInvestorIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.hedgeFlag = iprot.readString();
        struct.setHedgeFlagIsSet(true);
      }
      if (incoming.get(4)) {
        struct.direction = iprot.readString();
        struct.setDirectionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.openDate = iprot.readString();
        struct.setOpenDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.tradeID = iprot.readString();
        struct.setTradeIDIsSet(true);
      }
      if (incoming.get(7)) {
        struct.volume = iprot.readI32();
        struct.setVolumeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.openPrice = iprot.readDouble();
        struct.setOpenPriceIsSet(true);
      }
      if (incoming.get(9)) {
        struct.tradingDay = iprot.readString();
        struct.setTradingDayIsSet(true);
      }
      if (incoming.get(10)) {
        struct.settlementID = iprot.readI32();
        struct.setSettlementIDIsSet(true);
      }
      if (incoming.get(11)) {
        struct.tradeType = iprot.readString();
        struct.setTradeTypeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.combInstrumentID = iprot.readString();
        struct.setCombInstrumentIDIsSet(true);
      }
      if (incoming.get(13)) {
        struct.exchangeID = iprot.readString();
        struct.setExchangeIDIsSet(true);
      }
      if (incoming.get(14)) {
        struct.closeProfitByDate = iprot.readDouble();
        struct.setCloseProfitByDateIsSet(true);
      }
      if (incoming.get(15)) {
        struct.closeProfitByTrade = iprot.readDouble();
        struct.setCloseProfitByTradeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.positionProfitByDate = iprot.readDouble();
        struct.setPositionProfitByDateIsSet(true);
      }
      if (incoming.get(17)) {
        struct.positionProfitByTrade = iprot.readDouble();
        struct.setPositionProfitByTradeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.margin = iprot.readDouble();
        struct.setMarginIsSet(true);
      }
      if (incoming.get(19)) {
        struct.exchMargin = iprot.readDouble();
        struct.setExchMarginIsSet(true);
      }
      if (incoming.get(20)) {
        struct.marginRateByMoney = iprot.readDouble();
        struct.setMarginRateByMoneyIsSet(true);
      }
      if (incoming.get(21)) {
        struct.marginRateByVolume = iprot.readDouble();
        struct.setMarginRateByVolumeIsSet(true);
      }
      if (incoming.get(22)) {
        struct.lastSettlementPrice = iprot.readDouble();
        struct.setLastSettlementPriceIsSet(true);
      }
      if (incoming.get(23)) {
        struct.settlementPrice = iprot.readDouble();
        struct.setSettlementPriceIsSet(true);
      }
      if (incoming.get(24)) {
        struct.closeVolume = iprot.readI32();
        struct.setCloseVolumeIsSet(true);
      }
      if (incoming.get(25)) {
        struct.closeAmount = iprot.readDouble();
        struct.setCloseAmountIsSet(true);
      }
    }
  }

}

