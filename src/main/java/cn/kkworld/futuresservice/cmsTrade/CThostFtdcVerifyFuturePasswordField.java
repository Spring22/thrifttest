/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcVerifyFuturePasswordField implements org.apache.thrift.TBase<CThostFtdcVerifyFuturePasswordField, CThostFtdcVerifyFuturePasswordField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcVerifyFuturePasswordField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcVerifyFuturePasswordField");

  private static final org.apache.thrift.protocol.TField TRADE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BANK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BANK_BRANCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankBranchID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BROKER_BRANCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerBranchID", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TRADE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeDate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TRADE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BANK_SERIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("bankSerial", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TRADING_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("tradingDay", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PLATE_SERIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("plateSerial", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField LAST_FRAGMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("lastFragment", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountID", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField BANK_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("bankAccount", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField BANK_PASS_WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("bankPassWord", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField INSTALL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("installID", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField T_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tID", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField CURRENCY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("currencyID", org.apache.thrift.protocol.TType.STRING, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcVerifyFuturePasswordFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcVerifyFuturePasswordFieldTupleSchemeFactory());
  }

  public String tradeCode; // required
  public String bankID; // required
  public String bankBranchID; // required
  public String brokerID; // required
  public String brokerBranchID; // required
  public String tradeDate; // required
  public String tradeTime; // required
  public String bankSerial; // required
  public String tradingDay; // required
  public int plateSerial; // required
  public String lastFragment; // required
  public int sessionID; // required
  public String accountID; // required
  public String password; // required
  public String bankAccount; // required
  public String bankPassWord; // required
  public int installID; // required
  public int tID; // required
  public String currencyID; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRADE_CODE((short)1, "tradeCode"),
    BANK_ID((short)2, "bankID"),
    BANK_BRANCH_ID((short)3, "bankBranchID"),
    BROKER_ID((short)4, "brokerID"),
    BROKER_BRANCH_ID((short)5, "brokerBranchID"),
    TRADE_DATE((short)6, "tradeDate"),
    TRADE_TIME((short)7, "tradeTime"),
    BANK_SERIAL((short)8, "bankSerial"),
    TRADING_DAY((short)9, "tradingDay"),
    PLATE_SERIAL((short)10, "plateSerial"),
    LAST_FRAGMENT((short)11, "lastFragment"),
    SESSION_ID((short)12, "sessionID"),
    ACCOUNT_ID((short)13, "accountID"),
    PASSWORD((short)14, "password"),
    BANK_ACCOUNT((short)15, "bankAccount"),
    BANK_PASS_WORD((short)16, "bankPassWord"),
    INSTALL_ID((short)17, "installID"),
    T_ID((short)18, "tID"),
    CURRENCY_ID((short)19, "currencyID");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRADE_CODE
          return TRADE_CODE;
        case 2: // BANK_ID
          return BANK_ID;
        case 3: // BANK_BRANCH_ID
          return BANK_BRANCH_ID;
        case 4: // BROKER_ID
          return BROKER_ID;
        case 5: // BROKER_BRANCH_ID
          return BROKER_BRANCH_ID;
        case 6: // TRADE_DATE
          return TRADE_DATE;
        case 7: // TRADE_TIME
          return TRADE_TIME;
        case 8: // BANK_SERIAL
          return BANK_SERIAL;
        case 9: // TRADING_DAY
          return TRADING_DAY;
        case 10: // PLATE_SERIAL
          return PLATE_SERIAL;
        case 11: // LAST_FRAGMENT
          return LAST_FRAGMENT;
        case 12: // SESSION_ID
          return SESSION_ID;
        case 13: // ACCOUNT_ID
          return ACCOUNT_ID;
        case 14: // PASSWORD
          return PASSWORD;
        case 15: // BANK_ACCOUNT
          return BANK_ACCOUNT;
        case 16: // BANK_PASS_WORD
          return BANK_PASS_WORD;
        case 17: // INSTALL_ID
          return INSTALL_ID;
        case 18: // T_ID
          return T_ID;
        case 19: // CURRENCY_ID
          return CURRENCY_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PLATESERIAL_ISSET_ID = 0;
  private static final int __SESSIONID_ISSET_ID = 1;
  private static final int __INSTALLID_ISSET_ID = 2;
  private static final int __TID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRADE_CODE, new org.apache.thrift.meta_data.FieldMetaData("tradeCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeCodeType")));
    tmpMap.put(_Fields.BANK_ID, new org.apache.thrift.meta_data.FieldMetaData("bankID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankIDType")));
    tmpMap.put(_Fields.BANK_BRANCH_ID, new org.apache.thrift.meta_data.FieldMetaData("bankBranchID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankBrchIDType")));
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.BROKER_BRANCH_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerBranchID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcFutureBranchIDType")));
    tmpMap.put(_Fields.TRADE_DATE, new org.apache.thrift.meta_data.FieldMetaData("tradeDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeDateType")));
    tmpMap.put(_Fields.TRADE_TIME, new org.apache.thrift.meta_data.FieldMetaData("tradeTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeTimeType")));
    tmpMap.put(_Fields.BANK_SERIAL, new org.apache.thrift.meta_data.FieldMetaData("bankSerial", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankSerialType")));
    tmpMap.put(_Fields.TRADING_DAY, new org.apache.thrift.meta_data.FieldMetaData("tradingDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeDateType")));
    tmpMap.put(_Fields.PLATE_SERIAL, new org.apache.thrift.meta_data.FieldMetaData("plateSerial", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcSerialType")));
    tmpMap.put(_Fields.LAST_FRAGMENT, new org.apache.thrift.meta_data.FieldMetaData("lastFragment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcLastFragmentType")));
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcSessionIDType")));
    tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcAccountIDType")));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcPasswordType")));
    tmpMap.put(_Fields.BANK_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("bankAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankAccountType")));
    tmpMap.put(_Fields.BANK_PASS_WORD, new org.apache.thrift.meta_data.FieldMetaData("bankPassWord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcPasswordType")));
    tmpMap.put(_Fields.INSTALL_ID, new org.apache.thrift.meta_data.FieldMetaData("installID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcInstallIDType")));
    tmpMap.put(_Fields.T_ID, new org.apache.thrift.meta_data.FieldMetaData("tID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcTIDType")));
    tmpMap.put(_Fields.CURRENCY_ID, new org.apache.thrift.meta_data.FieldMetaData("currencyID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcCurrencyIDType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcVerifyFuturePasswordField.class, metaDataMap);
  }

  public CThostFtdcVerifyFuturePasswordField() {
  }

  public CThostFtdcVerifyFuturePasswordField(
    String tradeCode,
    String bankID,
    String bankBranchID,
    String brokerID,
    String brokerBranchID,
    String tradeDate,
    String tradeTime,
    String bankSerial,
    String tradingDay,
    int plateSerial,
    String lastFragment,
    int sessionID,
    String accountID,
    String password,
    String bankAccount,
    String bankPassWord,
    int installID,
    int tID,
    String currencyID)
  {
    this();
    this.tradeCode = tradeCode;
    this.bankID = bankID;
    this.bankBranchID = bankBranchID;
    this.brokerID = brokerID;
    this.brokerBranchID = brokerBranchID;
    this.tradeDate = tradeDate;
    this.tradeTime = tradeTime;
    this.bankSerial = bankSerial;
    this.tradingDay = tradingDay;
    this.plateSerial = plateSerial;
    setPlateSerialIsSet(true);
    this.lastFragment = lastFragment;
    this.sessionID = sessionID;
    setSessionIDIsSet(true);
    this.accountID = accountID;
    this.password = password;
    this.bankAccount = bankAccount;
    this.bankPassWord = bankPassWord;
    this.installID = installID;
    setInstallIDIsSet(true);
    this.tID = tID;
    setTIDIsSet(true);
    this.currencyID = currencyID;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcVerifyFuturePasswordField(CThostFtdcVerifyFuturePasswordField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTradeCode()) {
      this.tradeCode = other.tradeCode;
    }
    if (other.isSetBankID()) {
      this.bankID = other.bankID;
    }
    if (other.isSetBankBranchID()) {
      this.bankBranchID = other.bankBranchID;
    }
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetBrokerBranchID()) {
      this.brokerBranchID = other.brokerBranchID;
    }
    if (other.isSetTradeDate()) {
      this.tradeDate = other.tradeDate;
    }
    if (other.isSetTradeTime()) {
      this.tradeTime = other.tradeTime;
    }
    if (other.isSetBankSerial()) {
      this.bankSerial = other.bankSerial;
    }
    if (other.isSetTradingDay()) {
      this.tradingDay = other.tradingDay;
    }
    this.plateSerial = other.plateSerial;
    if (other.isSetLastFragment()) {
      this.lastFragment = other.lastFragment;
    }
    this.sessionID = other.sessionID;
    if (other.isSetAccountID()) {
      this.accountID = other.accountID;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetBankAccount()) {
      this.bankAccount = other.bankAccount;
    }
    if (other.isSetBankPassWord()) {
      this.bankPassWord = other.bankPassWord;
    }
    this.installID = other.installID;
    this.tID = other.tID;
    if (other.isSetCurrencyID()) {
      this.currencyID = other.currencyID;
    }
  }

  public CThostFtdcVerifyFuturePasswordField deepCopy() {
    return new CThostFtdcVerifyFuturePasswordField(this);
  }

  @Override
  public void clear() {
    this.tradeCode = null;
    this.bankID = null;
    this.bankBranchID = null;
    this.brokerID = null;
    this.brokerBranchID = null;
    this.tradeDate = null;
    this.tradeTime = null;
    this.bankSerial = null;
    this.tradingDay = null;
    setPlateSerialIsSet(false);
    this.plateSerial = 0;
    this.lastFragment = null;
    setSessionIDIsSet(false);
    this.sessionID = 0;
    this.accountID = null;
    this.password = null;
    this.bankAccount = null;
    this.bankPassWord = null;
    setInstallIDIsSet(false);
    this.installID = 0;
    setTIDIsSet(false);
    this.tID = 0;
    this.currencyID = null;
  }

  public String getTradeCode() {
    return this.tradeCode;
  }

  public CThostFtdcVerifyFuturePasswordField setTradeCode(String tradeCode) {
    this.tradeCode = tradeCode;
    return this;
  }

  public void unsetTradeCode() {
    this.tradeCode = null;
  }

  /** Returns true if field tradeCode is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeCode() {
    return this.tradeCode != null;
  }

  public void setTradeCodeIsSet(boolean value) {
    if (!value) {
      this.tradeCode = null;
    }
  }

  public String getBankID() {
    return this.bankID;
  }

  public CThostFtdcVerifyFuturePasswordField setBankID(String bankID) {
    this.bankID = bankID;
    return this;
  }

  public void unsetBankID() {
    this.bankID = null;
  }

  /** Returns true if field bankID is set (has been assigned a value) and false otherwise */
  public boolean isSetBankID() {
    return this.bankID != null;
  }

  public void setBankIDIsSet(boolean value) {
    if (!value) {
      this.bankID = null;
    }
  }

  public String getBankBranchID() {
    return this.bankBranchID;
  }

  public CThostFtdcVerifyFuturePasswordField setBankBranchID(String bankBranchID) {
    this.bankBranchID = bankBranchID;
    return this;
  }

  public void unsetBankBranchID() {
    this.bankBranchID = null;
  }

  /** Returns true if field bankBranchID is set (has been assigned a value) and false otherwise */
  public boolean isSetBankBranchID() {
    return this.bankBranchID != null;
  }

  public void setBankBranchIDIsSet(boolean value) {
    if (!value) {
      this.bankBranchID = null;
    }
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcVerifyFuturePasswordField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getBrokerBranchID() {
    return this.brokerBranchID;
  }

  public CThostFtdcVerifyFuturePasswordField setBrokerBranchID(String brokerBranchID) {
    this.brokerBranchID = brokerBranchID;
    return this;
  }

  public void unsetBrokerBranchID() {
    this.brokerBranchID = null;
  }

  /** Returns true if field brokerBranchID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerBranchID() {
    return this.brokerBranchID != null;
  }

  public void setBrokerBranchIDIsSet(boolean value) {
    if (!value) {
      this.brokerBranchID = null;
    }
  }

  public String getTradeDate() {
    return this.tradeDate;
  }

  public CThostFtdcVerifyFuturePasswordField setTradeDate(String tradeDate) {
    this.tradeDate = tradeDate;
    return this;
  }

  public void unsetTradeDate() {
    this.tradeDate = null;
  }

  /** Returns true if field tradeDate is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeDate() {
    return this.tradeDate != null;
  }

  public void setTradeDateIsSet(boolean value) {
    if (!value) {
      this.tradeDate = null;
    }
  }

  public String getTradeTime() {
    return this.tradeTime;
  }

  public CThostFtdcVerifyFuturePasswordField setTradeTime(String tradeTime) {
    this.tradeTime = tradeTime;
    return this;
  }

  public void unsetTradeTime() {
    this.tradeTime = null;
  }

  /** Returns true if field tradeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeTime() {
    return this.tradeTime != null;
  }

  public void setTradeTimeIsSet(boolean value) {
    if (!value) {
      this.tradeTime = null;
    }
  }

  public String getBankSerial() {
    return this.bankSerial;
  }

  public CThostFtdcVerifyFuturePasswordField setBankSerial(String bankSerial) {
    this.bankSerial = bankSerial;
    return this;
  }

  public void unsetBankSerial() {
    this.bankSerial = null;
  }

  /** Returns true if field bankSerial is set (has been assigned a value) and false otherwise */
  public boolean isSetBankSerial() {
    return this.bankSerial != null;
  }

  public void setBankSerialIsSet(boolean value) {
    if (!value) {
      this.bankSerial = null;
    }
  }

  public String getTradingDay() {
    return this.tradingDay;
  }

  public CThostFtdcVerifyFuturePasswordField setTradingDay(String tradingDay) {
    this.tradingDay = tradingDay;
    return this;
  }

  public void unsetTradingDay() {
    this.tradingDay = null;
  }

  /** Returns true if field tradingDay is set (has been assigned a value) and false otherwise */
  public boolean isSetTradingDay() {
    return this.tradingDay != null;
  }

  public void setTradingDayIsSet(boolean value) {
    if (!value) {
      this.tradingDay = null;
    }
  }

  public int getPlateSerial() {
    return this.plateSerial;
  }

  public CThostFtdcVerifyFuturePasswordField setPlateSerial(int plateSerial) {
    this.plateSerial = plateSerial;
    setPlateSerialIsSet(true);
    return this;
  }

  public void unsetPlateSerial() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLATESERIAL_ISSET_ID);
  }

  /** Returns true if field plateSerial is set (has been assigned a value) and false otherwise */
  public boolean isSetPlateSerial() {
    return EncodingUtils.testBit(__isset_bitfield, __PLATESERIAL_ISSET_ID);
  }

  public void setPlateSerialIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLATESERIAL_ISSET_ID, value);
  }

  public String getLastFragment() {
    return this.lastFragment;
  }

  public CThostFtdcVerifyFuturePasswordField setLastFragment(String lastFragment) {
    this.lastFragment = lastFragment;
    return this;
  }

  public void unsetLastFragment() {
    this.lastFragment = null;
  }

  /** Returns true if field lastFragment is set (has been assigned a value) and false otherwise */
  public boolean isSetLastFragment() {
    return this.lastFragment != null;
  }

  public void setLastFragmentIsSet(boolean value) {
    if (!value) {
      this.lastFragment = null;
    }
  }

  public int getSessionID() {
    return this.sessionID;
  }

  public CThostFtdcVerifyFuturePasswordField setSessionID(int sessionID) {
    this.sessionID = sessionID;
    setSessionIDIsSet(true);
    return this;
  }

  public void unsetSessionID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionID() {
    return EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  public void setSessionIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
  }

  public String getAccountID() {
    return this.accountID;
  }

  public CThostFtdcVerifyFuturePasswordField setAccountID(String accountID) {
    this.accountID = accountID;
    return this;
  }

  public void unsetAccountID() {
    this.accountID = null;
  }

  /** Returns true if field accountID is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountID() {
    return this.accountID != null;
  }

  public void setAccountIDIsSet(boolean value) {
    if (!value) {
      this.accountID = null;
    }
  }

  public String getPassword() {
    return this.password;
  }

  public CThostFtdcVerifyFuturePasswordField setPassword(String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public String getBankAccount() {
    return this.bankAccount;
  }

  public CThostFtdcVerifyFuturePasswordField setBankAccount(String bankAccount) {
    this.bankAccount = bankAccount;
    return this;
  }

  public void unsetBankAccount() {
    this.bankAccount = null;
  }

  /** Returns true if field bankAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetBankAccount() {
    return this.bankAccount != null;
  }

  public void setBankAccountIsSet(boolean value) {
    if (!value) {
      this.bankAccount = null;
    }
  }

  public String getBankPassWord() {
    return this.bankPassWord;
  }

  public CThostFtdcVerifyFuturePasswordField setBankPassWord(String bankPassWord) {
    this.bankPassWord = bankPassWord;
    return this;
  }

  public void unsetBankPassWord() {
    this.bankPassWord = null;
  }

  /** Returns true if field bankPassWord is set (has been assigned a value) and false otherwise */
  public boolean isSetBankPassWord() {
    return this.bankPassWord != null;
  }

  public void setBankPassWordIsSet(boolean value) {
    if (!value) {
      this.bankPassWord = null;
    }
  }

  public int getInstallID() {
    return this.installID;
  }

  public CThostFtdcVerifyFuturePasswordField setInstallID(int installID) {
    this.installID = installID;
    setInstallIDIsSet(true);
    return this;
  }

  public void unsetInstallID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSTALLID_ISSET_ID);
  }

  /** Returns true if field installID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstallID() {
    return EncodingUtils.testBit(__isset_bitfield, __INSTALLID_ISSET_ID);
  }

  public void setInstallIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSTALLID_ISSET_ID, value);
  }

  public int getTID() {
    return this.tID;
  }

  public CThostFtdcVerifyFuturePasswordField setTID(int tID) {
    this.tID = tID;
    setTIDIsSet(true);
    return this;
  }

  public void unsetTID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TID_ISSET_ID);
  }

  /** Returns true if field tID is set (has been assigned a value) and false otherwise */
  public boolean isSetTID() {
    return EncodingUtils.testBit(__isset_bitfield, __TID_ISSET_ID);
  }

  public void setTIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TID_ISSET_ID, value);
  }

  public String getCurrencyID() {
    return this.currencyID;
  }

  public CThostFtdcVerifyFuturePasswordField setCurrencyID(String currencyID) {
    this.currencyID = currencyID;
    return this;
  }

  public void unsetCurrencyID() {
    this.currencyID = null;
  }

  /** Returns true if field currencyID is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencyID() {
    return this.currencyID != null;
  }

  public void setCurrencyIDIsSet(boolean value) {
    if (!value) {
      this.currencyID = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRADE_CODE:
      if (value == null) {
        unsetTradeCode();
      } else {
        setTradeCode((String)value);
      }
      break;

    case BANK_ID:
      if (value == null) {
        unsetBankID();
      } else {
        setBankID((String)value);
      }
      break;

    case BANK_BRANCH_ID:
      if (value == null) {
        unsetBankBranchID();
      } else {
        setBankBranchID((String)value);
      }
      break;

    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case BROKER_BRANCH_ID:
      if (value == null) {
        unsetBrokerBranchID();
      } else {
        setBrokerBranchID((String)value);
      }
      break;

    case TRADE_DATE:
      if (value == null) {
        unsetTradeDate();
      } else {
        setTradeDate((String)value);
      }
      break;

    case TRADE_TIME:
      if (value == null) {
        unsetTradeTime();
      } else {
        setTradeTime((String)value);
      }
      break;

    case BANK_SERIAL:
      if (value == null) {
        unsetBankSerial();
      } else {
        setBankSerial((String)value);
      }
      break;

    case TRADING_DAY:
      if (value == null) {
        unsetTradingDay();
      } else {
        setTradingDay((String)value);
      }
      break;

    case PLATE_SERIAL:
      if (value == null) {
        unsetPlateSerial();
      } else {
        setPlateSerial((Integer)value);
      }
      break;

    case LAST_FRAGMENT:
      if (value == null) {
        unsetLastFragment();
      } else {
        setLastFragment((String)value);
      }
      break;

    case SESSION_ID:
      if (value == null) {
        unsetSessionID();
      } else {
        setSessionID((Integer)value);
      }
      break;

    case ACCOUNT_ID:
      if (value == null) {
        unsetAccountID();
      } else {
        setAccountID((String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    case BANK_ACCOUNT:
      if (value == null) {
        unsetBankAccount();
      } else {
        setBankAccount((String)value);
      }
      break;

    case BANK_PASS_WORD:
      if (value == null) {
        unsetBankPassWord();
      } else {
        setBankPassWord((String)value);
      }
      break;

    case INSTALL_ID:
      if (value == null) {
        unsetInstallID();
      } else {
        setInstallID((Integer)value);
      }
      break;

    case T_ID:
      if (value == null) {
        unsetTID();
      } else {
        setTID((Integer)value);
      }
      break;

    case CURRENCY_ID:
      if (value == null) {
        unsetCurrencyID();
      } else {
        setCurrencyID((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRADE_CODE:
      return getTradeCode();

    case BANK_ID:
      return getBankID();

    case BANK_BRANCH_ID:
      return getBankBranchID();

    case BROKER_ID:
      return getBrokerID();

    case BROKER_BRANCH_ID:
      return getBrokerBranchID();

    case TRADE_DATE:
      return getTradeDate();

    case TRADE_TIME:
      return getTradeTime();

    case BANK_SERIAL:
      return getBankSerial();

    case TRADING_DAY:
      return getTradingDay();

    case PLATE_SERIAL:
      return Integer.valueOf(getPlateSerial());

    case LAST_FRAGMENT:
      return getLastFragment();

    case SESSION_ID:
      return Integer.valueOf(getSessionID());

    case ACCOUNT_ID:
      return getAccountID();

    case PASSWORD:
      return getPassword();

    case BANK_ACCOUNT:
      return getBankAccount();

    case BANK_PASS_WORD:
      return getBankPassWord();

    case INSTALL_ID:
      return Integer.valueOf(getInstallID());

    case T_ID:
      return Integer.valueOf(getTID());

    case CURRENCY_ID:
      return getCurrencyID();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRADE_CODE:
      return isSetTradeCode();
    case BANK_ID:
      return isSetBankID();
    case BANK_BRANCH_ID:
      return isSetBankBranchID();
    case BROKER_ID:
      return isSetBrokerID();
    case BROKER_BRANCH_ID:
      return isSetBrokerBranchID();
    case TRADE_DATE:
      return isSetTradeDate();
    case TRADE_TIME:
      return isSetTradeTime();
    case BANK_SERIAL:
      return isSetBankSerial();
    case TRADING_DAY:
      return isSetTradingDay();
    case PLATE_SERIAL:
      return isSetPlateSerial();
    case LAST_FRAGMENT:
      return isSetLastFragment();
    case SESSION_ID:
      return isSetSessionID();
    case ACCOUNT_ID:
      return isSetAccountID();
    case PASSWORD:
      return isSetPassword();
    case BANK_ACCOUNT:
      return isSetBankAccount();
    case BANK_PASS_WORD:
      return isSetBankPassWord();
    case INSTALL_ID:
      return isSetInstallID();
    case T_ID:
      return isSetTID();
    case CURRENCY_ID:
      return isSetCurrencyID();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcVerifyFuturePasswordField)
      return this.equals((CThostFtdcVerifyFuturePasswordField)that);
    return false;
  }

  public boolean equals(CThostFtdcVerifyFuturePasswordField that) {
    if (that == null)
      return false;

    boolean this_present_tradeCode = true && this.isSetTradeCode();
    boolean that_present_tradeCode = true && that.isSetTradeCode();
    if (this_present_tradeCode || that_present_tradeCode) {
      if (!(this_present_tradeCode && that_present_tradeCode))
        return false;
      if (!this.tradeCode.equals(that.tradeCode))
        return false;
    }

    boolean this_present_bankID = true && this.isSetBankID();
    boolean that_present_bankID = true && that.isSetBankID();
    if (this_present_bankID || that_present_bankID) {
      if (!(this_present_bankID && that_present_bankID))
        return false;
      if (!this.bankID.equals(that.bankID))
        return false;
    }

    boolean this_present_bankBranchID = true && this.isSetBankBranchID();
    boolean that_present_bankBranchID = true && that.isSetBankBranchID();
    if (this_present_bankBranchID || that_present_bankBranchID) {
      if (!(this_present_bankBranchID && that_present_bankBranchID))
        return false;
      if (!this.bankBranchID.equals(that.bankBranchID))
        return false;
    }

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_brokerBranchID = true && this.isSetBrokerBranchID();
    boolean that_present_brokerBranchID = true && that.isSetBrokerBranchID();
    if (this_present_brokerBranchID || that_present_brokerBranchID) {
      if (!(this_present_brokerBranchID && that_present_brokerBranchID))
        return false;
      if (!this.brokerBranchID.equals(that.brokerBranchID))
        return false;
    }

    boolean this_present_tradeDate = true && this.isSetTradeDate();
    boolean that_present_tradeDate = true && that.isSetTradeDate();
    if (this_present_tradeDate || that_present_tradeDate) {
      if (!(this_present_tradeDate && that_present_tradeDate))
        return false;
      if (!this.tradeDate.equals(that.tradeDate))
        return false;
    }

    boolean this_present_tradeTime = true && this.isSetTradeTime();
    boolean that_present_tradeTime = true && that.isSetTradeTime();
    if (this_present_tradeTime || that_present_tradeTime) {
      if (!(this_present_tradeTime && that_present_tradeTime))
        return false;
      if (!this.tradeTime.equals(that.tradeTime))
        return false;
    }

    boolean this_present_bankSerial = true && this.isSetBankSerial();
    boolean that_present_bankSerial = true && that.isSetBankSerial();
    if (this_present_bankSerial || that_present_bankSerial) {
      if (!(this_present_bankSerial && that_present_bankSerial))
        return false;
      if (!this.bankSerial.equals(that.bankSerial))
        return false;
    }

    boolean this_present_tradingDay = true && this.isSetTradingDay();
    boolean that_present_tradingDay = true && that.isSetTradingDay();
    if (this_present_tradingDay || that_present_tradingDay) {
      if (!(this_present_tradingDay && that_present_tradingDay))
        return false;
      if (!this.tradingDay.equals(that.tradingDay))
        return false;
    }

    boolean this_present_plateSerial = true;
    boolean that_present_plateSerial = true;
    if (this_present_plateSerial || that_present_plateSerial) {
      if (!(this_present_plateSerial && that_present_plateSerial))
        return false;
      if (this.plateSerial != that.plateSerial)
        return false;
    }

    boolean this_present_lastFragment = true && this.isSetLastFragment();
    boolean that_present_lastFragment = true && that.isSetLastFragment();
    if (this_present_lastFragment || that_present_lastFragment) {
      if (!(this_present_lastFragment && that_present_lastFragment))
        return false;
      if (!this.lastFragment.equals(that.lastFragment))
        return false;
    }

    boolean this_present_sessionID = true;
    boolean that_present_sessionID = true;
    if (this_present_sessionID || that_present_sessionID) {
      if (!(this_present_sessionID && that_present_sessionID))
        return false;
      if (this.sessionID != that.sessionID)
        return false;
    }

    boolean this_present_accountID = true && this.isSetAccountID();
    boolean that_present_accountID = true && that.isSetAccountID();
    if (this_present_accountID || that_present_accountID) {
      if (!(this_present_accountID && that_present_accountID))
        return false;
      if (!this.accountID.equals(that.accountID))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_bankAccount = true && this.isSetBankAccount();
    boolean that_present_bankAccount = true && that.isSetBankAccount();
    if (this_present_bankAccount || that_present_bankAccount) {
      if (!(this_present_bankAccount && that_present_bankAccount))
        return false;
      if (!this.bankAccount.equals(that.bankAccount))
        return false;
    }

    boolean this_present_bankPassWord = true && this.isSetBankPassWord();
    boolean that_present_bankPassWord = true && that.isSetBankPassWord();
    if (this_present_bankPassWord || that_present_bankPassWord) {
      if (!(this_present_bankPassWord && that_present_bankPassWord))
        return false;
      if (!this.bankPassWord.equals(that.bankPassWord))
        return false;
    }

    boolean this_present_installID = true;
    boolean that_present_installID = true;
    if (this_present_installID || that_present_installID) {
      if (!(this_present_installID && that_present_installID))
        return false;
      if (this.installID != that.installID)
        return false;
    }

    boolean this_present_tID = true;
    boolean that_present_tID = true;
    if (this_present_tID || that_present_tID) {
      if (!(this_present_tID && that_present_tID))
        return false;
      if (this.tID != that.tID)
        return false;
    }

    boolean this_present_currencyID = true && this.isSetCurrencyID();
    boolean that_present_currencyID = true && that.isSetCurrencyID();
    if (this_present_currencyID || that_present_currencyID) {
      if (!(this_present_currencyID && that_present_currencyID))
        return false;
      if (!this.currencyID.equals(that.currencyID))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcVerifyFuturePasswordField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTradeCode()).compareTo(other.isSetTradeCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeCode, other.tradeCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankID()).compareTo(other.isSetBankID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankID, other.bankID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankBranchID()).compareTo(other.isSetBankBranchID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankBranchID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankBranchID, other.bankBranchID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerBranchID()).compareTo(other.isSetBrokerBranchID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerBranchID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerBranchID, other.brokerBranchID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeDate()).compareTo(other.isSetTradeDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeDate, other.tradeDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeTime()).compareTo(other.isSetTradeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeTime, other.tradeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankSerial()).compareTo(other.isSetBankSerial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankSerial()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankSerial, other.bankSerial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradingDay()).compareTo(other.isSetTradingDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradingDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradingDay, other.tradingDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlateSerial()).compareTo(other.isSetPlateSerial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlateSerial()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plateSerial, other.plateSerial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastFragment()).compareTo(other.isSetLastFragment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastFragment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastFragment, other.lastFragment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountID()).compareTo(other.isSetAccountID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountID, other.accountID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankAccount()).compareTo(other.isSetBankAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankAccount, other.bankAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankPassWord()).compareTo(other.isSetBankPassWord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankPassWord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankPassWord, other.bankPassWord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstallID()).compareTo(other.isSetInstallID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstallID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.installID, other.installID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTID()).compareTo(other.isSetTID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tID, other.tID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrencyID()).compareTo(other.isSetCurrencyID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencyID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currencyID, other.currencyID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcVerifyFuturePasswordField(");
    boolean first = true;

    sb.append("tradeCode:");
    if (this.tradeCode == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankID:");
    if (this.bankID == null) {
      sb.append("null");
    } else {
      sb.append(this.bankID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankBranchID:");
    if (this.bankBranchID == null) {
      sb.append("null");
    } else {
      sb.append(this.bankBranchID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerBranchID:");
    if (this.brokerBranchID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerBranchID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeDate:");
    if (this.tradeDate == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeTime:");
    if (this.tradeTime == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankSerial:");
    if (this.bankSerial == null) {
      sb.append("null");
    } else {
      sb.append(this.bankSerial);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradingDay:");
    if (this.tradingDay == null) {
      sb.append("null");
    } else {
      sb.append(this.tradingDay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("plateSerial:");
    sb.append(this.plateSerial);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastFragment:");
    if (this.lastFragment == null) {
      sb.append("null");
    } else {
      sb.append(this.lastFragment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sessionID:");
    sb.append(this.sessionID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountID:");
    if (this.accountID == null) {
      sb.append("null");
    } else {
      sb.append(this.accountID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankAccount:");
    if (this.bankAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.bankAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankPassWord:");
    if (this.bankPassWord == null) {
      sb.append("null");
    } else {
      sb.append(this.bankPassWord);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("installID:");
    sb.append(this.installID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tID:");
    sb.append(this.tID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currencyID:");
    if (this.currencyID == null) {
      sb.append("null");
    } else {
      sb.append(this.currencyID);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcVerifyFuturePasswordFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcVerifyFuturePasswordFieldStandardScheme getScheme() {
      return new CThostFtdcVerifyFuturePasswordFieldStandardScheme();
    }
  }

  private static class CThostFtdcVerifyFuturePasswordFieldStandardScheme extends StandardScheme<CThostFtdcVerifyFuturePasswordField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcVerifyFuturePasswordField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRADE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeCode = iprot.readString();
              struct.setTradeCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BANK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankID = iprot.readString();
              struct.setBankIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BANK_BRANCH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankBranchID = iprot.readString();
              struct.setBankBranchIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BROKER_BRANCH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerBranchID = iprot.readString();
              struct.setBrokerBranchIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRADE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeDate = iprot.readString();
              struct.setTradeDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TRADE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeTime = iprot.readString();
              struct.setTradeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BANK_SERIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankSerial = iprot.readString();
              struct.setBankSerialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TRADING_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradingDay = iprot.readString();
              struct.setTradingDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PLATE_SERIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.plateSerial = iprot.readI32();
              struct.setPlateSerialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LAST_FRAGMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastFragment = iprot.readString();
              struct.setLastFragmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sessionID = iprot.readI32();
              struct.setSessionIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountID = iprot.readString();
              struct.setAccountIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // BANK_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankAccount = iprot.readString();
              struct.setBankAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // BANK_PASS_WORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankPassWord = iprot.readString();
              struct.setBankPassWordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // INSTALL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.installID = iprot.readI32();
              struct.setInstallIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // T_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tID = iprot.readI32();
              struct.setTIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CURRENCY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currencyID = iprot.readString();
              struct.setCurrencyIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcVerifyFuturePasswordField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tradeCode != null) {
        oprot.writeFieldBegin(TRADE_CODE_FIELD_DESC);
        oprot.writeString(struct.tradeCode);
        oprot.writeFieldEnd();
      }
      if (struct.bankID != null) {
        oprot.writeFieldBegin(BANK_ID_FIELD_DESC);
        oprot.writeString(struct.bankID);
        oprot.writeFieldEnd();
      }
      if (struct.bankBranchID != null) {
        oprot.writeFieldBegin(BANK_BRANCH_ID_FIELD_DESC);
        oprot.writeString(struct.bankBranchID);
        oprot.writeFieldEnd();
      }
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.brokerBranchID != null) {
        oprot.writeFieldBegin(BROKER_BRANCH_ID_FIELD_DESC);
        oprot.writeString(struct.brokerBranchID);
        oprot.writeFieldEnd();
      }
      if (struct.tradeDate != null) {
        oprot.writeFieldBegin(TRADE_DATE_FIELD_DESC);
        oprot.writeString(struct.tradeDate);
        oprot.writeFieldEnd();
      }
      if (struct.tradeTime != null) {
        oprot.writeFieldBegin(TRADE_TIME_FIELD_DESC);
        oprot.writeString(struct.tradeTime);
        oprot.writeFieldEnd();
      }
      if (struct.bankSerial != null) {
        oprot.writeFieldBegin(BANK_SERIAL_FIELD_DESC);
        oprot.writeString(struct.bankSerial);
        oprot.writeFieldEnd();
      }
      if (struct.tradingDay != null) {
        oprot.writeFieldBegin(TRADING_DAY_FIELD_DESC);
        oprot.writeString(struct.tradingDay);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PLATE_SERIAL_FIELD_DESC);
      oprot.writeI32(struct.plateSerial);
      oprot.writeFieldEnd();
      if (struct.lastFragment != null) {
        oprot.writeFieldBegin(LAST_FRAGMENT_FIELD_DESC);
        oprot.writeString(struct.lastFragment);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeI32(struct.sessionID);
      oprot.writeFieldEnd();
      if (struct.accountID != null) {
        oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
        oprot.writeString(struct.accountID);
        oprot.writeFieldEnd();
      }
      if (struct.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(struct.password);
        oprot.writeFieldEnd();
      }
      if (struct.bankAccount != null) {
        oprot.writeFieldBegin(BANK_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.bankAccount);
        oprot.writeFieldEnd();
      }
      if (struct.bankPassWord != null) {
        oprot.writeFieldBegin(BANK_PASS_WORD_FIELD_DESC);
        oprot.writeString(struct.bankPassWord);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INSTALL_ID_FIELD_DESC);
      oprot.writeI32(struct.installID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(T_ID_FIELD_DESC);
      oprot.writeI32(struct.tID);
      oprot.writeFieldEnd();
      if (struct.currencyID != null) {
        oprot.writeFieldBegin(CURRENCY_ID_FIELD_DESC);
        oprot.writeString(struct.currencyID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcVerifyFuturePasswordFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcVerifyFuturePasswordFieldTupleScheme getScheme() {
      return new CThostFtdcVerifyFuturePasswordFieldTupleScheme();
    }
  }

  private static class CThostFtdcVerifyFuturePasswordFieldTupleScheme extends TupleScheme<CThostFtdcVerifyFuturePasswordField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcVerifyFuturePasswordField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTradeCode()) {
        optionals.set(0);
      }
      if (struct.isSetBankID()) {
        optionals.set(1);
      }
      if (struct.isSetBankBranchID()) {
        optionals.set(2);
      }
      if (struct.isSetBrokerID()) {
        optionals.set(3);
      }
      if (struct.isSetBrokerBranchID()) {
        optionals.set(4);
      }
      if (struct.isSetTradeDate()) {
        optionals.set(5);
      }
      if (struct.isSetTradeTime()) {
        optionals.set(6);
      }
      if (struct.isSetBankSerial()) {
        optionals.set(7);
      }
      if (struct.isSetTradingDay()) {
        optionals.set(8);
      }
      if (struct.isSetPlateSerial()) {
        optionals.set(9);
      }
      if (struct.isSetLastFragment()) {
        optionals.set(10);
      }
      if (struct.isSetSessionID()) {
        optionals.set(11);
      }
      if (struct.isSetAccountID()) {
        optionals.set(12);
      }
      if (struct.isSetPassword()) {
        optionals.set(13);
      }
      if (struct.isSetBankAccount()) {
        optionals.set(14);
      }
      if (struct.isSetBankPassWord()) {
        optionals.set(15);
      }
      if (struct.isSetInstallID()) {
        optionals.set(16);
      }
      if (struct.isSetTID()) {
        optionals.set(17);
      }
      if (struct.isSetCurrencyID()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetTradeCode()) {
        oprot.writeString(struct.tradeCode);
      }
      if (struct.isSetBankID()) {
        oprot.writeString(struct.bankID);
      }
      if (struct.isSetBankBranchID()) {
        oprot.writeString(struct.bankBranchID);
      }
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetBrokerBranchID()) {
        oprot.writeString(struct.brokerBranchID);
      }
      if (struct.isSetTradeDate()) {
        oprot.writeString(struct.tradeDate);
      }
      if (struct.isSetTradeTime()) {
        oprot.writeString(struct.tradeTime);
      }
      if (struct.isSetBankSerial()) {
        oprot.writeString(struct.bankSerial);
      }
      if (struct.isSetTradingDay()) {
        oprot.writeString(struct.tradingDay);
      }
      if (struct.isSetPlateSerial()) {
        oprot.writeI32(struct.plateSerial);
      }
      if (struct.isSetLastFragment()) {
        oprot.writeString(struct.lastFragment);
      }
      if (struct.isSetSessionID()) {
        oprot.writeI32(struct.sessionID);
      }
      if (struct.isSetAccountID()) {
        oprot.writeString(struct.accountID);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetBankAccount()) {
        oprot.writeString(struct.bankAccount);
      }
      if (struct.isSetBankPassWord()) {
        oprot.writeString(struct.bankPassWord);
      }
      if (struct.isSetInstallID()) {
        oprot.writeI32(struct.installID);
      }
      if (struct.isSetTID()) {
        oprot.writeI32(struct.tID);
      }
      if (struct.isSetCurrencyID()) {
        oprot.writeString(struct.currencyID);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcVerifyFuturePasswordField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.tradeCode = iprot.readString();
        struct.setTradeCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bankID = iprot.readString();
        struct.setBankIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bankBranchID = iprot.readString();
        struct.setBankBranchIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.brokerBranchID = iprot.readString();
        struct.setBrokerBranchIDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.tradeDate = iprot.readString();
        struct.setTradeDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.tradeTime = iprot.readString();
        struct.setTradeTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.bankSerial = iprot.readString();
        struct.setBankSerialIsSet(true);
      }
      if (incoming.get(8)) {
        struct.tradingDay = iprot.readString();
        struct.setTradingDayIsSet(true);
      }
      if (incoming.get(9)) {
        struct.plateSerial = iprot.readI32();
        struct.setPlateSerialIsSet(true);
      }
      if (incoming.get(10)) {
        struct.lastFragment = iprot.readString();
        struct.setLastFragmentIsSet(true);
      }
      if (incoming.get(11)) {
        struct.sessionID = iprot.readI32();
        struct.setSessionIDIsSet(true);
      }
      if (incoming.get(12)) {
        struct.accountID = iprot.readString();
        struct.setAccountIDIsSet(true);
      }
      if (incoming.get(13)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(14)) {
        struct.bankAccount = iprot.readString();
        struct.setBankAccountIsSet(true);
      }
      if (incoming.get(15)) {
        struct.bankPassWord = iprot.readString();
        struct.setBankPassWordIsSet(true);
      }
      if (incoming.get(16)) {
        struct.installID = iprot.readI32();
        struct.setInstallIDIsSet(true);
      }
      if (incoming.get(17)) {
        struct.tID = iprot.readI32();
        struct.setTIDIsSet(true);
      }
      if (incoming.get(18)) {
        struct.currencyID = iprot.readString();
        struct.setCurrencyIDIsSet(true);
      }
    }
  }

}

