/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcMDTraderOfferField implements org.apache.thrift.TBase<CThostFtdcMDTraderOfferField, CThostFtdcMDTraderOfferField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcMDTraderOfferField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcMDTraderOfferField");

  private static final org.apache.thrift.protocol.TField EXCHANGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TRADER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("traderID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PARTICIPANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("participantID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField INSTALL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("installID", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ORDER_LOCAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderLocalID", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TRADER_CONNECT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("traderConnectStatus", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CONNECT_REQUEST_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("connectRequestDate", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CONNECT_REQUEST_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("connectRequestTime", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField LAST_REPORT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastReportDate", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField LAST_REPORT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastReportTime", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CONNECT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("connectDate", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CONNECT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("connectTime", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField TRADING_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("tradingDay", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField MAX_TRADE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("maxTradeID", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField MAX_ORDER_MESSAGE_REFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("maxOrderMessageReference", org.apache.thrift.protocol.TType.STRING, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcMDTraderOfferFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcMDTraderOfferFieldTupleSchemeFactory());
  }

  public String exchangeID; // required
  public String traderID; // required
  public String participantID; // required
  public String password; // required
  public int installID; // required
  public String orderLocalID; // required
  public String traderConnectStatus; // required
  public String connectRequestDate; // required
  public String connectRequestTime; // required
  public String lastReportDate; // required
  public String lastReportTime; // required
  public String connectDate; // required
  public String connectTime; // required
  public String startDate; // required
  public String startTime; // required
  public String tradingDay; // required
  public String brokerID; // required
  public String maxTradeID; // required
  public String maxOrderMessageReference; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXCHANGE_ID((short)1, "exchangeID"),
    TRADER_ID((short)2, "traderID"),
    PARTICIPANT_ID((short)3, "participantID"),
    PASSWORD((short)4, "password"),
    INSTALL_ID((short)5, "installID"),
    ORDER_LOCAL_ID((short)6, "orderLocalID"),
    TRADER_CONNECT_STATUS((short)7, "traderConnectStatus"),
    CONNECT_REQUEST_DATE((short)8, "connectRequestDate"),
    CONNECT_REQUEST_TIME((short)9, "connectRequestTime"),
    LAST_REPORT_DATE((short)10, "lastReportDate"),
    LAST_REPORT_TIME((short)11, "lastReportTime"),
    CONNECT_DATE((short)12, "connectDate"),
    CONNECT_TIME((short)13, "connectTime"),
    START_DATE((short)14, "startDate"),
    START_TIME((short)15, "startTime"),
    TRADING_DAY((short)16, "tradingDay"),
    BROKER_ID((short)17, "brokerID"),
    MAX_TRADE_ID((short)18, "maxTradeID"),
    MAX_ORDER_MESSAGE_REFERENCE((short)19, "maxOrderMessageReference");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXCHANGE_ID
          return EXCHANGE_ID;
        case 2: // TRADER_ID
          return TRADER_ID;
        case 3: // PARTICIPANT_ID
          return PARTICIPANT_ID;
        case 4: // PASSWORD
          return PASSWORD;
        case 5: // INSTALL_ID
          return INSTALL_ID;
        case 6: // ORDER_LOCAL_ID
          return ORDER_LOCAL_ID;
        case 7: // TRADER_CONNECT_STATUS
          return TRADER_CONNECT_STATUS;
        case 8: // CONNECT_REQUEST_DATE
          return CONNECT_REQUEST_DATE;
        case 9: // CONNECT_REQUEST_TIME
          return CONNECT_REQUEST_TIME;
        case 10: // LAST_REPORT_DATE
          return LAST_REPORT_DATE;
        case 11: // LAST_REPORT_TIME
          return LAST_REPORT_TIME;
        case 12: // CONNECT_DATE
          return CONNECT_DATE;
        case 13: // CONNECT_TIME
          return CONNECT_TIME;
        case 14: // START_DATE
          return START_DATE;
        case 15: // START_TIME
          return START_TIME;
        case 16: // TRADING_DAY
          return TRADING_DAY;
        case 17: // BROKER_ID
          return BROKER_ID;
        case 18: // MAX_TRADE_ID
          return MAX_TRADE_ID;
        case 19: // MAX_ORDER_MESSAGE_REFERENCE
          return MAX_ORDER_MESSAGE_REFERENCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INSTALLID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXCHANGE_ID, new org.apache.thrift.meta_data.FieldMetaData("exchangeID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcExchangeIDType")));
    tmpMap.put(_Fields.TRADER_ID, new org.apache.thrift.meta_data.FieldMetaData("traderID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTraderIDType")));
    tmpMap.put(_Fields.PARTICIPANT_ID, new org.apache.thrift.meta_data.FieldMetaData("participantID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcParticipantIDType")));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcPasswordType")));
    tmpMap.put(_Fields.INSTALL_ID, new org.apache.thrift.meta_data.FieldMetaData("installID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcInstallIDType")));
    tmpMap.put(_Fields.ORDER_LOCAL_ID, new org.apache.thrift.meta_data.FieldMetaData("orderLocalID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderLocalIDType")));
    tmpMap.put(_Fields.TRADER_CONNECT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("traderConnectStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTraderConnectStatusType")));
    tmpMap.put(_Fields.CONNECT_REQUEST_DATE, new org.apache.thrift.meta_data.FieldMetaData("connectRequestDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    tmpMap.put(_Fields.CONNECT_REQUEST_TIME, new org.apache.thrift.meta_data.FieldMetaData("connectRequestTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeType")));
    tmpMap.put(_Fields.LAST_REPORT_DATE, new org.apache.thrift.meta_data.FieldMetaData("lastReportDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    tmpMap.put(_Fields.LAST_REPORT_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastReportTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeType")));
    tmpMap.put(_Fields.CONNECT_DATE, new org.apache.thrift.meta_data.FieldMetaData("connectDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    tmpMap.put(_Fields.CONNECT_TIME, new org.apache.thrift.meta_data.FieldMetaData("connectTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeType")));
    tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeType")));
    tmpMap.put(_Fields.TRADING_DAY, new org.apache.thrift.meta_data.FieldMetaData("tradingDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.MAX_TRADE_ID, new org.apache.thrift.meta_data.FieldMetaData("maxTradeID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeIDType")));
    tmpMap.put(_Fields.MAX_ORDER_MESSAGE_REFERENCE, new org.apache.thrift.meta_data.FieldMetaData("maxOrderMessageReference", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcReturnCodeType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcMDTraderOfferField.class, metaDataMap);
  }

  public CThostFtdcMDTraderOfferField() {
  }

  public CThostFtdcMDTraderOfferField(
    String exchangeID,
    String traderID,
    String participantID,
    String password,
    int installID,
    String orderLocalID,
    String traderConnectStatus,
    String connectRequestDate,
    String connectRequestTime,
    String lastReportDate,
    String lastReportTime,
    String connectDate,
    String connectTime,
    String startDate,
    String startTime,
    String tradingDay,
    String brokerID,
    String maxTradeID,
    String maxOrderMessageReference)
  {
    this();
    this.exchangeID = exchangeID;
    this.traderID = traderID;
    this.participantID = participantID;
    this.password = password;
    this.installID = installID;
    setInstallIDIsSet(true);
    this.orderLocalID = orderLocalID;
    this.traderConnectStatus = traderConnectStatus;
    this.connectRequestDate = connectRequestDate;
    this.connectRequestTime = connectRequestTime;
    this.lastReportDate = lastReportDate;
    this.lastReportTime = lastReportTime;
    this.connectDate = connectDate;
    this.connectTime = connectTime;
    this.startDate = startDate;
    this.startTime = startTime;
    this.tradingDay = tradingDay;
    this.brokerID = brokerID;
    this.maxTradeID = maxTradeID;
    this.maxOrderMessageReference = maxOrderMessageReference;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcMDTraderOfferField(CThostFtdcMDTraderOfferField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetExchangeID()) {
      this.exchangeID = other.exchangeID;
    }
    if (other.isSetTraderID()) {
      this.traderID = other.traderID;
    }
    if (other.isSetParticipantID()) {
      this.participantID = other.participantID;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    this.installID = other.installID;
    if (other.isSetOrderLocalID()) {
      this.orderLocalID = other.orderLocalID;
    }
    if (other.isSetTraderConnectStatus()) {
      this.traderConnectStatus = other.traderConnectStatus;
    }
    if (other.isSetConnectRequestDate()) {
      this.connectRequestDate = other.connectRequestDate;
    }
    if (other.isSetConnectRequestTime()) {
      this.connectRequestTime = other.connectRequestTime;
    }
    if (other.isSetLastReportDate()) {
      this.lastReportDate = other.lastReportDate;
    }
    if (other.isSetLastReportTime()) {
      this.lastReportTime = other.lastReportTime;
    }
    if (other.isSetConnectDate()) {
      this.connectDate = other.connectDate;
    }
    if (other.isSetConnectTime()) {
      this.connectTime = other.connectTime;
    }
    if (other.isSetStartDate()) {
      this.startDate = other.startDate;
    }
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetTradingDay()) {
      this.tradingDay = other.tradingDay;
    }
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetMaxTradeID()) {
      this.maxTradeID = other.maxTradeID;
    }
    if (other.isSetMaxOrderMessageReference()) {
      this.maxOrderMessageReference = other.maxOrderMessageReference;
    }
  }

  public CThostFtdcMDTraderOfferField deepCopy() {
    return new CThostFtdcMDTraderOfferField(this);
  }

  @Override
  public void clear() {
    this.exchangeID = null;
    this.traderID = null;
    this.participantID = null;
    this.password = null;
    setInstallIDIsSet(false);
    this.installID = 0;
    this.orderLocalID = null;
    this.traderConnectStatus = null;
    this.connectRequestDate = null;
    this.connectRequestTime = null;
    this.lastReportDate = null;
    this.lastReportTime = null;
    this.connectDate = null;
    this.connectTime = null;
    this.startDate = null;
    this.startTime = null;
    this.tradingDay = null;
    this.brokerID = null;
    this.maxTradeID = null;
    this.maxOrderMessageReference = null;
  }

  public String getExchangeID() {
    return this.exchangeID;
  }

  public CThostFtdcMDTraderOfferField setExchangeID(String exchangeID) {
    this.exchangeID = exchangeID;
    return this;
  }

  public void unsetExchangeID() {
    this.exchangeID = null;
  }

  /** Returns true if field exchangeID is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeID() {
    return this.exchangeID != null;
  }

  public void setExchangeIDIsSet(boolean value) {
    if (!value) {
      this.exchangeID = null;
    }
  }

  public String getTraderID() {
    return this.traderID;
  }

  public CThostFtdcMDTraderOfferField setTraderID(String traderID) {
    this.traderID = traderID;
    return this;
  }

  public void unsetTraderID() {
    this.traderID = null;
  }

  /** Returns true if field traderID is set (has been assigned a value) and false otherwise */
  public boolean isSetTraderID() {
    return this.traderID != null;
  }

  public void setTraderIDIsSet(boolean value) {
    if (!value) {
      this.traderID = null;
    }
  }

  public String getParticipantID() {
    return this.participantID;
  }

  public CThostFtdcMDTraderOfferField setParticipantID(String participantID) {
    this.participantID = participantID;
    return this;
  }

  public void unsetParticipantID() {
    this.participantID = null;
  }

  /** Returns true if field participantID is set (has been assigned a value) and false otherwise */
  public boolean isSetParticipantID() {
    return this.participantID != null;
  }

  public void setParticipantIDIsSet(boolean value) {
    if (!value) {
      this.participantID = null;
    }
  }

  public String getPassword() {
    return this.password;
  }

  public CThostFtdcMDTraderOfferField setPassword(String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public int getInstallID() {
    return this.installID;
  }

  public CThostFtdcMDTraderOfferField setInstallID(int installID) {
    this.installID = installID;
    setInstallIDIsSet(true);
    return this;
  }

  public void unsetInstallID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSTALLID_ISSET_ID);
  }

  /** Returns true if field installID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstallID() {
    return EncodingUtils.testBit(__isset_bitfield, __INSTALLID_ISSET_ID);
  }

  public void setInstallIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSTALLID_ISSET_ID, value);
  }

  public String getOrderLocalID() {
    return this.orderLocalID;
  }

  public CThostFtdcMDTraderOfferField setOrderLocalID(String orderLocalID) {
    this.orderLocalID = orderLocalID;
    return this;
  }

  public void unsetOrderLocalID() {
    this.orderLocalID = null;
  }

  /** Returns true if field orderLocalID is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderLocalID() {
    return this.orderLocalID != null;
  }

  public void setOrderLocalIDIsSet(boolean value) {
    if (!value) {
      this.orderLocalID = null;
    }
  }

  public String getTraderConnectStatus() {
    return this.traderConnectStatus;
  }

  public CThostFtdcMDTraderOfferField setTraderConnectStatus(String traderConnectStatus) {
    this.traderConnectStatus = traderConnectStatus;
    return this;
  }

  public void unsetTraderConnectStatus() {
    this.traderConnectStatus = null;
  }

  /** Returns true if field traderConnectStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetTraderConnectStatus() {
    return this.traderConnectStatus != null;
  }

  public void setTraderConnectStatusIsSet(boolean value) {
    if (!value) {
      this.traderConnectStatus = null;
    }
  }

  public String getConnectRequestDate() {
    return this.connectRequestDate;
  }

  public CThostFtdcMDTraderOfferField setConnectRequestDate(String connectRequestDate) {
    this.connectRequestDate = connectRequestDate;
    return this;
  }

  public void unsetConnectRequestDate() {
    this.connectRequestDate = null;
  }

  /** Returns true if field connectRequestDate is set (has been assigned a value) and false otherwise */
  public boolean isSetConnectRequestDate() {
    return this.connectRequestDate != null;
  }

  public void setConnectRequestDateIsSet(boolean value) {
    if (!value) {
      this.connectRequestDate = null;
    }
  }

  public String getConnectRequestTime() {
    return this.connectRequestTime;
  }

  public CThostFtdcMDTraderOfferField setConnectRequestTime(String connectRequestTime) {
    this.connectRequestTime = connectRequestTime;
    return this;
  }

  public void unsetConnectRequestTime() {
    this.connectRequestTime = null;
  }

  /** Returns true if field connectRequestTime is set (has been assigned a value) and false otherwise */
  public boolean isSetConnectRequestTime() {
    return this.connectRequestTime != null;
  }

  public void setConnectRequestTimeIsSet(boolean value) {
    if (!value) {
      this.connectRequestTime = null;
    }
  }

  public String getLastReportDate() {
    return this.lastReportDate;
  }

  public CThostFtdcMDTraderOfferField setLastReportDate(String lastReportDate) {
    this.lastReportDate = lastReportDate;
    return this;
  }

  public void unsetLastReportDate() {
    this.lastReportDate = null;
  }

  /** Returns true if field lastReportDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLastReportDate() {
    return this.lastReportDate != null;
  }

  public void setLastReportDateIsSet(boolean value) {
    if (!value) {
      this.lastReportDate = null;
    }
  }

  public String getLastReportTime() {
    return this.lastReportTime;
  }

  public CThostFtdcMDTraderOfferField setLastReportTime(String lastReportTime) {
    this.lastReportTime = lastReportTime;
    return this;
  }

  public void unsetLastReportTime() {
    this.lastReportTime = null;
  }

  /** Returns true if field lastReportTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastReportTime() {
    return this.lastReportTime != null;
  }

  public void setLastReportTimeIsSet(boolean value) {
    if (!value) {
      this.lastReportTime = null;
    }
  }

  public String getConnectDate() {
    return this.connectDate;
  }

  public CThostFtdcMDTraderOfferField setConnectDate(String connectDate) {
    this.connectDate = connectDate;
    return this;
  }

  public void unsetConnectDate() {
    this.connectDate = null;
  }

  /** Returns true if field connectDate is set (has been assigned a value) and false otherwise */
  public boolean isSetConnectDate() {
    return this.connectDate != null;
  }

  public void setConnectDateIsSet(boolean value) {
    if (!value) {
      this.connectDate = null;
    }
  }

  public String getConnectTime() {
    return this.connectTime;
  }

  public CThostFtdcMDTraderOfferField setConnectTime(String connectTime) {
    this.connectTime = connectTime;
    return this;
  }

  public void unsetConnectTime() {
    this.connectTime = null;
  }

  /** Returns true if field connectTime is set (has been assigned a value) and false otherwise */
  public boolean isSetConnectTime() {
    return this.connectTime != null;
  }

  public void setConnectTimeIsSet(boolean value) {
    if (!value) {
      this.connectTime = null;
    }
  }

  public String getStartDate() {
    return this.startDate;
  }

  public CThostFtdcMDTraderOfferField setStartDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  public void unsetStartDate() {
    this.startDate = null;
  }

  /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
  public boolean isSetStartDate() {
    return this.startDate != null;
  }

  public void setStartDateIsSet(boolean value) {
    if (!value) {
      this.startDate = null;
    }
  }

  public String getStartTime() {
    return this.startTime;
  }

  public CThostFtdcMDTraderOfferField setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public String getTradingDay() {
    return this.tradingDay;
  }

  public CThostFtdcMDTraderOfferField setTradingDay(String tradingDay) {
    this.tradingDay = tradingDay;
    return this;
  }

  public void unsetTradingDay() {
    this.tradingDay = null;
  }

  /** Returns true if field tradingDay is set (has been assigned a value) and false otherwise */
  public boolean isSetTradingDay() {
    return this.tradingDay != null;
  }

  public void setTradingDayIsSet(boolean value) {
    if (!value) {
      this.tradingDay = null;
    }
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcMDTraderOfferField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getMaxTradeID() {
    return this.maxTradeID;
  }

  public CThostFtdcMDTraderOfferField setMaxTradeID(String maxTradeID) {
    this.maxTradeID = maxTradeID;
    return this;
  }

  public void unsetMaxTradeID() {
    this.maxTradeID = null;
  }

  /** Returns true if field maxTradeID is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxTradeID() {
    return this.maxTradeID != null;
  }

  public void setMaxTradeIDIsSet(boolean value) {
    if (!value) {
      this.maxTradeID = null;
    }
  }

  public String getMaxOrderMessageReference() {
    return this.maxOrderMessageReference;
  }

  public CThostFtdcMDTraderOfferField setMaxOrderMessageReference(String maxOrderMessageReference) {
    this.maxOrderMessageReference = maxOrderMessageReference;
    return this;
  }

  public void unsetMaxOrderMessageReference() {
    this.maxOrderMessageReference = null;
  }

  /** Returns true if field maxOrderMessageReference is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxOrderMessageReference() {
    return this.maxOrderMessageReference != null;
  }

  public void setMaxOrderMessageReferenceIsSet(boolean value) {
    if (!value) {
      this.maxOrderMessageReference = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXCHANGE_ID:
      if (value == null) {
        unsetExchangeID();
      } else {
        setExchangeID((String)value);
      }
      break;

    case TRADER_ID:
      if (value == null) {
        unsetTraderID();
      } else {
        setTraderID((String)value);
      }
      break;

    case PARTICIPANT_ID:
      if (value == null) {
        unsetParticipantID();
      } else {
        setParticipantID((String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    case INSTALL_ID:
      if (value == null) {
        unsetInstallID();
      } else {
        setInstallID((Integer)value);
      }
      break;

    case ORDER_LOCAL_ID:
      if (value == null) {
        unsetOrderLocalID();
      } else {
        setOrderLocalID((String)value);
      }
      break;

    case TRADER_CONNECT_STATUS:
      if (value == null) {
        unsetTraderConnectStatus();
      } else {
        setTraderConnectStatus((String)value);
      }
      break;

    case CONNECT_REQUEST_DATE:
      if (value == null) {
        unsetConnectRequestDate();
      } else {
        setConnectRequestDate((String)value);
      }
      break;

    case CONNECT_REQUEST_TIME:
      if (value == null) {
        unsetConnectRequestTime();
      } else {
        setConnectRequestTime((String)value);
      }
      break;

    case LAST_REPORT_DATE:
      if (value == null) {
        unsetLastReportDate();
      } else {
        setLastReportDate((String)value);
      }
      break;

    case LAST_REPORT_TIME:
      if (value == null) {
        unsetLastReportTime();
      } else {
        setLastReportTime((String)value);
      }
      break;

    case CONNECT_DATE:
      if (value == null) {
        unsetConnectDate();
      } else {
        setConnectDate((String)value);
      }
      break;

    case CONNECT_TIME:
      if (value == null) {
        unsetConnectTime();
      } else {
        setConnectTime((String)value);
      }
      break;

    case START_DATE:
      if (value == null) {
        unsetStartDate();
      } else {
        setStartDate((String)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case TRADING_DAY:
      if (value == null) {
        unsetTradingDay();
      } else {
        setTradingDay((String)value);
      }
      break;

    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case MAX_TRADE_ID:
      if (value == null) {
        unsetMaxTradeID();
      } else {
        setMaxTradeID((String)value);
      }
      break;

    case MAX_ORDER_MESSAGE_REFERENCE:
      if (value == null) {
        unsetMaxOrderMessageReference();
      } else {
        setMaxOrderMessageReference((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXCHANGE_ID:
      return getExchangeID();

    case TRADER_ID:
      return getTraderID();

    case PARTICIPANT_ID:
      return getParticipantID();

    case PASSWORD:
      return getPassword();

    case INSTALL_ID:
      return Integer.valueOf(getInstallID());

    case ORDER_LOCAL_ID:
      return getOrderLocalID();

    case TRADER_CONNECT_STATUS:
      return getTraderConnectStatus();

    case CONNECT_REQUEST_DATE:
      return getConnectRequestDate();

    case CONNECT_REQUEST_TIME:
      return getConnectRequestTime();

    case LAST_REPORT_DATE:
      return getLastReportDate();

    case LAST_REPORT_TIME:
      return getLastReportTime();

    case CONNECT_DATE:
      return getConnectDate();

    case CONNECT_TIME:
      return getConnectTime();

    case START_DATE:
      return getStartDate();

    case START_TIME:
      return getStartTime();

    case TRADING_DAY:
      return getTradingDay();

    case BROKER_ID:
      return getBrokerID();

    case MAX_TRADE_ID:
      return getMaxTradeID();

    case MAX_ORDER_MESSAGE_REFERENCE:
      return getMaxOrderMessageReference();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXCHANGE_ID:
      return isSetExchangeID();
    case TRADER_ID:
      return isSetTraderID();
    case PARTICIPANT_ID:
      return isSetParticipantID();
    case PASSWORD:
      return isSetPassword();
    case INSTALL_ID:
      return isSetInstallID();
    case ORDER_LOCAL_ID:
      return isSetOrderLocalID();
    case TRADER_CONNECT_STATUS:
      return isSetTraderConnectStatus();
    case CONNECT_REQUEST_DATE:
      return isSetConnectRequestDate();
    case CONNECT_REQUEST_TIME:
      return isSetConnectRequestTime();
    case LAST_REPORT_DATE:
      return isSetLastReportDate();
    case LAST_REPORT_TIME:
      return isSetLastReportTime();
    case CONNECT_DATE:
      return isSetConnectDate();
    case CONNECT_TIME:
      return isSetConnectTime();
    case START_DATE:
      return isSetStartDate();
    case START_TIME:
      return isSetStartTime();
    case TRADING_DAY:
      return isSetTradingDay();
    case BROKER_ID:
      return isSetBrokerID();
    case MAX_TRADE_ID:
      return isSetMaxTradeID();
    case MAX_ORDER_MESSAGE_REFERENCE:
      return isSetMaxOrderMessageReference();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcMDTraderOfferField)
      return this.equals((CThostFtdcMDTraderOfferField)that);
    return false;
  }

  public boolean equals(CThostFtdcMDTraderOfferField that) {
    if (that == null)
      return false;

    boolean this_present_exchangeID = true && this.isSetExchangeID();
    boolean that_present_exchangeID = true && that.isSetExchangeID();
    if (this_present_exchangeID || that_present_exchangeID) {
      if (!(this_present_exchangeID && that_present_exchangeID))
        return false;
      if (!this.exchangeID.equals(that.exchangeID))
        return false;
    }

    boolean this_present_traderID = true && this.isSetTraderID();
    boolean that_present_traderID = true && that.isSetTraderID();
    if (this_present_traderID || that_present_traderID) {
      if (!(this_present_traderID && that_present_traderID))
        return false;
      if (!this.traderID.equals(that.traderID))
        return false;
    }

    boolean this_present_participantID = true && this.isSetParticipantID();
    boolean that_present_participantID = true && that.isSetParticipantID();
    if (this_present_participantID || that_present_participantID) {
      if (!(this_present_participantID && that_present_participantID))
        return false;
      if (!this.participantID.equals(that.participantID))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_installID = true;
    boolean that_present_installID = true;
    if (this_present_installID || that_present_installID) {
      if (!(this_present_installID && that_present_installID))
        return false;
      if (this.installID != that.installID)
        return false;
    }

    boolean this_present_orderLocalID = true && this.isSetOrderLocalID();
    boolean that_present_orderLocalID = true && that.isSetOrderLocalID();
    if (this_present_orderLocalID || that_present_orderLocalID) {
      if (!(this_present_orderLocalID && that_present_orderLocalID))
        return false;
      if (!this.orderLocalID.equals(that.orderLocalID))
        return false;
    }

    boolean this_present_traderConnectStatus = true && this.isSetTraderConnectStatus();
    boolean that_present_traderConnectStatus = true && that.isSetTraderConnectStatus();
    if (this_present_traderConnectStatus || that_present_traderConnectStatus) {
      if (!(this_present_traderConnectStatus && that_present_traderConnectStatus))
        return false;
      if (!this.traderConnectStatus.equals(that.traderConnectStatus))
        return false;
    }

    boolean this_present_connectRequestDate = true && this.isSetConnectRequestDate();
    boolean that_present_connectRequestDate = true && that.isSetConnectRequestDate();
    if (this_present_connectRequestDate || that_present_connectRequestDate) {
      if (!(this_present_connectRequestDate && that_present_connectRequestDate))
        return false;
      if (!this.connectRequestDate.equals(that.connectRequestDate))
        return false;
    }

    boolean this_present_connectRequestTime = true && this.isSetConnectRequestTime();
    boolean that_present_connectRequestTime = true && that.isSetConnectRequestTime();
    if (this_present_connectRequestTime || that_present_connectRequestTime) {
      if (!(this_present_connectRequestTime && that_present_connectRequestTime))
        return false;
      if (!this.connectRequestTime.equals(that.connectRequestTime))
        return false;
    }

    boolean this_present_lastReportDate = true && this.isSetLastReportDate();
    boolean that_present_lastReportDate = true && that.isSetLastReportDate();
    if (this_present_lastReportDate || that_present_lastReportDate) {
      if (!(this_present_lastReportDate && that_present_lastReportDate))
        return false;
      if (!this.lastReportDate.equals(that.lastReportDate))
        return false;
    }

    boolean this_present_lastReportTime = true && this.isSetLastReportTime();
    boolean that_present_lastReportTime = true && that.isSetLastReportTime();
    if (this_present_lastReportTime || that_present_lastReportTime) {
      if (!(this_present_lastReportTime && that_present_lastReportTime))
        return false;
      if (!this.lastReportTime.equals(that.lastReportTime))
        return false;
    }

    boolean this_present_connectDate = true && this.isSetConnectDate();
    boolean that_present_connectDate = true && that.isSetConnectDate();
    if (this_present_connectDate || that_present_connectDate) {
      if (!(this_present_connectDate && that_present_connectDate))
        return false;
      if (!this.connectDate.equals(that.connectDate))
        return false;
    }

    boolean this_present_connectTime = true && this.isSetConnectTime();
    boolean that_present_connectTime = true && that.isSetConnectTime();
    if (this_present_connectTime || that_present_connectTime) {
      if (!(this_present_connectTime && that_present_connectTime))
        return false;
      if (!this.connectTime.equals(that.connectTime))
        return false;
    }

    boolean this_present_startDate = true && this.isSetStartDate();
    boolean that_present_startDate = true && that.isSetStartDate();
    if (this_present_startDate || that_present_startDate) {
      if (!(this_present_startDate && that_present_startDate))
        return false;
      if (!this.startDate.equals(that.startDate))
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_tradingDay = true && this.isSetTradingDay();
    boolean that_present_tradingDay = true && that.isSetTradingDay();
    if (this_present_tradingDay || that_present_tradingDay) {
      if (!(this_present_tradingDay && that_present_tradingDay))
        return false;
      if (!this.tradingDay.equals(that.tradingDay))
        return false;
    }

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_maxTradeID = true && this.isSetMaxTradeID();
    boolean that_present_maxTradeID = true && that.isSetMaxTradeID();
    if (this_present_maxTradeID || that_present_maxTradeID) {
      if (!(this_present_maxTradeID && that_present_maxTradeID))
        return false;
      if (!this.maxTradeID.equals(that.maxTradeID))
        return false;
    }

    boolean this_present_maxOrderMessageReference = true && this.isSetMaxOrderMessageReference();
    boolean that_present_maxOrderMessageReference = true && that.isSetMaxOrderMessageReference();
    if (this_present_maxOrderMessageReference || that_present_maxOrderMessageReference) {
      if (!(this_present_maxOrderMessageReference && that_present_maxOrderMessageReference))
        return false;
      if (!this.maxOrderMessageReference.equals(that.maxOrderMessageReference))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcMDTraderOfferField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExchangeID()).compareTo(other.isSetExchangeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeID, other.exchangeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraderID()).compareTo(other.isSetTraderID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraderID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traderID, other.traderID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParticipantID()).compareTo(other.isSetParticipantID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParticipantID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.participantID, other.participantID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstallID()).compareTo(other.isSetInstallID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstallID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.installID, other.installID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderLocalID()).compareTo(other.isSetOrderLocalID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderLocalID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderLocalID, other.orderLocalID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraderConnectStatus()).compareTo(other.isSetTraderConnectStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraderConnectStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traderConnectStatus, other.traderConnectStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConnectRequestDate()).compareTo(other.isSetConnectRequestDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnectRequestDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connectRequestDate, other.connectRequestDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConnectRequestTime()).compareTo(other.isSetConnectRequestTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnectRequestTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connectRequestTime, other.connectRequestTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastReportDate()).compareTo(other.isSetLastReportDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastReportDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastReportDate, other.lastReportDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastReportTime()).compareTo(other.isSetLastReportTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastReportTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastReportTime, other.lastReportTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConnectDate()).compareTo(other.isSetConnectDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnectDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connectDate, other.connectDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConnectTime()).compareTo(other.isSetConnectTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnectTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connectTime, other.connectTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(other.isSetStartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, other.startDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradingDay()).compareTo(other.isSetTradingDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradingDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradingDay, other.tradingDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxTradeID()).compareTo(other.isSetMaxTradeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxTradeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxTradeID, other.maxTradeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxOrderMessageReference()).compareTo(other.isSetMaxOrderMessageReference());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxOrderMessageReference()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxOrderMessageReference, other.maxOrderMessageReference);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcMDTraderOfferField(");
    boolean first = true;

    sb.append("exchangeID:");
    if (this.exchangeID == null) {
      sb.append("null");
    } else {
      sb.append(this.exchangeID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("traderID:");
    if (this.traderID == null) {
      sb.append("null");
    } else {
      sb.append(this.traderID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("participantID:");
    if (this.participantID == null) {
      sb.append("null");
    } else {
      sb.append(this.participantID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("installID:");
    sb.append(this.installID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderLocalID:");
    if (this.orderLocalID == null) {
      sb.append("null");
    } else {
      sb.append(this.orderLocalID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("traderConnectStatus:");
    if (this.traderConnectStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.traderConnectStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("connectRequestDate:");
    if (this.connectRequestDate == null) {
      sb.append("null");
    } else {
      sb.append(this.connectRequestDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("connectRequestTime:");
    if (this.connectRequestTime == null) {
      sb.append("null");
    } else {
      sb.append(this.connectRequestTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastReportDate:");
    if (this.lastReportDate == null) {
      sb.append("null");
    } else {
      sb.append(this.lastReportDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastReportTime:");
    if (this.lastReportTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastReportTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("connectDate:");
    if (this.connectDate == null) {
      sb.append("null");
    } else {
      sb.append(this.connectDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("connectTime:");
    if (this.connectTime == null) {
      sb.append("null");
    } else {
      sb.append(this.connectTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startDate:");
    if (this.startDate == null) {
      sb.append("null");
    } else {
      sb.append(this.startDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    if (this.startTime == null) {
      sb.append("null");
    } else {
      sb.append(this.startTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradingDay:");
    if (this.tradingDay == null) {
      sb.append("null");
    } else {
      sb.append(this.tradingDay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxTradeID:");
    if (this.maxTradeID == null) {
      sb.append("null");
    } else {
      sb.append(this.maxTradeID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxOrderMessageReference:");
    if (this.maxOrderMessageReference == null) {
      sb.append("null");
    } else {
      sb.append(this.maxOrderMessageReference);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcMDTraderOfferFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcMDTraderOfferFieldStandardScheme getScheme() {
      return new CThostFtdcMDTraderOfferFieldStandardScheme();
    }
  }

  private static class CThostFtdcMDTraderOfferFieldStandardScheme extends StandardScheme<CThostFtdcMDTraderOfferField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcMDTraderOfferField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXCHANGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeID = iprot.readString();
              struct.setExchangeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRADER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traderID = iprot.readString();
              struct.setTraderIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARTICIPANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.participantID = iprot.readString();
              struct.setParticipantIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INSTALL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.installID = iprot.readI32();
              struct.setInstallIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ORDER_LOCAL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderLocalID = iprot.readString();
              struct.setOrderLocalIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TRADER_CONNECT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traderConnectStatus = iprot.readString();
              struct.setTraderConnectStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CONNECT_REQUEST_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.connectRequestDate = iprot.readString();
              struct.setConnectRequestDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CONNECT_REQUEST_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.connectRequestTime = iprot.readString();
              struct.setConnectRequestTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LAST_REPORT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastReportDate = iprot.readString();
              struct.setLastReportDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LAST_REPORT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastReportTime = iprot.readString();
              struct.setLastReportTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CONNECT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.connectDate = iprot.readString();
              struct.setConnectDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CONNECT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.connectTime = iprot.readString();
              struct.setConnectTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startDate = iprot.readString();
              struct.setStartDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TRADING_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradingDay = iprot.readString();
              struct.setTradingDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // MAX_TRADE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.maxTradeID = iprot.readString();
              struct.setMaxTradeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MAX_ORDER_MESSAGE_REFERENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.maxOrderMessageReference = iprot.readString();
              struct.setMaxOrderMessageReferenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcMDTraderOfferField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.exchangeID != null) {
        oprot.writeFieldBegin(EXCHANGE_ID_FIELD_DESC);
        oprot.writeString(struct.exchangeID);
        oprot.writeFieldEnd();
      }
      if (struct.traderID != null) {
        oprot.writeFieldBegin(TRADER_ID_FIELD_DESC);
        oprot.writeString(struct.traderID);
        oprot.writeFieldEnd();
      }
      if (struct.participantID != null) {
        oprot.writeFieldBegin(PARTICIPANT_ID_FIELD_DESC);
        oprot.writeString(struct.participantID);
        oprot.writeFieldEnd();
      }
      if (struct.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(struct.password);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INSTALL_ID_FIELD_DESC);
      oprot.writeI32(struct.installID);
      oprot.writeFieldEnd();
      if (struct.orderLocalID != null) {
        oprot.writeFieldBegin(ORDER_LOCAL_ID_FIELD_DESC);
        oprot.writeString(struct.orderLocalID);
        oprot.writeFieldEnd();
      }
      if (struct.traderConnectStatus != null) {
        oprot.writeFieldBegin(TRADER_CONNECT_STATUS_FIELD_DESC);
        oprot.writeString(struct.traderConnectStatus);
        oprot.writeFieldEnd();
      }
      if (struct.connectRequestDate != null) {
        oprot.writeFieldBegin(CONNECT_REQUEST_DATE_FIELD_DESC);
        oprot.writeString(struct.connectRequestDate);
        oprot.writeFieldEnd();
      }
      if (struct.connectRequestTime != null) {
        oprot.writeFieldBegin(CONNECT_REQUEST_TIME_FIELD_DESC);
        oprot.writeString(struct.connectRequestTime);
        oprot.writeFieldEnd();
      }
      if (struct.lastReportDate != null) {
        oprot.writeFieldBegin(LAST_REPORT_DATE_FIELD_DESC);
        oprot.writeString(struct.lastReportDate);
        oprot.writeFieldEnd();
      }
      if (struct.lastReportTime != null) {
        oprot.writeFieldBegin(LAST_REPORT_TIME_FIELD_DESC);
        oprot.writeString(struct.lastReportTime);
        oprot.writeFieldEnd();
      }
      if (struct.connectDate != null) {
        oprot.writeFieldBegin(CONNECT_DATE_FIELD_DESC);
        oprot.writeString(struct.connectDate);
        oprot.writeFieldEnd();
      }
      if (struct.connectTime != null) {
        oprot.writeFieldBegin(CONNECT_TIME_FIELD_DESC);
        oprot.writeString(struct.connectTime);
        oprot.writeFieldEnd();
      }
      if (struct.startDate != null) {
        oprot.writeFieldBegin(START_DATE_FIELD_DESC);
        oprot.writeString(struct.startDate);
        oprot.writeFieldEnd();
      }
      if (struct.startTime != null) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeString(struct.startTime);
        oprot.writeFieldEnd();
      }
      if (struct.tradingDay != null) {
        oprot.writeFieldBegin(TRADING_DAY_FIELD_DESC);
        oprot.writeString(struct.tradingDay);
        oprot.writeFieldEnd();
      }
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.maxTradeID != null) {
        oprot.writeFieldBegin(MAX_TRADE_ID_FIELD_DESC);
        oprot.writeString(struct.maxTradeID);
        oprot.writeFieldEnd();
      }
      if (struct.maxOrderMessageReference != null) {
        oprot.writeFieldBegin(MAX_ORDER_MESSAGE_REFERENCE_FIELD_DESC);
        oprot.writeString(struct.maxOrderMessageReference);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcMDTraderOfferFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcMDTraderOfferFieldTupleScheme getScheme() {
      return new CThostFtdcMDTraderOfferFieldTupleScheme();
    }
  }

  private static class CThostFtdcMDTraderOfferFieldTupleScheme extends TupleScheme<CThostFtdcMDTraderOfferField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcMDTraderOfferField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetExchangeID()) {
        optionals.set(0);
      }
      if (struct.isSetTraderID()) {
        optionals.set(1);
      }
      if (struct.isSetParticipantID()) {
        optionals.set(2);
      }
      if (struct.isSetPassword()) {
        optionals.set(3);
      }
      if (struct.isSetInstallID()) {
        optionals.set(4);
      }
      if (struct.isSetOrderLocalID()) {
        optionals.set(5);
      }
      if (struct.isSetTraderConnectStatus()) {
        optionals.set(6);
      }
      if (struct.isSetConnectRequestDate()) {
        optionals.set(7);
      }
      if (struct.isSetConnectRequestTime()) {
        optionals.set(8);
      }
      if (struct.isSetLastReportDate()) {
        optionals.set(9);
      }
      if (struct.isSetLastReportTime()) {
        optionals.set(10);
      }
      if (struct.isSetConnectDate()) {
        optionals.set(11);
      }
      if (struct.isSetConnectTime()) {
        optionals.set(12);
      }
      if (struct.isSetStartDate()) {
        optionals.set(13);
      }
      if (struct.isSetStartTime()) {
        optionals.set(14);
      }
      if (struct.isSetTradingDay()) {
        optionals.set(15);
      }
      if (struct.isSetBrokerID()) {
        optionals.set(16);
      }
      if (struct.isSetMaxTradeID()) {
        optionals.set(17);
      }
      if (struct.isSetMaxOrderMessageReference()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetExchangeID()) {
        oprot.writeString(struct.exchangeID);
      }
      if (struct.isSetTraderID()) {
        oprot.writeString(struct.traderID);
      }
      if (struct.isSetParticipantID()) {
        oprot.writeString(struct.participantID);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetInstallID()) {
        oprot.writeI32(struct.installID);
      }
      if (struct.isSetOrderLocalID()) {
        oprot.writeString(struct.orderLocalID);
      }
      if (struct.isSetTraderConnectStatus()) {
        oprot.writeString(struct.traderConnectStatus);
      }
      if (struct.isSetConnectRequestDate()) {
        oprot.writeString(struct.connectRequestDate);
      }
      if (struct.isSetConnectRequestTime()) {
        oprot.writeString(struct.connectRequestTime);
      }
      if (struct.isSetLastReportDate()) {
        oprot.writeString(struct.lastReportDate);
      }
      if (struct.isSetLastReportTime()) {
        oprot.writeString(struct.lastReportTime);
      }
      if (struct.isSetConnectDate()) {
        oprot.writeString(struct.connectDate);
      }
      if (struct.isSetConnectTime()) {
        oprot.writeString(struct.connectTime);
      }
      if (struct.isSetStartDate()) {
        oprot.writeString(struct.startDate);
      }
      if (struct.isSetStartTime()) {
        oprot.writeString(struct.startTime);
      }
      if (struct.isSetTradingDay()) {
        oprot.writeString(struct.tradingDay);
      }
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetMaxTradeID()) {
        oprot.writeString(struct.maxTradeID);
      }
      if (struct.isSetMaxOrderMessageReference()) {
        oprot.writeString(struct.maxOrderMessageReference);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcMDTraderOfferField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.exchangeID = iprot.readString();
        struct.setExchangeIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.traderID = iprot.readString();
        struct.setTraderIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.participantID = iprot.readString();
        struct.setParticipantIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(4)) {
        struct.installID = iprot.readI32();
        struct.setInstallIDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.orderLocalID = iprot.readString();
        struct.setOrderLocalIDIsSet(true);
      }
      if (incoming.get(6)) {
        struct.traderConnectStatus = iprot.readString();
        struct.setTraderConnectStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.connectRequestDate = iprot.readString();
        struct.setConnectRequestDateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.connectRequestTime = iprot.readString();
        struct.setConnectRequestTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.lastReportDate = iprot.readString();
        struct.setLastReportDateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.lastReportTime = iprot.readString();
        struct.setLastReportTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.connectDate = iprot.readString();
        struct.setConnectDateIsSet(true);
      }
      if (incoming.get(12)) {
        struct.connectTime = iprot.readString();
        struct.setConnectTimeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.startDate = iprot.readString();
        struct.setStartDateIsSet(true);
      }
      if (incoming.get(14)) {
        struct.startTime = iprot.readString();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.tradingDay = iprot.readString();
        struct.setTradingDayIsSet(true);
      }
      if (incoming.get(16)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(17)) {
        struct.maxTradeID = iprot.readString();
        struct.setMaxTradeIDIsSet(true);
      }
      if (incoming.get(18)) {
        struct.maxOrderMessageReference = iprot.readString();
        struct.setMaxOrderMessageReferenceIsSet(true);
      }
    }
  }

}

