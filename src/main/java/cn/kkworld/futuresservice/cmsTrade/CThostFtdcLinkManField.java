/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcLinkManField implements org.apache.thrift.TBase<CThostFtdcLinkManField, CThostFtdcLinkManField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcLinkManField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcLinkManField");

  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INVESTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("investorID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PERSON_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("personType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IDENTIFIED_CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("identifiedCardType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IDENTIFIED_CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("identifiedCardNo", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PERSON_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("personName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TELEPHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("telephone", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ZIP_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("zipCode", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField U_OAZIP_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("uOAZipCode", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PERSON_FULL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("personFullName", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcLinkManFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcLinkManFieldTupleSchemeFactory());
  }

  public String brokerID; // required
  public String investorID; // required
  public String personType; // required
  public String identifiedCardType; // required
  public String identifiedCardNo; // required
  public String personName; // required
  public String telephone; // required
  public String address; // required
  public String zipCode; // required
  public int priority; // required
  public String uOAZipCode; // required
  public String personFullName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BROKER_ID((short)1, "brokerID"),
    INVESTOR_ID((short)2, "investorID"),
    PERSON_TYPE((short)3, "personType"),
    IDENTIFIED_CARD_TYPE((short)4, "identifiedCardType"),
    IDENTIFIED_CARD_NO((short)5, "identifiedCardNo"),
    PERSON_NAME((short)6, "personName"),
    TELEPHONE((short)7, "telephone"),
    ADDRESS((short)8, "address"),
    ZIP_CODE((short)9, "zipCode"),
    PRIORITY((short)10, "priority"),
    U_OAZIP_CODE((short)11, "uOAZipCode"),
    PERSON_FULL_NAME((short)12, "personFullName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BROKER_ID
          return BROKER_ID;
        case 2: // INVESTOR_ID
          return INVESTOR_ID;
        case 3: // PERSON_TYPE
          return PERSON_TYPE;
        case 4: // IDENTIFIED_CARD_TYPE
          return IDENTIFIED_CARD_TYPE;
        case 5: // IDENTIFIED_CARD_NO
          return IDENTIFIED_CARD_NO;
        case 6: // PERSON_NAME
          return PERSON_NAME;
        case 7: // TELEPHONE
          return TELEPHONE;
        case 8: // ADDRESS
          return ADDRESS;
        case 9: // ZIP_CODE
          return ZIP_CODE;
        case 10: // PRIORITY
          return PRIORITY;
        case 11: // U_OAZIP_CODE
          return U_OAZIP_CODE;
        case 12: // PERSON_FULL_NAME
          return PERSON_FULL_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRIORITY_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.INVESTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("investorID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInvestorIDType")));
    tmpMap.put(_Fields.PERSON_TYPE, new org.apache.thrift.meta_data.FieldMetaData("personType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcPersonTypeType")));
    tmpMap.put(_Fields.IDENTIFIED_CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("identifiedCardType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcIdCardTypeType")));
    tmpMap.put(_Fields.IDENTIFIED_CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("identifiedCardNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcIdentifiedCardNoType")));
    tmpMap.put(_Fields.PERSON_NAME, new org.apache.thrift.meta_data.FieldMetaData("personName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcPartyNameType")));
    tmpMap.put(_Fields.TELEPHONE, new org.apache.thrift.meta_data.FieldMetaData("telephone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTelephoneType")));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcAddressType")));
    tmpMap.put(_Fields.ZIP_CODE, new org.apache.thrift.meta_data.FieldMetaData("zipCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcZipCodeType")));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcPriorityType")));
    tmpMap.put(_Fields.U_OAZIP_CODE, new org.apache.thrift.meta_data.FieldMetaData("uOAZipCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcUOAZipCodeType")));
    tmpMap.put(_Fields.PERSON_FULL_NAME, new org.apache.thrift.meta_data.FieldMetaData("personFullName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInvestorFullNameType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcLinkManField.class, metaDataMap);
  }

  public CThostFtdcLinkManField() {
  }

  public CThostFtdcLinkManField(
    String brokerID,
    String investorID,
    String personType,
    String identifiedCardType,
    String identifiedCardNo,
    String personName,
    String telephone,
    String address,
    String zipCode,
    int priority,
    String uOAZipCode,
    String personFullName)
  {
    this();
    this.brokerID = brokerID;
    this.investorID = investorID;
    this.personType = personType;
    this.identifiedCardType = identifiedCardType;
    this.identifiedCardNo = identifiedCardNo;
    this.personName = personName;
    this.telephone = telephone;
    this.address = address;
    this.zipCode = zipCode;
    this.priority = priority;
    setPriorityIsSet(true);
    this.uOAZipCode = uOAZipCode;
    this.personFullName = personFullName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcLinkManField(CThostFtdcLinkManField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetInvestorID()) {
      this.investorID = other.investorID;
    }
    if (other.isSetPersonType()) {
      this.personType = other.personType;
    }
    if (other.isSetIdentifiedCardType()) {
      this.identifiedCardType = other.identifiedCardType;
    }
    if (other.isSetIdentifiedCardNo()) {
      this.identifiedCardNo = other.identifiedCardNo;
    }
    if (other.isSetPersonName()) {
      this.personName = other.personName;
    }
    if (other.isSetTelephone()) {
      this.telephone = other.telephone;
    }
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetZipCode()) {
      this.zipCode = other.zipCode;
    }
    this.priority = other.priority;
    if (other.isSetUOAZipCode()) {
      this.uOAZipCode = other.uOAZipCode;
    }
    if (other.isSetPersonFullName()) {
      this.personFullName = other.personFullName;
    }
  }

  public CThostFtdcLinkManField deepCopy() {
    return new CThostFtdcLinkManField(this);
  }

  @Override
  public void clear() {
    this.brokerID = null;
    this.investorID = null;
    this.personType = null;
    this.identifiedCardType = null;
    this.identifiedCardNo = null;
    this.personName = null;
    this.telephone = null;
    this.address = null;
    this.zipCode = null;
    setPriorityIsSet(false);
    this.priority = 0;
    this.uOAZipCode = null;
    this.personFullName = null;
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcLinkManField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getInvestorID() {
    return this.investorID;
  }

  public CThostFtdcLinkManField setInvestorID(String investorID) {
    this.investorID = investorID;
    return this;
  }

  public void unsetInvestorID() {
    this.investorID = null;
  }

  /** Returns true if field investorID is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorID() {
    return this.investorID != null;
  }

  public void setInvestorIDIsSet(boolean value) {
    if (!value) {
      this.investorID = null;
    }
  }

  public String getPersonType() {
    return this.personType;
  }

  public CThostFtdcLinkManField setPersonType(String personType) {
    this.personType = personType;
    return this;
  }

  public void unsetPersonType() {
    this.personType = null;
  }

  /** Returns true if field personType is set (has been assigned a value) and false otherwise */
  public boolean isSetPersonType() {
    return this.personType != null;
  }

  public void setPersonTypeIsSet(boolean value) {
    if (!value) {
      this.personType = null;
    }
  }

  public String getIdentifiedCardType() {
    return this.identifiedCardType;
  }

  public CThostFtdcLinkManField setIdentifiedCardType(String identifiedCardType) {
    this.identifiedCardType = identifiedCardType;
    return this;
  }

  public void unsetIdentifiedCardType() {
    this.identifiedCardType = null;
  }

  /** Returns true if field identifiedCardType is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentifiedCardType() {
    return this.identifiedCardType != null;
  }

  public void setIdentifiedCardTypeIsSet(boolean value) {
    if (!value) {
      this.identifiedCardType = null;
    }
  }

  public String getIdentifiedCardNo() {
    return this.identifiedCardNo;
  }

  public CThostFtdcLinkManField setIdentifiedCardNo(String identifiedCardNo) {
    this.identifiedCardNo = identifiedCardNo;
    return this;
  }

  public void unsetIdentifiedCardNo() {
    this.identifiedCardNo = null;
  }

  /** Returns true if field identifiedCardNo is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentifiedCardNo() {
    return this.identifiedCardNo != null;
  }

  public void setIdentifiedCardNoIsSet(boolean value) {
    if (!value) {
      this.identifiedCardNo = null;
    }
  }

  public String getPersonName() {
    return this.personName;
  }

  public CThostFtdcLinkManField setPersonName(String personName) {
    this.personName = personName;
    return this;
  }

  public void unsetPersonName() {
    this.personName = null;
  }

  /** Returns true if field personName is set (has been assigned a value) and false otherwise */
  public boolean isSetPersonName() {
    return this.personName != null;
  }

  public void setPersonNameIsSet(boolean value) {
    if (!value) {
      this.personName = null;
    }
  }

  public String getTelephone() {
    return this.telephone;
  }

  public CThostFtdcLinkManField setTelephone(String telephone) {
    this.telephone = telephone;
    return this;
  }

  public void unsetTelephone() {
    this.telephone = null;
  }

  /** Returns true if field telephone is set (has been assigned a value) and false otherwise */
  public boolean isSetTelephone() {
    return this.telephone != null;
  }

  public void setTelephoneIsSet(boolean value) {
    if (!value) {
      this.telephone = null;
    }
  }

  public String getAddress() {
    return this.address;
  }

  public CThostFtdcLinkManField setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public String getZipCode() {
    return this.zipCode;
  }

  public CThostFtdcLinkManField setZipCode(String zipCode) {
    this.zipCode = zipCode;
    return this;
  }

  public void unsetZipCode() {
    this.zipCode = null;
  }

  /** Returns true if field zipCode is set (has been assigned a value) and false otherwise */
  public boolean isSetZipCode() {
    return this.zipCode != null;
  }

  public void setZipCodeIsSet(boolean value) {
    if (!value) {
      this.zipCode = null;
    }
  }

  public int getPriority() {
    return this.priority;
  }

  public CThostFtdcLinkManField setPriority(int priority) {
    this.priority = priority;
    setPriorityIsSet(true);
    return this;
  }

  public void unsetPriority() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  public void setPriorityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
  }

  public String getUOAZipCode() {
    return this.uOAZipCode;
  }

  public CThostFtdcLinkManField setUOAZipCode(String uOAZipCode) {
    this.uOAZipCode = uOAZipCode;
    return this;
  }

  public void unsetUOAZipCode() {
    this.uOAZipCode = null;
  }

  /** Returns true if field uOAZipCode is set (has been assigned a value) and false otherwise */
  public boolean isSetUOAZipCode() {
    return this.uOAZipCode != null;
  }

  public void setUOAZipCodeIsSet(boolean value) {
    if (!value) {
      this.uOAZipCode = null;
    }
  }

  public String getPersonFullName() {
    return this.personFullName;
  }

  public CThostFtdcLinkManField setPersonFullName(String personFullName) {
    this.personFullName = personFullName;
    return this;
  }

  public void unsetPersonFullName() {
    this.personFullName = null;
  }

  /** Returns true if field personFullName is set (has been assigned a value) and false otherwise */
  public boolean isSetPersonFullName() {
    return this.personFullName != null;
  }

  public void setPersonFullNameIsSet(boolean value) {
    if (!value) {
      this.personFullName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case INVESTOR_ID:
      if (value == null) {
        unsetInvestorID();
      } else {
        setInvestorID((String)value);
      }
      break;

    case PERSON_TYPE:
      if (value == null) {
        unsetPersonType();
      } else {
        setPersonType((String)value);
      }
      break;

    case IDENTIFIED_CARD_TYPE:
      if (value == null) {
        unsetIdentifiedCardType();
      } else {
        setIdentifiedCardType((String)value);
      }
      break;

    case IDENTIFIED_CARD_NO:
      if (value == null) {
        unsetIdentifiedCardNo();
      } else {
        setIdentifiedCardNo((String)value);
      }
      break;

    case PERSON_NAME:
      if (value == null) {
        unsetPersonName();
      } else {
        setPersonName((String)value);
      }
      break;

    case TELEPHONE:
      if (value == null) {
        unsetTelephone();
      } else {
        setTelephone((String)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case ZIP_CODE:
      if (value == null) {
        unsetZipCode();
      } else {
        setZipCode((String)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((Integer)value);
      }
      break;

    case U_OAZIP_CODE:
      if (value == null) {
        unsetUOAZipCode();
      } else {
        setUOAZipCode((String)value);
      }
      break;

    case PERSON_FULL_NAME:
      if (value == null) {
        unsetPersonFullName();
      } else {
        setPersonFullName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BROKER_ID:
      return getBrokerID();

    case INVESTOR_ID:
      return getInvestorID();

    case PERSON_TYPE:
      return getPersonType();

    case IDENTIFIED_CARD_TYPE:
      return getIdentifiedCardType();

    case IDENTIFIED_CARD_NO:
      return getIdentifiedCardNo();

    case PERSON_NAME:
      return getPersonName();

    case TELEPHONE:
      return getTelephone();

    case ADDRESS:
      return getAddress();

    case ZIP_CODE:
      return getZipCode();

    case PRIORITY:
      return Integer.valueOf(getPriority());

    case U_OAZIP_CODE:
      return getUOAZipCode();

    case PERSON_FULL_NAME:
      return getPersonFullName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BROKER_ID:
      return isSetBrokerID();
    case INVESTOR_ID:
      return isSetInvestorID();
    case PERSON_TYPE:
      return isSetPersonType();
    case IDENTIFIED_CARD_TYPE:
      return isSetIdentifiedCardType();
    case IDENTIFIED_CARD_NO:
      return isSetIdentifiedCardNo();
    case PERSON_NAME:
      return isSetPersonName();
    case TELEPHONE:
      return isSetTelephone();
    case ADDRESS:
      return isSetAddress();
    case ZIP_CODE:
      return isSetZipCode();
    case PRIORITY:
      return isSetPriority();
    case U_OAZIP_CODE:
      return isSetUOAZipCode();
    case PERSON_FULL_NAME:
      return isSetPersonFullName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcLinkManField)
      return this.equals((CThostFtdcLinkManField)that);
    return false;
  }

  public boolean equals(CThostFtdcLinkManField that) {
    if (that == null)
      return false;

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_investorID = true && this.isSetInvestorID();
    boolean that_present_investorID = true && that.isSetInvestorID();
    if (this_present_investorID || that_present_investorID) {
      if (!(this_present_investorID && that_present_investorID))
        return false;
      if (!this.investorID.equals(that.investorID))
        return false;
    }

    boolean this_present_personType = true && this.isSetPersonType();
    boolean that_present_personType = true && that.isSetPersonType();
    if (this_present_personType || that_present_personType) {
      if (!(this_present_personType && that_present_personType))
        return false;
      if (!this.personType.equals(that.personType))
        return false;
    }

    boolean this_present_identifiedCardType = true && this.isSetIdentifiedCardType();
    boolean that_present_identifiedCardType = true && that.isSetIdentifiedCardType();
    if (this_present_identifiedCardType || that_present_identifiedCardType) {
      if (!(this_present_identifiedCardType && that_present_identifiedCardType))
        return false;
      if (!this.identifiedCardType.equals(that.identifiedCardType))
        return false;
    }

    boolean this_present_identifiedCardNo = true && this.isSetIdentifiedCardNo();
    boolean that_present_identifiedCardNo = true && that.isSetIdentifiedCardNo();
    if (this_present_identifiedCardNo || that_present_identifiedCardNo) {
      if (!(this_present_identifiedCardNo && that_present_identifiedCardNo))
        return false;
      if (!this.identifiedCardNo.equals(that.identifiedCardNo))
        return false;
    }

    boolean this_present_personName = true && this.isSetPersonName();
    boolean that_present_personName = true && that.isSetPersonName();
    if (this_present_personName || that_present_personName) {
      if (!(this_present_personName && that_present_personName))
        return false;
      if (!this.personName.equals(that.personName))
        return false;
    }

    boolean this_present_telephone = true && this.isSetTelephone();
    boolean that_present_telephone = true && that.isSetTelephone();
    if (this_present_telephone || that_present_telephone) {
      if (!(this_present_telephone && that_present_telephone))
        return false;
      if (!this.telephone.equals(that.telephone))
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_zipCode = true && this.isSetZipCode();
    boolean that_present_zipCode = true && that.isSetZipCode();
    if (this_present_zipCode || that_present_zipCode) {
      if (!(this_present_zipCode && that_present_zipCode))
        return false;
      if (!this.zipCode.equals(that.zipCode))
        return false;
    }

    boolean this_present_priority = true;
    boolean that_present_priority = true;
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (this.priority != that.priority)
        return false;
    }

    boolean this_present_uOAZipCode = true && this.isSetUOAZipCode();
    boolean that_present_uOAZipCode = true && that.isSetUOAZipCode();
    if (this_present_uOAZipCode || that_present_uOAZipCode) {
      if (!(this_present_uOAZipCode && that_present_uOAZipCode))
        return false;
      if (!this.uOAZipCode.equals(that.uOAZipCode))
        return false;
    }

    boolean this_present_personFullName = true && this.isSetPersonFullName();
    boolean that_present_personFullName = true && that.isSetPersonFullName();
    if (this_present_personFullName || that_present_personFullName) {
      if (!(this_present_personFullName && that_present_personFullName))
        return false;
      if (!this.personFullName.equals(that.personFullName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcLinkManField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestorID()).compareTo(other.isSetInvestorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorID, other.investorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPersonType()).compareTo(other.isSetPersonType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPersonType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.personType, other.personType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentifiedCardType()).compareTo(other.isSetIdentifiedCardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentifiedCardType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identifiedCardType, other.identifiedCardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentifiedCardNo()).compareTo(other.isSetIdentifiedCardNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentifiedCardNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identifiedCardNo, other.identifiedCardNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPersonName()).compareTo(other.isSetPersonName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPersonName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.personName, other.personName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTelephone()).compareTo(other.isSetTelephone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTelephone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.telephone, other.telephone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZipCode()).compareTo(other.isSetZipCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZipCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zipCode, other.zipCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUOAZipCode()).compareTo(other.isSetUOAZipCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUOAZipCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uOAZipCode, other.uOAZipCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPersonFullName()).compareTo(other.isSetPersonFullName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPersonFullName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.personFullName, other.personFullName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcLinkManField(");
    boolean first = true;

    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("investorID:");
    if (this.investorID == null) {
      sb.append("null");
    } else {
      sb.append(this.investorID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("personType:");
    if (this.personType == null) {
      sb.append("null");
    } else {
      sb.append(this.personType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identifiedCardType:");
    if (this.identifiedCardType == null) {
      sb.append("null");
    } else {
      sb.append(this.identifiedCardType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identifiedCardNo:");
    if (this.identifiedCardNo == null) {
      sb.append("null");
    } else {
      sb.append(this.identifiedCardNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("personName:");
    if (this.personName == null) {
      sb.append("null");
    } else {
      sb.append(this.personName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("telephone:");
    if (this.telephone == null) {
      sb.append("null");
    } else {
      sb.append(this.telephone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      sb.append(this.address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("zipCode:");
    if (this.zipCode == null) {
      sb.append("null");
    } else {
      sb.append(this.zipCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("priority:");
    sb.append(this.priority);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uOAZipCode:");
    if (this.uOAZipCode == null) {
      sb.append("null");
    } else {
      sb.append(this.uOAZipCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("personFullName:");
    if (this.personFullName == null) {
      sb.append("null");
    } else {
      sb.append(this.personFullName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcLinkManFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcLinkManFieldStandardScheme getScheme() {
      return new CThostFtdcLinkManFieldStandardScheme();
    }
  }

  private static class CThostFtdcLinkManFieldStandardScheme extends StandardScheme<CThostFtdcLinkManField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcLinkManField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INVESTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorID = iprot.readString();
              struct.setInvestorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PERSON_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.personType = iprot.readString();
              struct.setPersonTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IDENTIFIED_CARD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identifiedCardType = iprot.readString();
              struct.setIdentifiedCardTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IDENTIFIED_CARD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identifiedCardNo = iprot.readString();
              struct.setIdentifiedCardNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PERSON_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.personName = iprot.readString();
              struct.setPersonNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TELEPHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.telephone = iprot.readString();
              struct.setTelephoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ZIP_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zipCode = iprot.readString();
              struct.setZipCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priority = iprot.readI32();
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // U_OAZIP_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uOAZipCode = iprot.readString();
              struct.setUOAZipCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PERSON_FULL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.personFullName = iprot.readString();
              struct.setPersonFullNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcLinkManField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.investorID != null) {
        oprot.writeFieldBegin(INVESTOR_ID_FIELD_DESC);
        oprot.writeString(struct.investorID);
        oprot.writeFieldEnd();
      }
      if (struct.personType != null) {
        oprot.writeFieldBegin(PERSON_TYPE_FIELD_DESC);
        oprot.writeString(struct.personType);
        oprot.writeFieldEnd();
      }
      if (struct.identifiedCardType != null) {
        oprot.writeFieldBegin(IDENTIFIED_CARD_TYPE_FIELD_DESC);
        oprot.writeString(struct.identifiedCardType);
        oprot.writeFieldEnd();
      }
      if (struct.identifiedCardNo != null) {
        oprot.writeFieldBegin(IDENTIFIED_CARD_NO_FIELD_DESC);
        oprot.writeString(struct.identifiedCardNo);
        oprot.writeFieldEnd();
      }
      if (struct.personName != null) {
        oprot.writeFieldBegin(PERSON_NAME_FIELD_DESC);
        oprot.writeString(struct.personName);
        oprot.writeFieldEnd();
      }
      if (struct.telephone != null) {
        oprot.writeFieldBegin(TELEPHONE_FIELD_DESC);
        oprot.writeString(struct.telephone);
        oprot.writeFieldEnd();
      }
      if (struct.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        oprot.writeString(struct.address);
        oprot.writeFieldEnd();
      }
      if (struct.zipCode != null) {
        oprot.writeFieldBegin(ZIP_CODE_FIELD_DESC);
        oprot.writeString(struct.zipCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
      oprot.writeI32(struct.priority);
      oprot.writeFieldEnd();
      if (struct.uOAZipCode != null) {
        oprot.writeFieldBegin(U_OAZIP_CODE_FIELD_DESC);
        oprot.writeString(struct.uOAZipCode);
        oprot.writeFieldEnd();
      }
      if (struct.personFullName != null) {
        oprot.writeFieldBegin(PERSON_FULL_NAME_FIELD_DESC);
        oprot.writeString(struct.personFullName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcLinkManFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcLinkManFieldTupleScheme getScheme() {
      return new CThostFtdcLinkManFieldTupleScheme();
    }
  }

  private static class CThostFtdcLinkManFieldTupleScheme extends TupleScheme<CThostFtdcLinkManField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcLinkManField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBrokerID()) {
        optionals.set(0);
      }
      if (struct.isSetInvestorID()) {
        optionals.set(1);
      }
      if (struct.isSetPersonType()) {
        optionals.set(2);
      }
      if (struct.isSetIdentifiedCardType()) {
        optionals.set(3);
      }
      if (struct.isSetIdentifiedCardNo()) {
        optionals.set(4);
      }
      if (struct.isSetPersonName()) {
        optionals.set(5);
      }
      if (struct.isSetTelephone()) {
        optionals.set(6);
      }
      if (struct.isSetAddress()) {
        optionals.set(7);
      }
      if (struct.isSetZipCode()) {
        optionals.set(8);
      }
      if (struct.isSetPriority()) {
        optionals.set(9);
      }
      if (struct.isSetUOAZipCode()) {
        optionals.set(10);
      }
      if (struct.isSetPersonFullName()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetInvestorID()) {
        oprot.writeString(struct.investorID);
      }
      if (struct.isSetPersonType()) {
        oprot.writeString(struct.personType);
      }
      if (struct.isSetIdentifiedCardType()) {
        oprot.writeString(struct.identifiedCardType);
      }
      if (struct.isSetIdentifiedCardNo()) {
        oprot.writeString(struct.identifiedCardNo);
      }
      if (struct.isSetPersonName()) {
        oprot.writeString(struct.personName);
      }
      if (struct.isSetTelephone()) {
        oprot.writeString(struct.telephone);
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
      if (struct.isSetZipCode()) {
        oprot.writeString(struct.zipCode);
      }
      if (struct.isSetPriority()) {
        oprot.writeI32(struct.priority);
      }
      if (struct.isSetUOAZipCode()) {
        oprot.writeString(struct.uOAZipCode);
      }
      if (struct.isSetPersonFullName()) {
        oprot.writeString(struct.personFullName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcLinkManField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.investorID = iprot.readString();
        struct.setInvestorIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.personType = iprot.readString();
        struct.setPersonTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.identifiedCardType = iprot.readString();
        struct.setIdentifiedCardTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.identifiedCardNo = iprot.readString();
        struct.setIdentifiedCardNoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.personName = iprot.readString();
        struct.setPersonNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.telephone = iprot.readString();
        struct.setTelephoneIsSet(true);
      }
      if (incoming.get(7)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(8)) {
        struct.zipCode = iprot.readString();
        struct.setZipCodeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.priority = iprot.readI32();
        struct.setPriorityIsSet(true);
      }
      if (incoming.get(10)) {
        struct.uOAZipCode = iprot.readString();
        struct.setUOAZipCodeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.personFullName = iprot.readString();
        struct.setPersonFullNameIsSet(true);
      }
    }
  }

}

