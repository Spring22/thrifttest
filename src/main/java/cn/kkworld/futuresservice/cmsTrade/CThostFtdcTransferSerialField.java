/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcTransferSerialField implements org.apache.thrift.TBase<CThostFtdcTransferSerialField, CThostFtdcTransferSerialField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcTransferSerialField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcTransferSerialField");

  private static final org.apache.thrift.protocol.TField PLATE_SERIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("plateSerial", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TRADE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeDate", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TRADING_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("tradingDay", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TRADE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TRADE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeCode", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField BANK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankID", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BANK_BRANCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankBranchID", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField BANK_ACC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankAccType", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField BANK_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("bankAccount", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField BANK_SERIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("bankSerial", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField BROKER_BRANCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerBranchID", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField FUTURE_ACC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("futureAccType", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountID", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField INVESTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("investorID", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField FUTURE_SERIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("futureSerial", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField ID_CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("idCardType", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField IDENTIFIED_CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("identifiedCardNo", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField CURRENCY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("currencyID", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField TRADE_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField CUST_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("custFee", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField BROKER_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerFee", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField AVAILABILITY_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("availabilityFlag", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField OPERATOR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorCode", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField BANK_NEW_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("bankNewAccount", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField ERROR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("errorID", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField ERROR_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("errorMsg", org.apache.thrift.protocol.TType.STRING, (short)28);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcTransferSerialFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcTransferSerialFieldTupleSchemeFactory());
  }

  public int plateSerial; // required
  public String tradeDate; // required
  public String tradingDay; // required
  public String tradeTime; // required
  public String tradeCode; // required
  public int sessionID; // required
  public String bankID; // required
  public String bankBranchID; // required
  public String bankAccType; // required
  public String bankAccount; // required
  public String bankSerial; // required
  public String brokerID; // required
  public String brokerBranchID; // required
  public String futureAccType; // required
  public String accountID; // required
  public String investorID; // required
  public int futureSerial; // required
  public String idCardType; // required
  public String identifiedCardNo; // required
  public String currencyID; // required
  public double tradeAmount; // required
  public double custFee; // required
  public double brokerFee; // required
  public String availabilityFlag; // required
  public String operatorCode; // required
  public String bankNewAccount; // required
  public int errorID; // required
  public String errorMsg; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PLATE_SERIAL((short)1, "plateSerial"),
    TRADE_DATE((short)2, "tradeDate"),
    TRADING_DAY((short)3, "tradingDay"),
    TRADE_TIME((short)4, "tradeTime"),
    TRADE_CODE((short)5, "tradeCode"),
    SESSION_ID((short)6, "sessionID"),
    BANK_ID((short)7, "bankID"),
    BANK_BRANCH_ID((short)8, "bankBranchID"),
    BANK_ACC_TYPE((short)9, "bankAccType"),
    BANK_ACCOUNT((short)10, "bankAccount"),
    BANK_SERIAL((short)11, "bankSerial"),
    BROKER_ID((short)12, "brokerID"),
    BROKER_BRANCH_ID((short)13, "brokerBranchID"),
    FUTURE_ACC_TYPE((short)14, "futureAccType"),
    ACCOUNT_ID((short)15, "accountID"),
    INVESTOR_ID((short)16, "investorID"),
    FUTURE_SERIAL((short)17, "futureSerial"),
    ID_CARD_TYPE((short)18, "idCardType"),
    IDENTIFIED_CARD_NO((short)19, "identifiedCardNo"),
    CURRENCY_ID((short)20, "currencyID"),
    TRADE_AMOUNT((short)21, "tradeAmount"),
    CUST_FEE((short)22, "custFee"),
    BROKER_FEE((short)23, "brokerFee"),
    AVAILABILITY_FLAG((short)24, "availabilityFlag"),
    OPERATOR_CODE((short)25, "operatorCode"),
    BANK_NEW_ACCOUNT((short)26, "bankNewAccount"),
    ERROR_ID((short)27, "errorID"),
    ERROR_MSG((short)28, "errorMsg");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PLATE_SERIAL
          return PLATE_SERIAL;
        case 2: // TRADE_DATE
          return TRADE_DATE;
        case 3: // TRADING_DAY
          return TRADING_DAY;
        case 4: // TRADE_TIME
          return TRADE_TIME;
        case 5: // TRADE_CODE
          return TRADE_CODE;
        case 6: // SESSION_ID
          return SESSION_ID;
        case 7: // BANK_ID
          return BANK_ID;
        case 8: // BANK_BRANCH_ID
          return BANK_BRANCH_ID;
        case 9: // BANK_ACC_TYPE
          return BANK_ACC_TYPE;
        case 10: // BANK_ACCOUNT
          return BANK_ACCOUNT;
        case 11: // BANK_SERIAL
          return BANK_SERIAL;
        case 12: // BROKER_ID
          return BROKER_ID;
        case 13: // BROKER_BRANCH_ID
          return BROKER_BRANCH_ID;
        case 14: // FUTURE_ACC_TYPE
          return FUTURE_ACC_TYPE;
        case 15: // ACCOUNT_ID
          return ACCOUNT_ID;
        case 16: // INVESTOR_ID
          return INVESTOR_ID;
        case 17: // FUTURE_SERIAL
          return FUTURE_SERIAL;
        case 18: // ID_CARD_TYPE
          return ID_CARD_TYPE;
        case 19: // IDENTIFIED_CARD_NO
          return IDENTIFIED_CARD_NO;
        case 20: // CURRENCY_ID
          return CURRENCY_ID;
        case 21: // TRADE_AMOUNT
          return TRADE_AMOUNT;
        case 22: // CUST_FEE
          return CUST_FEE;
        case 23: // BROKER_FEE
          return BROKER_FEE;
        case 24: // AVAILABILITY_FLAG
          return AVAILABILITY_FLAG;
        case 25: // OPERATOR_CODE
          return OPERATOR_CODE;
        case 26: // BANK_NEW_ACCOUNT
          return BANK_NEW_ACCOUNT;
        case 27: // ERROR_ID
          return ERROR_ID;
        case 28: // ERROR_MSG
          return ERROR_MSG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PLATESERIAL_ISSET_ID = 0;
  private static final int __SESSIONID_ISSET_ID = 1;
  private static final int __FUTURESERIAL_ISSET_ID = 2;
  private static final int __TRADEAMOUNT_ISSET_ID = 3;
  private static final int __CUSTFEE_ISSET_ID = 4;
  private static final int __BROKERFEE_ISSET_ID = 5;
  private static final int __ERRORID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PLATE_SERIAL, new org.apache.thrift.meta_data.FieldMetaData("plateSerial", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcPlateSerialType")));
    tmpMap.put(_Fields.TRADE_DATE, new org.apache.thrift.meta_data.FieldMetaData("tradeDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeDateType")));
    tmpMap.put(_Fields.TRADING_DAY, new org.apache.thrift.meta_data.FieldMetaData("tradingDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    tmpMap.put(_Fields.TRADE_TIME, new org.apache.thrift.meta_data.FieldMetaData("tradeTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeTimeType")));
    tmpMap.put(_Fields.TRADE_CODE, new org.apache.thrift.meta_data.FieldMetaData("tradeCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeCodeType")));
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcSessionIDType")));
    tmpMap.put(_Fields.BANK_ID, new org.apache.thrift.meta_data.FieldMetaData("bankID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankIDType")));
    tmpMap.put(_Fields.BANK_BRANCH_ID, new org.apache.thrift.meta_data.FieldMetaData("bankBranchID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankBrchIDType")));
    tmpMap.put(_Fields.BANK_ACC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bankAccType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankAccTypeType")));
    tmpMap.put(_Fields.BANK_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("bankAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankAccountType")));
    tmpMap.put(_Fields.BANK_SERIAL, new org.apache.thrift.meta_data.FieldMetaData("bankSerial", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankSerialType")));
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.BROKER_BRANCH_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerBranchID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcFutureBranchIDType")));
    tmpMap.put(_Fields.FUTURE_ACC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("futureAccType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcFutureAccTypeType")));
    tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcAccountIDType")));
    tmpMap.put(_Fields.INVESTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("investorID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInvestorIDType")));
    tmpMap.put(_Fields.FUTURE_SERIAL, new org.apache.thrift.meta_data.FieldMetaData("futureSerial", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcFutureSerialType")));
    tmpMap.put(_Fields.ID_CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("idCardType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcIdCardTypeType")));
    tmpMap.put(_Fields.IDENTIFIED_CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("identifiedCardNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcIdentifiedCardNoType")));
    tmpMap.put(_Fields.CURRENCY_ID, new org.apache.thrift.meta_data.FieldMetaData("currencyID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcCurrencyIDType")));
    tmpMap.put(_Fields.TRADE_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("tradeAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcTradeAmountType")));
    tmpMap.put(_Fields.CUST_FEE, new org.apache.thrift.meta_data.FieldMetaData("custFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcCustFeeType")));
    tmpMap.put(_Fields.BROKER_FEE, new org.apache.thrift.meta_data.FieldMetaData("brokerFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcFutureFeeType")));
    tmpMap.put(_Fields.AVAILABILITY_FLAG, new org.apache.thrift.meta_data.FieldMetaData("availabilityFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcAvailabilityFlagType")));
    tmpMap.put(_Fields.OPERATOR_CODE, new org.apache.thrift.meta_data.FieldMetaData("operatorCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOperatorCodeType")));
    tmpMap.put(_Fields.BANK_NEW_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("bankNewAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankAccountType")));
    tmpMap.put(_Fields.ERROR_ID, new org.apache.thrift.meta_data.FieldMetaData("errorID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcErrorIDType")));
    tmpMap.put(_Fields.ERROR_MSG, new org.apache.thrift.meta_data.FieldMetaData("errorMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcErrorMsgType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcTransferSerialField.class, metaDataMap);
  }

  public CThostFtdcTransferSerialField() {
  }

  public CThostFtdcTransferSerialField(
    int plateSerial,
    String tradeDate,
    String tradingDay,
    String tradeTime,
    String tradeCode,
    int sessionID,
    String bankID,
    String bankBranchID,
    String bankAccType,
    String bankAccount,
    String bankSerial,
    String brokerID,
    String brokerBranchID,
    String futureAccType,
    String accountID,
    String investorID,
    int futureSerial,
    String idCardType,
    String identifiedCardNo,
    String currencyID,
    double tradeAmount,
    double custFee,
    double brokerFee,
    String availabilityFlag,
    String operatorCode,
    String bankNewAccount,
    int errorID,
    String errorMsg)
  {
    this();
    this.plateSerial = plateSerial;
    setPlateSerialIsSet(true);
    this.tradeDate = tradeDate;
    this.tradingDay = tradingDay;
    this.tradeTime = tradeTime;
    this.tradeCode = tradeCode;
    this.sessionID = sessionID;
    setSessionIDIsSet(true);
    this.bankID = bankID;
    this.bankBranchID = bankBranchID;
    this.bankAccType = bankAccType;
    this.bankAccount = bankAccount;
    this.bankSerial = bankSerial;
    this.brokerID = brokerID;
    this.brokerBranchID = brokerBranchID;
    this.futureAccType = futureAccType;
    this.accountID = accountID;
    this.investorID = investorID;
    this.futureSerial = futureSerial;
    setFutureSerialIsSet(true);
    this.idCardType = idCardType;
    this.identifiedCardNo = identifiedCardNo;
    this.currencyID = currencyID;
    this.tradeAmount = tradeAmount;
    setTradeAmountIsSet(true);
    this.custFee = custFee;
    setCustFeeIsSet(true);
    this.brokerFee = brokerFee;
    setBrokerFeeIsSet(true);
    this.availabilityFlag = availabilityFlag;
    this.operatorCode = operatorCode;
    this.bankNewAccount = bankNewAccount;
    this.errorID = errorID;
    setErrorIDIsSet(true);
    this.errorMsg = errorMsg;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcTransferSerialField(CThostFtdcTransferSerialField other) {
    __isset_bitfield = other.__isset_bitfield;
    this.plateSerial = other.plateSerial;
    if (other.isSetTradeDate()) {
      this.tradeDate = other.tradeDate;
    }
    if (other.isSetTradingDay()) {
      this.tradingDay = other.tradingDay;
    }
    if (other.isSetTradeTime()) {
      this.tradeTime = other.tradeTime;
    }
    if (other.isSetTradeCode()) {
      this.tradeCode = other.tradeCode;
    }
    this.sessionID = other.sessionID;
    if (other.isSetBankID()) {
      this.bankID = other.bankID;
    }
    if (other.isSetBankBranchID()) {
      this.bankBranchID = other.bankBranchID;
    }
    if (other.isSetBankAccType()) {
      this.bankAccType = other.bankAccType;
    }
    if (other.isSetBankAccount()) {
      this.bankAccount = other.bankAccount;
    }
    if (other.isSetBankSerial()) {
      this.bankSerial = other.bankSerial;
    }
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetBrokerBranchID()) {
      this.brokerBranchID = other.brokerBranchID;
    }
    if (other.isSetFutureAccType()) {
      this.futureAccType = other.futureAccType;
    }
    if (other.isSetAccountID()) {
      this.accountID = other.accountID;
    }
    if (other.isSetInvestorID()) {
      this.investorID = other.investorID;
    }
    this.futureSerial = other.futureSerial;
    if (other.isSetIdCardType()) {
      this.idCardType = other.idCardType;
    }
    if (other.isSetIdentifiedCardNo()) {
      this.identifiedCardNo = other.identifiedCardNo;
    }
    if (other.isSetCurrencyID()) {
      this.currencyID = other.currencyID;
    }
    this.tradeAmount = other.tradeAmount;
    this.custFee = other.custFee;
    this.brokerFee = other.brokerFee;
    if (other.isSetAvailabilityFlag()) {
      this.availabilityFlag = other.availabilityFlag;
    }
    if (other.isSetOperatorCode()) {
      this.operatorCode = other.operatorCode;
    }
    if (other.isSetBankNewAccount()) {
      this.bankNewAccount = other.bankNewAccount;
    }
    this.errorID = other.errorID;
    if (other.isSetErrorMsg()) {
      this.errorMsg = other.errorMsg;
    }
  }

  public CThostFtdcTransferSerialField deepCopy() {
    return new CThostFtdcTransferSerialField(this);
  }

  @Override
  public void clear() {
    setPlateSerialIsSet(false);
    this.plateSerial = 0;
    this.tradeDate = null;
    this.tradingDay = null;
    this.tradeTime = null;
    this.tradeCode = null;
    setSessionIDIsSet(false);
    this.sessionID = 0;
    this.bankID = null;
    this.bankBranchID = null;
    this.bankAccType = null;
    this.bankAccount = null;
    this.bankSerial = null;
    this.brokerID = null;
    this.brokerBranchID = null;
    this.futureAccType = null;
    this.accountID = null;
    this.investorID = null;
    setFutureSerialIsSet(false);
    this.futureSerial = 0;
    this.idCardType = null;
    this.identifiedCardNo = null;
    this.currencyID = null;
    setTradeAmountIsSet(false);
    this.tradeAmount = 0.0;
    setCustFeeIsSet(false);
    this.custFee = 0.0;
    setBrokerFeeIsSet(false);
    this.brokerFee = 0.0;
    this.availabilityFlag = null;
    this.operatorCode = null;
    this.bankNewAccount = null;
    setErrorIDIsSet(false);
    this.errorID = 0;
    this.errorMsg = null;
  }

  public int getPlateSerial() {
    return this.plateSerial;
  }

  public CThostFtdcTransferSerialField setPlateSerial(int plateSerial) {
    this.plateSerial = plateSerial;
    setPlateSerialIsSet(true);
    return this;
  }

  public void unsetPlateSerial() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLATESERIAL_ISSET_ID);
  }

  /** Returns true if field plateSerial is set (has been assigned a value) and false otherwise */
  public boolean isSetPlateSerial() {
    return EncodingUtils.testBit(__isset_bitfield, __PLATESERIAL_ISSET_ID);
  }

  public void setPlateSerialIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLATESERIAL_ISSET_ID, value);
  }

  public String getTradeDate() {
    return this.tradeDate;
  }

  public CThostFtdcTransferSerialField setTradeDate(String tradeDate) {
    this.tradeDate = tradeDate;
    return this;
  }

  public void unsetTradeDate() {
    this.tradeDate = null;
  }

  /** Returns true if field tradeDate is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeDate() {
    return this.tradeDate != null;
  }

  public void setTradeDateIsSet(boolean value) {
    if (!value) {
      this.tradeDate = null;
    }
  }

  public String getTradingDay() {
    return this.tradingDay;
  }

  public CThostFtdcTransferSerialField setTradingDay(String tradingDay) {
    this.tradingDay = tradingDay;
    return this;
  }

  public void unsetTradingDay() {
    this.tradingDay = null;
  }

  /** Returns true if field tradingDay is set (has been assigned a value) and false otherwise */
  public boolean isSetTradingDay() {
    return this.tradingDay != null;
  }

  public void setTradingDayIsSet(boolean value) {
    if (!value) {
      this.tradingDay = null;
    }
  }

  public String getTradeTime() {
    return this.tradeTime;
  }

  public CThostFtdcTransferSerialField setTradeTime(String tradeTime) {
    this.tradeTime = tradeTime;
    return this;
  }

  public void unsetTradeTime() {
    this.tradeTime = null;
  }

  /** Returns true if field tradeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeTime() {
    return this.tradeTime != null;
  }

  public void setTradeTimeIsSet(boolean value) {
    if (!value) {
      this.tradeTime = null;
    }
  }

  public String getTradeCode() {
    return this.tradeCode;
  }

  public CThostFtdcTransferSerialField setTradeCode(String tradeCode) {
    this.tradeCode = tradeCode;
    return this;
  }

  public void unsetTradeCode() {
    this.tradeCode = null;
  }

  /** Returns true if field tradeCode is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeCode() {
    return this.tradeCode != null;
  }

  public void setTradeCodeIsSet(boolean value) {
    if (!value) {
      this.tradeCode = null;
    }
  }

  public int getSessionID() {
    return this.sessionID;
  }

  public CThostFtdcTransferSerialField setSessionID(int sessionID) {
    this.sessionID = sessionID;
    setSessionIDIsSet(true);
    return this;
  }

  public void unsetSessionID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionID() {
    return EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  public void setSessionIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
  }

  public String getBankID() {
    return this.bankID;
  }

  public CThostFtdcTransferSerialField setBankID(String bankID) {
    this.bankID = bankID;
    return this;
  }

  public void unsetBankID() {
    this.bankID = null;
  }

  /** Returns true if field bankID is set (has been assigned a value) and false otherwise */
  public boolean isSetBankID() {
    return this.bankID != null;
  }

  public void setBankIDIsSet(boolean value) {
    if (!value) {
      this.bankID = null;
    }
  }

  public String getBankBranchID() {
    return this.bankBranchID;
  }

  public CThostFtdcTransferSerialField setBankBranchID(String bankBranchID) {
    this.bankBranchID = bankBranchID;
    return this;
  }

  public void unsetBankBranchID() {
    this.bankBranchID = null;
  }

  /** Returns true if field bankBranchID is set (has been assigned a value) and false otherwise */
  public boolean isSetBankBranchID() {
    return this.bankBranchID != null;
  }

  public void setBankBranchIDIsSet(boolean value) {
    if (!value) {
      this.bankBranchID = null;
    }
  }

  public String getBankAccType() {
    return this.bankAccType;
  }

  public CThostFtdcTransferSerialField setBankAccType(String bankAccType) {
    this.bankAccType = bankAccType;
    return this;
  }

  public void unsetBankAccType() {
    this.bankAccType = null;
  }

  /** Returns true if field bankAccType is set (has been assigned a value) and false otherwise */
  public boolean isSetBankAccType() {
    return this.bankAccType != null;
  }

  public void setBankAccTypeIsSet(boolean value) {
    if (!value) {
      this.bankAccType = null;
    }
  }

  public String getBankAccount() {
    return this.bankAccount;
  }

  public CThostFtdcTransferSerialField setBankAccount(String bankAccount) {
    this.bankAccount = bankAccount;
    return this;
  }

  public void unsetBankAccount() {
    this.bankAccount = null;
  }

  /** Returns true if field bankAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetBankAccount() {
    return this.bankAccount != null;
  }

  public void setBankAccountIsSet(boolean value) {
    if (!value) {
      this.bankAccount = null;
    }
  }

  public String getBankSerial() {
    return this.bankSerial;
  }

  public CThostFtdcTransferSerialField setBankSerial(String bankSerial) {
    this.bankSerial = bankSerial;
    return this;
  }

  public void unsetBankSerial() {
    this.bankSerial = null;
  }

  /** Returns true if field bankSerial is set (has been assigned a value) and false otherwise */
  public boolean isSetBankSerial() {
    return this.bankSerial != null;
  }

  public void setBankSerialIsSet(boolean value) {
    if (!value) {
      this.bankSerial = null;
    }
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcTransferSerialField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getBrokerBranchID() {
    return this.brokerBranchID;
  }

  public CThostFtdcTransferSerialField setBrokerBranchID(String brokerBranchID) {
    this.brokerBranchID = brokerBranchID;
    return this;
  }

  public void unsetBrokerBranchID() {
    this.brokerBranchID = null;
  }

  /** Returns true if field brokerBranchID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerBranchID() {
    return this.brokerBranchID != null;
  }

  public void setBrokerBranchIDIsSet(boolean value) {
    if (!value) {
      this.brokerBranchID = null;
    }
  }

  public String getFutureAccType() {
    return this.futureAccType;
  }

  public CThostFtdcTransferSerialField setFutureAccType(String futureAccType) {
    this.futureAccType = futureAccType;
    return this;
  }

  public void unsetFutureAccType() {
    this.futureAccType = null;
  }

  /** Returns true if field futureAccType is set (has been assigned a value) and false otherwise */
  public boolean isSetFutureAccType() {
    return this.futureAccType != null;
  }

  public void setFutureAccTypeIsSet(boolean value) {
    if (!value) {
      this.futureAccType = null;
    }
  }

  public String getAccountID() {
    return this.accountID;
  }

  public CThostFtdcTransferSerialField setAccountID(String accountID) {
    this.accountID = accountID;
    return this;
  }

  public void unsetAccountID() {
    this.accountID = null;
  }

  /** Returns true if field accountID is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountID() {
    return this.accountID != null;
  }

  public void setAccountIDIsSet(boolean value) {
    if (!value) {
      this.accountID = null;
    }
  }

  public String getInvestorID() {
    return this.investorID;
  }

  public CThostFtdcTransferSerialField setInvestorID(String investorID) {
    this.investorID = investorID;
    return this;
  }

  public void unsetInvestorID() {
    this.investorID = null;
  }

  /** Returns true if field investorID is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorID() {
    return this.investorID != null;
  }

  public void setInvestorIDIsSet(boolean value) {
    if (!value) {
      this.investorID = null;
    }
  }

  public int getFutureSerial() {
    return this.futureSerial;
  }

  public CThostFtdcTransferSerialField setFutureSerial(int futureSerial) {
    this.futureSerial = futureSerial;
    setFutureSerialIsSet(true);
    return this;
  }

  public void unsetFutureSerial() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FUTURESERIAL_ISSET_ID);
  }

  /** Returns true if field futureSerial is set (has been assigned a value) and false otherwise */
  public boolean isSetFutureSerial() {
    return EncodingUtils.testBit(__isset_bitfield, __FUTURESERIAL_ISSET_ID);
  }

  public void setFutureSerialIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FUTURESERIAL_ISSET_ID, value);
  }

  public String getIdCardType() {
    return this.idCardType;
  }

  public CThostFtdcTransferSerialField setIdCardType(String idCardType) {
    this.idCardType = idCardType;
    return this;
  }

  public void unsetIdCardType() {
    this.idCardType = null;
  }

  /** Returns true if field idCardType is set (has been assigned a value) and false otherwise */
  public boolean isSetIdCardType() {
    return this.idCardType != null;
  }

  public void setIdCardTypeIsSet(boolean value) {
    if (!value) {
      this.idCardType = null;
    }
  }

  public String getIdentifiedCardNo() {
    return this.identifiedCardNo;
  }

  public CThostFtdcTransferSerialField setIdentifiedCardNo(String identifiedCardNo) {
    this.identifiedCardNo = identifiedCardNo;
    return this;
  }

  public void unsetIdentifiedCardNo() {
    this.identifiedCardNo = null;
  }

  /** Returns true if field identifiedCardNo is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentifiedCardNo() {
    return this.identifiedCardNo != null;
  }

  public void setIdentifiedCardNoIsSet(boolean value) {
    if (!value) {
      this.identifiedCardNo = null;
    }
  }

  public String getCurrencyID() {
    return this.currencyID;
  }

  public CThostFtdcTransferSerialField setCurrencyID(String currencyID) {
    this.currencyID = currencyID;
    return this;
  }

  public void unsetCurrencyID() {
    this.currencyID = null;
  }

  /** Returns true if field currencyID is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencyID() {
    return this.currencyID != null;
  }

  public void setCurrencyIDIsSet(boolean value) {
    if (!value) {
      this.currencyID = null;
    }
  }

  public double getTradeAmount() {
    return this.tradeAmount;
  }

  public CThostFtdcTransferSerialField setTradeAmount(double tradeAmount) {
    this.tradeAmount = tradeAmount;
    setTradeAmountIsSet(true);
    return this;
  }

  public void unsetTradeAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEAMOUNT_ISSET_ID);
  }

  /** Returns true if field tradeAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEAMOUNT_ISSET_ID);
  }

  public void setTradeAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEAMOUNT_ISSET_ID, value);
  }

  public double getCustFee() {
    return this.custFee;
  }

  public CThostFtdcTransferSerialField setCustFee(double custFee) {
    this.custFee = custFee;
    setCustFeeIsSet(true);
    return this;
  }

  public void unsetCustFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSTFEE_ISSET_ID);
  }

  /** Returns true if field custFee is set (has been assigned a value) and false otherwise */
  public boolean isSetCustFee() {
    return EncodingUtils.testBit(__isset_bitfield, __CUSTFEE_ISSET_ID);
  }

  public void setCustFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSTFEE_ISSET_ID, value);
  }

  public double getBrokerFee() {
    return this.brokerFee;
  }

  public CThostFtdcTransferSerialField setBrokerFee(double brokerFee) {
    this.brokerFee = brokerFee;
    setBrokerFeeIsSet(true);
    return this;
  }

  public void unsetBrokerFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BROKERFEE_ISSET_ID);
  }

  /** Returns true if field brokerFee is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerFee() {
    return EncodingUtils.testBit(__isset_bitfield, __BROKERFEE_ISSET_ID);
  }

  public void setBrokerFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BROKERFEE_ISSET_ID, value);
  }

  public String getAvailabilityFlag() {
    return this.availabilityFlag;
  }

  public CThostFtdcTransferSerialField setAvailabilityFlag(String availabilityFlag) {
    this.availabilityFlag = availabilityFlag;
    return this;
  }

  public void unsetAvailabilityFlag() {
    this.availabilityFlag = null;
  }

  /** Returns true if field availabilityFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailabilityFlag() {
    return this.availabilityFlag != null;
  }

  public void setAvailabilityFlagIsSet(boolean value) {
    if (!value) {
      this.availabilityFlag = null;
    }
  }

  public String getOperatorCode() {
    return this.operatorCode;
  }

  public CThostFtdcTransferSerialField setOperatorCode(String operatorCode) {
    this.operatorCode = operatorCode;
    return this;
  }

  public void unsetOperatorCode() {
    this.operatorCode = null;
  }

  /** Returns true if field operatorCode is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorCode() {
    return this.operatorCode != null;
  }

  public void setOperatorCodeIsSet(boolean value) {
    if (!value) {
      this.operatorCode = null;
    }
  }

  public String getBankNewAccount() {
    return this.bankNewAccount;
  }

  public CThostFtdcTransferSerialField setBankNewAccount(String bankNewAccount) {
    this.bankNewAccount = bankNewAccount;
    return this;
  }

  public void unsetBankNewAccount() {
    this.bankNewAccount = null;
  }

  /** Returns true if field bankNewAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetBankNewAccount() {
    return this.bankNewAccount != null;
  }

  public void setBankNewAccountIsSet(boolean value) {
    if (!value) {
      this.bankNewAccount = null;
    }
  }

  public int getErrorID() {
    return this.errorID;
  }

  public CThostFtdcTransferSerialField setErrorID(int errorID) {
    this.errorID = errorID;
    setErrorIDIsSet(true);
    return this;
  }

  public void unsetErrorID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ERRORID_ISSET_ID);
  }

  /** Returns true if field errorID is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorID() {
    return EncodingUtils.testBit(__isset_bitfield, __ERRORID_ISSET_ID);
  }

  public void setErrorIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ERRORID_ISSET_ID, value);
  }

  public String getErrorMsg() {
    return this.errorMsg;
  }

  public CThostFtdcTransferSerialField setErrorMsg(String errorMsg) {
    this.errorMsg = errorMsg;
    return this;
  }

  public void unsetErrorMsg() {
    this.errorMsg = null;
  }

  /** Returns true if field errorMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorMsg() {
    return this.errorMsg != null;
  }

  public void setErrorMsgIsSet(boolean value) {
    if (!value) {
      this.errorMsg = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PLATE_SERIAL:
      if (value == null) {
        unsetPlateSerial();
      } else {
        setPlateSerial((Integer)value);
      }
      break;

    case TRADE_DATE:
      if (value == null) {
        unsetTradeDate();
      } else {
        setTradeDate((String)value);
      }
      break;

    case TRADING_DAY:
      if (value == null) {
        unsetTradingDay();
      } else {
        setTradingDay((String)value);
      }
      break;

    case TRADE_TIME:
      if (value == null) {
        unsetTradeTime();
      } else {
        setTradeTime((String)value);
      }
      break;

    case TRADE_CODE:
      if (value == null) {
        unsetTradeCode();
      } else {
        setTradeCode((String)value);
      }
      break;

    case SESSION_ID:
      if (value == null) {
        unsetSessionID();
      } else {
        setSessionID((Integer)value);
      }
      break;

    case BANK_ID:
      if (value == null) {
        unsetBankID();
      } else {
        setBankID((String)value);
      }
      break;

    case BANK_BRANCH_ID:
      if (value == null) {
        unsetBankBranchID();
      } else {
        setBankBranchID((String)value);
      }
      break;

    case BANK_ACC_TYPE:
      if (value == null) {
        unsetBankAccType();
      } else {
        setBankAccType((String)value);
      }
      break;

    case BANK_ACCOUNT:
      if (value == null) {
        unsetBankAccount();
      } else {
        setBankAccount((String)value);
      }
      break;

    case BANK_SERIAL:
      if (value == null) {
        unsetBankSerial();
      } else {
        setBankSerial((String)value);
      }
      break;

    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case BROKER_BRANCH_ID:
      if (value == null) {
        unsetBrokerBranchID();
      } else {
        setBrokerBranchID((String)value);
      }
      break;

    case FUTURE_ACC_TYPE:
      if (value == null) {
        unsetFutureAccType();
      } else {
        setFutureAccType((String)value);
      }
      break;

    case ACCOUNT_ID:
      if (value == null) {
        unsetAccountID();
      } else {
        setAccountID((String)value);
      }
      break;

    case INVESTOR_ID:
      if (value == null) {
        unsetInvestorID();
      } else {
        setInvestorID((String)value);
      }
      break;

    case FUTURE_SERIAL:
      if (value == null) {
        unsetFutureSerial();
      } else {
        setFutureSerial((Integer)value);
      }
      break;

    case ID_CARD_TYPE:
      if (value == null) {
        unsetIdCardType();
      } else {
        setIdCardType((String)value);
      }
      break;

    case IDENTIFIED_CARD_NO:
      if (value == null) {
        unsetIdentifiedCardNo();
      } else {
        setIdentifiedCardNo((String)value);
      }
      break;

    case CURRENCY_ID:
      if (value == null) {
        unsetCurrencyID();
      } else {
        setCurrencyID((String)value);
      }
      break;

    case TRADE_AMOUNT:
      if (value == null) {
        unsetTradeAmount();
      } else {
        setTradeAmount((Double)value);
      }
      break;

    case CUST_FEE:
      if (value == null) {
        unsetCustFee();
      } else {
        setCustFee((Double)value);
      }
      break;

    case BROKER_FEE:
      if (value == null) {
        unsetBrokerFee();
      } else {
        setBrokerFee((Double)value);
      }
      break;

    case AVAILABILITY_FLAG:
      if (value == null) {
        unsetAvailabilityFlag();
      } else {
        setAvailabilityFlag((String)value);
      }
      break;

    case OPERATOR_CODE:
      if (value == null) {
        unsetOperatorCode();
      } else {
        setOperatorCode((String)value);
      }
      break;

    case BANK_NEW_ACCOUNT:
      if (value == null) {
        unsetBankNewAccount();
      } else {
        setBankNewAccount((String)value);
      }
      break;

    case ERROR_ID:
      if (value == null) {
        unsetErrorID();
      } else {
        setErrorID((Integer)value);
      }
      break;

    case ERROR_MSG:
      if (value == null) {
        unsetErrorMsg();
      } else {
        setErrorMsg((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PLATE_SERIAL:
      return Integer.valueOf(getPlateSerial());

    case TRADE_DATE:
      return getTradeDate();

    case TRADING_DAY:
      return getTradingDay();

    case TRADE_TIME:
      return getTradeTime();

    case TRADE_CODE:
      return getTradeCode();

    case SESSION_ID:
      return Integer.valueOf(getSessionID());

    case BANK_ID:
      return getBankID();

    case BANK_BRANCH_ID:
      return getBankBranchID();

    case BANK_ACC_TYPE:
      return getBankAccType();

    case BANK_ACCOUNT:
      return getBankAccount();

    case BANK_SERIAL:
      return getBankSerial();

    case BROKER_ID:
      return getBrokerID();

    case BROKER_BRANCH_ID:
      return getBrokerBranchID();

    case FUTURE_ACC_TYPE:
      return getFutureAccType();

    case ACCOUNT_ID:
      return getAccountID();

    case INVESTOR_ID:
      return getInvestorID();

    case FUTURE_SERIAL:
      return Integer.valueOf(getFutureSerial());

    case ID_CARD_TYPE:
      return getIdCardType();

    case IDENTIFIED_CARD_NO:
      return getIdentifiedCardNo();

    case CURRENCY_ID:
      return getCurrencyID();

    case TRADE_AMOUNT:
      return Double.valueOf(getTradeAmount());

    case CUST_FEE:
      return Double.valueOf(getCustFee());

    case BROKER_FEE:
      return Double.valueOf(getBrokerFee());

    case AVAILABILITY_FLAG:
      return getAvailabilityFlag();

    case OPERATOR_CODE:
      return getOperatorCode();

    case BANK_NEW_ACCOUNT:
      return getBankNewAccount();

    case ERROR_ID:
      return Integer.valueOf(getErrorID());

    case ERROR_MSG:
      return getErrorMsg();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PLATE_SERIAL:
      return isSetPlateSerial();
    case TRADE_DATE:
      return isSetTradeDate();
    case TRADING_DAY:
      return isSetTradingDay();
    case TRADE_TIME:
      return isSetTradeTime();
    case TRADE_CODE:
      return isSetTradeCode();
    case SESSION_ID:
      return isSetSessionID();
    case BANK_ID:
      return isSetBankID();
    case BANK_BRANCH_ID:
      return isSetBankBranchID();
    case BANK_ACC_TYPE:
      return isSetBankAccType();
    case BANK_ACCOUNT:
      return isSetBankAccount();
    case BANK_SERIAL:
      return isSetBankSerial();
    case BROKER_ID:
      return isSetBrokerID();
    case BROKER_BRANCH_ID:
      return isSetBrokerBranchID();
    case FUTURE_ACC_TYPE:
      return isSetFutureAccType();
    case ACCOUNT_ID:
      return isSetAccountID();
    case INVESTOR_ID:
      return isSetInvestorID();
    case FUTURE_SERIAL:
      return isSetFutureSerial();
    case ID_CARD_TYPE:
      return isSetIdCardType();
    case IDENTIFIED_CARD_NO:
      return isSetIdentifiedCardNo();
    case CURRENCY_ID:
      return isSetCurrencyID();
    case TRADE_AMOUNT:
      return isSetTradeAmount();
    case CUST_FEE:
      return isSetCustFee();
    case BROKER_FEE:
      return isSetBrokerFee();
    case AVAILABILITY_FLAG:
      return isSetAvailabilityFlag();
    case OPERATOR_CODE:
      return isSetOperatorCode();
    case BANK_NEW_ACCOUNT:
      return isSetBankNewAccount();
    case ERROR_ID:
      return isSetErrorID();
    case ERROR_MSG:
      return isSetErrorMsg();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcTransferSerialField)
      return this.equals((CThostFtdcTransferSerialField)that);
    return false;
  }

  public boolean equals(CThostFtdcTransferSerialField that) {
    if (that == null)
      return false;

    boolean this_present_plateSerial = true;
    boolean that_present_plateSerial = true;
    if (this_present_plateSerial || that_present_plateSerial) {
      if (!(this_present_plateSerial && that_present_plateSerial))
        return false;
      if (this.plateSerial != that.plateSerial)
        return false;
    }

    boolean this_present_tradeDate = true && this.isSetTradeDate();
    boolean that_present_tradeDate = true && that.isSetTradeDate();
    if (this_present_tradeDate || that_present_tradeDate) {
      if (!(this_present_tradeDate && that_present_tradeDate))
        return false;
      if (!this.tradeDate.equals(that.tradeDate))
        return false;
    }

    boolean this_present_tradingDay = true && this.isSetTradingDay();
    boolean that_present_tradingDay = true && that.isSetTradingDay();
    if (this_present_tradingDay || that_present_tradingDay) {
      if (!(this_present_tradingDay && that_present_tradingDay))
        return false;
      if (!this.tradingDay.equals(that.tradingDay))
        return false;
    }

    boolean this_present_tradeTime = true && this.isSetTradeTime();
    boolean that_present_tradeTime = true && that.isSetTradeTime();
    if (this_present_tradeTime || that_present_tradeTime) {
      if (!(this_present_tradeTime && that_present_tradeTime))
        return false;
      if (!this.tradeTime.equals(that.tradeTime))
        return false;
    }

    boolean this_present_tradeCode = true && this.isSetTradeCode();
    boolean that_present_tradeCode = true && that.isSetTradeCode();
    if (this_present_tradeCode || that_present_tradeCode) {
      if (!(this_present_tradeCode && that_present_tradeCode))
        return false;
      if (!this.tradeCode.equals(that.tradeCode))
        return false;
    }

    boolean this_present_sessionID = true;
    boolean that_present_sessionID = true;
    if (this_present_sessionID || that_present_sessionID) {
      if (!(this_present_sessionID && that_present_sessionID))
        return false;
      if (this.sessionID != that.sessionID)
        return false;
    }

    boolean this_present_bankID = true && this.isSetBankID();
    boolean that_present_bankID = true && that.isSetBankID();
    if (this_present_bankID || that_present_bankID) {
      if (!(this_present_bankID && that_present_bankID))
        return false;
      if (!this.bankID.equals(that.bankID))
        return false;
    }

    boolean this_present_bankBranchID = true && this.isSetBankBranchID();
    boolean that_present_bankBranchID = true && that.isSetBankBranchID();
    if (this_present_bankBranchID || that_present_bankBranchID) {
      if (!(this_present_bankBranchID && that_present_bankBranchID))
        return false;
      if (!this.bankBranchID.equals(that.bankBranchID))
        return false;
    }

    boolean this_present_bankAccType = true && this.isSetBankAccType();
    boolean that_present_bankAccType = true && that.isSetBankAccType();
    if (this_present_bankAccType || that_present_bankAccType) {
      if (!(this_present_bankAccType && that_present_bankAccType))
        return false;
      if (!this.bankAccType.equals(that.bankAccType))
        return false;
    }

    boolean this_present_bankAccount = true && this.isSetBankAccount();
    boolean that_present_bankAccount = true && that.isSetBankAccount();
    if (this_present_bankAccount || that_present_bankAccount) {
      if (!(this_present_bankAccount && that_present_bankAccount))
        return false;
      if (!this.bankAccount.equals(that.bankAccount))
        return false;
    }

    boolean this_present_bankSerial = true && this.isSetBankSerial();
    boolean that_present_bankSerial = true && that.isSetBankSerial();
    if (this_present_bankSerial || that_present_bankSerial) {
      if (!(this_present_bankSerial && that_present_bankSerial))
        return false;
      if (!this.bankSerial.equals(that.bankSerial))
        return false;
    }

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_brokerBranchID = true && this.isSetBrokerBranchID();
    boolean that_present_brokerBranchID = true && that.isSetBrokerBranchID();
    if (this_present_brokerBranchID || that_present_brokerBranchID) {
      if (!(this_present_brokerBranchID && that_present_brokerBranchID))
        return false;
      if (!this.brokerBranchID.equals(that.brokerBranchID))
        return false;
    }

    boolean this_present_futureAccType = true && this.isSetFutureAccType();
    boolean that_present_futureAccType = true && that.isSetFutureAccType();
    if (this_present_futureAccType || that_present_futureAccType) {
      if (!(this_present_futureAccType && that_present_futureAccType))
        return false;
      if (!this.futureAccType.equals(that.futureAccType))
        return false;
    }

    boolean this_present_accountID = true && this.isSetAccountID();
    boolean that_present_accountID = true && that.isSetAccountID();
    if (this_present_accountID || that_present_accountID) {
      if (!(this_present_accountID && that_present_accountID))
        return false;
      if (!this.accountID.equals(that.accountID))
        return false;
    }

    boolean this_present_investorID = true && this.isSetInvestorID();
    boolean that_present_investorID = true && that.isSetInvestorID();
    if (this_present_investorID || that_present_investorID) {
      if (!(this_present_investorID && that_present_investorID))
        return false;
      if (!this.investorID.equals(that.investorID))
        return false;
    }

    boolean this_present_futureSerial = true;
    boolean that_present_futureSerial = true;
    if (this_present_futureSerial || that_present_futureSerial) {
      if (!(this_present_futureSerial && that_present_futureSerial))
        return false;
      if (this.futureSerial != that.futureSerial)
        return false;
    }

    boolean this_present_idCardType = true && this.isSetIdCardType();
    boolean that_present_idCardType = true && that.isSetIdCardType();
    if (this_present_idCardType || that_present_idCardType) {
      if (!(this_present_idCardType && that_present_idCardType))
        return false;
      if (!this.idCardType.equals(that.idCardType))
        return false;
    }

    boolean this_present_identifiedCardNo = true && this.isSetIdentifiedCardNo();
    boolean that_present_identifiedCardNo = true && that.isSetIdentifiedCardNo();
    if (this_present_identifiedCardNo || that_present_identifiedCardNo) {
      if (!(this_present_identifiedCardNo && that_present_identifiedCardNo))
        return false;
      if (!this.identifiedCardNo.equals(that.identifiedCardNo))
        return false;
    }

    boolean this_present_currencyID = true && this.isSetCurrencyID();
    boolean that_present_currencyID = true && that.isSetCurrencyID();
    if (this_present_currencyID || that_present_currencyID) {
      if (!(this_present_currencyID && that_present_currencyID))
        return false;
      if (!this.currencyID.equals(that.currencyID))
        return false;
    }

    boolean this_present_tradeAmount = true;
    boolean that_present_tradeAmount = true;
    if (this_present_tradeAmount || that_present_tradeAmount) {
      if (!(this_present_tradeAmount && that_present_tradeAmount))
        return false;
      if (this.tradeAmount != that.tradeAmount)
        return false;
    }

    boolean this_present_custFee = true;
    boolean that_present_custFee = true;
    if (this_present_custFee || that_present_custFee) {
      if (!(this_present_custFee && that_present_custFee))
        return false;
      if (this.custFee != that.custFee)
        return false;
    }

    boolean this_present_brokerFee = true;
    boolean that_present_brokerFee = true;
    if (this_present_brokerFee || that_present_brokerFee) {
      if (!(this_present_brokerFee && that_present_brokerFee))
        return false;
      if (this.brokerFee != that.brokerFee)
        return false;
    }

    boolean this_present_availabilityFlag = true && this.isSetAvailabilityFlag();
    boolean that_present_availabilityFlag = true && that.isSetAvailabilityFlag();
    if (this_present_availabilityFlag || that_present_availabilityFlag) {
      if (!(this_present_availabilityFlag && that_present_availabilityFlag))
        return false;
      if (!this.availabilityFlag.equals(that.availabilityFlag))
        return false;
    }

    boolean this_present_operatorCode = true && this.isSetOperatorCode();
    boolean that_present_operatorCode = true && that.isSetOperatorCode();
    if (this_present_operatorCode || that_present_operatorCode) {
      if (!(this_present_operatorCode && that_present_operatorCode))
        return false;
      if (!this.operatorCode.equals(that.operatorCode))
        return false;
    }

    boolean this_present_bankNewAccount = true && this.isSetBankNewAccount();
    boolean that_present_bankNewAccount = true && that.isSetBankNewAccount();
    if (this_present_bankNewAccount || that_present_bankNewAccount) {
      if (!(this_present_bankNewAccount && that_present_bankNewAccount))
        return false;
      if (!this.bankNewAccount.equals(that.bankNewAccount))
        return false;
    }

    boolean this_present_errorID = true;
    boolean that_present_errorID = true;
    if (this_present_errorID || that_present_errorID) {
      if (!(this_present_errorID && that_present_errorID))
        return false;
      if (this.errorID != that.errorID)
        return false;
    }

    boolean this_present_errorMsg = true && this.isSetErrorMsg();
    boolean that_present_errorMsg = true && that.isSetErrorMsg();
    if (this_present_errorMsg || that_present_errorMsg) {
      if (!(this_present_errorMsg && that_present_errorMsg))
        return false;
      if (!this.errorMsg.equals(that.errorMsg))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcTransferSerialField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPlateSerial()).compareTo(other.isSetPlateSerial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlateSerial()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plateSerial, other.plateSerial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeDate()).compareTo(other.isSetTradeDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeDate, other.tradeDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradingDay()).compareTo(other.isSetTradingDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradingDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradingDay, other.tradingDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeTime()).compareTo(other.isSetTradeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeTime, other.tradeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeCode()).compareTo(other.isSetTradeCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeCode, other.tradeCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankID()).compareTo(other.isSetBankID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankID, other.bankID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankBranchID()).compareTo(other.isSetBankBranchID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankBranchID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankBranchID, other.bankBranchID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankAccType()).compareTo(other.isSetBankAccType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankAccType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankAccType, other.bankAccType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankAccount()).compareTo(other.isSetBankAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankAccount, other.bankAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankSerial()).compareTo(other.isSetBankSerial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankSerial()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankSerial, other.bankSerial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerBranchID()).compareTo(other.isSetBrokerBranchID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerBranchID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerBranchID, other.brokerBranchID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFutureAccType()).compareTo(other.isSetFutureAccType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFutureAccType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.futureAccType, other.futureAccType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountID()).compareTo(other.isSetAccountID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountID, other.accountID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestorID()).compareTo(other.isSetInvestorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorID, other.investorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFutureSerial()).compareTo(other.isSetFutureSerial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFutureSerial()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.futureSerial, other.futureSerial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdCardType()).compareTo(other.isSetIdCardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdCardType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idCardType, other.idCardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentifiedCardNo()).compareTo(other.isSetIdentifiedCardNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentifiedCardNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identifiedCardNo, other.identifiedCardNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrencyID()).compareTo(other.isSetCurrencyID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencyID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currencyID, other.currencyID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeAmount()).compareTo(other.isSetTradeAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeAmount, other.tradeAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustFee()).compareTo(other.isSetCustFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.custFee, other.custFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerFee()).compareTo(other.isSetBrokerFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerFee, other.brokerFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvailabilityFlag()).compareTo(other.isSetAvailabilityFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailabilityFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availabilityFlag, other.availabilityFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatorCode()).compareTo(other.isSetOperatorCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorCode, other.operatorCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankNewAccount()).compareTo(other.isSetBankNewAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankNewAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankNewAccount, other.bankNewAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrorID()).compareTo(other.isSetErrorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorID, other.errorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrorMsg()).compareTo(other.isSetErrorMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorMsg, other.errorMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcTransferSerialField(");
    boolean first = true;

    sb.append("plateSerial:");
    sb.append(this.plateSerial);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeDate:");
    if (this.tradeDate == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradingDay:");
    if (this.tradingDay == null) {
      sb.append("null");
    } else {
      sb.append(this.tradingDay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeTime:");
    if (this.tradeTime == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeCode:");
    if (this.tradeCode == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sessionID:");
    sb.append(this.sessionID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankID:");
    if (this.bankID == null) {
      sb.append("null");
    } else {
      sb.append(this.bankID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankBranchID:");
    if (this.bankBranchID == null) {
      sb.append("null");
    } else {
      sb.append(this.bankBranchID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankAccType:");
    if (this.bankAccType == null) {
      sb.append("null");
    } else {
      sb.append(this.bankAccType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankAccount:");
    if (this.bankAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.bankAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankSerial:");
    if (this.bankSerial == null) {
      sb.append("null");
    } else {
      sb.append(this.bankSerial);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerBranchID:");
    if (this.brokerBranchID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerBranchID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("futureAccType:");
    if (this.futureAccType == null) {
      sb.append("null");
    } else {
      sb.append(this.futureAccType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountID:");
    if (this.accountID == null) {
      sb.append("null");
    } else {
      sb.append(this.accountID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("investorID:");
    if (this.investorID == null) {
      sb.append("null");
    } else {
      sb.append(this.investorID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("futureSerial:");
    sb.append(this.futureSerial);
    first = false;
    if (!first) sb.append(", ");
    sb.append("idCardType:");
    if (this.idCardType == null) {
      sb.append("null");
    } else {
      sb.append(this.idCardType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identifiedCardNo:");
    if (this.identifiedCardNo == null) {
      sb.append("null");
    } else {
      sb.append(this.identifiedCardNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currencyID:");
    if (this.currencyID == null) {
      sb.append("null");
    } else {
      sb.append(this.currencyID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeAmount:");
    sb.append(this.tradeAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("custFee:");
    sb.append(this.custFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerFee:");
    sb.append(this.brokerFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("availabilityFlag:");
    if (this.availabilityFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.availabilityFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operatorCode:");
    if (this.operatorCode == null) {
      sb.append("null");
    } else {
      sb.append(this.operatorCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankNewAccount:");
    if (this.bankNewAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.bankNewAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("errorID:");
    sb.append(this.errorID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errorMsg:");
    if (this.errorMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.errorMsg);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcTransferSerialFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcTransferSerialFieldStandardScheme getScheme() {
      return new CThostFtdcTransferSerialFieldStandardScheme();
    }
  }

  private static class CThostFtdcTransferSerialFieldStandardScheme extends StandardScheme<CThostFtdcTransferSerialField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcTransferSerialField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PLATE_SERIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.plateSerial = iprot.readI32();
              struct.setPlateSerialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRADE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeDate = iprot.readString();
              struct.setTradeDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRADING_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradingDay = iprot.readString();
              struct.setTradingDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TRADE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeTime = iprot.readString();
              struct.setTradeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TRADE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeCode = iprot.readString();
              struct.setTradeCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sessionID = iprot.readI32();
              struct.setSessionIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BANK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankID = iprot.readString();
              struct.setBankIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BANK_BRANCH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankBranchID = iprot.readString();
              struct.setBankBranchIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BANK_ACC_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankAccType = iprot.readString();
              struct.setBankAccTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BANK_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankAccount = iprot.readString();
              struct.setBankAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BANK_SERIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankSerial = iprot.readString();
              struct.setBankSerialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BROKER_BRANCH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerBranchID = iprot.readString();
              struct.setBrokerBranchIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FUTURE_ACC_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.futureAccType = iprot.readString();
              struct.setFutureAccTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountID = iprot.readString();
              struct.setAccountIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // INVESTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorID = iprot.readString();
              struct.setInvestorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // FUTURE_SERIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.futureSerial = iprot.readI32();
              struct.setFutureSerialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ID_CARD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.idCardType = iprot.readString();
              struct.setIdCardTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // IDENTIFIED_CARD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identifiedCardNo = iprot.readString();
              struct.setIdentifiedCardNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CURRENCY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currencyID = iprot.readString();
              struct.setCurrencyIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // TRADE_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tradeAmount = iprot.readDouble();
              struct.setTradeAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CUST_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.custFee = iprot.readDouble();
              struct.setCustFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // BROKER_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.brokerFee = iprot.readDouble();
              struct.setBrokerFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // AVAILABILITY_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.availabilityFlag = iprot.readString();
              struct.setAvailabilityFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // OPERATOR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operatorCode = iprot.readString();
              struct.setOperatorCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // BANK_NEW_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankNewAccount = iprot.readString();
              struct.setBankNewAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // ERROR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.errorID = iprot.readI32();
              struct.setErrorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // ERROR_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorMsg = iprot.readString();
              struct.setErrorMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcTransferSerialField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PLATE_SERIAL_FIELD_DESC);
      oprot.writeI32(struct.plateSerial);
      oprot.writeFieldEnd();
      if (struct.tradeDate != null) {
        oprot.writeFieldBegin(TRADE_DATE_FIELD_DESC);
        oprot.writeString(struct.tradeDate);
        oprot.writeFieldEnd();
      }
      if (struct.tradingDay != null) {
        oprot.writeFieldBegin(TRADING_DAY_FIELD_DESC);
        oprot.writeString(struct.tradingDay);
        oprot.writeFieldEnd();
      }
      if (struct.tradeTime != null) {
        oprot.writeFieldBegin(TRADE_TIME_FIELD_DESC);
        oprot.writeString(struct.tradeTime);
        oprot.writeFieldEnd();
      }
      if (struct.tradeCode != null) {
        oprot.writeFieldBegin(TRADE_CODE_FIELD_DESC);
        oprot.writeString(struct.tradeCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeI32(struct.sessionID);
      oprot.writeFieldEnd();
      if (struct.bankID != null) {
        oprot.writeFieldBegin(BANK_ID_FIELD_DESC);
        oprot.writeString(struct.bankID);
        oprot.writeFieldEnd();
      }
      if (struct.bankBranchID != null) {
        oprot.writeFieldBegin(BANK_BRANCH_ID_FIELD_DESC);
        oprot.writeString(struct.bankBranchID);
        oprot.writeFieldEnd();
      }
      if (struct.bankAccType != null) {
        oprot.writeFieldBegin(BANK_ACC_TYPE_FIELD_DESC);
        oprot.writeString(struct.bankAccType);
        oprot.writeFieldEnd();
      }
      if (struct.bankAccount != null) {
        oprot.writeFieldBegin(BANK_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.bankAccount);
        oprot.writeFieldEnd();
      }
      if (struct.bankSerial != null) {
        oprot.writeFieldBegin(BANK_SERIAL_FIELD_DESC);
        oprot.writeString(struct.bankSerial);
        oprot.writeFieldEnd();
      }
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.brokerBranchID != null) {
        oprot.writeFieldBegin(BROKER_BRANCH_ID_FIELD_DESC);
        oprot.writeString(struct.brokerBranchID);
        oprot.writeFieldEnd();
      }
      if (struct.futureAccType != null) {
        oprot.writeFieldBegin(FUTURE_ACC_TYPE_FIELD_DESC);
        oprot.writeString(struct.futureAccType);
        oprot.writeFieldEnd();
      }
      if (struct.accountID != null) {
        oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
        oprot.writeString(struct.accountID);
        oprot.writeFieldEnd();
      }
      if (struct.investorID != null) {
        oprot.writeFieldBegin(INVESTOR_ID_FIELD_DESC);
        oprot.writeString(struct.investorID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FUTURE_SERIAL_FIELD_DESC);
      oprot.writeI32(struct.futureSerial);
      oprot.writeFieldEnd();
      if (struct.idCardType != null) {
        oprot.writeFieldBegin(ID_CARD_TYPE_FIELD_DESC);
        oprot.writeString(struct.idCardType);
        oprot.writeFieldEnd();
      }
      if (struct.identifiedCardNo != null) {
        oprot.writeFieldBegin(IDENTIFIED_CARD_NO_FIELD_DESC);
        oprot.writeString(struct.identifiedCardNo);
        oprot.writeFieldEnd();
      }
      if (struct.currencyID != null) {
        oprot.writeFieldBegin(CURRENCY_ID_FIELD_DESC);
        oprot.writeString(struct.currencyID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TRADE_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.tradeAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUST_FEE_FIELD_DESC);
      oprot.writeDouble(struct.custFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BROKER_FEE_FIELD_DESC);
      oprot.writeDouble(struct.brokerFee);
      oprot.writeFieldEnd();
      if (struct.availabilityFlag != null) {
        oprot.writeFieldBegin(AVAILABILITY_FLAG_FIELD_DESC);
        oprot.writeString(struct.availabilityFlag);
        oprot.writeFieldEnd();
      }
      if (struct.operatorCode != null) {
        oprot.writeFieldBegin(OPERATOR_CODE_FIELD_DESC);
        oprot.writeString(struct.operatorCode);
        oprot.writeFieldEnd();
      }
      if (struct.bankNewAccount != null) {
        oprot.writeFieldBegin(BANK_NEW_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.bankNewAccount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ERROR_ID_FIELD_DESC);
      oprot.writeI32(struct.errorID);
      oprot.writeFieldEnd();
      if (struct.errorMsg != null) {
        oprot.writeFieldBegin(ERROR_MSG_FIELD_DESC);
        oprot.writeString(struct.errorMsg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcTransferSerialFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcTransferSerialFieldTupleScheme getScheme() {
      return new CThostFtdcTransferSerialFieldTupleScheme();
    }
  }

  private static class CThostFtdcTransferSerialFieldTupleScheme extends TupleScheme<CThostFtdcTransferSerialField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcTransferSerialField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPlateSerial()) {
        optionals.set(0);
      }
      if (struct.isSetTradeDate()) {
        optionals.set(1);
      }
      if (struct.isSetTradingDay()) {
        optionals.set(2);
      }
      if (struct.isSetTradeTime()) {
        optionals.set(3);
      }
      if (struct.isSetTradeCode()) {
        optionals.set(4);
      }
      if (struct.isSetSessionID()) {
        optionals.set(5);
      }
      if (struct.isSetBankID()) {
        optionals.set(6);
      }
      if (struct.isSetBankBranchID()) {
        optionals.set(7);
      }
      if (struct.isSetBankAccType()) {
        optionals.set(8);
      }
      if (struct.isSetBankAccount()) {
        optionals.set(9);
      }
      if (struct.isSetBankSerial()) {
        optionals.set(10);
      }
      if (struct.isSetBrokerID()) {
        optionals.set(11);
      }
      if (struct.isSetBrokerBranchID()) {
        optionals.set(12);
      }
      if (struct.isSetFutureAccType()) {
        optionals.set(13);
      }
      if (struct.isSetAccountID()) {
        optionals.set(14);
      }
      if (struct.isSetInvestorID()) {
        optionals.set(15);
      }
      if (struct.isSetFutureSerial()) {
        optionals.set(16);
      }
      if (struct.isSetIdCardType()) {
        optionals.set(17);
      }
      if (struct.isSetIdentifiedCardNo()) {
        optionals.set(18);
      }
      if (struct.isSetCurrencyID()) {
        optionals.set(19);
      }
      if (struct.isSetTradeAmount()) {
        optionals.set(20);
      }
      if (struct.isSetCustFee()) {
        optionals.set(21);
      }
      if (struct.isSetBrokerFee()) {
        optionals.set(22);
      }
      if (struct.isSetAvailabilityFlag()) {
        optionals.set(23);
      }
      if (struct.isSetOperatorCode()) {
        optionals.set(24);
      }
      if (struct.isSetBankNewAccount()) {
        optionals.set(25);
      }
      if (struct.isSetErrorID()) {
        optionals.set(26);
      }
      if (struct.isSetErrorMsg()) {
        optionals.set(27);
      }
      oprot.writeBitSet(optionals, 28);
      if (struct.isSetPlateSerial()) {
        oprot.writeI32(struct.plateSerial);
      }
      if (struct.isSetTradeDate()) {
        oprot.writeString(struct.tradeDate);
      }
      if (struct.isSetTradingDay()) {
        oprot.writeString(struct.tradingDay);
      }
      if (struct.isSetTradeTime()) {
        oprot.writeString(struct.tradeTime);
      }
      if (struct.isSetTradeCode()) {
        oprot.writeString(struct.tradeCode);
      }
      if (struct.isSetSessionID()) {
        oprot.writeI32(struct.sessionID);
      }
      if (struct.isSetBankID()) {
        oprot.writeString(struct.bankID);
      }
      if (struct.isSetBankBranchID()) {
        oprot.writeString(struct.bankBranchID);
      }
      if (struct.isSetBankAccType()) {
        oprot.writeString(struct.bankAccType);
      }
      if (struct.isSetBankAccount()) {
        oprot.writeString(struct.bankAccount);
      }
      if (struct.isSetBankSerial()) {
        oprot.writeString(struct.bankSerial);
      }
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetBrokerBranchID()) {
        oprot.writeString(struct.brokerBranchID);
      }
      if (struct.isSetFutureAccType()) {
        oprot.writeString(struct.futureAccType);
      }
      if (struct.isSetAccountID()) {
        oprot.writeString(struct.accountID);
      }
      if (struct.isSetInvestorID()) {
        oprot.writeString(struct.investorID);
      }
      if (struct.isSetFutureSerial()) {
        oprot.writeI32(struct.futureSerial);
      }
      if (struct.isSetIdCardType()) {
        oprot.writeString(struct.idCardType);
      }
      if (struct.isSetIdentifiedCardNo()) {
        oprot.writeString(struct.identifiedCardNo);
      }
      if (struct.isSetCurrencyID()) {
        oprot.writeString(struct.currencyID);
      }
      if (struct.isSetTradeAmount()) {
        oprot.writeDouble(struct.tradeAmount);
      }
      if (struct.isSetCustFee()) {
        oprot.writeDouble(struct.custFee);
      }
      if (struct.isSetBrokerFee()) {
        oprot.writeDouble(struct.brokerFee);
      }
      if (struct.isSetAvailabilityFlag()) {
        oprot.writeString(struct.availabilityFlag);
      }
      if (struct.isSetOperatorCode()) {
        oprot.writeString(struct.operatorCode);
      }
      if (struct.isSetBankNewAccount()) {
        oprot.writeString(struct.bankNewAccount);
      }
      if (struct.isSetErrorID()) {
        oprot.writeI32(struct.errorID);
      }
      if (struct.isSetErrorMsg()) {
        oprot.writeString(struct.errorMsg);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcTransferSerialField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(28);
      if (incoming.get(0)) {
        struct.plateSerial = iprot.readI32();
        struct.setPlateSerialIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tradeDate = iprot.readString();
        struct.setTradeDateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tradingDay = iprot.readString();
        struct.setTradingDayIsSet(true);
      }
      if (incoming.get(3)) {
        struct.tradeTime = iprot.readString();
        struct.setTradeTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.tradeCode = iprot.readString();
        struct.setTradeCodeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sessionID = iprot.readI32();
        struct.setSessionIDIsSet(true);
      }
      if (incoming.get(6)) {
        struct.bankID = iprot.readString();
        struct.setBankIDIsSet(true);
      }
      if (incoming.get(7)) {
        struct.bankBranchID = iprot.readString();
        struct.setBankBranchIDIsSet(true);
      }
      if (incoming.get(8)) {
        struct.bankAccType = iprot.readString();
        struct.setBankAccTypeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.bankAccount = iprot.readString();
        struct.setBankAccountIsSet(true);
      }
      if (incoming.get(10)) {
        struct.bankSerial = iprot.readString();
        struct.setBankSerialIsSet(true);
      }
      if (incoming.get(11)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(12)) {
        struct.brokerBranchID = iprot.readString();
        struct.setBrokerBranchIDIsSet(true);
      }
      if (incoming.get(13)) {
        struct.futureAccType = iprot.readString();
        struct.setFutureAccTypeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.accountID = iprot.readString();
        struct.setAccountIDIsSet(true);
      }
      if (incoming.get(15)) {
        struct.investorID = iprot.readString();
        struct.setInvestorIDIsSet(true);
      }
      if (incoming.get(16)) {
        struct.futureSerial = iprot.readI32();
        struct.setFutureSerialIsSet(true);
      }
      if (incoming.get(17)) {
        struct.idCardType = iprot.readString();
        struct.setIdCardTypeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.identifiedCardNo = iprot.readString();
        struct.setIdentifiedCardNoIsSet(true);
      }
      if (incoming.get(19)) {
        struct.currencyID = iprot.readString();
        struct.setCurrencyIDIsSet(true);
      }
      if (incoming.get(20)) {
        struct.tradeAmount = iprot.readDouble();
        struct.setTradeAmountIsSet(true);
      }
      if (incoming.get(21)) {
        struct.custFee = iprot.readDouble();
        struct.setCustFeeIsSet(true);
      }
      if (incoming.get(22)) {
        struct.brokerFee = iprot.readDouble();
        struct.setBrokerFeeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.availabilityFlag = iprot.readString();
        struct.setAvailabilityFlagIsSet(true);
      }
      if (incoming.get(24)) {
        struct.operatorCode = iprot.readString();
        struct.setOperatorCodeIsSet(true);
      }
      if (incoming.get(25)) {
        struct.bankNewAccount = iprot.readString();
        struct.setBankNewAccountIsSet(true);
      }
      if (incoming.get(26)) {
        struct.errorID = iprot.readI32();
        struct.setErrorIDIsSet(true);
      }
      if (incoming.get(27)) {
        struct.errorMsg = iprot.readString();
        struct.setErrorMsgIsSet(true);
      }
    }
  }

}

