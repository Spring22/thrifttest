/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcMarketDataField implements org.apache.thrift.TBase<CThostFtdcMarketDataField, CThostFtdcMarketDataField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcMarketDataField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcMarketDataField");

  private static final org.apache.thrift.protocol.TField TRADING_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("tradingDay", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INSTRUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instrumentID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EXCHANGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EXCHANGE_INST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeInstID", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LAST_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField PRE_SETTLEMENT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("preSettlementPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField PRE_CLOSE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("preClosePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField PRE_OPEN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("preOpenInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField OPEN_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("openPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField HIGHEST_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("highestPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField LOWEST_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("lowestPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("volume", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField TURNOVER_FIELD_DESC = new org.apache.thrift.protocol.TField("turnover", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField OPEN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("openInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField CLOSE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("closePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField SETTLEMENT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("settlementPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField UPPER_LIMIT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("upperLimitPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField LOWER_LIMIT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("lowerLimitPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField PRE_DELTA_FIELD_DESC = new org.apache.thrift.protocol.TField("preDelta", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField CURR_DELTA_FIELD_DESC = new org.apache.thrift.protocol.TField("currDelta", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField UPDATE_MILLISEC_FIELD_DESC = new org.apache.thrift.protocol.TField("updateMillisec", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField ACTION_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("actionDay", org.apache.thrift.protocol.TType.STRING, (short)23);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcMarketDataFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcMarketDataFieldTupleSchemeFactory());
  }

  public String tradingDay; // required
  public String instrumentID; // required
  public String exchangeID; // required
  public String exchangeInstID; // required
  public double lastPrice; // required
  public double preSettlementPrice; // required
  public double preClosePrice; // required
  public double preOpenInterest; // required
  public double openPrice; // required
  public double highestPrice; // required
  public double lowestPrice; // required
  public int volume; // required
  public double turnover; // required
  public double openInterest; // required
  public double closePrice; // required
  public double settlementPrice; // required
  public double upperLimitPrice; // required
  public double lowerLimitPrice; // required
  public double preDelta; // required
  public double currDelta; // required
  public String updateTime; // required
  public int updateMillisec; // required
  public String actionDay; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRADING_DAY((short)1, "tradingDay"),
    INSTRUMENT_ID((short)2, "instrumentID"),
    EXCHANGE_ID((short)3, "exchangeID"),
    EXCHANGE_INST_ID((short)4, "exchangeInstID"),
    LAST_PRICE((short)5, "lastPrice"),
    PRE_SETTLEMENT_PRICE((short)6, "preSettlementPrice"),
    PRE_CLOSE_PRICE((short)7, "preClosePrice"),
    PRE_OPEN_INTEREST((short)8, "preOpenInterest"),
    OPEN_PRICE((short)9, "openPrice"),
    HIGHEST_PRICE((short)10, "highestPrice"),
    LOWEST_PRICE((short)11, "lowestPrice"),
    VOLUME((short)12, "volume"),
    TURNOVER((short)13, "turnover"),
    OPEN_INTEREST((short)14, "openInterest"),
    CLOSE_PRICE((short)15, "closePrice"),
    SETTLEMENT_PRICE((short)16, "settlementPrice"),
    UPPER_LIMIT_PRICE((short)17, "upperLimitPrice"),
    LOWER_LIMIT_PRICE((short)18, "lowerLimitPrice"),
    PRE_DELTA((short)19, "preDelta"),
    CURR_DELTA((short)20, "currDelta"),
    UPDATE_TIME((short)21, "updateTime"),
    UPDATE_MILLISEC((short)22, "updateMillisec"),
    ACTION_DAY((short)23, "actionDay");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRADING_DAY
          return TRADING_DAY;
        case 2: // INSTRUMENT_ID
          return INSTRUMENT_ID;
        case 3: // EXCHANGE_ID
          return EXCHANGE_ID;
        case 4: // EXCHANGE_INST_ID
          return EXCHANGE_INST_ID;
        case 5: // LAST_PRICE
          return LAST_PRICE;
        case 6: // PRE_SETTLEMENT_PRICE
          return PRE_SETTLEMENT_PRICE;
        case 7: // PRE_CLOSE_PRICE
          return PRE_CLOSE_PRICE;
        case 8: // PRE_OPEN_INTEREST
          return PRE_OPEN_INTEREST;
        case 9: // OPEN_PRICE
          return OPEN_PRICE;
        case 10: // HIGHEST_PRICE
          return HIGHEST_PRICE;
        case 11: // LOWEST_PRICE
          return LOWEST_PRICE;
        case 12: // VOLUME
          return VOLUME;
        case 13: // TURNOVER
          return TURNOVER;
        case 14: // OPEN_INTEREST
          return OPEN_INTEREST;
        case 15: // CLOSE_PRICE
          return CLOSE_PRICE;
        case 16: // SETTLEMENT_PRICE
          return SETTLEMENT_PRICE;
        case 17: // UPPER_LIMIT_PRICE
          return UPPER_LIMIT_PRICE;
        case 18: // LOWER_LIMIT_PRICE
          return LOWER_LIMIT_PRICE;
        case 19: // PRE_DELTA
          return PRE_DELTA;
        case 20: // CURR_DELTA
          return CURR_DELTA;
        case 21: // UPDATE_TIME
          return UPDATE_TIME;
        case 22: // UPDATE_MILLISEC
          return UPDATE_MILLISEC;
        case 23: // ACTION_DAY
          return ACTION_DAY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LASTPRICE_ISSET_ID = 0;
  private static final int __PRESETTLEMENTPRICE_ISSET_ID = 1;
  private static final int __PRECLOSEPRICE_ISSET_ID = 2;
  private static final int __PREOPENINTEREST_ISSET_ID = 3;
  private static final int __OPENPRICE_ISSET_ID = 4;
  private static final int __HIGHESTPRICE_ISSET_ID = 5;
  private static final int __LOWESTPRICE_ISSET_ID = 6;
  private static final int __VOLUME_ISSET_ID = 7;
  private static final int __TURNOVER_ISSET_ID = 8;
  private static final int __OPENINTEREST_ISSET_ID = 9;
  private static final int __CLOSEPRICE_ISSET_ID = 10;
  private static final int __SETTLEMENTPRICE_ISSET_ID = 11;
  private static final int __UPPERLIMITPRICE_ISSET_ID = 12;
  private static final int __LOWERLIMITPRICE_ISSET_ID = 13;
  private static final int __PREDELTA_ISSET_ID = 14;
  private static final int __CURRDELTA_ISSET_ID = 15;
  private static final int __UPDATEMILLISEC_ISSET_ID = 16;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRADING_DAY, new org.apache.thrift.meta_data.FieldMetaData("tradingDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    tmpMap.put(_Fields.INSTRUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("instrumentID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInstrumentIDType")));
    tmpMap.put(_Fields.EXCHANGE_ID, new org.apache.thrift.meta_data.FieldMetaData("exchangeID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcExchangeIDType")));
    tmpMap.put(_Fields.EXCHANGE_INST_ID, new org.apache.thrift.meta_data.FieldMetaData("exchangeInstID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcExchangeInstIDType")));
    tmpMap.put(_Fields.LAST_PRICE, new org.apache.thrift.meta_data.FieldMetaData("lastPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.PRE_SETTLEMENT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("preSettlementPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.PRE_CLOSE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("preClosePrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.PRE_OPEN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("preOpenInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcLargeVolumeType")));
    tmpMap.put(_Fields.OPEN_PRICE, new org.apache.thrift.meta_data.FieldMetaData("openPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.HIGHEST_PRICE, new org.apache.thrift.meta_data.FieldMetaData("highestPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.LOWEST_PRICE, new org.apache.thrift.meta_data.FieldMetaData("lowestPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.VOLUME, new org.apache.thrift.meta_data.FieldMetaData("volume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcVolumeType")));
    tmpMap.put(_Fields.TURNOVER, new org.apache.thrift.meta_data.FieldMetaData("turnover", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.OPEN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("openInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcLargeVolumeType")));
    tmpMap.put(_Fields.CLOSE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("closePrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.SETTLEMENT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("settlementPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.UPPER_LIMIT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("upperLimitPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.LOWER_LIMIT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("lowerLimitPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.PRE_DELTA, new org.apache.thrift.meta_data.FieldMetaData("preDelta", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcRatioType")));
    tmpMap.put(_Fields.CURR_DELTA, new org.apache.thrift.meta_data.FieldMetaData("currDelta", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcRatioType")));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeType")));
    tmpMap.put(_Fields.UPDATE_MILLISEC, new org.apache.thrift.meta_data.FieldMetaData("updateMillisec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcMillisecType")));
    tmpMap.put(_Fields.ACTION_DAY, new org.apache.thrift.meta_data.FieldMetaData("actionDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcMarketDataField.class, metaDataMap);
  }

  public CThostFtdcMarketDataField() {
  }

  public CThostFtdcMarketDataField(
    String tradingDay,
    String instrumentID,
    String exchangeID,
    String exchangeInstID,
    double lastPrice,
    double preSettlementPrice,
    double preClosePrice,
    double preOpenInterest,
    double openPrice,
    double highestPrice,
    double lowestPrice,
    int volume,
    double turnover,
    double openInterest,
    double closePrice,
    double settlementPrice,
    double upperLimitPrice,
    double lowerLimitPrice,
    double preDelta,
    double currDelta,
    String updateTime,
    int updateMillisec,
    String actionDay)
  {
    this();
    this.tradingDay = tradingDay;
    this.instrumentID = instrumentID;
    this.exchangeID = exchangeID;
    this.exchangeInstID = exchangeInstID;
    this.lastPrice = lastPrice;
    setLastPriceIsSet(true);
    this.preSettlementPrice = preSettlementPrice;
    setPreSettlementPriceIsSet(true);
    this.preClosePrice = preClosePrice;
    setPreClosePriceIsSet(true);
    this.preOpenInterest = preOpenInterest;
    setPreOpenInterestIsSet(true);
    this.openPrice = openPrice;
    setOpenPriceIsSet(true);
    this.highestPrice = highestPrice;
    setHighestPriceIsSet(true);
    this.lowestPrice = lowestPrice;
    setLowestPriceIsSet(true);
    this.volume = volume;
    setVolumeIsSet(true);
    this.turnover = turnover;
    setTurnoverIsSet(true);
    this.openInterest = openInterest;
    setOpenInterestIsSet(true);
    this.closePrice = closePrice;
    setClosePriceIsSet(true);
    this.settlementPrice = settlementPrice;
    setSettlementPriceIsSet(true);
    this.upperLimitPrice = upperLimitPrice;
    setUpperLimitPriceIsSet(true);
    this.lowerLimitPrice = lowerLimitPrice;
    setLowerLimitPriceIsSet(true);
    this.preDelta = preDelta;
    setPreDeltaIsSet(true);
    this.currDelta = currDelta;
    setCurrDeltaIsSet(true);
    this.updateTime = updateTime;
    this.updateMillisec = updateMillisec;
    setUpdateMillisecIsSet(true);
    this.actionDay = actionDay;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcMarketDataField(CThostFtdcMarketDataField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTradingDay()) {
      this.tradingDay = other.tradingDay;
    }
    if (other.isSetInstrumentID()) {
      this.instrumentID = other.instrumentID;
    }
    if (other.isSetExchangeID()) {
      this.exchangeID = other.exchangeID;
    }
    if (other.isSetExchangeInstID()) {
      this.exchangeInstID = other.exchangeInstID;
    }
    this.lastPrice = other.lastPrice;
    this.preSettlementPrice = other.preSettlementPrice;
    this.preClosePrice = other.preClosePrice;
    this.preOpenInterest = other.preOpenInterest;
    this.openPrice = other.openPrice;
    this.highestPrice = other.highestPrice;
    this.lowestPrice = other.lowestPrice;
    this.volume = other.volume;
    this.turnover = other.turnover;
    this.openInterest = other.openInterest;
    this.closePrice = other.closePrice;
    this.settlementPrice = other.settlementPrice;
    this.upperLimitPrice = other.upperLimitPrice;
    this.lowerLimitPrice = other.lowerLimitPrice;
    this.preDelta = other.preDelta;
    this.currDelta = other.currDelta;
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    this.updateMillisec = other.updateMillisec;
    if (other.isSetActionDay()) {
      this.actionDay = other.actionDay;
    }
  }

  public CThostFtdcMarketDataField deepCopy() {
    return new CThostFtdcMarketDataField(this);
  }

  @Override
  public void clear() {
    this.tradingDay = null;
    this.instrumentID = null;
    this.exchangeID = null;
    this.exchangeInstID = null;
    setLastPriceIsSet(false);
    this.lastPrice = 0.0;
    setPreSettlementPriceIsSet(false);
    this.preSettlementPrice = 0.0;
    setPreClosePriceIsSet(false);
    this.preClosePrice = 0.0;
    setPreOpenInterestIsSet(false);
    this.preOpenInterest = 0.0;
    setOpenPriceIsSet(false);
    this.openPrice = 0.0;
    setHighestPriceIsSet(false);
    this.highestPrice = 0.0;
    setLowestPriceIsSet(false);
    this.lowestPrice = 0.0;
    setVolumeIsSet(false);
    this.volume = 0;
    setTurnoverIsSet(false);
    this.turnover = 0.0;
    setOpenInterestIsSet(false);
    this.openInterest = 0.0;
    setClosePriceIsSet(false);
    this.closePrice = 0.0;
    setSettlementPriceIsSet(false);
    this.settlementPrice = 0.0;
    setUpperLimitPriceIsSet(false);
    this.upperLimitPrice = 0.0;
    setLowerLimitPriceIsSet(false);
    this.lowerLimitPrice = 0.0;
    setPreDeltaIsSet(false);
    this.preDelta = 0.0;
    setCurrDeltaIsSet(false);
    this.currDelta = 0.0;
    this.updateTime = null;
    setUpdateMillisecIsSet(false);
    this.updateMillisec = 0;
    this.actionDay = null;
  }

  public String getTradingDay() {
    return this.tradingDay;
  }

  public CThostFtdcMarketDataField setTradingDay(String tradingDay) {
    this.tradingDay = tradingDay;
    return this;
  }

  public void unsetTradingDay() {
    this.tradingDay = null;
  }

  /** Returns true if field tradingDay is set (has been assigned a value) and false otherwise */
  public boolean isSetTradingDay() {
    return this.tradingDay != null;
  }

  public void setTradingDayIsSet(boolean value) {
    if (!value) {
      this.tradingDay = null;
    }
  }

  public String getInstrumentID() {
    return this.instrumentID;
  }

  public CThostFtdcMarketDataField setInstrumentID(String instrumentID) {
    this.instrumentID = instrumentID;
    return this;
  }

  public void unsetInstrumentID() {
    this.instrumentID = null;
  }

  /** Returns true if field instrumentID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstrumentID() {
    return this.instrumentID != null;
  }

  public void setInstrumentIDIsSet(boolean value) {
    if (!value) {
      this.instrumentID = null;
    }
  }

  public String getExchangeID() {
    return this.exchangeID;
  }

  public CThostFtdcMarketDataField setExchangeID(String exchangeID) {
    this.exchangeID = exchangeID;
    return this;
  }

  public void unsetExchangeID() {
    this.exchangeID = null;
  }

  /** Returns true if field exchangeID is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeID() {
    return this.exchangeID != null;
  }

  public void setExchangeIDIsSet(boolean value) {
    if (!value) {
      this.exchangeID = null;
    }
  }

  public String getExchangeInstID() {
    return this.exchangeInstID;
  }

  public CThostFtdcMarketDataField setExchangeInstID(String exchangeInstID) {
    this.exchangeInstID = exchangeInstID;
    return this;
  }

  public void unsetExchangeInstID() {
    this.exchangeInstID = null;
  }

  /** Returns true if field exchangeInstID is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeInstID() {
    return this.exchangeInstID != null;
  }

  public void setExchangeInstIDIsSet(boolean value) {
    if (!value) {
      this.exchangeInstID = null;
    }
  }

  public double getLastPrice() {
    return this.lastPrice;
  }

  public CThostFtdcMarketDataField setLastPrice(double lastPrice) {
    this.lastPrice = lastPrice;
    setLastPriceIsSet(true);
    return this;
  }

  public void unsetLastPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTPRICE_ISSET_ID);
  }

  /** Returns true if field lastPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetLastPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTPRICE_ISSET_ID);
  }

  public void setLastPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTPRICE_ISSET_ID, value);
  }

  public double getPreSettlementPrice() {
    return this.preSettlementPrice;
  }

  public CThostFtdcMarketDataField setPreSettlementPrice(double preSettlementPrice) {
    this.preSettlementPrice = preSettlementPrice;
    setPreSettlementPriceIsSet(true);
    return this;
  }

  public void unsetPreSettlementPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRESETTLEMENTPRICE_ISSET_ID);
  }

  /** Returns true if field preSettlementPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetPreSettlementPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRESETTLEMENTPRICE_ISSET_ID);
  }

  public void setPreSettlementPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRESETTLEMENTPRICE_ISSET_ID, value);
  }

  public double getPreClosePrice() {
    return this.preClosePrice;
  }

  public CThostFtdcMarketDataField setPreClosePrice(double preClosePrice) {
    this.preClosePrice = preClosePrice;
    setPreClosePriceIsSet(true);
    return this;
  }

  public void unsetPreClosePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRECLOSEPRICE_ISSET_ID);
  }

  /** Returns true if field preClosePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetPreClosePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRECLOSEPRICE_ISSET_ID);
  }

  public void setPreClosePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRECLOSEPRICE_ISSET_ID, value);
  }

  public double getPreOpenInterest() {
    return this.preOpenInterest;
  }

  public CThostFtdcMarketDataField setPreOpenInterest(double preOpenInterest) {
    this.preOpenInterest = preOpenInterest;
    setPreOpenInterestIsSet(true);
    return this;
  }

  public void unsetPreOpenInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREOPENINTEREST_ISSET_ID);
  }

  /** Returns true if field preOpenInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetPreOpenInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __PREOPENINTEREST_ISSET_ID);
  }

  public void setPreOpenInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREOPENINTEREST_ISSET_ID, value);
  }

  public double getOpenPrice() {
    return this.openPrice;
  }

  public CThostFtdcMarketDataField setOpenPrice(double openPrice) {
    this.openPrice = openPrice;
    setOpenPriceIsSet(true);
    return this;
  }

  public void unsetOpenPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPENPRICE_ISSET_ID);
  }

  /** Returns true if field openPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __OPENPRICE_ISSET_ID);
  }

  public void setOpenPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPENPRICE_ISSET_ID, value);
  }

  public double getHighestPrice() {
    return this.highestPrice;
  }

  public CThostFtdcMarketDataField setHighestPrice(double highestPrice) {
    this.highestPrice = highestPrice;
    setHighestPriceIsSet(true);
    return this;
  }

  public void unsetHighestPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HIGHESTPRICE_ISSET_ID);
  }

  /** Returns true if field highestPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetHighestPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __HIGHESTPRICE_ISSET_ID);
  }

  public void setHighestPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HIGHESTPRICE_ISSET_ID, value);
  }

  public double getLowestPrice() {
    return this.lowestPrice;
  }

  public CThostFtdcMarketDataField setLowestPrice(double lowestPrice) {
    this.lowestPrice = lowestPrice;
    setLowestPriceIsSet(true);
    return this;
  }

  public void unsetLowestPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOWESTPRICE_ISSET_ID);
  }

  /** Returns true if field lowestPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetLowestPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __LOWESTPRICE_ISSET_ID);
  }

  public void setLowestPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOWESTPRICE_ISSET_ID, value);
  }

  public int getVolume() {
    return this.volume;
  }

  public CThostFtdcMarketDataField setVolume(int volume) {
    this.volume = volume;
    setVolumeIsSet(true);
    return this;
  }

  public void unsetVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLUME_ISSET_ID);
  }

  /** Returns true if field volume is set (has been assigned a value) and false otherwise */
  public boolean isSetVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __VOLUME_ISSET_ID);
  }

  public void setVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLUME_ISSET_ID, value);
  }

  public double getTurnover() {
    return this.turnover;
  }

  public CThostFtdcMarketDataField setTurnover(double turnover) {
    this.turnover = turnover;
    setTurnoverIsSet(true);
    return this;
  }

  public void unsetTurnover() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TURNOVER_ISSET_ID);
  }

  /** Returns true if field turnover is set (has been assigned a value) and false otherwise */
  public boolean isSetTurnover() {
    return EncodingUtils.testBit(__isset_bitfield, __TURNOVER_ISSET_ID);
  }

  public void setTurnoverIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TURNOVER_ISSET_ID, value);
  }

  public double getOpenInterest() {
    return this.openInterest;
  }

  public CThostFtdcMarketDataField setOpenInterest(double openInterest) {
    this.openInterest = openInterest;
    setOpenInterestIsSet(true);
    return this;
  }

  public void unsetOpenInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPENINTEREST_ISSET_ID);
  }

  /** Returns true if field openInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __OPENINTEREST_ISSET_ID);
  }

  public void setOpenInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPENINTEREST_ISSET_ID, value);
  }

  public double getClosePrice() {
    return this.closePrice;
  }

  public CThostFtdcMarketDataField setClosePrice(double closePrice) {
    this.closePrice = closePrice;
    setClosePriceIsSet(true);
    return this;
  }

  public void unsetClosePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSEPRICE_ISSET_ID);
  }

  /** Returns true if field closePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetClosePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSEPRICE_ISSET_ID);
  }

  public void setClosePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSEPRICE_ISSET_ID, value);
  }

  public double getSettlementPrice() {
    return this.settlementPrice;
  }

  public CThostFtdcMarketDataField setSettlementPrice(double settlementPrice) {
    this.settlementPrice = settlementPrice;
    setSettlementPriceIsSet(true);
    return this;
  }

  public void unsetSettlementPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SETTLEMENTPRICE_ISSET_ID);
  }

  /** Returns true if field settlementPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetSettlementPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __SETTLEMENTPRICE_ISSET_ID);
  }

  public void setSettlementPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SETTLEMENTPRICE_ISSET_ID, value);
  }

  public double getUpperLimitPrice() {
    return this.upperLimitPrice;
  }

  public CThostFtdcMarketDataField setUpperLimitPrice(double upperLimitPrice) {
    this.upperLimitPrice = upperLimitPrice;
    setUpperLimitPriceIsSet(true);
    return this;
  }

  public void unsetUpperLimitPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPPERLIMITPRICE_ISSET_ID);
  }

  /** Returns true if field upperLimitPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetUpperLimitPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __UPPERLIMITPRICE_ISSET_ID);
  }

  public void setUpperLimitPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPPERLIMITPRICE_ISSET_ID, value);
  }

  public double getLowerLimitPrice() {
    return this.lowerLimitPrice;
  }

  public CThostFtdcMarketDataField setLowerLimitPrice(double lowerLimitPrice) {
    this.lowerLimitPrice = lowerLimitPrice;
    setLowerLimitPriceIsSet(true);
    return this;
  }

  public void unsetLowerLimitPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOWERLIMITPRICE_ISSET_ID);
  }

  /** Returns true if field lowerLimitPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetLowerLimitPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __LOWERLIMITPRICE_ISSET_ID);
  }

  public void setLowerLimitPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOWERLIMITPRICE_ISSET_ID, value);
  }

  public double getPreDelta() {
    return this.preDelta;
  }

  public CThostFtdcMarketDataField setPreDelta(double preDelta) {
    this.preDelta = preDelta;
    setPreDeltaIsSet(true);
    return this;
  }

  public void unsetPreDelta() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREDELTA_ISSET_ID);
  }

  /** Returns true if field preDelta is set (has been assigned a value) and false otherwise */
  public boolean isSetPreDelta() {
    return EncodingUtils.testBit(__isset_bitfield, __PREDELTA_ISSET_ID);
  }

  public void setPreDeltaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREDELTA_ISSET_ID, value);
  }

  public double getCurrDelta() {
    return this.currDelta;
  }

  public CThostFtdcMarketDataField setCurrDelta(double currDelta) {
    this.currDelta = currDelta;
    setCurrDeltaIsSet(true);
    return this;
  }

  public void unsetCurrDelta() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRDELTA_ISSET_ID);
  }

  /** Returns true if field currDelta is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrDelta() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRDELTA_ISSET_ID);
  }

  public void setCurrDeltaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRDELTA_ISSET_ID, value);
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public CThostFtdcMarketDataField setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public int getUpdateMillisec() {
    return this.updateMillisec;
  }

  public CThostFtdcMarketDataField setUpdateMillisec(int updateMillisec) {
    this.updateMillisec = updateMillisec;
    setUpdateMillisecIsSet(true);
    return this;
  }

  public void unsetUpdateMillisec() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEMILLISEC_ISSET_ID);
  }

  /** Returns true if field updateMillisec is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateMillisec() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEMILLISEC_ISSET_ID);
  }

  public void setUpdateMillisecIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEMILLISEC_ISSET_ID, value);
  }

  public String getActionDay() {
    return this.actionDay;
  }

  public CThostFtdcMarketDataField setActionDay(String actionDay) {
    this.actionDay = actionDay;
    return this;
  }

  public void unsetActionDay() {
    this.actionDay = null;
  }

  /** Returns true if field actionDay is set (has been assigned a value) and false otherwise */
  public boolean isSetActionDay() {
    return this.actionDay != null;
  }

  public void setActionDayIsSet(boolean value) {
    if (!value) {
      this.actionDay = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRADING_DAY:
      if (value == null) {
        unsetTradingDay();
      } else {
        setTradingDay((String)value);
      }
      break;

    case INSTRUMENT_ID:
      if (value == null) {
        unsetInstrumentID();
      } else {
        setInstrumentID((String)value);
      }
      break;

    case EXCHANGE_ID:
      if (value == null) {
        unsetExchangeID();
      } else {
        setExchangeID((String)value);
      }
      break;

    case EXCHANGE_INST_ID:
      if (value == null) {
        unsetExchangeInstID();
      } else {
        setExchangeInstID((String)value);
      }
      break;

    case LAST_PRICE:
      if (value == null) {
        unsetLastPrice();
      } else {
        setLastPrice((Double)value);
      }
      break;

    case PRE_SETTLEMENT_PRICE:
      if (value == null) {
        unsetPreSettlementPrice();
      } else {
        setPreSettlementPrice((Double)value);
      }
      break;

    case PRE_CLOSE_PRICE:
      if (value == null) {
        unsetPreClosePrice();
      } else {
        setPreClosePrice((Double)value);
      }
      break;

    case PRE_OPEN_INTEREST:
      if (value == null) {
        unsetPreOpenInterest();
      } else {
        setPreOpenInterest((Double)value);
      }
      break;

    case OPEN_PRICE:
      if (value == null) {
        unsetOpenPrice();
      } else {
        setOpenPrice((Double)value);
      }
      break;

    case HIGHEST_PRICE:
      if (value == null) {
        unsetHighestPrice();
      } else {
        setHighestPrice((Double)value);
      }
      break;

    case LOWEST_PRICE:
      if (value == null) {
        unsetLowestPrice();
      } else {
        setLowestPrice((Double)value);
      }
      break;

    case VOLUME:
      if (value == null) {
        unsetVolume();
      } else {
        setVolume((Integer)value);
      }
      break;

    case TURNOVER:
      if (value == null) {
        unsetTurnover();
      } else {
        setTurnover((Double)value);
      }
      break;

    case OPEN_INTEREST:
      if (value == null) {
        unsetOpenInterest();
      } else {
        setOpenInterest((Double)value);
      }
      break;

    case CLOSE_PRICE:
      if (value == null) {
        unsetClosePrice();
      } else {
        setClosePrice((Double)value);
      }
      break;

    case SETTLEMENT_PRICE:
      if (value == null) {
        unsetSettlementPrice();
      } else {
        setSettlementPrice((Double)value);
      }
      break;

    case UPPER_LIMIT_PRICE:
      if (value == null) {
        unsetUpperLimitPrice();
      } else {
        setUpperLimitPrice((Double)value);
      }
      break;

    case LOWER_LIMIT_PRICE:
      if (value == null) {
        unsetLowerLimitPrice();
      } else {
        setLowerLimitPrice((Double)value);
      }
      break;

    case PRE_DELTA:
      if (value == null) {
        unsetPreDelta();
      } else {
        setPreDelta((Double)value);
      }
      break;

    case CURR_DELTA:
      if (value == null) {
        unsetCurrDelta();
      } else {
        setCurrDelta((Double)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    case UPDATE_MILLISEC:
      if (value == null) {
        unsetUpdateMillisec();
      } else {
        setUpdateMillisec((Integer)value);
      }
      break;

    case ACTION_DAY:
      if (value == null) {
        unsetActionDay();
      } else {
        setActionDay((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRADING_DAY:
      return getTradingDay();

    case INSTRUMENT_ID:
      return getInstrumentID();

    case EXCHANGE_ID:
      return getExchangeID();

    case EXCHANGE_INST_ID:
      return getExchangeInstID();

    case LAST_PRICE:
      return Double.valueOf(getLastPrice());

    case PRE_SETTLEMENT_PRICE:
      return Double.valueOf(getPreSettlementPrice());

    case PRE_CLOSE_PRICE:
      return Double.valueOf(getPreClosePrice());

    case PRE_OPEN_INTEREST:
      return Double.valueOf(getPreOpenInterest());

    case OPEN_PRICE:
      return Double.valueOf(getOpenPrice());

    case HIGHEST_PRICE:
      return Double.valueOf(getHighestPrice());

    case LOWEST_PRICE:
      return Double.valueOf(getLowestPrice());

    case VOLUME:
      return Integer.valueOf(getVolume());

    case TURNOVER:
      return Double.valueOf(getTurnover());

    case OPEN_INTEREST:
      return Double.valueOf(getOpenInterest());

    case CLOSE_PRICE:
      return Double.valueOf(getClosePrice());

    case SETTLEMENT_PRICE:
      return Double.valueOf(getSettlementPrice());

    case UPPER_LIMIT_PRICE:
      return Double.valueOf(getUpperLimitPrice());

    case LOWER_LIMIT_PRICE:
      return Double.valueOf(getLowerLimitPrice());

    case PRE_DELTA:
      return Double.valueOf(getPreDelta());

    case CURR_DELTA:
      return Double.valueOf(getCurrDelta());

    case UPDATE_TIME:
      return getUpdateTime();

    case UPDATE_MILLISEC:
      return Integer.valueOf(getUpdateMillisec());

    case ACTION_DAY:
      return getActionDay();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRADING_DAY:
      return isSetTradingDay();
    case INSTRUMENT_ID:
      return isSetInstrumentID();
    case EXCHANGE_ID:
      return isSetExchangeID();
    case EXCHANGE_INST_ID:
      return isSetExchangeInstID();
    case LAST_PRICE:
      return isSetLastPrice();
    case PRE_SETTLEMENT_PRICE:
      return isSetPreSettlementPrice();
    case PRE_CLOSE_PRICE:
      return isSetPreClosePrice();
    case PRE_OPEN_INTEREST:
      return isSetPreOpenInterest();
    case OPEN_PRICE:
      return isSetOpenPrice();
    case HIGHEST_PRICE:
      return isSetHighestPrice();
    case LOWEST_PRICE:
      return isSetLowestPrice();
    case VOLUME:
      return isSetVolume();
    case TURNOVER:
      return isSetTurnover();
    case OPEN_INTEREST:
      return isSetOpenInterest();
    case CLOSE_PRICE:
      return isSetClosePrice();
    case SETTLEMENT_PRICE:
      return isSetSettlementPrice();
    case UPPER_LIMIT_PRICE:
      return isSetUpperLimitPrice();
    case LOWER_LIMIT_PRICE:
      return isSetLowerLimitPrice();
    case PRE_DELTA:
      return isSetPreDelta();
    case CURR_DELTA:
      return isSetCurrDelta();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case UPDATE_MILLISEC:
      return isSetUpdateMillisec();
    case ACTION_DAY:
      return isSetActionDay();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcMarketDataField)
      return this.equals((CThostFtdcMarketDataField)that);
    return false;
  }

  public boolean equals(CThostFtdcMarketDataField that) {
    if (that == null)
      return false;

    boolean this_present_tradingDay = true && this.isSetTradingDay();
    boolean that_present_tradingDay = true && that.isSetTradingDay();
    if (this_present_tradingDay || that_present_tradingDay) {
      if (!(this_present_tradingDay && that_present_tradingDay))
        return false;
      if (!this.tradingDay.equals(that.tradingDay))
        return false;
    }

    boolean this_present_instrumentID = true && this.isSetInstrumentID();
    boolean that_present_instrumentID = true && that.isSetInstrumentID();
    if (this_present_instrumentID || that_present_instrumentID) {
      if (!(this_present_instrumentID && that_present_instrumentID))
        return false;
      if (!this.instrumentID.equals(that.instrumentID))
        return false;
    }

    boolean this_present_exchangeID = true && this.isSetExchangeID();
    boolean that_present_exchangeID = true && that.isSetExchangeID();
    if (this_present_exchangeID || that_present_exchangeID) {
      if (!(this_present_exchangeID && that_present_exchangeID))
        return false;
      if (!this.exchangeID.equals(that.exchangeID))
        return false;
    }

    boolean this_present_exchangeInstID = true && this.isSetExchangeInstID();
    boolean that_present_exchangeInstID = true && that.isSetExchangeInstID();
    if (this_present_exchangeInstID || that_present_exchangeInstID) {
      if (!(this_present_exchangeInstID && that_present_exchangeInstID))
        return false;
      if (!this.exchangeInstID.equals(that.exchangeInstID))
        return false;
    }

    boolean this_present_lastPrice = true;
    boolean that_present_lastPrice = true;
    if (this_present_lastPrice || that_present_lastPrice) {
      if (!(this_present_lastPrice && that_present_lastPrice))
        return false;
      if (this.lastPrice != that.lastPrice)
        return false;
    }

    boolean this_present_preSettlementPrice = true;
    boolean that_present_preSettlementPrice = true;
    if (this_present_preSettlementPrice || that_present_preSettlementPrice) {
      if (!(this_present_preSettlementPrice && that_present_preSettlementPrice))
        return false;
      if (this.preSettlementPrice != that.preSettlementPrice)
        return false;
    }

    boolean this_present_preClosePrice = true;
    boolean that_present_preClosePrice = true;
    if (this_present_preClosePrice || that_present_preClosePrice) {
      if (!(this_present_preClosePrice && that_present_preClosePrice))
        return false;
      if (this.preClosePrice != that.preClosePrice)
        return false;
    }

    boolean this_present_preOpenInterest = true;
    boolean that_present_preOpenInterest = true;
    if (this_present_preOpenInterest || that_present_preOpenInterest) {
      if (!(this_present_preOpenInterest && that_present_preOpenInterest))
        return false;
      if (this.preOpenInterest != that.preOpenInterest)
        return false;
    }

    boolean this_present_openPrice = true;
    boolean that_present_openPrice = true;
    if (this_present_openPrice || that_present_openPrice) {
      if (!(this_present_openPrice && that_present_openPrice))
        return false;
      if (this.openPrice != that.openPrice)
        return false;
    }

    boolean this_present_highestPrice = true;
    boolean that_present_highestPrice = true;
    if (this_present_highestPrice || that_present_highestPrice) {
      if (!(this_present_highestPrice && that_present_highestPrice))
        return false;
      if (this.highestPrice != that.highestPrice)
        return false;
    }

    boolean this_present_lowestPrice = true;
    boolean that_present_lowestPrice = true;
    if (this_present_lowestPrice || that_present_lowestPrice) {
      if (!(this_present_lowestPrice && that_present_lowestPrice))
        return false;
      if (this.lowestPrice != that.lowestPrice)
        return false;
    }

    boolean this_present_volume = true;
    boolean that_present_volume = true;
    if (this_present_volume || that_present_volume) {
      if (!(this_present_volume && that_present_volume))
        return false;
      if (this.volume != that.volume)
        return false;
    }

    boolean this_present_turnover = true;
    boolean that_present_turnover = true;
    if (this_present_turnover || that_present_turnover) {
      if (!(this_present_turnover && that_present_turnover))
        return false;
      if (this.turnover != that.turnover)
        return false;
    }

    boolean this_present_openInterest = true;
    boolean that_present_openInterest = true;
    if (this_present_openInterest || that_present_openInterest) {
      if (!(this_present_openInterest && that_present_openInterest))
        return false;
      if (this.openInterest != that.openInterest)
        return false;
    }

    boolean this_present_closePrice = true;
    boolean that_present_closePrice = true;
    if (this_present_closePrice || that_present_closePrice) {
      if (!(this_present_closePrice && that_present_closePrice))
        return false;
      if (this.closePrice != that.closePrice)
        return false;
    }

    boolean this_present_settlementPrice = true;
    boolean that_present_settlementPrice = true;
    if (this_present_settlementPrice || that_present_settlementPrice) {
      if (!(this_present_settlementPrice && that_present_settlementPrice))
        return false;
      if (this.settlementPrice != that.settlementPrice)
        return false;
    }

    boolean this_present_upperLimitPrice = true;
    boolean that_present_upperLimitPrice = true;
    if (this_present_upperLimitPrice || that_present_upperLimitPrice) {
      if (!(this_present_upperLimitPrice && that_present_upperLimitPrice))
        return false;
      if (this.upperLimitPrice != that.upperLimitPrice)
        return false;
    }

    boolean this_present_lowerLimitPrice = true;
    boolean that_present_lowerLimitPrice = true;
    if (this_present_lowerLimitPrice || that_present_lowerLimitPrice) {
      if (!(this_present_lowerLimitPrice && that_present_lowerLimitPrice))
        return false;
      if (this.lowerLimitPrice != that.lowerLimitPrice)
        return false;
    }

    boolean this_present_preDelta = true;
    boolean that_present_preDelta = true;
    if (this_present_preDelta || that_present_preDelta) {
      if (!(this_present_preDelta && that_present_preDelta))
        return false;
      if (this.preDelta != that.preDelta)
        return false;
    }

    boolean this_present_currDelta = true;
    boolean that_present_currDelta = true;
    if (this_present_currDelta || that_present_currDelta) {
      if (!(this_present_currDelta && that_present_currDelta))
        return false;
      if (this.currDelta != that.currDelta)
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    boolean this_present_updateMillisec = true;
    boolean that_present_updateMillisec = true;
    if (this_present_updateMillisec || that_present_updateMillisec) {
      if (!(this_present_updateMillisec && that_present_updateMillisec))
        return false;
      if (this.updateMillisec != that.updateMillisec)
        return false;
    }

    boolean this_present_actionDay = true && this.isSetActionDay();
    boolean that_present_actionDay = true && that.isSetActionDay();
    if (this_present_actionDay || that_present_actionDay) {
      if (!(this_present_actionDay && that_present_actionDay))
        return false;
      if (!this.actionDay.equals(that.actionDay))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcMarketDataField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTradingDay()).compareTo(other.isSetTradingDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradingDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradingDay, other.tradingDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstrumentID()).compareTo(other.isSetInstrumentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstrumentID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instrumentID, other.instrumentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeID()).compareTo(other.isSetExchangeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeID, other.exchangeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeInstID()).compareTo(other.isSetExchangeInstID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeInstID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeInstID, other.exchangeInstID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastPrice()).compareTo(other.isSetLastPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastPrice, other.lastPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreSettlementPrice()).compareTo(other.isSetPreSettlementPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreSettlementPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preSettlementPrice, other.preSettlementPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreClosePrice()).compareTo(other.isSetPreClosePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreClosePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preClosePrice, other.preClosePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreOpenInterest()).compareTo(other.isSetPreOpenInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreOpenInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preOpenInterest, other.preOpenInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenPrice()).compareTo(other.isSetOpenPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openPrice, other.openPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHighestPrice()).compareTo(other.isSetHighestPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHighestPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.highestPrice, other.highestPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLowestPrice()).compareTo(other.isSetLowestPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLowestPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lowestPrice, other.lowestPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolume()).compareTo(other.isSetVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volume, other.volume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTurnover()).compareTo(other.isSetTurnover());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTurnover()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turnover, other.turnover);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenInterest()).compareTo(other.isSetOpenInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openInterest, other.openInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClosePrice()).compareTo(other.isSetClosePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClosePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closePrice, other.closePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettlementPrice()).compareTo(other.isSetSettlementPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettlementPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settlementPrice, other.settlementPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpperLimitPrice()).compareTo(other.isSetUpperLimitPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpperLimitPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upperLimitPrice, other.upperLimitPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLowerLimitPrice()).compareTo(other.isSetLowerLimitPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLowerLimitPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lowerLimitPrice, other.lowerLimitPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreDelta()).compareTo(other.isSetPreDelta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreDelta()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preDelta, other.preDelta);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrDelta()).compareTo(other.isSetCurrDelta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrDelta()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currDelta, other.currDelta);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateMillisec()).compareTo(other.isSetUpdateMillisec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateMillisec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateMillisec, other.updateMillisec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionDay()).compareTo(other.isSetActionDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionDay, other.actionDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcMarketDataField(");
    boolean first = true;

    sb.append("tradingDay:");
    if (this.tradingDay == null) {
      sb.append("null");
    } else {
      sb.append(this.tradingDay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("instrumentID:");
    if (this.instrumentID == null) {
      sb.append("null");
    } else {
      sb.append(this.instrumentID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchangeID:");
    if (this.exchangeID == null) {
      sb.append("null");
    } else {
      sb.append(this.exchangeID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchangeInstID:");
    if (this.exchangeInstID == null) {
      sb.append("null");
    } else {
      sb.append(this.exchangeInstID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastPrice:");
    sb.append(this.lastPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("preSettlementPrice:");
    sb.append(this.preSettlementPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("preClosePrice:");
    sb.append(this.preClosePrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("preOpenInterest:");
    sb.append(this.preOpenInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("openPrice:");
    sb.append(this.openPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("highestPrice:");
    sb.append(this.highestPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lowestPrice:");
    sb.append(this.lowestPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("volume:");
    sb.append(this.volume);
    first = false;
    if (!first) sb.append(", ");
    sb.append("turnover:");
    sb.append(this.turnover);
    first = false;
    if (!first) sb.append(", ");
    sb.append("openInterest:");
    sb.append(this.openInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("closePrice:");
    sb.append(this.closePrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("settlementPrice:");
    sb.append(this.settlementPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("upperLimitPrice:");
    sb.append(this.upperLimitPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lowerLimitPrice:");
    sb.append(this.lowerLimitPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("preDelta:");
    sb.append(this.preDelta);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currDelta:");
    sb.append(this.currDelta);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    if (this.updateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.updateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateMillisec:");
    sb.append(this.updateMillisec);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actionDay:");
    if (this.actionDay == null) {
      sb.append("null");
    } else {
      sb.append(this.actionDay);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcMarketDataFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcMarketDataFieldStandardScheme getScheme() {
      return new CThostFtdcMarketDataFieldStandardScheme();
    }
  }

  private static class CThostFtdcMarketDataFieldStandardScheme extends StandardScheme<CThostFtdcMarketDataField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcMarketDataField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRADING_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradingDay = iprot.readString();
              struct.setTradingDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INSTRUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instrumentID = iprot.readString();
              struct.setInstrumentIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXCHANGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeID = iprot.readString();
              struct.setExchangeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXCHANGE_INST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeInstID = iprot.readString();
              struct.setExchangeInstIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LAST_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lastPrice = iprot.readDouble();
              struct.setLastPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRE_SETTLEMENT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.preSettlementPrice = iprot.readDouble();
              struct.setPreSettlementPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PRE_CLOSE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.preClosePrice = iprot.readDouble();
              struct.setPreClosePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PRE_OPEN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.preOpenInterest = iprot.readDouble();
              struct.setPreOpenInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OPEN_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.openPrice = iprot.readDouble();
              struct.setOpenPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // HIGHEST_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.highestPrice = iprot.readDouble();
              struct.setHighestPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LOWEST_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lowestPrice = iprot.readDouble();
              struct.setLowestPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.volume = iprot.readI32();
              struct.setVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TURNOVER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.turnover = iprot.readDouble();
              struct.setTurnoverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // OPEN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.openInterest = iprot.readDouble();
              struct.setOpenInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CLOSE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.closePrice = iprot.readDouble();
              struct.setClosePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SETTLEMENT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.settlementPrice = iprot.readDouble();
              struct.setSettlementPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // UPPER_LIMIT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.upperLimitPrice = iprot.readDouble();
              struct.setUpperLimitPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // LOWER_LIMIT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lowerLimitPrice = iprot.readDouble();
              struct.setLowerLimitPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PRE_DELTA
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.preDelta = iprot.readDouble();
              struct.setPreDeltaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CURR_DELTA
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.currDelta = iprot.readDouble();
              struct.setCurrDeltaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // UPDATE_MILLISEC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateMillisec = iprot.readI32();
              struct.setUpdateMillisecIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // ACTION_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actionDay = iprot.readString();
              struct.setActionDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcMarketDataField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tradingDay != null) {
        oprot.writeFieldBegin(TRADING_DAY_FIELD_DESC);
        oprot.writeString(struct.tradingDay);
        oprot.writeFieldEnd();
      }
      if (struct.instrumentID != null) {
        oprot.writeFieldBegin(INSTRUMENT_ID_FIELD_DESC);
        oprot.writeString(struct.instrumentID);
        oprot.writeFieldEnd();
      }
      if (struct.exchangeID != null) {
        oprot.writeFieldBegin(EXCHANGE_ID_FIELD_DESC);
        oprot.writeString(struct.exchangeID);
        oprot.writeFieldEnd();
      }
      if (struct.exchangeInstID != null) {
        oprot.writeFieldBegin(EXCHANGE_INST_ID_FIELD_DESC);
        oprot.writeString(struct.exchangeInstID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LAST_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.lastPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRE_SETTLEMENT_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.preSettlementPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRE_CLOSE_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.preClosePrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRE_OPEN_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.preOpenInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPEN_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.openPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HIGHEST_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.highestPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOWEST_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.lowestPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VOLUME_FIELD_DESC);
      oprot.writeI32(struct.volume);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TURNOVER_FIELD_DESC);
      oprot.writeDouble(struct.turnover);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPEN_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.openInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CLOSE_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.closePrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SETTLEMENT_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.settlementPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPPER_LIMIT_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.upperLimitPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOWER_LIMIT_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.lowerLimitPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRE_DELTA_FIELD_DESC);
      oprot.writeDouble(struct.preDelta);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURR_DELTA_FIELD_DESC);
      oprot.writeDouble(struct.currDelta);
      oprot.writeFieldEnd();
      if (struct.updateTime != null) {
        oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.updateTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UPDATE_MILLISEC_FIELD_DESC);
      oprot.writeI32(struct.updateMillisec);
      oprot.writeFieldEnd();
      if (struct.actionDay != null) {
        oprot.writeFieldBegin(ACTION_DAY_FIELD_DESC);
        oprot.writeString(struct.actionDay);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcMarketDataFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcMarketDataFieldTupleScheme getScheme() {
      return new CThostFtdcMarketDataFieldTupleScheme();
    }
  }

  private static class CThostFtdcMarketDataFieldTupleScheme extends TupleScheme<CThostFtdcMarketDataField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcMarketDataField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTradingDay()) {
        optionals.set(0);
      }
      if (struct.isSetInstrumentID()) {
        optionals.set(1);
      }
      if (struct.isSetExchangeID()) {
        optionals.set(2);
      }
      if (struct.isSetExchangeInstID()) {
        optionals.set(3);
      }
      if (struct.isSetLastPrice()) {
        optionals.set(4);
      }
      if (struct.isSetPreSettlementPrice()) {
        optionals.set(5);
      }
      if (struct.isSetPreClosePrice()) {
        optionals.set(6);
      }
      if (struct.isSetPreOpenInterest()) {
        optionals.set(7);
      }
      if (struct.isSetOpenPrice()) {
        optionals.set(8);
      }
      if (struct.isSetHighestPrice()) {
        optionals.set(9);
      }
      if (struct.isSetLowestPrice()) {
        optionals.set(10);
      }
      if (struct.isSetVolume()) {
        optionals.set(11);
      }
      if (struct.isSetTurnover()) {
        optionals.set(12);
      }
      if (struct.isSetOpenInterest()) {
        optionals.set(13);
      }
      if (struct.isSetClosePrice()) {
        optionals.set(14);
      }
      if (struct.isSetSettlementPrice()) {
        optionals.set(15);
      }
      if (struct.isSetUpperLimitPrice()) {
        optionals.set(16);
      }
      if (struct.isSetLowerLimitPrice()) {
        optionals.set(17);
      }
      if (struct.isSetPreDelta()) {
        optionals.set(18);
      }
      if (struct.isSetCurrDelta()) {
        optionals.set(19);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(20);
      }
      if (struct.isSetUpdateMillisec()) {
        optionals.set(21);
      }
      if (struct.isSetActionDay()) {
        optionals.set(22);
      }
      oprot.writeBitSet(optionals, 23);
      if (struct.isSetTradingDay()) {
        oprot.writeString(struct.tradingDay);
      }
      if (struct.isSetInstrumentID()) {
        oprot.writeString(struct.instrumentID);
      }
      if (struct.isSetExchangeID()) {
        oprot.writeString(struct.exchangeID);
      }
      if (struct.isSetExchangeInstID()) {
        oprot.writeString(struct.exchangeInstID);
      }
      if (struct.isSetLastPrice()) {
        oprot.writeDouble(struct.lastPrice);
      }
      if (struct.isSetPreSettlementPrice()) {
        oprot.writeDouble(struct.preSettlementPrice);
      }
      if (struct.isSetPreClosePrice()) {
        oprot.writeDouble(struct.preClosePrice);
      }
      if (struct.isSetPreOpenInterest()) {
        oprot.writeDouble(struct.preOpenInterest);
      }
      if (struct.isSetOpenPrice()) {
        oprot.writeDouble(struct.openPrice);
      }
      if (struct.isSetHighestPrice()) {
        oprot.writeDouble(struct.highestPrice);
      }
      if (struct.isSetLowestPrice()) {
        oprot.writeDouble(struct.lowestPrice);
      }
      if (struct.isSetVolume()) {
        oprot.writeI32(struct.volume);
      }
      if (struct.isSetTurnover()) {
        oprot.writeDouble(struct.turnover);
      }
      if (struct.isSetOpenInterest()) {
        oprot.writeDouble(struct.openInterest);
      }
      if (struct.isSetClosePrice()) {
        oprot.writeDouble(struct.closePrice);
      }
      if (struct.isSetSettlementPrice()) {
        oprot.writeDouble(struct.settlementPrice);
      }
      if (struct.isSetUpperLimitPrice()) {
        oprot.writeDouble(struct.upperLimitPrice);
      }
      if (struct.isSetLowerLimitPrice()) {
        oprot.writeDouble(struct.lowerLimitPrice);
      }
      if (struct.isSetPreDelta()) {
        oprot.writeDouble(struct.preDelta);
      }
      if (struct.isSetCurrDelta()) {
        oprot.writeDouble(struct.currDelta);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
      if (struct.isSetUpdateMillisec()) {
        oprot.writeI32(struct.updateMillisec);
      }
      if (struct.isSetActionDay()) {
        oprot.writeString(struct.actionDay);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcMarketDataField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(23);
      if (incoming.get(0)) {
        struct.tradingDay = iprot.readString();
        struct.setTradingDayIsSet(true);
      }
      if (incoming.get(1)) {
        struct.instrumentID = iprot.readString();
        struct.setInstrumentIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.exchangeID = iprot.readString();
        struct.setExchangeIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.exchangeInstID = iprot.readString();
        struct.setExchangeInstIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lastPrice = iprot.readDouble();
        struct.setLastPriceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.preSettlementPrice = iprot.readDouble();
        struct.setPreSettlementPriceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.preClosePrice = iprot.readDouble();
        struct.setPreClosePriceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.preOpenInterest = iprot.readDouble();
        struct.setPreOpenInterestIsSet(true);
      }
      if (incoming.get(8)) {
        struct.openPrice = iprot.readDouble();
        struct.setOpenPriceIsSet(true);
      }
      if (incoming.get(9)) {
        struct.highestPrice = iprot.readDouble();
        struct.setHighestPriceIsSet(true);
      }
      if (incoming.get(10)) {
        struct.lowestPrice = iprot.readDouble();
        struct.setLowestPriceIsSet(true);
      }
      if (incoming.get(11)) {
        struct.volume = iprot.readI32();
        struct.setVolumeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.turnover = iprot.readDouble();
        struct.setTurnoverIsSet(true);
      }
      if (incoming.get(13)) {
        struct.openInterest = iprot.readDouble();
        struct.setOpenInterestIsSet(true);
      }
      if (incoming.get(14)) {
        struct.closePrice = iprot.readDouble();
        struct.setClosePriceIsSet(true);
      }
      if (incoming.get(15)) {
        struct.settlementPrice = iprot.readDouble();
        struct.setSettlementPriceIsSet(true);
      }
      if (incoming.get(16)) {
        struct.upperLimitPrice = iprot.readDouble();
        struct.setUpperLimitPriceIsSet(true);
      }
      if (incoming.get(17)) {
        struct.lowerLimitPrice = iprot.readDouble();
        struct.setLowerLimitPriceIsSet(true);
      }
      if (incoming.get(18)) {
        struct.preDelta = iprot.readDouble();
        struct.setPreDeltaIsSet(true);
      }
      if (incoming.get(19)) {
        struct.currDelta = iprot.readDouble();
        struct.setCurrDeltaIsSet(true);
      }
      if (incoming.get(20)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.updateMillisec = iprot.readI32();
        struct.setUpdateMillisecIsSet(true);
      }
      if (incoming.get(22)) {
        struct.actionDay = iprot.readString();
        struct.setActionDayIsSet(true);
      }
    }
  }

}

