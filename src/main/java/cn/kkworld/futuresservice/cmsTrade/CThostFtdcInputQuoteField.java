/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcInputQuoteField implements org.apache.thrift.TBase<CThostFtdcInputQuoteField, CThostFtdcInputQuoteField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcInputQuoteField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcInputQuoteField");

  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INVESTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("investorID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INSTRUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instrumentID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField QUOTE_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("quoteRef", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ASK_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("askPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField BID_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("bidPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField ASK_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("askVolume", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField BID_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("bidVolume", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestID", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField BUSINESS_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("businessUnit", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ASK_OFFSET_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("askOffsetFlag", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField BID_OFFSET_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("bidOffsetFlag", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField ASK_HEDGE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("askHedgeFlag", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField BID_HEDGE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("bidHedgeFlag", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField ASK_ORDER_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("askOrderRef", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField BID_ORDER_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("bidOrderRef", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcInputQuoteFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcInputQuoteFieldTupleSchemeFactory());
  }

  public String brokerID; // required
  public String investorID; // required
  public String instrumentID; // required
  public String quoteRef; // required
  public String userID; // required
  public double askPrice; // required
  public double bidPrice; // required
  public int askVolume; // required
  public int bidVolume; // required
  public int requestID; // required
  public String businessUnit; // required
  public String askOffsetFlag; // required
  public String bidOffsetFlag; // required
  public String askHedgeFlag; // required
  public String bidHedgeFlag; // required
  public String askOrderRef; // required
  public String bidOrderRef; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BROKER_ID((short)1, "brokerID"),
    INVESTOR_ID((short)2, "investorID"),
    INSTRUMENT_ID((short)3, "instrumentID"),
    QUOTE_REF((short)4, "quoteRef"),
    USER_ID((short)5, "userID"),
    ASK_PRICE((short)6, "askPrice"),
    BID_PRICE((short)7, "bidPrice"),
    ASK_VOLUME((short)8, "askVolume"),
    BID_VOLUME((short)9, "bidVolume"),
    REQUEST_ID((short)10, "requestID"),
    BUSINESS_UNIT((short)11, "businessUnit"),
    ASK_OFFSET_FLAG((short)12, "askOffsetFlag"),
    BID_OFFSET_FLAG((short)13, "bidOffsetFlag"),
    ASK_HEDGE_FLAG((short)14, "askHedgeFlag"),
    BID_HEDGE_FLAG((short)15, "bidHedgeFlag"),
    ASK_ORDER_REF((short)16, "askOrderRef"),
    BID_ORDER_REF((short)17, "bidOrderRef");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BROKER_ID
          return BROKER_ID;
        case 2: // INVESTOR_ID
          return INVESTOR_ID;
        case 3: // INSTRUMENT_ID
          return INSTRUMENT_ID;
        case 4: // QUOTE_REF
          return QUOTE_REF;
        case 5: // USER_ID
          return USER_ID;
        case 6: // ASK_PRICE
          return ASK_PRICE;
        case 7: // BID_PRICE
          return BID_PRICE;
        case 8: // ASK_VOLUME
          return ASK_VOLUME;
        case 9: // BID_VOLUME
          return BID_VOLUME;
        case 10: // REQUEST_ID
          return REQUEST_ID;
        case 11: // BUSINESS_UNIT
          return BUSINESS_UNIT;
        case 12: // ASK_OFFSET_FLAG
          return ASK_OFFSET_FLAG;
        case 13: // BID_OFFSET_FLAG
          return BID_OFFSET_FLAG;
        case 14: // ASK_HEDGE_FLAG
          return ASK_HEDGE_FLAG;
        case 15: // BID_HEDGE_FLAG
          return BID_HEDGE_FLAG;
        case 16: // ASK_ORDER_REF
          return ASK_ORDER_REF;
        case 17: // BID_ORDER_REF
          return BID_ORDER_REF;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ASKPRICE_ISSET_ID = 0;
  private static final int __BIDPRICE_ISSET_ID = 1;
  private static final int __ASKVOLUME_ISSET_ID = 2;
  private static final int __BIDVOLUME_ISSET_ID = 3;
  private static final int __REQUESTID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.INVESTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("investorID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInvestorIDType")));
    tmpMap.put(_Fields.INSTRUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("instrumentID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInstrumentIDType")));
    tmpMap.put(_Fields.QUOTE_REF, new org.apache.thrift.meta_data.FieldMetaData("quoteRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderRefType")));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcUserIDType")));
    tmpMap.put(_Fields.ASK_PRICE, new org.apache.thrift.meta_data.FieldMetaData("askPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.BID_PRICE, new org.apache.thrift.meta_data.FieldMetaData("bidPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.ASK_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("askVolume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcVolumeType")));
    tmpMap.put(_Fields.BID_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("bidVolume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcVolumeType")));
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcRequestIDType")));
    tmpMap.put(_Fields.BUSINESS_UNIT, new org.apache.thrift.meta_data.FieldMetaData("businessUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBusinessUnitType")));
    tmpMap.put(_Fields.ASK_OFFSET_FLAG, new org.apache.thrift.meta_data.FieldMetaData("askOffsetFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOffsetFlagType")));
    tmpMap.put(_Fields.BID_OFFSET_FLAG, new org.apache.thrift.meta_data.FieldMetaData("bidOffsetFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOffsetFlagType")));
    tmpMap.put(_Fields.ASK_HEDGE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("askHedgeFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcHedgeFlagType")));
    tmpMap.put(_Fields.BID_HEDGE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("bidHedgeFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcHedgeFlagType")));
    tmpMap.put(_Fields.ASK_ORDER_REF, new org.apache.thrift.meta_data.FieldMetaData("askOrderRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderRefType")));
    tmpMap.put(_Fields.BID_ORDER_REF, new org.apache.thrift.meta_data.FieldMetaData("bidOrderRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderRefType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcInputQuoteField.class, metaDataMap);
  }

  public CThostFtdcInputQuoteField() {
  }

  public CThostFtdcInputQuoteField(
    String brokerID,
    String investorID,
    String instrumentID,
    String quoteRef,
    String userID,
    double askPrice,
    double bidPrice,
    int askVolume,
    int bidVolume,
    int requestID,
    String businessUnit,
    String askOffsetFlag,
    String bidOffsetFlag,
    String askHedgeFlag,
    String bidHedgeFlag,
    String askOrderRef,
    String bidOrderRef)
  {
    this();
    this.brokerID = brokerID;
    this.investorID = investorID;
    this.instrumentID = instrumentID;
    this.quoteRef = quoteRef;
    this.userID = userID;
    this.askPrice = askPrice;
    setAskPriceIsSet(true);
    this.bidPrice = bidPrice;
    setBidPriceIsSet(true);
    this.askVolume = askVolume;
    setAskVolumeIsSet(true);
    this.bidVolume = bidVolume;
    setBidVolumeIsSet(true);
    this.requestID = requestID;
    setRequestIDIsSet(true);
    this.businessUnit = businessUnit;
    this.askOffsetFlag = askOffsetFlag;
    this.bidOffsetFlag = bidOffsetFlag;
    this.askHedgeFlag = askHedgeFlag;
    this.bidHedgeFlag = bidHedgeFlag;
    this.askOrderRef = askOrderRef;
    this.bidOrderRef = bidOrderRef;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcInputQuoteField(CThostFtdcInputQuoteField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetInvestorID()) {
      this.investorID = other.investorID;
    }
    if (other.isSetInstrumentID()) {
      this.instrumentID = other.instrumentID;
    }
    if (other.isSetQuoteRef()) {
      this.quoteRef = other.quoteRef;
    }
    if (other.isSetUserID()) {
      this.userID = other.userID;
    }
    this.askPrice = other.askPrice;
    this.bidPrice = other.bidPrice;
    this.askVolume = other.askVolume;
    this.bidVolume = other.bidVolume;
    this.requestID = other.requestID;
    if (other.isSetBusinessUnit()) {
      this.businessUnit = other.businessUnit;
    }
    if (other.isSetAskOffsetFlag()) {
      this.askOffsetFlag = other.askOffsetFlag;
    }
    if (other.isSetBidOffsetFlag()) {
      this.bidOffsetFlag = other.bidOffsetFlag;
    }
    if (other.isSetAskHedgeFlag()) {
      this.askHedgeFlag = other.askHedgeFlag;
    }
    if (other.isSetBidHedgeFlag()) {
      this.bidHedgeFlag = other.bidHedgeFlag;
    }
    if (other.isSetAskOrderRef()) {
      this.askOrderRef = other.askOrderRef;
    }
    if (other.isSetBidOrderRef()) {
      this.bidOrderRef = other.bidOrderRef;
    }
  }

  public CThostFtdcInputQuoteField deepCopy() {
    return new CThostFtdcInputQuoteField(this);
  }

  @Override
  public void clear() {
    this.brokerID = null;
    this.investorID = null;
    this.instrumentID = null;
    this.quoteRef = null;
    this.userID = null;
    setAskPriceIsSet(false);
    this.askPrice = 0.0;
    setBidPriceIsSet(false);
    this.bidPrice = 0.0;
    setAskVolumeIsSet(false);
    this.askVolume = 0;
    setBidVolumeIsSet(false);
    this.bidVolume = 0;
    setRequestIDIsSet(false);
    this.requestID = 0;
    this.businessUnit = null;
    this.askOffsetFlag = null;
    this.bidOffsetFlag = null;
    this.askHedgeFlag = null;
    this.bidHedgeFlag = null;
    this.askOrderRef = null;
    this.bidOrderRef = null;
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcInputQuoteField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getInvestorID() {
    return this.investorID;
  }

  public CThostFtdcInputQuoteField setInvestorID(String investorID) {
    this.investorID = investorID;
    return this;
  }

  public void unsetInvestorID() {
    this.investorID = null;
  }

  /** Returns true if field investorID is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorID() {
    return this.investorID != null;
  }

  public void setInvestorIDIsSet(boolean value) {
    if (!value) {
      this.investorID = null;
    }
  }

  public String getInstrumentID() {
    return this.instrumentID;
  }

  public CThostFtdcInputQuoteField setInstrumentID(String instrumentID) {
    this.instrumentID = instrumentID;
    return this;
  }

  public void unsetInstrumentID() {
    this.instrumentID = null;
  }

  /** Returns true if field instrumentID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstrumentID() {
    return this.instrumentID != null;
  }

  public void setInstrumentIDIsSet(boolean value) {
    if (!value) {
      this.instrumentID = null;
    }
  }

  public String getQuoteRef() {
    return this.quoteRef;
  }

  public CThostFtdcInputQuoteField setQuoteRef(String quoteRef) {
    this.quoteRef = quoteRef;
    return this;
  }

  public void unsetQuoteRef() {
    this.quoteRef = null;
  }

  /** Returns true if field quoteRef is set (has been assigned a value) and false otherwise */
  public boolean isSetQuoteRef() {
    return this.quoteRef != null;
  }

  public void setQuoteRefIsSet(boolean value) {
    if (!value) {
      this.quoteRef = null;
    }
  }

  public String getUserID() {
    return this.userID;
  }

  public CThostFtdcInputQuoteField setUserID(String userID) {
    this.userID = userID;
    return this;
  }

  public void unsetUserID() {
    this.userID = null;
  }

  /** Returns true if field userID is set (has been assigned a value) and false otherwise */
  public boolean isSetUserID() {
    return this.userID != null;
  }

  public void setUserIDIsSet(boolean value) {
    if (!value) {
      this.userID = null;
    }
  }

  public double getAskPrice() {
    return this.askPrice;
  }

  public CThostFtdcInputQuoteField setAskPrice(double askPrice) {
    this.askPrice = askPrice;
    setAskPriceIsSet(true);
    return this;
  }

  public void unsetAskPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASKPRICE_ISSET_ID);
  }

  /** Returns true if field askPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetAskPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __ASKPRICE_ISSET_ID);
  }

  public void setAskPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASKPRICE_ISSET_ID, value);
  }

  public double getBidPrice() {
    return this.bidPrice;
  }

  public CThostFtdcInputQuoteField setBidPrice(double bidPrice) {
    this.bidPrice = bidPrice;
    setBidPriceIsSet(true);
    return this;
  }

  public void unsetBidPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIDPRICE_ISSET_ID);
  }

  /** Returns true if field bidPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetBidPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __BIDPRICE_ISSET_ID);
  }

  public void setBidPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIDPRICE_ISSET_ID, value);
  }

  public int getAskVolume() {
    return this.askVolume;
  }

  public CThostFtdcInputQuoteField setAskVolume(int askVolume) {
    this.askVolume = askVolume;
    setAskVolumeIsSet(true);
    return this;
  }

  public void unsetAskVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASKVOLUME_ISSET_ID);
  }

  /** Returns true if field askVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetAskVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __ASKVOLUME_ISSET_ID);
  }

  public void setAskVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASKVOLUME_ISSET_ID, value);
  }

  public int getBidVolume() {
    return this.bidVolume;
  }

  public CThostFtdcInputQuoteField setBidVolume(int bidVolume) {
    this.bidVolume = bidVolume;
    setBidVolumeIsSet(true);
    return this;
  }

  public void unsetBidVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIDVOLUME_ISSET_ID);
  }

  /** Returns true if field bidVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetBidVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __BIDVOLUME_ISSET_ID);
  }

  public void setBidVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIDVOLUME_ISSET_ID, value);
  }

  public int getRequestID() {
    return this.requestID;
  }

  public CThostFtdcInputQuoteField setRequestID(int requestID) {
    this.requestID = requestID;
    setRequestIDIsSet(true);
    return this;
  }

  public void unsetRequestID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  /** Returns true if field requestID is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestID() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  public void setRequestIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
  }

  public String getBusinessUnit() {
    return this.businessUnit;
  }

  public CThostFtdcInputQuoteField setBusinessUnit(String businessUnit) {
    this.businessUnit = businessUnit;
    return this;
  }

  public void unsetBusinessUnit() {
    this.businessUnit = null;
  }

  /** Returns true if field businessUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessUnit() {
    return this.businessUnit != null;
  }

  public void setBusinessUnitIsSet(boolean value) {
    if (!value) {
      this.businessUnit = null;
    }
  }

  public String getAskOffsetFlag() {
    return this.askOffsetFlag;
  }

  public CThostFtdcInputQuoteField setAskOffsetFlag(String askOffsetFlag) {
    this.askOffsetFlag = askOffsetFlag;
    return this;
  }

  public void unsetAskOffsetFlag() {
    this.askOffsetFlag = null;
  }

  /** Returns true if field askOffsetFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetAskOffsetFlag() {
    return this.askOffsetFlag != null;
  }

  public void setAskOffsetFlagIsSet(boolean value) {
    if (!value) {
      this.askOffsetFlag = null;
    }
  }

  public String getBidOffsetFlag() {
    return this.bidOffsetFlag;
  }

  public CThostFtdcInputQuoteField setBidOffsetFlag(String bidOffsetFlag) {
    this.bidOffsetFlag = bidOffsetFlag;
    return this;
  }

  public void unsetBidOffsetFlag() {
    this.bidOffsetFlag = null;
  }

  /** Returns true if field bidOffsetFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetBidOffsetFlag() {
    return this.bidOffsetFlag != null;
  }

  public void setBidOffsetFlagIsSet(boolean value) {
    if (!value) {
      this.bidOffsetFlag = null;
    }
  }

  public String getAskHedgeFlag() {
    return this.askHedgeFlag;
  }

  public CThostFtdcInputQuoteField setAskHedgeFlag(String askHedgeFlag) {
    this.askHedgeFlag = askHedgeFlag;
    return this;
  }

  public void unsetAskHedgeFlag() {
    this.askHedgeFlag = null;
  }

  /** Returns true if field askHedgeFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetAskHedgeFlag() {
    return this.askHedgeFlag != null;
  }

  public void setAskHedgeFlagIsSet(boolean value) {
    if (!value) {
      this.askHedgeFlag = null;
    }
  }

  public String getBidHedgeFlag() {
    return this.bidHedgeFlag;
  }

  public CThostFtdcInputQuoteField setBidHedgeFlag(String bidHedgeFlag) {
    this.bidHedgeFlag = bidHedgeFlag;
    return this;
  }

  public void unsetBidHedgeFlag() {
    this.bidHedgeFlag = null;
  }

  /** Returns true if field bidHedgeFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetBidHedgeFlag() {
    return this.bidHedgeFlag != null;
  }

  public void setBidHedgeFlagIsSet(boolean value) {
    if (!value) {
      this.bidHedgeFlag = null;
    }
  }

  public String getAskOrderRef() {
    return this.askOrderRef;
  }

  public CThostFtdcInputQuoteField setAskOrderRef(String askOrderRef) {
    this.askOrderRef = askOrderRef;
    return this;
  }

  public void unsetAskOrderRef() {
    this.askOrderRef = null;
  }

  /** Returns true if field askOrderRef is set (has been assigned a value) and false otherwise */
  public boolean isSetAskOrderRef() {
    return this.askOrderRef != null;
  }

  public void setAskOrderRefIsSet(boolean value) {
    if (!value) {
      this.askOrderRef = null;
    }
  }

  public String getBidOrderRef() {
    return this.bidOrderRef;
  }

  public CThostFtdcInputQuoteField setBidOrderRef(String bidOrderRef) {
    this.bidOrderRef = bidOrderRef;
    return this;
  }

  public void unsetBidOrderRef() {
    this.bidOrderRef = null;
  }

  /** Returns true if field bidOrderRef is set (has been assigned a value) and false otherwise */
  public boolean isSetBidOrderRef() {
    return this.bidOrderRef != null;
  }

  public void setBidOrderRefIsSet(boolean value) {
    if (!value) {
      this.bidOrderRef = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case INVESTOR_ID:
      if (value == null) {
        unsetInvestorID();
      } else {
        setInvestorID((String)value);
      }
      break;

    case INSTRUMENT_ID:
      if (value == null) {
        unsetInstrumentID();
      } else {
        setInstrumentID((String)value);
      }
      break;

    case QUOTE_REF:
      if (value == null) {
        unsetQuoteRef();
      } else {
        setQuoteRef((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserID();
      } else {
        setUserID((String)value);
      }
      break;

    case ASK_PRICE:
      if (value == null) {
        unsetAskPrice();
      } else {
        setAskPrice((Double)value);
      }
      break;

    case BID_PRICE:
      if (value == null) {
        unsetBidPrice();
      } else {
        setBidPrice((Double)value);
      }
      break;

    case ASK_VOLUME:
      if (value == null) {
        unsetAskVolume();
      } else {
        setAskVolume((Integer)value);
      }
      break;

    case BID_VOLUME:
      if (value == null) {
        unsetBidVolume();
      } else {
        setBidVolume((Integer)value);
      }
      break;

    case REQUEST_ID:
      if (value == null) {
        unsetRequestID();
      } else {
        setRequestID((Integer)value);
      }
      break;

    case BUSINESS_UNIT:
      if (value == null) {
        unsetBusinessUnit();
      } else {
        setBusinessUnit((String)value);
      }
      break;

    case ASK_OFFSET_FLAG:
      if (value == null) {
        unsetAskOffsetFlag();
      } else {
        setAskOffsetFlag((String)value);
      }
      break;

    case BID_OFFSET_FLAG:
      if (value == null) {
        unsetBidOffsetFlag();
      } else {
        setBidOffsetFlag((String)value);
      }
      break;

    case ASK_HEDGE_FLAG:
      if (value == null) {
        unsetAskHedgeFlag();
      } else {
        setAskHedgeFlag((String)value);
      }
      break;

    case BID_HEDGE_FLAG:
      if (value == null) {
        unsetBidHedgeFlag();
      } else {
        setBidHedgeFlag((String)value);
      }
      break;

    case ASK_ORDER_REF:
      if (value == null) {
        unsetAskOrderRef();
      } else {
        setAskOrderRef((String)value);
      }
      break;

    case BID_ORDER_REF:
      if (value == null) {
        unsetBidOrderRef();
      } else {
        setBidOrderRef((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BROKER_ID:
      return getBrokerID();

    case INVESTOR_ID:
      return getInvestorID();

    case INSTRUMENT_ID:
      return getInstrumentID();

    case QUOTE_REF:
      return getQuoteRef();

    case USER_ID:
      return getUserID();

    case ASK_PRICE:
      return Double.valueOf(getAskPrice());

    case BID_PRICE:
      return Double.valueOf(getBidPrice());

    case ASK_VOLUME:
      return Integer.valueOf(getAskVolume());

    case BID_VOLUME:
      return Integer.valueOf(getBidVolume());

    case REQUEST_ID:
      return Integer.valueOf(getRequestID());

    case BUSINESS_UNIT:
      return getBusinessUnit();

    case ASK_OFFSET_FLAG:
      return getAskOffsetFlag();

    case BID_OFFSET_FLAG:
      return getBidOffsetFlag();

    case ASK_HEDGE_FLAG:
      return getAskHedgeFlag();

    case BID_HEDGE_FLAG:
      return getBidHedgeFlag();

    case ASK_ORDER_REF:
      return getAskOrderRef();

    case BID_ORDER_REF:
      return getBidOrderRef();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BROKER_ID:
      return isSetBrokerID();
    case INVESTOR_ID:
      return isSetInvestorID();
    case INSTRUMENT_ID:
      return isSetInstrumentID();
    case QUOTE_REF:
      return isSetQuoteRef();
    case USER_ID:
      return isSetUserID();
    case ASK_PRICE:
      return isSetAskPrice();
    case BID_PRICE:
      return isSetBidPrice();
    case ASK_VOLUME:
      return isSetAskVolume();
    case BID_VOLUME:
      return isSetBidVolume();
    case REQUEST_ID:
      return isSetRequestID();
    case BUSINESS_UNIT:
      return isSetBusinessUnit();
    case ASK_OFFSET_FLAG:
      return isSetAskOffsetFlag();
    case BID_OFFSET_FLAG:
      return isSetBidOffsetFlag();
    case ASK_HEDGE_FLAG:
      return isSetAskHedgeFlag();
    case BID_HEDGE_FLAG:
      return isSetBidHedgeFlag();
    case ASK_ORDER_REF:
      return isSetAskOrderRef();
    case BID_ORDER_REF:
      return isSetBidOrderRef();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcInputQuoteField)
      return this.equals((CThostFtdcInputQuoteField)that);
    return false;
  }

  public boolean equals(CThostFtdcInputQuoteField that) {
    if (that == null)
      return false;

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_investorID = true && this.isSetInvestorID();
    boolean that_present_investorID = true && that.isSetInvestorID();
    if (this_present_investorID || that_present_investorID) {
      if (!(this_present_investorID && that_present_investorID))
        return false;
      if (!this.investorID.equals(that.investorID))
        return false;
    }

    boolean this_present_instrumentID = true && this.isSetInstrumentID();
    boolean that_present_instrumentID = true && that.isSetInstrumentID();
    if (this_present_instrumentID || that_present_instrumentID) {
      if (!(this_present_instrumentID && that_present_instrumentID))
        return false;
      if (!this.instrumentID.equals(that.instrumentID))
        return false;
    }

    boolean this_present_quoteRef = true && this.isSetQuoteRef();
    boolean that_present_quoteRef = true && that.isSetQuoteRef();
    if (this_present_quoteRef || that_present_quoteRef) {
      if (!(this_present_quoteRef && that_present_quoteRef))
        return false;
      if (!this.quoteRef.equals(that.quoteRef))
        return false;
    }

    boolean this_present_userID = true && this.isSetUserID();
    boolean that_present_userID = true && that.isSetUserID();
    if (this_present_userID || that_present_userID) {
      if (!(this_present_userID && that_present_userID))
        return false;
      if (!this.userID.equals(that.userID))
        return false;
    }

    boolean this_present_askPrice = true;
    boolean that_present_askPrice = true;
    if (this_present_askPrice || that_present_askPrice) {
      if (!(this_present_askPrice && that_present_askPrice))
        return false;
      if (this.askPrice != that.askPrice)
        return false;
    }

    boolean this_present_bidPrice = true;
    boolean that_present_bidPrice = true;
    if (this_present_bidPrice || that_present_bidPrice) {
      if (!(this_present_bidPrice && that_present_bidPrice))
        return false;
      if (this.bidPrice != that.bidPrice)
        return false;
    }

    boolean this_present_askVolume = true;
    boolean that_present_askVolume = true;
    if (this_present_askVolume || that_present_askVolume) {
      if (!(this_present_askVolume && that_present_askVolume))
        return false;
      if (this.askVolume != that.askVolume)
        return false;
    }

    boolean this_present_bidVolume = true;
    boolean that_present_bidVolume = true;
    if (this_present_bidVolume || that_present_bidVolume) {
      if (!(this_present_bidVolume && that_present_bidVolume))
        return false;
      if (this.bidVolume != that.bidVolume)
        return false;
    }

    boolean this_present_requestID = true;
    boolean that_present_requestID = true;
    if (this_present_requestID || that_present_requestID) {
      if (!(this_present_requestID && that_present_requestID))
        return false;
      if (this.requestID != that.requestID)
        return false;
    }

    boolean this_present_businessUnit = true && this.isSetBusinessUnit();
    boolean that_present_businessUnit = true && that.isSetBusinessUnit();
    if (this_present_businessUnit || that_present_businessUnit) {
      if (!(this_present_businessUnit && that_present_businessUnit))
        return false;
      if (!this.businessUnit.equals(that.businessUnit))
        return false;
    }

    boolean this_present_askOffsetFlag = true && this.isSetAskOffsetFlag();
    boolean that_present_askOffsetFlag = true && that.isSetAskOffsetFlag();
    if (this_present_askOffsetFlag || that_present_askOffsetFlag) {
      if (!(this_present_askOffsetFlag && that_present_askOffsetFlag))
        return false;
      if (!this.askOffsetFlag.equals(that.askOffsetFlag))
        return false;
    }

    boolean this_present_bidOffsetFlag = true && this.isSetBidOffsetFlag();
    boolean that_present_bidOffsetFlag = true && that.isSetBidOffsetFlag();
    if (this_present_bidOffsetFlag || that_present_bidOffsetFlag) {
      if (!(this_present_bidOffsetFlag && that_present_bidOffsetFlag))
        return false;
      if (!this.bidOffsetFlag.equals(that.bidOffsetFlag))
        return false;
    }

    boolean this_present_askHedgeFlag = true && this.isSetAskHedgeFlag();
    boolean that_present_askHedgeFlag = true && that.isSetAskHedgeFlag();
    if (this_present_askHedgeFlag || that_present_askHedgeFlag) {
      if (!(this_present_askHedgeFlag && that_present_askHedgeFlag))
        return false;
      if (!this.askHedgeFlag.equals(that.askHedgeFlag))
        return false;
    }

    boolean this_present_bidHedgeFlag = true && this.isSetBidHedgeFlag();
    boolean that_present_bidHedgeFlag = true && that.isSetBidHedgeFlag();
    if (this_present_bidHedgeFlag || that_present_bidHedgeFlag) {
      if (!(this_present_bidHedgeFlag && that_present_bidHedgeFlag))
        return false;
      if (!this.bidHedgeFlag.equals(that.bidHedgeFlag))
        return false;
    }

    boolean this_present_askOrderRef = true && this.isSetAskOrderRef();
    boolean that_present_askOrderRef = true && that.isSetAskOrderRef();
    if (this_present_askOrderRef || that_present_askOrderRef) {
      if (!(this_present_askOrderRef && that_present_askOrderRef))
        return false;
      if (!this.askOrderRef.equals(that.askOrderRef))
        return false;
    }

    boolean this_present_bidOrderRef = true && this.isSetBidOrderRef();
    boolean that_present_bidOrderRef = true && that.isSetBidOrderRef();
    if (this_present_bidOrderRef || that_present_bidOrderRef) {
      if (!(this_present_bidOrderRef && that_present_bidOrderRef))
        return false;
      if (!this.bidOrderRef.equals(that.bidOrderRef))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcInputQuoteField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestorID()).compareTo(other.isSetInvestorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorID, other.investorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstrumentID()).compareTo(other.isSetInstrumentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstrumentID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instrumentID, other.instrumentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuoteRef()).compareTo(other.isSetQuoteRef());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuoteRef()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quoteRef, other.quoteRef);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserID()).compareTo(other.isSetUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, other.userID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAskPrice()).compareTo(other.isSetAskPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAskPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.askPrice, other.askPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidPrice()).compareTo(other.isSetBidPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidPrice, other.bidPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAskVolume()).compareTo(other.isSetAskVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAskVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.askVolume, other.askVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidVolume()).compareTo(other.isSetBidVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidVolume, other.bidVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestID()).compareTo(other.isSetRequestID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestID, other.requestID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessUnit()).compareTo(other.isSetBusinessUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessUnit, other.businessUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAskOffsetFlag()).compareTo(other.isSetAskOffsetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAskOffsetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.askOffsetFlag, other.askOffsetFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidOffsetFlag()).compareTo(other.isSetBidOffsetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidOffsetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidOffsetFlag, other.bidOffsetFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAskHedgeFlag()).compareTo(other.isSetAskHedgeFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAskHedgeFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.askHedgeFlag, other.askHedgeFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidHedgeFlag()).compareTo(other.isSetBidHedgeFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidHedgeFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidHedgeFlag, other.bidHedgeFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAskOrderRef()).compareTo(other.isSetAskOrderRef());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAskOrderRef()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.askOrderRef, other.askOrderRef);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidOrderRef()).compareTo(other.isSetBidOrderRef());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidOrderRef()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidOrderRef, other.bidOrderRef);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcInputQuoteField(");
    boolean first = true;

    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("investorID:");
    if (this.investorID == null) {
      sb.append("null");
    } else {
      sb.append(this.investorID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("instrumentID:");
    if (this.instrumentID == null) {
      sb.append("null");
    } else {
      sb.append(this.instrumentID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("quoteRef:");
    if (this.quoteRef == null) {
      sb.append("null");
    } else {
      sb.append(this.quoteRef);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userID:");
    if (this.userID == null) {
      sb.append("null");
    } else {
      sb.append(this.userID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("askPrice:");
    sb.append(this.askPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bidPrice:");
    sb.append(this.bidPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("askVolume:");
    sb.append(this.askVolume);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bidVolume:");
    sb.append(this.bidVolume);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestID:");
    sb.append(this.requestID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessUnit:");
    if (this.businessUnit == null) {
      sb.append("null");
    } else {
      sb.append(this.businessUnit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("askOffsetFlag:");
    if (this.askOffsetFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.askOffsetFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bidOffsetFlag:");
    if (this.bidOffsetFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.bidOffsetFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("askHedgeFlag:");
    if (this.askHedgeFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.askHedgeFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bidHedgeFlag:");
    if (this.bidHedgeFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.bidHedgeFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("askOrderRef:");
    if (this.askOrderRef == null) {
      sb.append("null");
    } else {
      sb.append(this.askOrderRef);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bidOrderRef:");
    if (this.bidOrderRef == null) {
      sb.append("null");
    } else {
      sb.append(this.bidOrderRef);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcInputQuoteFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcInputQuoteFieldStandardScheme getScheme() {
      return new CThostFtdcInputQuoteFieldStandardScheme();
    }
  }

  private static class CThostFtdcInputQuoteFieldStandardScheme extends StandardScheme<CThostFtdcInputQuoteField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcInputQuoteField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INVESTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorID = iprot.readString();
              struct.setInvestorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INSTRUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instrumentID = iprot.readString();
              struct.setInstrumentIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QUOTE_REF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.quoteRef = iprot.readString();
              struct.setQuoteRefIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userID = iprot.readString();
              struct.setUserIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ASK_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.askPrice = iprot.readDouble();
              struct.setAskPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BID_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bidPrice = iprot.readDouble();
              struct.setBidPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ASK_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.askVolume = iprot.readI32();
              struct.setAskVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BID_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bidVolume = iprot.readI32();
              struct.setBidVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestID = iprot.readI32();
              struct.setRequestIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BUSINESS_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessUnit = iprot.readString();
              struct.setBusinessUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ASK_OFFSET_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.askOffsetFlag = iprot.readString();
              struct.setAskOffsetFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BID_OFFSET_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bidOffsetFlag = iprot.readString();
              struct.setBidOffsetFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ASK_HEDGE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.askHedgeFlag = iprot.readString();
              struct.setAskHedgeFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // BID_HEDGE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bidHedgeFlag = iprot.readString();
              struct.setBidHedgeFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ASK_ORDER_REF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.askOrderRef = iprot.readString();
              struct.setAskOrderRefIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // BID_ORDER_REF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bidOrderRef = iprot.readString();
              struct.setBidOrderRefIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcInputQuoteField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.investorID != null) {
        oprot.writeFieldBegin(INVESTOR_ID_FIELD_DESC);
        oprot.writeString(struct.investorID);
        oprot.writeFieldEnd();
      }
      if (struct.instrumentID != null) {
        oprot.writeFieldBegin(INSTRUMENT_ID_FIELD_DESC);
        oprot.writeString(struct.instrumentID);
        oprot.writeFieldEnd();
      }
      if (struct.quoteRef != null) {
        oprot.writeFieldBegin(QUOTE_REF_FIELD_DESC);
        oprot.writeString(struct.quoteRef);
        oprot.writeFieldEnd();
      }
      if (struct.userID != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ASK_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.askPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BID_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.bidPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ASK_VOLUME_FIELD_DESC);
      oprot.writeI32(struct.askVolume);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BID_VOLUME_FIELD_DESC);
      oprot.writeI32(struct.bidVolume);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
      oprot.writeI32(struct.requestID);
      oprot.writeFieldEnd();
      if (struct.businessUnit != null) {
        oprot.writeFieldBegin(BUSINESS_UNIT_FIELD_DESC);
        oprot.writeString(struct.businessUnit);
        oprot.writeFieldEnd();
      }
      if (struct.askOffsetFlag != null) {
        oprot.writeFieldBegin(ASK_OFFSET_FLAG_FIELD_DESC);
        oprot.writeString(struct.askOffsetFlag);
        oprot.writeFieldEnd();
      }
      if (struct.bidOffsetFlag != null) {
        oprot.writeFieldBegin(BID_OFFSET_FLAG_FIELD_DESC);
        oprot.writeString(struct.bidOffsetFlag);
        oprot.writeFieldEnd();
      }
      if (struct.askHedgeFlag != null) {
        oprot.writeFieldBegin(ASK_HEDGE_FLAG_FIELD_DESC);
        oprot.writeString(struct.askHedgeFlag);
        oprot.writeFieldEnd();
      }
      if (struct.bidHedgeFlag != null) {
        oprot.writeFieldBegin(BID_HEDGE_FLAG_FIELD_DESC);
        oprot.writeString(struct.bidHedgeFlag);
        oprot.writeFieldEnd();
      }
      if (struct.askOrderRef != null) {
        oprot.writeFieldBegin(ASK_ORDER_REF_FIELD_DESC);
        oprot.writeString(struct.askOrderRef);
        oprot.writeFieldEnd();
      }
      if (struct.bidOrderRef != null) {
        oprot.writeFieldBegin(BID_ORDER_REF_FIELD_DESC);
        oprot.writeString(struct.bidOrderRef);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcInputQuoteFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcInputQuoteFieldTupleScheme getScheme() {
      return new CThostFtdcInputQuoteFieldTupleScheme();
    }
  }

  private static class CThostFtdcInputQuoteFieldTupleScheme extends TupleScheme<CThostFtdcInputQuoteField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcInputQuoteField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBrokerID()) {
        optionals.set(0);
      }
      if (struct.isSetInvestorID()) {
        optionals.set(1);
      }
      if (struct.isSetInstrumentID()) {
        optionals.set(2);
      }
      if (struct.isSetQuoteRef()) {
        optionals.set(3);
      }
      if (struct.isSetUserID()) {
        optionals.set(4);
      }
      if (struct.isSetAskPrice()) {
        optionals.set(5);
      }
      if (struct.isSetBidPrice()) {
        optionals.set(6);
      }
      if (struct.isSetAskVolume()) {
        optionals.set(7);
      }
      if (struct.isSetBidVolume()) {
        optionals.set(8);
      }
      if (struct.isSetRequestID()) {
        optionals.set(9);
      }
      if (struct.isSetBusinessUnit()) {
        optionals.set(10);
      }
      if (struct.isSetAskOffsetFlag()) {
        optionals.set(11);
      }
      if (struct.isSetBidOffsetFlag()) {
        optionals.set(12);
      }
      if (struct.isSetAskHedgeFlag()) {
        optionals.set(13);
      }
      if (struct.isSetBidHedgeFlag()) {
        optionals.set(14);
      }
      if (struct.isSetAskOrderRef()) {
        optionals.set(15);
      }
      if (struct.isSetBidOrderRef()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetInvestorID()) {
        oprot.writeString(struct.investorID);
      }
      if (struct.isSetInstrumentID()) {
        oprot.writeString(struct.instrumentID);
      }
      if (struct.isSetQuoteRef()) {
        oprot.writeString(struct.quoteRef);
      }
      if (struct.isSetUserID()) {
        oprot.writeString(struct.userID);
      }
      if (struct.isSetAskPrice()) {
        oprot.writeDouble(struct.askPrice);
      }
      if (struct.isSetBidPrice()) {
        oprot.writeDouble(struct.bidPrice);
      }
      if (struct.isSetAskVolume()) {
        oprot.writeI32(struct.askVolume);
      }
      if (struct.isSetBidVolume()) {
        oprot.writeI32(struct.bidVolume);
      }
      if (struct.isSetRequestID()) {
        oprot.writeI32(struct.requestID);
      }
      if (struct.isSetBusinessUnit()) {
        oprot.writeString(struct.businessUnit);
      }
      if (struct.isSetAskOffsetFlag()) {
        oprot.writeString(struct.askOffsetFlag);
      }
      if (struct.isSetBidOffsetFlag()) {
        oprot.writeString(struct.bidOffsetFlag);
      }
      if (struct.isSetAskHedgeFlag()) {
        oprot.writeString(struct.askHedgeFlag);
      }
      if (struct.isSetBidHedgeFlag()) {
        oprot.writeString(struct.bidHedgeFlag);
      }
      if (struct.isSetAskOrderRef()) {
        oprot.writeString(struct.askOrderRef);
      }
      if (struct.isSetBidOrderRef()) {
        oprot.writeString(struct.bidOrderRef);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcInputQuoteField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.investorID = iprot.readString();
        struct.setInvestorIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.instrumentID = iprot.readString();
        struct.setInstrumentIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.quoteRef = iprot.readString();
        struct.setQuoteRefIsSet(true);
      }
      if (incoming.get(4)) {
        struct.userID = iprot.readString();
        struct.setUserIDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.askPrice = iprot.readDouble();
        struct.setAskPriceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.bidPrice = iprot.readDouble();
        struct.setBidPriceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.askVolume = iprot.readI32();
        struct.setAskVolumeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.bidVolume = iprot.readI32();
        struct.setBidVolumeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.requestID = iprot.readI32();
        struct.setRequestIDIsSet(true);
      }
      if (incoming.get(10)) {
        struct.businessUnit = iprot.readString();
        struct.setBusinessUnitIsSet(true);
      }
      if (incoming.get(11)) {
        struct.askOffsetFlag = iprot.readString();
        struct.setAskOffsetFlagIsSet(true);
      }
      if (incoming.get(12)) {
        struct.bidOffsetFlag = iprot.readString();
        struct.setBidOffsetFlagIsSet(true);
      }
      if (incoming.get(13)) {
        struct.askHedgeFlag = iprot.readString();
        struct.setAskHedgeFlagIsSet(true);
      }
      if (incoming.get(14)) {
        struct.bidHedgeFlag = iprot.readString();
        struct.setBidHedgeFlagIsSet(true);
      }
      if (incoming.get(15)) {
        struct.askOrderRef = iprot.readString();
        struct.setAskOrderRefIsSet(true);
      }
      if (incoming.get(16)) {
        struct.bidOrderRef = iprot.readString();
        struct.setBidOrderRefIsSet(true);
      }
    }
  }

}

