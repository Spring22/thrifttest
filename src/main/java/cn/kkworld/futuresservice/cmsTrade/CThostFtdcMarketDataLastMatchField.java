/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcMarketDataLastMatchField implements org.apache.thrift.TBase<CThostFtdcMarketDataLastMatchField, CThostFtdcMarketDataLastMatchField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcMarketDataLastMatchField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcMarketDataLastMatchField");

  private static final org.apache.thrift.protocol.TField LAST_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("volume", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TURNOVER_FIELD_DESC = new org.apache.thrift.protocol.TField("turnover", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField OPEN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("openInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcMarketDataLastMatchFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcMarketDataLastMatchFieldTupleSchemeFactory());
  }

  public double lastPrice; // required
  public int volume; // required
  public double turnover; // required
  public double openInterest; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LAST_PRICE((short)1, "lastPrice"),
    VOLUME((short)2, "volume"),
    TURNOVER((short)3, "turnover"),
    OPEN_INTEREST((short)4, "openInterest");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LAST_PRICE
          return LAST_PRICE;
        case 2: // VOLUME
          return VOLUME;
        case 3: // TURNOVER
          return TURNOVER;
        case 4: // OPEN_INTEREST
          return OPEN_INTEREST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LASTPRICE_ISSET_ID = 0;
  private static final int __VOLUME_ISSET_ID = 1;
  private static final int __TURNOVER_ISSET_ID = 2;
  private static final int __OPENINTEREST_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LAST_PRICE, new org.apache.thrift.meta_data.FieldMetaData("lastPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.VOLUME, new org.apache.thrift.meta_data.FieldMetaData("volume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcVolumeType")));
    tmpMap.put(_Fields.TURNOVER, new org.apache.thrift.meta_data.FieldMetaData("turnover", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.OPEN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("openInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcLargeVolumeType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcMarketDataLastMatchField.class, metaDataMap);
  }

  public CThostFtdcMarketDataLastMatchField() {
  }

  public CThostFtdcMarketDataLastMatchField(
    double lastPrice,
    int volume,
    double turnover,
    double openInterest)
  {
    this();
    this.lastPrice = lastPrice;
    setLastPriceIsSet(true);
    this.volume = volume;
    setVolumeIsSet(true);
    this.turnover = turnover;
    setTurnoverIsSet(true);
    this.openInterest = openInterest;
    setOpenInterestIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcMarketDataLastMatchField(CThostFtdcMarketDataLastMatchField other) {
    __isset_bitfield = other.__isset_bitfield;
    this.lastPrice = other.lastPrice;
    this.volume = other.volume;
    this.turnover = other.turnover;
    this.openInterest = other.openInterest;
  }

  public CThostFtdcMarketDataLastMatchField deepCopy() {
    return new CThostFtdcMarketDataLastMatchField(this);
  }

  @Override
  public void clear() {
    setLastPriceIsSet(false);
    this.lastPrice = 0.0;
    setVolumeIsSet(false);
    this.volume = 0;
    setTurnoverIsSet(false);
    this.turnover = 0.0;
    setOpenInterestIsSet(false);
    this.openInterest = 0.0;
  }

  public double getLastPrice() {
    return this.lastPrice;
  }

  public CThostFtdcMarketDataLastMatchField setLastPrice(double lastPrice) {
    this.lastPrice = lastPrice;
    setLastPriceIsSet(true);
    return this;
  }

  public void unsetLastPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTPRICE_ISSET_ID);
  }

  /** Returns true if field lastPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetLastPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTPRICE_ISSET_ID);
  }

  public void setLastPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTPRICE_ISSET_ID, value);
  }

  public int getVolume() {
    return this.volume;
  }

  public CThostFtdcMarketDataLastMatchField setVolume(int volume) {
    this.volume = volume;
    setVolumeIsSet(true);
    return this;
  }

  public void unsetVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLUME_ISSET_ID);
  }

  /** Returns true if field volume is set (has been assigned a value) and false otherwise */
  public boolean isSetVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __VOLUME_ISSET_ID);
  }

  public void setVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLUME_ISSET_ID, value);
  }

  public double getTurnover() {
    return this.turnover;
  }

  public CThostFtdcMarketDataLastMatchField setTurnover(double turnover) {
    this.turnover = turnover;
    setTurnoverIsSet(true);
    return this;
  }

  public void unsetTurnover() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TURNOVER_ISSET_ID);
  }

  /** Returns true if field turnover is set (has been assigned a value) and false otherwise */
  public boolean isSetTurnover() {
    return EncodingUtils.testBit(__isset_bitfield, __TURNOVER_ISSET_ID);
  }

  public void setTurnoverIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TURNOVER_ISSET_ID, value);
  }

  public double getOpenInterest() {
    return this.openInterest;
  }

  public CThostFtdcMarketDataLastMatchField setOpenInterest(double openInterest) {
    this.openInterest = openInterest;
    setOpenInterestIsSet(true);
    return this;
  }

  public void unsetOpenInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPENINTEREST_ISSET_ID);
  }

  /** Returns true if field openInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __OPENINTEREST_ISSET_ID);
  }

  public void setOpenInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPENINTEREST_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LAST_PRICE:
      if (value == null) {
        unsetLastPrice();
      } else {
        setLastPrice((Double)value);
      }
      break;

    case VOLUME:
      if (value == null) {
        unsetVolume();
      } else {
        setVolume((Integer)value);
      }
      break;

    case TURNOVER:
      if (value == null) {
        unsetTurnover();
      } else {
        setTurnover((Double)value);
      }
      break;

    case OPEN_INTEREST:
      if (value == null) {
        unsetOpenInterest();
      } else {
        setOpenInterest((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LAST_PRICE:
      return Double.valueOf(getLastPrice());

    case VOLUME:
      return Integer.valueOf(getVolume());

    case TURNOVER:
      return Double.valueOf(getTurnover());

    case OPEN_INTEREST:
      return Double.valueOf(getOpenInterest());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LAST_PRICE:
      return isSetLastPrice();
    case VOLUME:
      return isSetVolume();
    case TURNOVER:
      return isSetTurnover();
    case OPEN_INTEREST:
      return isSetOpenInterest();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcMarketDataLastMatchField)
      return this.equals((CThostFtdcMarketDataLastMatchField)that);
    return false;
  }

  public boolean equals(CThostFtdcMarketDataLastMatchField that) {
    if (that == null)
      return false;

    boolean this_present_lastPrice = true;
    boolean that_present_lastPrice = true;
    if (this_present_lastPrice || that_present_lastPrice) {
      if (!(this_present_lastPrice && that_present_lastPrice))
        return false;
      if (this.lastPrice != that.lastPrice)
        return false;
    }

    boolean this_present_volume = true;
    boolean that_present_volume = true;
    if (this_present_volume || that_present_volume) {
      if (!(this_present_volume && that_present_volume))
        return false;
      if (this.volume != that.volume)
        return false;
    }

    boolean this_present_turnover = true;
    boolean that_present_turnover = true;
    if (this_present_turnover || that_present_turnover) {
      if (!(this_present_turnover && that_present_turnover))
        return false;
      if (this.turnover != that.turnover)
        return false;
    }

    boolean this_present_openInterest = true;
    boolean that_present_openInterest = true;
    if (this_present_openInterest || that_present_openInterest) {
      if (!(this_present_openInterest && that_present_openInterest))
        return false;
      if (this.openInterest != that.openInterest)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcMarketDataLastMatchField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLastPrice()).compareTo(other.isSetLastPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastPrice, other.lastPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolume()).compareTo(other.isSetVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volume, other.volume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTurnover()).compareTo(other.isSetTurnover());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTurnover()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turnover, other.turnover);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenInterest()).compareTo(other.isSetOpenInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openInterest, other.openInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcMarketDataLastMatchField(");
    boolean first = true;

    sb.append("lastPrice:");
    sb.append(this.lastPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("volume:");
    sb.append(this.volume);
    first = false;
    if (!first) sb.append(", ");
    sb.append("turnover:");
    sb.append(this.turnover);
    first = false;
    if (!first) sb.append(", ");
    sb.append("openInterest:");
    sb.append(this.openInterest);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcMarketDataLastMatchFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcMarketDataLastMatchFieldStandardScheme getScheme() {
      return new CThostFtdcMarketDataLastMatchFieldStandardScheme();
    }
  }

  private static class CThostFtdcMarketDataLastMatchFieldStandardScheme extends StandardScheme<CThostFtdcMarketDataLastMatchField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcMarketDataLastMatchField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LAST_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lastPrice = iprot.readDouble();
              struct.setLastPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.volume = iprot.readI32();
              struct.setVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TURNOVER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.turnover = iprot.readDouble();
              struct.setTurnoverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OPEN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.openInterest = iprot.readDouble();
              struct.setOpenInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcMarketDataLastMatchField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LAST_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.lastPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VOLUME_FIELD_DESC);
      oprot.writeI32(struct.volume);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TURNOVER_FIELD_DESC);
      oprot.writeDouble(struct.turnover);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPEN_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.openInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcMarketDataLastMatchFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcMarketDataLastMatchFieldTupleScheme getScheme() {
      return new CThostFtdcMarketDataLastMatchFieldTupleScheme();
    }
  }

  private static class CThostFtdcMarketDataLastMatchFieldTupleScheme extends TupleScheme<CThostFtdcMarketDataLastMatchField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcMarketDataLastMatchField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLastPrice()) {
        optionals.set(0);
      }
      if (struct.isSetVolume()) {
        optionals.set(1);
      }
      if (struct.isSetTurnover()) {
        optionals.set(2);
      }
      if (struct.isSetOpenInterest()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetLastPrice()) {
        oprot.writeDouble(struct.lastPrice);
      }
      if (struct.isSetVolume()) {
        oprot.writeI32(struct.volume);
      }
      if (struct.isSetTurnover()) {
        oprot.writeDouble(struct.turnover);
      }
      if (struct.isSetOpenInterest()) {
        oprot.writeDouble(struct.openInterest);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcMarketDataLastMatchField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.lastPrice = iprot.readDouble();
        struct.setLastPriceIsSet(true);
      }
      if (incoming.get(1)) {
        struct.volume = iprot.readI32();
        struct.setVolumeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.turnover = iprot.readDouble();
        struct.setTurnoverIsSet(true);
      }
      if (incoming.get(3)) {
        struct.openInterest = iprot.readDouble();
        struct.setOpenInterestIsSet(true);
      }
    }
  }

}

