/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcAuthenticationInfoField implements org.apache.thrift.TBase<CThostFtdcAuthenticationInfoField, CThostFtdcAuthenticationInfoField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcAuthenticationInfoField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcAuthenticationInfoField");

  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USER_PRODUCT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("userProductInfo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField AUTH_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("authInfo", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IS_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("isResult", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcAuthenticationInfoFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcAuthenticationInfoFieldTupleSchemeFactory());
  }

  public String brokerID; // required
  public String userID; // required
  public String userProductInfo; // required
  public String authInfo; // required
  public int isResult; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BROKER_ID((short)1, "brokerID"),
    USER_ID((short)2, "userID"),
    USER_PRODUCT_INFO((short)3, "userProductInfo"),
    AUTH_INFO((short)4, "authInfo"),
    IS_RESULT((short)5, "isResult");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BROKER_ID
          return BROKER_ID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // USER_PRODUCT_INFO
          return USER_PRODUCT_INFO;
        case 4: // AUTH_INFO
          return AUTH_INFO;
        case 5: // IS_RESULT
          return IS_RESULT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISRESULT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcUserIDType")));
    tmpMap.put(_Fields.USER_PRODUCT_INFO, new org.apache.thrift.meta_data.FieldMetaData("userProductInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcProductInfoType")));
    tmpMap.put(_Fields.AUTH_INFO, new org.apache.thrift.meta_data.FieldMetaData("authInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcAuthInfoType")));
    tmpMap.put(_Fields.IS_RESULT, new org.apache.thrift.meta_data.FieldMetaData("isResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcBoolType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcAuthenticationInfoField.class, metaDataMap);
  }

  public CThostFtdcAuthenticationInfoField() {
  }

  public CThostFtdcAuthenticationInfoField(
    String brokerID,
    String userID,
    String userProductInfo,
    String authInfo,
    int isResult)
  {
    this();
    this.brokerID = brokerID;
    this.userID = userID;
    this.userProductInfo = userProductInfo;
    this.authInfo = authInfo;
    this.isResult = isResult;
    setIsResultIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcAuthenticationInfoField(CThostFtdcAuthenticationInfoField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetUserID()) {
      this.userID = other.userID;
    }
    if (other.isSetUserProductInfo()) {
      this.userProductInfo = other.userProductInfo;
    }
    if (other.isSetAuthInfo()) {
      this.authInfo = other.authInfo;
    }
    this.isResult = other.isResult;
  }

  public CThostFtdcAuthenticationInfoField deepCopy() {
    return new CThostFtdcAuthenticationInfoField(this);
  }

  @Override
  public void clear() {
    this.brokerID = null;
    this.userID = null;
    this.userProductInfo = null;
    this.authInfo = null;
    setIsResultIsSet(false);
    this.isResult = 0;
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcAuthenticationInfoField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getUserID() {
    return this.userID;
  }

  public CThostFtdcAuthenticationInfoField setUserID(String userID) {
    this.userID = userID;
    return this;
  }

  public void unsetUserID() {
    this.userID = null;
  }

  /** Returns true if field userID is set (has been assigned a value) and false otherwise */
  public boolean isSetUserID() {
    return this.userID != null;
  }

  public void setUserIDIsSet(boolean value) {
    if (!value) {
      this.userID = null;
    }
  }

  public String getUserProductInfo() {
    return this.userProductInfo;
  }

  public CThostFtdcAuthenticationInfoField setUserProductInfo(String userProductInfo) {
    this.userProductInfo = userProductInfo;
    return this;
  }

  public void unsetUserProductInfo() {
    this.userProductInfo = null;
  }

  /** Returns true if field userProductInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetUserProductInfo() {
    return this.userProductInfo != null;
  }

  public void setUserProductInfoIsSet(boolean value) {
    if (!value) {
      this.userProductInfo = null;
    }
  }

  public String getAuthInfo() {
    return this.authInfo;
  }

  public CThostFtdcAuthenticationInfoField setAuthInfo(String authInfo) {
    this.authInfo = authInfo;
    return this;
  }

  public void unsetAuthInfo() {
    this.authInfo = null;
  }

  /** Returns true if field authInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthInfo() {
    return this.authInfo != null;
  }

  public void setAuthInfoIsSet(boolean value) {
    if (!value) {
      this.authInfo = null;
    }
  }

  public int getIsResult() {
    return this.isResult;
  }

  public CThostFtdcAuthenticationInfoField setIsResult(int isResult) {
    this.isResult = isResult;
    setIsResultIsSet(true);
    return this;
  }

  public void unsetIsResult() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISRESULT_ISSET_ID);
  }

  /** Returns true if field isResult is set (has been assigned a value) and false otherwise */
  public boolean isSetIsResult() {
    return EncodingUtils.testBit(__isset_bitfield, __ISRESULT_ISSET_ID);
  }

  public void setIsResultIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISRESULT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserID();
      } else {
        setUserID((String)value);
      }
      break;

    case USER_PRODUCT_INFO:
      if (value == null) {
        unsetUserProductInfo();
      } else {
        setUserProductInfo((String)value);
      }
      break;

    case AUTH_INFO:
      if (value == null) {
        unsetAuthInfo();
      } else {
        setAuthInfo((String)value);
      }
      break;

    case IS_RESULT:
      if (value == null) {
        unsetIsResult();
      } else {
        setIsResult((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BROKER_ID:
      return getBrokerID();

    case USER_ID:
      return getUserID();

    case USER_PRODUCT_INFO:
      return getUserProductInfo();

    case AUTH_INFO:
      return getAuthInfo();

    case IS_RESULT:
      return Integer.valueOf(getIsResult());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BROKER_ID:
      return isSetBrokerID();
    case USER_ID:
      return isSetUserID();
    case USER_PRODUCT_INFO:
      return isSetUserProductInfo();
    case AUTH_INFO:
      return isSetAuthInfo();
    case IS_RESULT:
      return isSetIsResult();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcAuthenticationInfoField)
      return this.equals((CThostFtdcAuthenticationInfoField)that);
    return false;
  }

  public boolean equals(CThostFtdcAuthenticationInfoField that) {
    if (that == null)
      return false;

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_userID = true && this.isSetUserID();
    boolean that_present_userID = true && that.isSetUserID();
    if (this_present_userID || that_present_userID) {
      if (!(this_present_userID && that_present_userID))
        return false;
      if (!this.userID.equals(that.userID))
        return false;
    }

    boolean this_present_userProductInfo = true && this.isSetUserProductInfo();
    boolean that_present_userProductInfo = true && that.isSetUserProductInfo();
    if (this_present_userProductInfo || that_present_userProductInfo) {
      if (!(this_present_userProductInfo && that_present_userProductInfo))
        return false;
      if (!this.userProductInfo.equals(that.userProductInfo))
        return false;
    }

    boolean this_present_authInfo = true && this.isSetAuthInfo();
    boolean that_present_authInfo = true && that.isSetAuthInfo();
    if (this_present_authInfo || that_present_authInfo) {
      if (!(this_present_authInfo && that_present_authInfo))
        return false;
      if (!this.authInfo.equals(that.authInfo))
        return false;
    }

    boolean this_present_isResult = true;
    boolean that_present_isResult = true;
    if (this_present_isResult || that_present_isResult) {
      if (!(this_present_isResult && that_present_isResult))
        return false;
      if (this.isResult != that.isResult)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcAuthenticationInfoField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserID()).compareTo(other.isSetUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, other.userID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserProductInfo()).compareTo(other.isSetUserProductInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserProductInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userProductInfo, other.userProductInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthInfo()).compareTo(other.isSetAuthInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authInfo, other.authInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsResult()).compareTo(other.isSetIsResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isResult, other.isResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcAuthenticationInfoField(");
    boolean first = true;

    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userID:");
    if (this.userID == null) {
      sb.append("null");
    } else {
      sb.append(this.userID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userProductInfo:");
    if (this.userProductInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.userProductInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authInfo:");
    if (this.authInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.authInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isResult:");
    sb.append(this.isResult);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcAuthenticationInfoFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcAuthenticationInfoFieldStandardScheme getScheme() {
      return new CThostFtdcAuthenticationInfoFieldStandardScheme();
    }
  }

  private static class CThostFtdcAuthenticationInfoFieldStandardScheme extends StandardScheme<CThostFtdcAuthenticationInfoField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcAuthenticationInfoField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userID = iprot.readString();
              struct.setUserIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_PRODUCT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userProductInfo = iprot.readString();
              struct.setUserProductInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AUTH_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authInfo = iprot.readString();
              struct.setAuthInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isResult = iprot.readI32();
              struct.setIsResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcAuthenticationInfoField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.userID != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userID);
        oprot.writeFieldEnd();
      }
      if (struct.userProductInfo != null) {
        oprot.writeFieldBegin(USER_PRODUCT_INFO_FIELD_DESC);
        oprot.writeString(struct.userProductInfo);
        oprot.writeFieldEnd();
      }
      if (struct.authInfo != null) {
        oprot.writeFieldBegin(AUTH_INFO_FIELD_DESC);
        oprot.writeString(struct.authInfo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_RESULT_FIELD_DESC);
      oprot.writeI32(struct.isResult);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcAuthenticationInfoFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcAuthenticationInfoFieldTupleScheme getScheme() {
      return new CThostFtdcAuthenticationInfoFieldTupleScheme();
    }
  }

  private static class CThostFtdcAuthenticationInfoFieldTupleScheme extends TupleScheme<CThostFtdcAuthenticationInfoField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcAuthenticationInfoField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBrokerID()) {
        optionals.set(0);
      }
      if (struct.isSetUserID()) {
        optionals.set(1);
      }
      if (struct.isSetUserProductInfo()) {
        optionals.set(2);
      }
      if (struct.isSetAuthInfo()) {
        optionals.set(3);
      }
      if (struct.isSetIsResult()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetUserID()) {
        oprot.writeString(struct.userID);
      }
      if (struct.isSetUserProductInfo()) {
        oprot.writeString(struct.userProductInfo);
      }
      if (struct.isSetAuthInfo()) {
        oprot.writeString(struct.authInfo);
      }
      if (struct.isSetIsResult()) {
        oprot.writeI32(struct.isResult);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcAuthenticationInfoField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userID = iprot.readString();
        struct.setUserIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userProductInfo = iprot.readString();
        struct.setUserProductInfoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.authInfo = iprot.readString();
        struct.setAuthInfoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isResult = iprot.readI32();
        struct.setIsResultIsSet(true);
      }
    }
  }

}

