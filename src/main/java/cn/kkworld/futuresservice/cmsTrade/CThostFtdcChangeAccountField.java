/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcChangeAccountField implements org.apache.thrift.TBase<CThostFtdcChangeAccountField, CThostFtdcChangeAccountField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcChangeAccountField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcChangeAccountField");

  private static final org.apache.thrift.protocol.TField TRADE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BANK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BANK_BRANCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankBranchID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BROKER_BRANCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerBranchID", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TRADE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeDate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TRADE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BANK_SERIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("bankSerial", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TRADING_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("tradingDay", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PLATE_SERIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("plateSerial", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField LAST_FRAGMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("lastFragment", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField CUSTOMER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("customerName", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField ID_CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("idCardType", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField IDENTIFIED_CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("identifiedCardNo", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField COUNTRY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("countryCode", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField CUST_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("custType", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField ZIP_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("zipCode", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField TELEPHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("telephone", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField MOBILE_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobilePhone", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField FAX_FIELD_DESC = new org.apache.thrift.protocol.TField("fax", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField E_MAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("eMail", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField MONEY_ACCOUNT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("moneyAccountStatus", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField BANK_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("bankAccount", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField BANK_PASS_WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("bankPassWord", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField NEW_BANK_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("newBankAccount", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField NEW_BANK_PASS_WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("newBankPassWord", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountID", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField BANK_ACC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankAccType", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField INSTALL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("installID", org.apache.thrift.protocol.TType.I32, (short)33);
  private static final org.apache.thrift.protocol.TField VERIFY_CERT_NO_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("verifyCertNoFlag", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField CURRENCY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("currencyID", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField BROKER_IDBY_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerIDByBank", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField BANK_PWD_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("bankPwdFlag", org.apache.thrift.protocol.TType.STRING, (short)37);
  private static final org.apache.thrift.protocol.TField SECU_PWD_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("secuPwdFlag", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField T_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tID", org.apache.thrift.protocol.TType.I32, (short)39);
  private static final org.apache.thrift.protocol.TField DIGEST_FIELD_DESC = new org.apache.thrift.protocol.TField("digest", org.apache.thrift.protocol.TType.STRING, (short)40);
  private static final org.apache.thrift.protocol.TField ERROR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("errorID", org.apache.thrift.protocol.TType.I32, (short)41);
  private static final org.apache.thrift.protocol.TField ERRORMSG_FIELD_DESC = new org.apache.thrift.protocol.TField("errormsg", org.apache.thrift.protocol.TType.STRING, (short)42);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcChangeAccountFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcChangeAccountFieldTupleSchemeFactory());
  }

  public String tradeCode; // required
  public String bankID; // required
  public String bankBranchID; // required
  public String brokerID; // required
  public String brokerBranchID; // required
  public String tradeDate; // required
  public String tradeTime; // required
  public String bankSerial; // required
  public String tradingDay; // required
  public int plateSerial; // required
  public String lastFragment; // required
  public int sessionID; // required
  public String customerName; // required
  public String idCardType; // required
  public String identifiedCardNo; // required
  public String gender; // required
  public String countryCode; // required
  public String custType; // required
  public String address; // required
  public String zipCode; // required
  public String telephone; // required
  public String mobilePhone; // required
  public String fax; // required
  public String eMail; // required
  public String moneyAccountStatus; // required
  public String bankAccount; // required
  public String bankPassWord; // required
  public String newBankAccount; // required
  public String newBankPassWord; // required
  public String accountID; // required
  public String password; // required
  public String bankAccType; // required
  public int installID; // required
  public String verifyCertNoFlag; // required
  public String currencyID; // required
  public String brokerIDByBank; // required
  public String bankPwdFlag; // required
  public String secuPwdFlag; // required
  public int tID; // required
  public String digest; // required
  public int errorID; // required
  public String errormsg; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRADE_CODE((short)1, "tradeCode"),
    BANK_ID((short)2, "bankID"),
    BANK_BRANCH_ID((short)3, "bankBranchID"),
    BROKER_ID((short)4, "brokerID"),
    BROKER_BRANCH_ID((short)5, "brokerBranchID"),
    TRADE_DATE((short)6, "tradeDate"),
    TRADE_TIME((short)7, "tradeTime"),
    BANK_SERIAL((short)8, "bankSerial"),
    TRADING_DAY((short)9, "tradingDay"),
    PLATE_SERIAL((short)10, "plateSerial"),
    LAST_FRAGMENT((short)11, "lastFragment"),
    SESSION_ID((short)12, "sessionID"),
    CUSTOMER_NAME((short)13, "customerName"),
    ID_CARD_TYPE((short)14, "idCardType"),
    IDENTIFIED_CARD_NO((short)15, "identifiedCardNo"),
    GENDER((short)16, "gender"),
    COUNTRY_CODE((short)17, "countryCode"),
    CUST_TYPE((short)18, "custType"),
    ADDRESS((short)19, "address"),
    ZIP_CODE((short)20, "zipCode"),
    TELEPHONE((short)21, "telephone"),
    MOBILE_PHONE((short)22, "mobilePhone"),
    FAX((short)23, "fax"),
    E_MAIL((short)24, "eMail"),
    MONEY_ACCOUNT_STATUS((short)25, "moneyAccountStatus"),
    BANK_ACCOUNT((short)26, "bankAccount"),
    BANK_PASS_WORD((short)27, "bankPassWord"),
    NEW_BANK_ACCOUNT((short)28, "newBankAccount"),
    NEW_BANK_PASS_WORD((short)29, "newBankPassWord"),
    ACCOUNT_ID((short)30, "accountID"),
    PASSWORD((short)31, "password"),
    BANK_ACC_TYPE((short)32, "bankAccType"),
    INSTALL_ID((short)33, "installID"),
    VERIFY_CERT_NO_FLAG((short)34, "verifyCertNoFlag"),
    CURRENCY_ID((short)35, "currencyID"),
    BROKER_IDBY_BANK((short)36, "brokerIDByBank"),
    BANK_PWD_FLAG((short)37, "bankPwdFlag"),
    SECU_PWD_FLAG((short)38, "secuPwdFlag"),
    T_ID((short)39, "tID"),
    DIGEST((short)40, "digest"),
    ERROR_ID((short)41, "errorID"),
    ERRORMSG((short)42, "errormsg");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRADE_CODE
          return TRADE_CODE;
        case 2: // BANK_ID
          return BANK_ID;
        case 3: // BANK_BRANCH_ID
          return BANK_BRANCH_ID;
        case 4: // BROKER_ID
          return BROKER_ID;
        case 5: // BROKER_BRANCH_ID
          return BROKER_BRANCH_ID;
        case 6: // TRADE_DATE
          return TRADE_DATE;
        case 7: // TRADE_TIME
          return TRADE_TIME;
        case 8: // BANK_SERIAL
          return BANK_SERIAL;
        case 9: // TRADING_DAY
          return TRADING_DAY;
        case 10: // PLATE_SERIAL
          return PLATE_SERIAL;
        case 11: // LAST_FRAGMENT
          return LAST_FRAGMENT;
        case 12: // SESSION_ID
          return SESSION_ID;
        case 13: // CUSTOMER_NAME
          return CUSTOMER_NAME;
        case 14: // ID_CARD_TYPE
          return ID_CARD_TYPE;
        case 15: // IDENTIFIED_CARD_NO
          return IDENTIFIED_CARD_NO;
        case 16: // GENDER
          return GENDER;
        case 17: // COUNTRY_CODE
          return COUNTRY_CODE;
        case 18: // CUST_TYPE
          return CUST_TYPE;
        case 19: // ADDRESS
          return ADDRESS;
        case 20: // ZIP_CODE
          return ZIP_CODE;
        case 21: // TELEPHONE
          return TELEPHONE;
        case 22: // MOBILE_PHONE
          return MOBILE_PHONE;
        case 23: // FAX
          return FAX;
        case 24: // E_MAIL
          return E_MAIL;
        case 25: // MONEY_ACCOUNT_STATUS
          return MONEY_ACCOUNT_STATUS;
        case 26: // BANK_ACCOUNT
          return BANK_ACCOUNT;
        case 27: // BANK_PASS_WORD
          return BANK_PASS_WORD;
        case 28: // NEW_BANK_ACCOUNT
          return NEW_BANK_ACCOUNT;
        case 29: // NEW_BANK_PASS_WORD
          return NEW_BANK_PASS_WORD;
        case 30: // ACCOUNT_ID
          return ACCOUNT_ID;
        case 31: // PASSWORD
          return PASSWORD;
        case 32: // BANK_ACC_TYPE
          return BANK_ACC_TYPE;
        case 33: // INSTALL_ID
          return INSTALL_ID;
        case 34: // VERIFY_CERT_NO_FLAG
          return VERIFY_CERT_NO_FLAG;
        case 35: // CURRENCY_ID
          return CURRENCY_ID;
        case 36: // BROKER_IDBY_BANK
          return BROKER_IDBY_BANK;
        case 37: // BANK_PWD_FLAG
          return BANK_PWD_FLAG;
        case 38: // SECU_PWD_FLAG
          return SECU_PWD_FLAG;
        case 39: // T_ID
          return T_ID;
        case 40: // DIGEST
          return DIGEST;
        case 41: // ERROR_ID
          return ERROR_ID;
        case 42: // ERRORMSG
          return ERRORMSG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PLATESERIAL_ISSET_ID = 0;
  private static final int __SESSIONID_ISSET_ID = 1;
  private static final int __INSTALLID_ISSET_ID = 2;
  private static final int __TID_ISSET_ID = 3;
  private static final int __ERRORID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRADE_CODE, new org.apache.thrift.meta_data.FieldMetaData("tradeCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeCodeType")));
    tmpMap.put(_Fields.BANK_ID, new org.apache.thrift.meta_data.FieldMetaData("bankID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankIDType")));
    tmpMap.put(_Fields.BANK_BRANCH_ID, new org.apache.thrift.meta_data.FieldMetaData("bankBranchID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankBrchIDType")));
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.BROKER_BRANCH_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerBranchID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcFutureBranchIDType")));
    tmpMap.put(_Fields.TRADE_DATE, new org.apache.thrift.meta_data.FieldMetaData("tradeDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeDateType")));
    tmpMap.put(_Fields.TRADE_TIME, new org.apache.thrift.meta_data.FieldMetaData("tradeTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeTimeType")));
    tmpMap.put(_Fields.BANK_SERIAL, new org.apache.thrift.meta_data.FieldMetaData("bankSerial", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankSerialType")));
    tmpMap.put(_Fields.TRADING_DAY, new org.apache.thrift.meta_data.FieldMetaData("tradingDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeDateType")));
    tmpMap.put(_Fields.PLATE_SERIAL, new org.apache.thrift.meta_data.FieldMetaData("plateSerial", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcSerialType")));
    tmpMap.put(_Fields.LAST_FRAGMENT, new org.apache.thrift.meta_data.FieldMetaData("lastFragment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcLastFragmentType")));
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcSessionIDType")));
    tmpMap.put(_Fields.CUSTOMER_NAME, new org.apache.thrift.meta_data.FieldMetaData("customerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcIndividualNameType")));
    tmpMap.put(_Fields.ID_CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("idCardType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcIdCardTypeType")));
    tmpMap.put(_Fields.IDENTIFIED_CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("identifiedCardNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcIdentifiedCardNoType")));
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcGenderType")));
    tmpMap.put(_Fields.COUNTRY_CODE, new org.apache.thrift.meta_data.FieldMetaData("countryCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcCountryCodeType")));
    tmpMap.put(_Fields.CUST_TYPE, new org.apache.thrift.meta_data.FieldMetaData("custType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcCustTypeType")));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcAddressType")));
    tmpMap.put(_Fields.ZIP_CODE, new org.apache.thrift.meta_data.FieldMetaData("zipCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcZipCodeType")));
    tmpMap.put(_Fields.TELEPHONE, new org.apache.thrift.meta_data.FieldMetaData("telephone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTelephoneType")));
    tmpMap.put(_Fields.MOBILE_PHONE, new org.apache.thrift.meta_data.FieldMetaData("mobilePhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcMobilePhoneType")));
    tmpMap.put(_Fields.FAX, new org.apache.thrift.meta_data.FieldMetaData("fax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcFaxType")));
    tmpMap.put(_Fields.E_MAIL, new org.apache.thrift.meta_data.FieldMetaData("eMail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcEMailType")));
    tmpMap.put(_Fields.MONEY_ACCOUNT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("moneyAccountStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcMoneyAccountStatusType")));
    tmpMap.put(_Fields.BANK_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("bankAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankAccountType")));
    tmpMap.put(_Fields.BANK_PASS_WORD, new org.apache.thrift.meta_data.FieldMetaData("bankPassWord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcPasswordType")));
    tmpMap.put(_Fields.NEW_BANK_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("newBankAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankAccountType")));
    tmpMap.put(_Fields.NEW_BANK_PASS_WORD, new org.apache.thrift.meta_data.FieldMetaData("newBankPassWord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcPasswordType")));
    tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcAccountIDType")));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcPasswordType")));
    tmpMap.put(_Fields.BANK_ACC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bankAccType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankAccTypeType")));
    tmpMap.put(_Fields.INSTALL_ID, new org.apache.thrift.meta_data.FieldMetaData("installID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcInstallIDType")));
    tmpMap.put(_Fields.VERIFY_CERT_NO_FLAG, new org.apache.thrift.meta_data.FieldMetaData("verifyCertNoFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcYesNoIndicatorType")));
    tmpMap.put(_Fields.CURRENCY_ID, new org.apache.thrift.meta_data.FieldMetaData("currencyID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcCurrencyIDType")));
    tmpMap.put(_Fields.BROKER_IDBY_BANK, new org.apache.thrift.meta_data.FieldMetaData("brokerIDByBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankCodingForFutureType")));
    tmpMap.put(_Fields.BANK_PWD_FLAG, new org.apache.thrift.meta_data.FieldMetaData("bankPwdFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcPwdFlagType")));
    tmpMap.put(_Fields.SECU_PWD_FLAG, new org.apache.thrift.meta_data.FieldMetaData("secuPwdFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcPwdFlagType")));
    tmpMap.put(_Fields.T_ID, new org.apache.thrift.meta_data.FieldMetaData("tID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcTIDType")));
    tmpMap.put(_Fields.DIGEST, new org.apache.thrift.meta_data.FieldMetaData("digest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDigestType")));
    tmpMap.put(_Fields.ERROR_ID, new org.apache.thrift.meta_data.FieldMetaData("errorID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcErrorIDType")));
    tmpMap.put(_Fields.ERRORMSG, new org.apache.thrift.meta_data.FieldMetaData("errormsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcErrorMsgType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcChangeAccountField.class, metaDataMap);
  }

  public CThostFtdcChangeAccountField() {
  }

  public CThostFtdcChangeAccountField(
    String tradeCode,
    String bankID,
    String bankBranchID,
    String brokerID,
    String brokerBranchID,
    String tradeDate,
    String tradeTime,
    String bankSerial,
    String tradingDay,
    int plateSerial,
    String lastFragment,
    int sessionID,
    String customerName,
    String idCardType,
    String identifiedCardNo,
    String gender,
    String countryCode,
    String custType,
    String address,
    String zipCode,
    String telephone,
    String mobilePhone,
    String fax,
    String eMail,
    String moneyAccountStatus,
    String bankAccount,
    String bankPassWord,
    String newBankAccount,
    String newBankPassWord,
    String accountID,
    String password,
    String bankAccType,
    int installID,
    String verifyCertNoFlag,
    String currencyID,
    String brokerIDByBank,
    String bankPwdFlag,
    String secuPwdFlag,
    int tID,
    String digest,
    int errorID,
    String errormsg)
  {
    this();
    this.tradeCode = tradeCode;
    this.bankID = bankID;
    this.bankBranchID = bankBranchID;
    this.brokerID = brokerID;
    this.brokerBranchID = brokerBranchID;
    this.tradeDate = tradeDate;
    this.tradeTime = tradeTime;
    this.bankSerial = bankSerial;
    this.tradingDay = tradingDay;
    this.plateSerial = plateSerial;
    setPlateSerialIsSet(true);
    this.lastFragment = lastFragment;
    this.sessionID = sessionID;
    setSessionIDIsSet(true);
    this.customerName = customerName;
    this.idCardType = idCardType;
    this.identifiedCardNo = identifiedCardNo;
    this.gender = gender;
    this.countryCode = countryCode;
    this.custType = custType;
    this.address = address;
    this.zipCode = zipCode;
    this.telephone = telephone;
    this.mobilePhone = mobilePhone;
    this.fax = fax;
    this.eMail = eMail;
    this.moneyAccountStatus = moneyAccountStatus;
    this.bankAccount = bankAccount;
    this.bankPassWord = bankPassWord;
    this.newBankAccount = newBankAccount;
    this.newBankPassWord = newBankPassWord;
    this.accountID = accountID;
    this.password = password;
    this.bankAccType = bankAccType;
    this.installID = installID;
    setInstallIDIsSet(true);
    this.verifyCertNoFlag = verifyCertNoFlag;
    this.currencyID = currencyID;
    this.brokerIDByBank = brokerIDByBank;
    this.bankPwdFlag = bankPwdFlag;
    this.secuPwdFlag = secuPwdFlag;
    this.tID = tID;
    setTIDIsSet(true);
    this.digest = digest;
    this.errorID = errorID;
    setErrorIDIsSet(true);
    this.errormsg = errormsg;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcChangeAccountField(CThostFtdcChangeAccountField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTradeCode()) {
      this.tradeCode = other.tradeCode;
    }
    if (other.isSetBankID()) {
      this.bankID = other.bankID;
    }
    if (other.isSetBankBranchID()) {
      this.bankBranchID = other.bankBranchID;
    }
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetBrokerBranchID()) {
      this.brokerBranchID = other.brokerBranchID;
    }
    if (other.isSetTradeDate()) {
      this.tradeDate = other.tradeDate;
    }
    if (other.isSetTradeTime()) {
      this.tradeTime = other.tradeTime;
    }
    if (other.isSetBankSerial()) {
      this.bankSerial = other.bankSerial;
    }
    if (other.isSetTradingDay()) {
      this.tradingDay = other.tradingDay;
    }
    this.plateSerial = other.plateSerial;
    if (other.isSetLastFragment()) {
      this.lastFragment = other.lastFragment;
    }
    this.sessionID = other.sessionID;
    if (other.isSetCustomerName()) {
      this.customerName = other.customerName;
    }
    if (other.isSetIdCardType()) {
      this.idCardType = other.idCardType;
    }
    if (other.isSetIdentifiedCardNo()) {
      this.identifiedCardNo = other.identifiedCardNo;
    }
    if (other.isSetGender()) {
      this.gender = other.gender;
    }
    if (other.isSetCountryCode()) {
      this.countryCode = other.countryCode;
    }
    if (other.isSetCustType()) {
      this.custType = other.custType;
    }
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetZipCode()) {
      this.zipCode = other.zipCode;
    }
    if (other.isSetTelephone()) {
      this.telephone = other.telephone;
    }
    if (other.isSetMobilePhone()) {
      this.mobilePhone = other.mobilePhone;
    }
    if (other.isSetFax()) {
      this.fax = other.fax;
    }
    if (other.isSetEMail()) {
      this.eMail = other.eMail;
    }
    if (other.isSetMoneyAccountStatus()) {
      this.moneyAccountStatus = other.moneyAccountStatus;
    }
    if (other.isSetBankAccount()) {
      this.bankAccount = other.bankAccount;
    }
    if (other.isSetBankPassWord()) {
      this.bankPassWord = other.bankPassWord;
    }
    if (other.isSetNewBankAccount()) {
      this.newBankAccount = other.newBankAccount;
    }
    if (other.isSetNewBankPassWord()) {
      this.newBankPassWord = other.newBankPassWord;
    }
    if (other.isSetAccountID()) {
      this.accountID = other.accountID;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetBankAccType()) {
      this.bankAccType = other.bankAccType;
    }
    this.installID = other.installID;
    if (other.isSetVerifyCertNoFlag()) {
      this.verifyCertNoFlag = other.verifyCertNoFlag;
    }
    if (other.isSetCurrencyID()) {
      this.currencyID = other.currencyID;
    }
    if (other.isSetBrokerIDByBank()) {
      this.brokerIDByBank = other.brokerIDByBank;
    }
    if (other.isSetBankPwdFlag()) {
      this.bankPwdFlag = other.bankPwdFlag;
    }
    if (other.isSetSecuPwdFlag()) {
      this.secuPwdFlag = other.secuPwdFlag;
    }
    this.tID = other.tID;
    if (other.isSetDigest()) {
      this.digest = other.digest;
    }
    this.errorID = other.errorID;
    if (other.isSetErrormsg()) {
      this.errormsg = other.errormsg;
    }
  }

  public CThostFtdcChangeAccountField deepCopy() {
    return new CThostFtdcChangeAccountField(this);
  }

  @Override
  public void clear() {
    this.tradeCode = null;
    this.bankID = null;
    this.bankBranchID = null;
    this.brokerID = null;
    this.brokerBranchID = null;
    this.tradeDate = null;
    this.tradeTime = null;
    this.bankSerial = null;
    this.tradingDay = null;
    setPlateSerialIsSet(false);
    this.plateSerial = 0;
    this.lastFragment = null;
    setSessionIDIsSet(false);
    this.sessionID = 0;
    this.customerName = null;
    this.idCardType = null;
    this.identifiedCardNo = null;
    this.gender = null;
    this.countryCode = null;
    this.custType = null;
    this.address = null;
    this.zipCode = null;
    this.telephone = null;
    this.mobilePhone = null;
    this.fax = null;
    this.eMail = null;
    this.moneyAccountStatus = null;
    this.bankAccount = null;
    this.bankPassWord = null;
    this.newBankAccount = null;
    this.newBankPassWord = null;
    this.accountID = null;
    this.password = null;
    this.bankAccType = null;
    setInstallIDIsSet(false);
    this.installID = 0;
    this.verifyCertNoFlag = null;
    this.currencyID = null;
    this.brokerIDByBank = null;
    this.bankPwdFlag = null;
    this.secuPwdFlag = null;
    setTIDIsSet(false);
    this.tID = 0;
    this.digest = null;
    setErrorIDIsSet(false);
    this.errorID = 0;
    this.errormsg = null;
  }

  public String getTradeCode() {
    return this.tradeCode;
  }

  public CThostFtdcChangeAccountField setTradeCode(String tradeCode) {
    this.tradeCode = tradeCode;
    return this;
  }

  public void unsetTradeCode() {
    this.tradeCode = null;
  }

  /** Returns true if field tradeCode is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeCode() {
    return this.tradeCode != null;
  }

  public void setTradeCodeIsSet(boolean value) {
    if (!value) {
      this.tradeCode = null;
    }
  }

  public String getBankID() {
    return this.bankID;
  }

  public CThostFtdcChangeAccountField setBankID(String bankID) {
    this.bankID = bankID;
    return this;
  }

  public void unsetBankID() {
    this.bankID = null;
  }

  /** Returns true if field bankID is set (has been assigned a value) and false otherwise */
  public boolean isSetBankID() {
    return this.bankID != null;
  }

  public void setBankIDIsSet(boolean value) {
    if (!value) {
      this.bankID = null;
    }
  }

  public String getBankBranchID() {
    return this.bankBranchID;
  }

  public CThostFtdcChangeAccountField setBankBranchID(String bankBranchID) {
    this.bankBranchID = bankBranchID;
    return this;
  }

  public void unsetBankBranchID() {
    this.bankBranchID = null;
  }

  /** Returns true if field bankBranchID is set (has been assigned a value) and false otherwise */
  public boolean isSetBankBranchID() {
    return this.bankBranchID != null;
  }

  public void setBankBranchIDIsSet(boolean value) {
    if (!value) {
      this.bankBranchID = null;
    }
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcChangeAccountField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getBrokerBranchID() {
    return this.brokerBranchID;
  }

  public CThostFtdcChangeAccountField setBrokerBranchID(String brokerBranchID) {
    this.brokerBranchID = brokerBranchID;
    return this;
  }

  public void unsetBrokerBranchID() {
    this.brokerBranchID = null;
  }

  /** Returns true if field brokerBranchID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerBranchID() {
    return this.brokerBranchID != null;
  }

  public void setBrokerBranchIDIsSet(boolean value) {
    if (!value) {
      this.brokerBranchID = null;
    }
  }

  public String getTradeDate() {
    return this.tradeDate;
  }

  public CThostFtdcChangeAccountField setTradeDate(String tradeDate) {
    this.tradeDate = tradeDate;
    return this;
  }

  public void unsetTradeDate() {
    this.tradeDate = null;
  }

  /** Returns true if field tradeDate is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeDate() {
    return this.tradeDate != null;
  }

  public void setTradeDateIsSet(boolean value) {
    if (!value) {
      this.tradeDate = null;
    }
  }

  public String getTradeTime() {
    return this.tradeTime;
  }

  public CThostFtdcChangeAccountField setTradeTime(String tradeTime) {
    this.tradeTime = tradeTime;
    return this;
  }

  public void unsetTradeTime() {
    this.tradeTime = null;
  }

  /** Returns true if field tradeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeTime() {
    return this.tradeTime != null;
  }

  public void setTradeTimeIsSet(boolean value) {
    if (!value) {
      this.tradeTime = null;
    }
  }

  public String getBankSerial() {
    return this.bankSerial;
  }

  public CThostFtdcChangeAccountField setBankSerial(String bankSerial) {
    this.bankSerial = bankSerial;
    return this;
  }

  public void unsetBankSerial() {
    this.bankSerial = null;
  }

  /** Returns true if field bankSerial is set (has been assigned a value) and false otherwise */
  public boolean isSetBankSerial() {
    return this.bankSerial != null;
  }

  public void setBankSerialIsSet(boolean value) {
    if (!value) {
      this.bankSerial = null;
    }
  }

  public String getTradingDay() {
    return this.tradingDay;
  }

  public CThostFtdcChangeAccountField setTradingDay(String tradingDay) {
    this.tradingDay = tradingDay;
    return this;
  }

  public void unsetTradingDay() {
    this.tradingDay = null;
  }

  /** Returns true if field tradingDay is set (has been assigned a value) and false otherwise */
  public boolean isSetTradingDay() {
    return this.tradingDay != null;
  }

  public void setTradingDayIsSet(boolean value) {
    if (!value) {
      this.tradingDay = null;
    }
  }

  public int getPlateSerial() {
    return this.plateSerial;
  }

  public CThostFtdcChangeAccountField setPlateSerial(int plateSerial) {
    this.plateSerial = plateSerial;
    setPlateSerialIsSet(true);
    return this;
  }

  public void unsetPlateSerial() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLATESERIAL_ISSET_ID);
  }

  /** Returns true if field plateSerial is set (has been assigned a value) and false otherwise */
  public boolean isSetPlateSerial() {
    return EncodingUtils.testBit(__isset_bitfield, __PLATESERIAL_ISSET_ID);
  }

  public void setPlateSerialIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLATESERIAL_ISSET_ID, value);
  }

  public String getLastFragment() {
    return this.lastFragment;
  }

  public CThostFtdcChangeAccountField setLastFragment(String lastFragment) {
    this.lastFragment = lastFragment;
    return this;
  }

  public void unsetLastFragment() {
    this.lastFragment = null;
  }

  /** Returns true if field lastFragment is set (has been assigned a value) and false otherwise */
  public boolean isSetLastFragment() {
    return this.lastFragment != null;
  }

  public void setLastFragmentIsSet(boolean value) {
    if (!value) {
      this.lastFragment = null;
    }
  }

  public int getSessionID() {
    return this.sessionID;
  }

  public CThostFtdcChangeAccountField setSessionID(int sessionID) {
    this.sessionID = sessionID;
    setSessionIDIsSet(true);
    return this;
  }

  public void unsetSessionID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionID() {
    return EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  public void setSessionIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
  }

  public String getCustomerName() {
    return this.customerName;
  }

  public CThostFtdcChangeAccountField setCustomerName(String customerName) {
    this.customerName = customerName;
    return this;
  }

  public void unsetCustomerName() {
    this.customerName = null;
  }

  /** Returns true if field customerName is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomerName() {
    return this.customerName != null;
  }

  public void setCustomerNameIsSet(boolean value) {
    if (!value) {
      this.customerName = null;
    }
  }

  public String getIdCardType() {
    return this.idCardType;
  }

  public CThostFtdcChangeAccountField setIdCardType(String idCardType) {
    this.idCardType = idCardType;
    return this;
  }

  public void unsetIdCardType() {
    this.idCardType = null;
  }

  /** Returns true if field idCardType is set (has been assigned a value) and false otherwise */
  public boolean isSetIdCardType() {
    return this.idCardType != null;
  }

  public void setIdCardTypeIsSet(boolean value) {
    if (!value) {
      this.idCardType = null;
    }
  }

  public String getIdentifiedCardNo() {
    return this.identifiedCardNo;
  }

  public CThostFtdcChangeAccountField setIdentifiedCardNo(String identifiedCardNo) {
    this.identifiedCardNo = identifiedCardNo;
    return this;
  }

  public void unsetIdentifiedCardNo() {
    this.identifiedCardNo = null;
  }

  /** Returns true if field identifiedCardNo is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentifiedCardNo() {
    return this.identifiedCardNo != null;
  }

  public void setIdentifiedCardNoIsSet(boolean value) {
    if (!value) {
      this.identifiedCardNo = null;
    }
  }

  public String getGender() {
    return this.gender;
  }

  public CThostFtdcChangeAccountField setGender(String gender) {
    this.gender = gender;
    return this;
  }

  public void unsetGender() {
    this.gender = null;
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return this.gender != null;
  }

  public void setGenderIsSet(boolean value) {
    if (!value) {
      this.gender = null;
    }
  }

  public String getCountryCode() {
    return this.countryCode;
  }

  public CThostFtdcChangeAccountField setCountryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  public void unsetCountryCode() {
    this.countryCode = null;
  }

  /** Returns true if field countryCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCountryCode() {
    return this.countryCode != null;
  }

  public void setCountryCodeIsSet(boolean value) {
    if (!value) {
      this.countryCode = null;
    }
  }

  public String getCustType() {
    return this.custType;
  }

  public CThostFtdcChangeAccountField setCustType(String custType) {
    this.custType = custType;
    return this;
  }

  public void unsetCustType() {
    this.custType = null;
  }

  /** Returns true if field custType is set (has been assigned a value) and false otherwise */
  public boolean isSetCustType() {
    return this.custType != null;
  }

  public void setCustTypeIsSet(boolean value) {
    if (!value) {
      this.custType = null;
    }
  }

  public String getAddress() {
    return this.address;
  }

  public CThostFtdcChangeAccountField setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public String getZipCode() {
    return this.zipCode;
  }

  public CThostFtdcChangeAccountField setZipCode(String zipCode) {
    this.zipCode = zipCode;
    return this;
  }

  public void unsetZipCode() {
    this.zipCode = null;
  }

  /** Returns true if field zipCode is set (has been assigned a value) and false otherwise */
  public boolean isSetZipCode() {
    return this.zipCode != null;
  }

  public void setZipCodeIsSet(boolean value) {
    if (!value) {
      this.zipCode = null;
    }
  }

  public String getTelephone() {
    return this.telephone;
  }

  public CThostFtdcChangeAccountField setTelephone(String telephone) {
    this.telephone = telephone;
    return this;
  }

  public void unsetTelephone() {
    this.telephone = null;
  }

  /** Returns true if field telephone is set (has been assigned a value) and false otherwise */
  public boolean isSetTelephone() {
    return this.telephone != null;
  }

  public void setTelephoneIsSet(boolean value) {
    if (!value) {
      this.telephone = null;
    }
  }

  public String getMobilePhone() {
    return this.mobilePhone;
  }

  public CThostFtdcChangeAccountField setMobilePhone(String mobilePhone) {
    this.mobilePhone = mobilePhone;
    return this;
  }

  public void unsetMobilePhone() {
    this.mobilePhone = null;
  }

  /** Returns true if field mobilePhone is set (has been assigned a value) and false otherwise */
  public boolean isSetMobilePhone() {
    return this.mobilePhone != null;
  }

  public void setMobilePhoneIsSet(boolean value) {
    if (!value) {
      this.mobilePhone = null;
    }
  }

  public String getFax() {
    return this.fax;
  }

  public CThostFtdcChangeAccountField setFax(String fax) {
    this.fax = fax;
    return this;
  }

  public void unsetFax() {
    this.fax = null;
  }

  /** Returns true if field fax is set (has been assigned a value) and false otherwise */
  public boolean isSetFax() {
    return this.fax != null;
  }

  public void setFaxIsSet(boolean value) {
    if (!value) {
      this.fax = null;
    }
  }

  public String getEMail() {
    return this.eMail;
  }

  public CThostFtdcChangeAccountField setEMail(String eMail) {
    this.eMail = eMail;
    return this;
  }

  public void unsetEMail() {
    this.eMail = null;
  }

  /** Returns true if field eMail is set (has been assigned a value) and false otherwise */
  public boolean isSetEMail() {
    return this.eMail != null;
  }

  public void setEMailIsSet(boolean value) {
    if (!value) {
      this.eMail = null;
    }
  }

  public String getMoneyAccountStatus() {
    return this.moneyAccountStatus;
  }

  public CThostFtdcChangeAccountField setMoneyAccountStatus(String moneyAccountStatus) {
    this.moneyAccountStatus = moneyAccountStatus;
    return this;
  }

  public void unsetMoneyAccountStatus() {
    this.moneyAccountStatus = null;
  }

  /** Returns true if field moneyAccountStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetMoneyAccountStatus() {
    return this.moneyAccountStatus != null;
  }

  public void setMoneyAccountStatusIsSet(boolean value) {
    if (!value) {
      this.moneyAccountStatus = null;
    }
  }

  public String getBankAccount() {
    return this.bankAccount;
  }

  public CThostFtdcChangeAccountField setBankAccount(String bankAccount) {
    this.bankAccount = bankAccount;
    return this;
  }

  public void unsetBankAccount() {
    this.bankAccount = null;
  }

  /** Returns true if field bankAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetBankAccount() {
    return this.bankAccount != null;
  }

  public void setBankAccountIsSet(boolean value) {
    if (!value) {
      this.bankAccount = null;
    }
  }

  public String getBankPassWord() {
    return this.bankPassWord;
  }

  public CThostFtdcChangeAccountField setBankPassWord(String bankPassWord) {
    this.bankPassWord = bankPassWord;
    return this;
  }

  public void unsetBankPassWord() {
    this.bankPassWord = null;
  }

  /** Returns true if field bankPassWord is set (has been assigned a value) and false otherwise */
  public boolean isSetBankPassWord() {
    return this.bankPassWord != null;
  }

  public void setBankPassWordIsSet(boolean value) {
    if (!value) {
      this.bankPassWord = null;
    }
  }

  public String getNewBankAccount() {
    return this.newBankAccount;
  }

  public CThostFtdcChangeAccountField setNewBankAccount(String newBankAccount) {
    this.newBankAccount = newBankAccount;
    return this;
  }

  public void unsetNewBankAccount() {
    this.newBankAccount = null;
  }

  /** Returns true if field newBankAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetNewBankAccount() {
    return this.newBankAccount != null;
  }

  public void setNewBankAccountIsSet(boolean value) {
    if (!value) {
      this.newBankAccount = null;
    }
  }

  public String getNewBankPassWord() {
    return this.newBankPassWord;
  }

  public CThostFtdcChangeAccountField setNewBankPassWord(String newBankPassWord) {
    this.newBankPassWord = newBankPassWord;
    return this;
  }

  public void unsetNewBankPassWord() {
    this.newBankPassWord = null;
  }

  /** Returns true if field newBankPassWord is set (has been assigned a value) and false otherwise */
  public boolean isSetNewBankPassWord() {
    return this.newBankPassWord != null;
  }

  public void setNewBankPassWordIsSet(boolean value) {
    if (!value) {
      this.newBankPassWord = null;
    }
  }

  public String getAccountID() {
    return this.accountID;
  }

  public CThostFtdcChangeAccountField setAccountID(String accountID) {
    this.accountID = accountID;
    return this;
  }

  public void unsetAccountID() {
    this.accountID = null;
  }

  /** Returns true if field accountID is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountID() {
    return this.accountID != null;
  }

  public void setAccountIDIsSet(boolean value) {
    if (!value) {
      this.accountID = null;
    }
  }

  public String getPassword() {
    return this.password;
  }

  public CThostFtdcChangeAccountField setPassword(String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public String getBankAccType() {
    return this.bankAccType;
  }

  public CThostFtdcChangeAccountField setBankAccType(String bankAccType) {
    this.bankAccType = bankAccType;
    return this;
  }

  public void unsetBankAccType() {
    this.bankAccType = null;
  }

  /** Returns true if field bankAccType is set (has been assigned a value) and false otherwise */
  public boolean isSetBankAccType() {
    return this.bankAccType != null;
  }

  public void setBankAccTypeIsSet(boolean value) {
    if (!value) {
      this.bankAccType = null;
    }
  }

  public int getInstallID() {
    return this.installID;
  }

  public CThostFtdcChangeAccountField setInstallID(int installID) {
    this.installID = installID;
    setInstallIDIsSet(true);
    return this;
  }

  public void unsetInstallID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSTALLID_ISSET_ID);
  }

  /** Returns true if field installID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstallID() {
    return EncodingUtils.testBit(__isset_bitfield, __INSTALLID_ISSET_ID);
  }

  public void setInstallIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSTALLID_ISSET_ID, value);
  }

  public String getVerifyCertNoFlag() {
    return this.verifyCertNoFlag;
  }

  public CThostFtdcChangeAccountField setVerifyCertNoFlag(String verifyCertNoFlag) {
    this.verifyCertNoFlag = verifyCertNoFlag;
    return this;
  }

  public void unsetVerifyCertNoFlag() {
    this.verifyCertNoFlag = null;
  }

  /** Returns true if field verifyCertNoFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetVerifyCertNoFlag() {
    return this.verifyCertNoFlag != null;
  }

  public void setVerifyCertNoFlagIsSet(boolean value) {
    if (!value) {
      this.verifyCertNoFlag = null;
    }
  }

  public String getCurrencyID() {
    return this.currencyID;
  }

  public CThostFtdcChangeAccountField setCurrencyID(String currencyID) {
    this.currencyID = currencyID;
    return this;
  }

  public void unsetCurrencyID() {
    this.currencyID = null;
  }

  /** Returns true if field currencyID is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencyID() {
    return this.currencyID != null;
  }

  public void setCurrencyIDIsSet(boolean value) {
    if (!value) {
      this.currencyID = null;
    }
  }

  public String getBrokerIDByBank() {
    return this.brokerIDByBank;
  }

  public CThostFtdcChangeAccountField setBrokerIDByBank(String brokerIDByBank) {
    this.brokerIDByBank = brokerIDByBank;
    return this;
  }

  public void unsetBrokerIDByBank() {
    this.brokerIDByBank = null;
  }

  /** Returns true if field brokerIDByBank is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerIDByBank() {
    return this.brokerIDByBank != null;
  }

  public void setBrokerIDByBankIsSet(boolean value) {
    if (!value) {
      this.brokerIDByBank = null;
    }
  }

  public String getBankPwdFlag() {
    return this.bankPwdFlag;
  }

  public CThostFtdcChangeAccountField setBankPwdFlag(String bankPwdFlag) {
    this.bankPwdFlag = bankPwdFlag;
    return this;
  }

  public void unsetBankPwdFlag() {
    this.bankPwdFlag = null;
  }

  /** Returns true if field bankPwdFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetBankPwdFlag() {
    return this.bankPwdFlag != null;
  }

  public void setBankPwdFlagIsSet(boolean value) {
    if (!value) {
      this.bankPwdFlag = null;
    }
  }

  public String getSecuPwdFlag() {
    return this.secuPwdFlag;
  }

  public CThostFtdcChangeAccountField setSecuPwdFlag(String secuPwdFlag) {
    this.secuPwdFlag = secuPwdFlag;
    return this;
  }

  public void unsetSecuPwdFlag() {
    this.secuPwdFlag = null;
  }

  /** Returns true if field secuPwdFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetSecuPwdFlag() {
    return this.secuPwdFlag != null;
  }

  public void setSecuPwdFlagIsSet(boolean value) {
    if (!value) {
      this.secuPwdFlag = null;
    }
  }

  public int getTID() {
    return this.tID;
  }

  public CThostFtdcChangeAccountField setTID(int tID) {
    this.tID = tID;
    setTIDIsSet(true);
    return this;
  }

  public void unsetTID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TID_ISSET_ID);
  }

  /** Returns true if field tID is set (has been assigned a value) and false otherwise */
  public boolean isSetTID() {
    return EncodingUtils.testBit(__isset_bitfield, __TID_ISSET_ID);
  }

  public void setTIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TID_ISSET_ID, value);
  }

  public String getDigest() {
    return this.digest;
  }

  public CThostFtdcChangeAccountField setDigest(String digest) {
    this.digest = digest;
    return this;
  }

  public void unsetDigest() {
    this.digest = null;
  }

  /** Returns true if field digest is set (has been assigned a value) and false otherwise */
  public boolean isSetDigest() {
    return this.digest != null;
  }

  public void setDigestIsSet(boolean value) {
    if (!value) {
      this.digest = null;
    }
  }

  public int getErrorID() {
    return this.errorID;
  }

  public CThostFtdcChangeAccountField setErrorID(int errorID) {
    this.errorID = errorID;
    setErrorIDIsSet(true);
    return this;
  }

  public void unsetErrorID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ERRORID_ISSET_ID);
  }

  /** Returns true if field errorID is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorID() {
    return EncodingUtils.testBit(__isset_bitfield, __ERRORID_ISSET_ID);
  }

  public void setErrorIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ERRORID_ISSET_ID, value);
  }

  public String getErrormsg() {
    return this.errormsg;
  }

  public CThostFtdcChangeAccountField setErrormsg(String errormsg) {
    this.errormsg = errormsg;
    return this;
  }

  public void unsetErrormsg() {
    this.errormsg = null;
  }

  /** Returns true if field errormsg is set (has been assigned a value) and false otherwise */
  public boolean isSetErrormsg() {
    return this.errormsg != null;
  }

  public void setErrormsgIsSet(boolean value) {
    if (!value) {
      this.errormsg = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRADE_CODE:
      if (value == null) {
        unsetTradeCode();
      } else {
        setTradeCode((String)value);
      }
      break;

    case BANK_ID:
      if (value == null) {
        unsetBankID();
      } else {
        setBankID((String)value);
      }
      break;

    case BANK_BRANCH_ID:
      if (value == null) {
        unsetBankBranchID();
      } else {
        setBankBranchID((String)value);
      }
      break;

    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case BROKER_BRANCH_ID:
      if (value == null) {
        unsetBrokerBranchID();
      } else {
        setBrokerBranchID((String)value);
      }
      break;

    case TRADE_DATE:
      if (value == null) {
        unsetTradeDate();
      } else {
        setTradeDate((String)value);
      }
      break;

    case TRADE_TIME:
      if (value == null) {
        unsetTradeTime();
      } else {
        setTradeTime((String)value);
      }
      break;

    case BANK_SERIAL:
      if (value == null) {
        unsetBankSerial();
      } else {
        setBankSerial((String)value);
      }
      break;

    case TRADING_DAY:
      if (value == null) {
        unsetTradingDay();
      } else {
        setTradingDay((String)value);
      }
      break;

    case PLATE_SERIAL:
      if (value == null) {
        unsetPlateSerial();
      } else {
        setPlateSerial((Integer)value);
      }
      break;

    case LAST_FRAGMENT:
      if (value == null) {
        unsetLastFragment();
      } else {
        setLastFragment((String)value);
      }
      break;

    case SESSION_ID:
      if (value == null) {
        unsetSessionID();
      } else {
        setSessionID((Integer)value);
      }
      break;

    case CUSTOMER_NAME:
      if (value == null) {
        unsetCustomerName();
      } else {
        setCustomerName((String)value);
      }
      break;

    case ID_CARD_TYPE:
      if (value == null) {
        unsetIdCardType();
      } else {
        setIdCardType((String)value);
      }
      break;

    case IDENTIFIED_CARD_NO:
      if (value == null) {
        unsetIdentifiedCardNo();
      } else {
        setIdentifiedCardNo((String)value);
      }
      break;

    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((String)value);
      }
      break;

    case COUNTRY_CODE:
      if (value == null) {
        unsetCountryCode();
      } else {
        setCountryCode((String)value);
      }
      break;

    case CUST_TYPE:
      if (value == null) {
        unsetCustType();
      } else {
        setCustType((String)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case ZIP_CODE:
      if (value == null) {
        unsetZipCode();
      } else {
        setZipCode((String)value);
      }
      break;

    case TELEPHONE:
      if (value == null) {
        unsetTelephone();
      } else {
        setTelephone((String)value);
      }
      break;

    case MOBILE_PHONE:
      if (value == null) {
        unsetMobilePhone();
      } else {
        setMobilePhone((String)value);
      }
      break;

    case FAX:
      if (value == null) {
        unsetFax();
      } else {
        setFax((String)value);
      }
      break;

    case E_MAIL:
      if (value == null) {
        unsetEMail();
      } else {
        setEMail((String)value);
      }
      break;

    case MONEY_ACCOUNT_STATUS:
      if (value == null) {
        unsetMoneyAccountStatus();
      } else {
        setMoneyAccountStatus((String)value);
      }
      break;

    case BANK_ACCOUNT:
      if (value == null) {
        unsetBankAccount();
      } else {
        setBankAccount((String)value);
      }
      break;

    case BANK_PASS_WORD:
      if (value == null) {
        unsetBankPassWord();
      } else {
        setBankPassWord((String)value);
      }
      break;

    case NEW_BANK_ACCOUNT:
      if (value == null) {
        unsetNewBankAccount();
      } else {
        setNewBankAccount((String)value);
      }
      break;

    case NEW_BANK_PASS_WORD:
      if (value == null) {
        unsetNewBankPassWord();
      } else {
        setNewBankPassWord((String)value);
      }
      break;

    case ACCOUNT_ID:
      if (value == null) {
        unsetAccountID();
      } else {
        setAccountID((String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    case BANK_ACC_TYPE:
      if (value == null) {
        unsetBankAccType();
      } else {
        setBankAccType((String)value);
      }
      break;

    case INSTALL_ID:
      if (value == null) {
        unsetInstallID();
      } else {
        setInstallID((Integer)value);
      }
      break;

    case VERIFY_CERT_NO_FLAG:
      if (value == null) {
        unsetVerifyCertNoFlag();
      } else {
        setVerifyCertNoFlag((String)value);
      }
      break;

    case CURRENCY_ID:
      if (value == null) {
        unsetCurrencyID();
      } else {
        setCurrencyID((String)value);
      }
      break;

    case BROKER_IDBY_BANK:
      if (value == null) {
        unsetBrokerIDByBank();
      } else {
        setBrokerIDByBank((String)value);
      }
      break;

    case BANK_PWD_FLAG:
      if (value == null) {
        unsetBankPwdFlag();
      } else {
        setBankPwdFlag((String)value);
      }
      break;

    case SECU_PWD_FLAG:
      if (value == null) {
        unsetSecuPwdFlag();
      } else {
        setSecuPwdFlag((String)value);
      }
      break;

    case T_ID:
      if (value == null) {
        unsetTID();
      } else {
        setTID((Integer)value);
      }
      break;

    case DIGEST:
      if (value == null) {
        unsetDigest();
      } else {
        setDigest((String)value);
      }
      break;

    case ERROR_ID:
      if (value == null) {
        unsetErrorID();
      } else {
        setErrorID((Integer)value);
      }
      break;

    case ERRORMSG:
      if (value == null) {
        unsetErrormsg();
      } else {
        setErrormsg((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRADE_CODE:
      return getTradeCode();

    case BANK_ID:
      return getBankID();

    case BANK_BRANCH_ID:
      return getBankBranchID();

    case BROKER_ID:
      return getBrokerID();

    case BROKER_BRANCH_ID:
      return getBrokerBranchID();

    case TRADE_DATE:
      return getTradeDate();

    case TRADE_TIME:
      return getTradeTime();

    case BANK_SERIAL:
      return getBankSerial();

    case TRADING_DAY:
      return getTradingDay();

    case PLATE_SERIAL:
      return Integer.valueOf(getPlateSerial());

    case LAST_FRAGMENT:
      return getLastFragment();

    case SESSION_ID:
      return Integer.valueOf(getSessionID());

    case CUSTOMER_NAME:
      return getCustomerName();

    case ID_CARD_TYPE:
      return getIdCardType();

    case IDENTIFIED_CARD_NO:
      return getIdentifiedCardNo();

    case GENDER:
      return getGender();

    case COUNTRY_CODE:
      return getCountryCode();

    case CUST_TYPE:
      return getCustType();

    case ADDRESS:
      return getAddress();

    case ZIP_CODE:
      return getZipCode();

    case TELEPHONE:
      return getTelephone();

    case MOBILE_PHONE:
      return getMobilePhone();

    case FAX:
      return getFax();

    case E_MAIL:
      return getEMail();

    case MONEY_ACCOUNT_STATUS:
      return getMoneyAccountStatus();

    case BANK_ACCOUNT:
      return getBankAccount();

    case BANK_PASS_WORD:
      return getBankPassWord();

    case NEW_BANK_ACCOUNT:
      return getNewBankAccount();

    case NEW_BANK_PASS_WORD:
      return getNewBankPassWord();

    case ACCOUNT_ID:
      return getAccountID();

    case PASSWORD:
      return getPassword();

    case BANK_ACC_TYPE:
      return getBankAccType();

    case INSTALL_ID:
      return Integer.valueOf(getInstallID());

    case VERIFY_CERT_NO_FLAG:
      return getVerifyCertNoFlag();

    case CURRENCY_ID:
      return getCurrencyID();

    case BROKER_IDBY_BANK:
      return getBrokerIDByBank();

    case BANK_PWD_FLAG:
      return getBankPwdFlag();

    case SECU_PWD_FLAG:
      return getSecuPwdFlag();

    case T_ID:
      return Integer.valueOf(getTID());

    case DIGEST:
      return getDigest();

    case ERROR_ID:
      return Integer.valueOf(getErrorID());

    case ERRORMSG:
      return getErrormsg();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRADE_CODE:
      return isSetTradeCode();
    case BANK_ID:
      return isSetBankID();
    case BANK_BRANCH_ID:
      return isSetBankBranchID();
    case BROKER_ID:
      return isSetBrokerID();
    case BROKER_BRANCH_ID:
      return isSetBrokerBranchID();
    case TRADE_DATE:
      return isSetTradeDate();
    case TRADE_TIME:
      return isSetTradeTime();
    case BANK_SERIAL:
      return isSetBankSerial();
    case TRADING_DAY:
      return isSetTradingDay();
    case PLATE_SERIAL:
      return isSetPlateSerial();
    case LAST_FRAGMENT:
      return isSetLastFragment();
    case SESSION_ID:
      return isSetSessionID();
    case CUSTOMER_NAME:
      return isSetCustomerName();
    case ID_CARD_TYPE:
      return isSetIdCardType();
    case IDENTIFIED_CARD_NO:
      return isSetIdentifiedCardNo();
    case GENDER:
      return isSetGender();
    case COUNTRY_CODE:
      return isSetCountryCode();
    case CUST_TYPE:
      return isSetCustType();
    case ADDRESS:
      return isSetAddress();
    case ZIP_CODE:
      return isSetZipCode();
    case TELEPHONE:
      return isSetTelephone();
    case MOBILE_PHONE:
      return isSetMobilePhone();
    case FAX:
      return isSetFax();
    case E_MAIL:
      return isSetEMail();
    case MONEY_ACCOUNT_STATUS:
      return isSetMoneyAccountStatus();
    case BANK_ACCOUNT:
      return isSetBankAccount();
    case BANK_PASS_WORD:
      return isSetBankPassWord();
    case NEW_BANK_ACCOUNT:
      return isSetNewBankAccount();
    case NEW_BANK_PASS_WORD:
      return isSetNewBankPassWord();
    case ACCOUNT_ID:
      return isSetAccountID();
    case PASSWORD:
      return isSetPassword();
    case BANK_ACC_TYPE:
      return isSetBankAccType();
    case INSTALL_ID:
      return isSetInstallID();
    case VERIFY_CERT_NO_FLAG:
      return isSetVerifyCertNoFlag();
    case CURRENCY_ID:
      return isSetCurrencyID();
    case BROKER_IDBY_BANK:
      return isSetBrokerIDByBank();
    case BANK_PWD_FLAG:
      return isSetBankPwdFlag();
    case SECU_PWD_FLAG:
      return isSetSecuPwdFlag();
    case T_ID:
      return isSetTID();
    case DIGEST:
      return isSetDigest();
    case ERROR_ID:
      return isSetErrorID();
    case ERRORMSG:
      return isSetErrormsg();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcChangeAccountField)
      return this.equals((CThostFtdcChangeAccountField)that);
    return false;
  }

  public boolean equals(CThostFtdcChangeAccountField that) {
    if (that == null)
      return false;

    boolean this_present_tradeCode = true && this.isSetTradeCode();
    boolean that_present_tradeCode = true && that.isSetTradeCode();
    if (this_present_tradeCode || that_present_tradeCode) {
      if (!(this_present_tradeCode && that_present_tradeCode))
        return false;
      if (!this.tradeCode.equals(that.tradeCode))
        return false;
    }

    boolean this_present_bankID = true && this.isSetBankID();
    boolean that_present_bankID = true && that.isSetBankID();
    if (this_present_bankID || that_present_bankID) {
      if (!(this_present_bankID && that_present_bankID))
        return false;
      if (!this.bankID.equals(that.bankID))
        return false;
    }

    boolean this_present_bankBranchID = true && this.isSetBankBranchID();
    boolean that_present_bankBranchID = true && that.isSetBankBranchID();
    if (this_present_bankBranchID || that_present_bankBranchID) {
      if (!(this_present_bankBranchID && that_present_bankBranchID))
        return false;
      if (!this.bankBranchID.equals(that.bankBranchID))
        return false;
    }

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_brokerBranchID = true && this.isSetBrokerBranchID();
    boolean that_present_brokerBranchID = true && that.isSetBrokerBranchID();
    if (this_present_brokerBranchID || that_present_brokerBranchID) {
      if (!(this_present_brokerBranchID && that_present_brokerBranchID))
        return false;
      if (!this.brokerBranchID.equals(that.brokerBranchID))
        return false;
    }

    boolean this_present_tradeDate = true && this.isSetTradeDate();
    boolean that_present_tradeDate = true && that.isSetTradeDate();
    if (this_present_tradeDate || that_present_tradeDate) {
      if (!(this_present_tradeDate && that_present_tradeDate))
        return false;
      if (!this.tradeDate.equals(that.tradeDate))
        return false;
    }

    boolean this_present_tradeTime = true && this.isSetTradeTime();
    boolean that_present_tradeTime = true && that.isSetTradeTime();
    if (this_present_tradeTime || that_present_tradeTime) {
      if (!(this_present_tradeTime && that_present_tradeTime))
        return false;
      if (!this.tradeTime.equals(that.tradeTime))
        return false;
    }

    boolean this_present_bankSerial = true && this.isSetBankSerial();
    boolean that_present_bankSerial = true && that.isSetBankSerial();
    if (this_present_bankSerial || that_present_bankSerial) {
      if (!(this_present_bankSerial && that_present_bankSerial))
        return false;
      if (!this.bankSerial.equals(that.bankSerial))
        return false;
    }

    boolean this_present_tradingDay = true && this.isSetTradingDay();
    boolean that_present_tradingDay = true && that.isSetTradingDay();
    if (this_present_tradingDay || that_present_tradingDay) {
      if (!(this_present_tradingDay && that_present_tradingDay))
        return false;
      if (!this.tradingDay.equals(that.tradingDay))
        return false;
    }

    boolean this_present_plateSerial = true;
    boolean that_present_plateSerial = true;
    if (this_present_plateSerial || that_present_plateSerial) {
      if (!(this_present_plateSerial && that_present_plateSerial))
        return false;
      if (this.plateSerial != that.plateSerial)
        return false;
    }

    boolean this_present_lastFragment = true && this.isSetLastFragment();
    boolean that_present_lastFragment = true && that.isSetLastFragment();
    if (this_present_lastFragment || that_present_lastFragment) {
      if (!(this_present_lastFragment && that_present_lastFragment))
        return false;
      if (!this.lastFragment.equals(that.lastFragment))
        return false;
    }

    boolean this_present_sessionID = true;
    boolean that_present_sessionID = true;
    if (this_present_sessionID || that_present_sessionID) {
      if (!(this_present_sessionID && that_present_sessionID))
        return false;
      if (this.sessionID != that.sessionID)
        return false;
    }

    boolean this_present_customerName = true && this.isSetCustomerName();
    boolean that_present_customerName = true && that.isSetCustomerName();
    if (this_present_customerName || that_present_customerName) {
      if (!(this_present_customerName && that_present_customerName))
        return false;
      if (!this.customerName.equals(that.customerName))
        return false;
    }

    boolean this_present_idCardType = true && this.isSetIdCardType();
    boolean that_present_idCardType = true && that.isSetIdCardType();
    if (this_present_idCardType || that_present_idCardType) {
      if (!(this_present_idCardType && that_present_idCardType))
        return false;
      if (!this.idCardType.equals(that.idCardType))
        return false;
    }

    boolean this_present_identifiedCardNo = true && this.isSetIdentifiedCardNo();
    boolean that_present_identifiedCardNo = true && that.isSetIdentifiedCardNo();
    if (this_present_identifiedCardNo || that_present_identifiedCardNo) {
      if (!(this_present_identifiedCardNo && that_present_identifiedCardNo))
        return false;
      if (!this.identifiedCardNo.equals(that.identifiedCardNo))
        return false;
    }

    boolean this_present_gender = true && this.isSetGender();
    boolean that_present_gender = true && that.isSetGender();
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (!this.gender.equals(that.gender))
        return false;
    }

    boolean this_present_countryCode = true && this.isSetCountryCode();
    boolean that_present_countryCode = true && that.isSetCountryCode();
    if (this_present_countryCode || that_present_countryCode) {
      if (!(this_present_countryCode && that_present_countryCode))
        return false;
      if (!this.countryCode.equals(that.countryCode))
        return false;
    }

    boolean this_present_custType = true && this.isSetCustType();
    boolean that_present_custType = true && that.isSetCustType();
    if (this_present_custType || that_present_custType) {
      if (!(this_present_custType && that_present_custType))
        return false;
      if (!this.custType.equals(that.custType))
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_zipCode = true && this.isSetZipCode();
    boolean that_present_zipCode = true && that.isSetZipCode();
    if (this_present_zipCode || that_present_zipCode) {
      if (!(this_present_zipCode && that_present_zipCode))
        return false;
      if (!this.zipCode.equals(that.zipCode))
        return false;
    }

    boolean this_present_telephone = true && this.isSetTelephone();
    boolean that_present_telephone = true && that.isSetTelephone();
    if (this_present_telephone || that_present_telephone) {
      if (!(this_present_telephone && that_present_telephone))
        return false;
      if (!this.telephone.equals(that.telephone))
        return false;
    }

    boolean this_present_mobilePhone = true && this.isSetMobilePhone();
    boolean that_present_mobilePhone = true && that.isSetMobilePhone();
    if (this_present_mobilePhone || that_present_mobilePhone) {
      if (!(this_present_mobilePhone && that_present_mobilePhone))
        return false;
      if (!this.mobilePhone.equals(that.mobilePhone))
        return false;
    }

    boolean this_present_fax = true && this.isSetFax();
    boolean that_present_fax = true && that.isSetFax();
    if (this_present_fax || that_present_fax) {
      if (!(this_present_fax && that_present_fax))
        return false;
      if (!this.fax.equals(that.fax))
        return false;
    }

    boolean this_present_eMail = true && this.isSetEMail();
    boolean that_present_eMail = true && that.isSetEMail();
    if (this_present_eMail || that_present_eMail) {
      if (!(this_present_eMail && that_present_eMail))
        return false;
      if (!this.eMail.equals(that.eMail))
        return false;
    }

    boolean this_present_moneyAccountStatus = true && this.isSetMoneyAccountStatus();
    boolean that_present_moneyAccountStatus = true && that.isSetMoneyAccountStatus();
    if (this_present_moneyAccountStatus || that_present_moneyAccountStatus) {
      if (!(this_present_moneyAccountStatus && that_present_moneyAccountStatus))
        return false;
      if (!this.moneyAccountStatus.equals(that.moneyAccountStatus))
        return false;
    }

    boolean this_present_bankAccount = true && this.isSetBankAccount();
    boolean that_present_bankAccount = true && that.isSetBankAccount();
    if (this_present_bankAccount || that_present_bankAccount) {
      if (!(this_present_bankAccount && that_present_bankAccount))
        return false;
      if (!this.bankAccount.equals(that.bankAccount))
        return false;
    }

    boolean this_present_bankPassWord = true && this.isSetBankPassWord();
    boolean that_present_bankPassWord = true && that.isSetBankPassWord();
    if (this_present_bankPassWord || that_present_bankPassWord) {
      if (!(this_present_bankPassWord && that_present_bankPassWord))
        return false;
      if (!this.bankPassWord.equals(that.bankPassWord))
        return false;
    }

    boolean this_present_newBankAccount = true && this.isSetNewBankAccount();
    boolean that_present_newBankAccount = true && that.isSetNewBankAccount();
    if (this_present_newBankAccount || that_present_newBankAccount) {
      if (!(this_present_newBankAccount && that_present_newBankAccount))
        return false;
      if (!this.newBankAccount.equals(that.newBankAccount))
        return false;
    }

    boolean this_present_newBankPassWord = true && this.isSetNewBankPassWord();
    boolean that_present_newBankPassWord = true && that.isSetNewBankPassWord();
    if (this_present_newBankPassWord || that_present_newBankPassWord) {
      if (!(this_present_newBankPassWord && that_present_newBankPassWord))
        return false;
      if (!this.newBankPassWord.equals(that.newBankPassWord))
        return false;
    }

    boolean this_present_accountID = true && this.isSetAccountID();
    boolean that_present_accountID = true && that.isSetAccountID();
    if (this_present_accountID || that_present_accountID) {
      if (!(this_present_accountID && that_present_accountID))
        return false;
      if (!this.accountID.equals(that.accountID))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_bankAccType = true && this.isSetBankAccType();
    boolean that_present_bankAccType = true && that.isSetBankAccType();
    if (this_present_bankAccType || that_present_bankAccType) {
      if (!(this_present_bankAccType && that_present_bankAccType))
        return false;
      if (!this.bankAccType.equals(that.bankAccType))
        return false;
    }

    boolean this_present_installID = true;
    boolean that_present_installID = true;
    if (this_present_installID || that_present_installID) {
      if (!(this_present_installID && that_present_installID))
        return false;
      if (this.installID != that.installID)
        return false;
    }

    boolean this_present_verifyCertNoFlag = true && this.isSetVerifyCertNoFlag();
    boolean that_present_verifyCertNoFlag = true && that.isSetVerifyCertNoFlag();
    if (this_present_verifyCertNoFlag || that_present_verifyCertNoFlag) {
      if (!(this_present_verifyCertNoFlag && that_present_verifyCertNoFlag))
        return false;
      if (!this.verifyCertNoFlag.equals(that.verifyCertNoFlag))
        return false;
    }

    boolean this_present_currencyID = true && this.isSetCurrencyID();
    boolean that_present_currencyID = true && that.isSetCurrencyID();
    if (this_present_currencyID || that_present_currencyID) {
      if (!(this_present_currencyID && that_present_currencyID))
        return false;
      if (!this.currencyID.equals(that.currencyID))
        return false;
    }

    boolean this_present_brokerIDByBank = true && this.isSetBrokerIDByBank();
    boolean that_present_brokerIDByBank = true && that.isSetBrokerIDByBank();
    if (this_present_brokerIDByBank || that_present_brokerIDByBank) {
      if (!(this_present_brokerIDByBank && that_present_brokerIDByBank))
        return false;
      if (!this.brokerIDByBank.equals(that.brokerIDByBank))
        return false;
    }

    boolean this_present_bankPwdFlag = true && this.isSetBankPwdFlag();
    boolean that_present_bankPwdFlag = true && that.isSetBankPwdFlag();
    if (this_present_bankPwdFlag || that_present_bankPwdFlag) {
      if (!(this_present_bankPwdFlag && that_present_bankPwdFlag))
        return false;
      if (!this.bankPwdFlag.equals(that.bankPwdFlag))
        return false;
    }

    boolean this_present_secuPwdFlag = true && this.isSetSecuPwdFlag();
    boolean that_present_secuPwdFlag = true && that.isSetSecuPwdFlag();
    if (this_present_secuPwdFlag || that_present_secuPwdFlag) {
      if (!(this_present_secuPwdFlag && that_present_secuPwdFlag))
        return false;
      if (!this.secuPwdFlag.equals(that.secuPwdFlag))
        return false;
    }

    boolean this_present_tID = true;
    boolean that_present_tID = true;
    if (this_present_tID || that_present_tID) {
      if (!(this_present_tID && that_present_tID))
        return false;
      if (this.tID != that.tID)
        return false;
    }

    boolean this_present_digest = true && this.isSetDigest();
    boolean that_present_digest = true && that.isSetDigest();
    if (this_present_digest || that_present_digest) {
      if (!(this_present_digest && that_present_digest))
        return false;
      if (!this.digest.equals(that.digest))
        return false;
    }

    boolean this_present_errorID = true;
    boolean that_present_errorID = true;
    if (this_present_errorID || that_present_errorID) {
      if (!(this_present_errorID && that_present_errorID))
        return false;
      if (this.errorID != that.errorID)
        return false;
    }

    boolean this_present_errormsg = true && this.isSetErrormsg();
    boolean that_present_errormsg = true && that.isSetErrormsg();
    if (this_present_errormsg || that_present_errormsg) {
      if (!(this_present_errormsg && that_present_errormsg))
        return false;
      if (!this.errormsg.equals(that.errormsg))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcChangeAccountField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTradeCode()).compareTo(other.isSetTradeCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeCode, other.tradeCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankID()).compareTo(other.isSetBankID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankID, other.bankID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankBranchID()).compareTo(other.isSetBankBranchID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankBranchID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankBranchID, other.bankBranchID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerBranchID()).compareTo(other.isSetBrokerBranchID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerBranchID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerBranchID, other.brokerBranchID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeDate()).compareTo(other.isSetTradeDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeDate, other.tradeDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeTime()).compareTo(other.isSetTradeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeTime, other.tradeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankSerial()).compareTo(other.isSetBankSerial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankSerial()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankSerial, other.bankSerial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradingDay()).compareTo(other.isSetTradingDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradingDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradingDay, other.tradingDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlateSerial()).compareTo(other.isSetPlateSerial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlateSerial()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plateSerial, other.plateSerial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastFragment()).compareTo(other.isSetLastFragment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastFragment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastFragment, other.lastFragment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomerName()).compareTo(other.isSetCustomerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customerName, other.customerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdCardType()).compareTo(other.isSetIdCardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdCardType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idCardType, other.idCardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentifiedCardNo()).compareTo(other.isSetIdentifiedCardNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentifiedCardNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identifiedCardNo, other.identifiedCardNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGender()).compareTo(other.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, other.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountryCode()).compareTo(other.isSetCountryCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountryCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryCode, other.countryCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustType()).compareTo(other.isSetCustType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.custType, other.custType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZipCode()).compareTo(other.isSetZipCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZipCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zipCode, other.zipCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTelephone()).compareTo(other.isSetTelephone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTelephone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.telephone, other.telephone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobilePhone()).compareTo(other.isSetMobilePhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobilePhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobilePhone, other.mobilePhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFax()).compareTo(other.isSetFax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fax, other.fax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEMail()).compareTo(other.isSetEMail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEMail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eMail, other.eMail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoneyAccountStatus()).compareTo(other.isSetMoneyAccountStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoneyAccountStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moneyAccountStatus, other.moneyAccountStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankAccount()).compareTo(other.isSetBankAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankAccount, other.bankAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankPassWord()).compareTo(other.isSetBankPassWord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankPassWord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankPassWord, other.bankPassWord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewBankAccount()).compareTo(other.isSetNewBankAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewBankAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newBankAccount, other.newBankAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewBankPassWord()).compareTo(other.isSetNewBankPassWord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewBankPassWord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newBankPassWord, other.newBankPassWord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountID()).compareTo(other.isSetAccountID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountID, other.accountID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankAccType()).compareTo(other.isSetBankAccType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankAccType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankAccType, other.bankAccType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstallID()).compareTo(other.isSetInstallID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstallID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.installID, other.installID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVerifyCertNoFlag()).compareTo(other.isSetVerifyCertNoFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVerifyCertNoFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verifyCertNoFlag, other.verifyCertNoFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrencyID()).compareTo(other.isSetCurrencyID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencyID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currencyID, other.currencyID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerIDByBank()).compareTo(other.isSetBrokerIDByBank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerIDByBank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerIDByBank, other.brokerIDByBank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankPwdFlag()).compareTo(other.isSetBankPwdFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankPwdFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankPwdFlag, other.bankPwdFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecuPwdFlag()).compareTo(other.isSetSecuPwdFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecuPwdFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secuPwdFlag, other.secuPwdFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTID()).compareTo(other.isSetTID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tID, other.tID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDigest()).compareTo(other.isSetDigest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDigest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.digest, other.digest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrorID()).compareTo(other.isSetErrorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorID, other.errorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrormsg()).compareTo(other.isSetErrormsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrormsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errormsg, other.errormsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcChangeAccountField(");
    boolean first = true;

    sb.append("tradeCode:");
    if (this.tradeCode == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankID:");
    if (this.bankID == null) {
      sb.append("null");
    } else {
      sb.append(this.bankID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankBranchID:");
    if (this.bankBranchID == null) {
      sb.append("null");
    } else {
      sb.append(this.bankBranchID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerBranchID:");
    if (this.brokerBranchID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerBranchID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeDate:");
    if (this.tradeDate == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeTime:");
    if (this.tradeTime == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankSerial:");
    if (this.bankSerial == null) {
      sb.append("null");
    } else {
      sb.append(this.bankSerial);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradingDay:");
    if (this.tradingDay == null) {
      sb.append("null");
    } else {
      sb.append(this.tradingDay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("plateSerial:");
    sb.append(this.plateSerial);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastFragment:");
    if (this.lastFragment == null) {
      sb.append("null");
    } else {
      sb.append(this.lastFragment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sessionID:");
    sb.append(this.sessionID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("customerName:");
    if (this.customerName == null) {
      sb.append("null");
    } else {
      sb.append(this.customerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("idCardType:");
    if (this.idCardType == null) {
      sb.append("null");
    } else {
      sb.append(this.idCardType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identifiedCardNo:");
    if (this.identifiedCardNo == null) {
      sb.append("null");
    } else {
      sb.append(this.identifiedCardNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gender:");
    if (this.gender == null) {
      sb.append("null");
    } else {
      sb.append(this.gender);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("countryCode:");
    if (this.countryCode == null) {
      sb.append("null");
    } else {
      sb.append(this.countryCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("custType:");
    if (this.custType == null) {
      sb.append("null");
    } else {
      sb.append(this.custType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      sb.append(this.address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("zipCode:");
    if (this.zipCode == null) {
      sb.append("null");
    } else {
      sb.append(this.zipCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("telephone:");
    if (this.telephone == null) {
      sb.append("null");
    } else {
      sb.append(this.telephone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobilePhone:");
    if (this.mobilePhone == null) {
      sb.append("null");
    } else {
      sb.append(this.mobilePhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fax:");
    if (this.fax == null) {
      sb.append("null");
    } else {
      sb.append(this.fax);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eMail:");
    if (this.eMail == null) {
      sb.append("null");
    } else {
      sb.append(this.eMail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("moneyAccountStatus:");
    if (this.moneyAccountStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.moneyAccountStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankAccount:");
    if (this.bankAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.bankAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankPassWord:");
    if (this.bankPassWord == null) {
      sb.append("null");
    } else {
      sb.append(this.bankPassWord);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newBankAccount:");
    if (this.newBankAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.newBankAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newBankPassWord:");
    if (this.newBankPassWord == null) {
      sb.append("null");
    } else {
      sb.append(this.newBankPassWord);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountID:");
    if (this.accountID == null) {
      sb.append("null");
    } else {
      sb.append(this.accountID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankAccType:");
    if (this.bankAccType == null) {
      sb.append("null");
    } else {
      sb.append(this.bankAccType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("installID:");
    sb.append(this.installID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("verifyCertNoFlag:");
    if (this.verifyCertNoFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.verifyCertNoFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currencyID:");
    if (this.currencyID == null) {
      sb.append("null");
    } else {
      sb.append(this.currencyID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerIDByBank:");
    if (this.brokerIDByBank == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerIDByBank);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankPwdFlag:");
    if (this.bankPwdFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.bankPwdFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("secuPwdFlag:");
    if (this.secuPwdFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.secuPwdFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tID:");
    sb.append(this.tID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("digest:");
    if (this.digest == null) {
      sb.append("null");
    } else {
      sb.append(this.digest);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("errorID:");
    sb.append(this.errorID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errormsg:");
    if (this.errormsg == null) {
      sb.append("null");
    } else {
      sb.append(this.errormsg);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcChangeAccountFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcChangeAccountFieldStandardScheme getScheme() {
      return new CThostFtdcChangeAccountFieldStandardScheme();
    }
  }

  private static class CThostFtdcChangeAccountFieldStandardScheme extends StandardScheme<CThostFtdcChangeAccountField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcChangeAccountField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRADE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeCode = iprot.readString();
              struct.setTradeCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BANK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankID = iprot.readString();
              struct.setBankIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BANK_BRANCH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankBranchID = iprot.readString();
              struct.setBankBranchIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BROKER_BRANCH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerBranchID = iprot.readString();
              struct.setBrokerBranchIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRADE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeDate = iprot.readString();
              struct.setTradeDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TRADE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeTime = iprot.readString();
              struct.setTradeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BANK_SERIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankSerial = iprot.readString();
              struct.setBankSerialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TRADING_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradingDay = iprot.readString();
              struct.setTradingDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PLATE_SERIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.plateSerial = iprot.readI32();
              struct.setPlateSerialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LAST_FRAGMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastFragment = iprot.readString();
              struct.setLastFragmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sessionID = iprot.readI32();
              struct.setSessionIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CUSTOMER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.customerName = iprot.readString();
              struct.setCustomerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ID_CARD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.idCardType = iprot.readString();
              struct.setIdCardTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // IDENTIFIED_CARD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identifiedCardNo = iprot.readString();
              struct.setIdentifiedCardNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gender = iprot.readString();
              struct.setGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // COUNTRY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.countryCode = iprot.readString();
              struct.setCountryCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CUST_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.custType = iprot.readString();
              struct.setCustTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ZIP_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zipCode = iprot.readString();
              struct.setZipCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // TELEPHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.telephone = iprot.readString();
              struct.setTelephoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // MOBILE_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobilePhone = iprot.readString();
              struct.setMobilePhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // FAX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fax = iprot.readString();
              struct.setFaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // E_MAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eMail = iprot.readString();
              struct.setEMailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // MONEY_ACCOUNT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.moneyAccountStatus = iprot.readString();
              struct.setMoneyAccountStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // BANK_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankAccount = iprot.readString();
              struct.setBankAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // BANK_PASS_WORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankPassWord = iprot.readString();
              struct.setBankPassWordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // NEW_BANK_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newBankAccount = iprot.readString();
              struct.setNewBankAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // NEW_BANK_PASS_WORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newBankPassWord = iprot.readString();
              struct.setNewBankPassWordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountID = iprot.readString();
              struct.setAccountIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // BANK_ACC_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankAccType = iprot.readString();
              struct.setBankAccTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // INSTALL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.installID = iprot.readI32();
              struct.setInstallIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // VERIFY_CERT_NO_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.verifyCertNoFlag = iprot.readString();
              struct.setVerifyCertNoFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // CURRENCY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currencyID = iprot.readString();
              struct.setCurrencyIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // BROKER_IDBY_BANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerIDByBank = iprot.readString();
              struct.setBrokerIDByBankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // BANK_PWD_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankPwdFlag = iprot.readString();
              struct.setBankPwdFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // SECU_PWD_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.secuPwdFlag = iprot.readString();
              struct.setSecuPwdFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // T_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tID = iprot.readI32();
              struct.setTIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // DIGEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.digest = iprot.readString();
              struct.setDigestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // ERROR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.errorID = iprot.readI32();
              struct.setErrorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // ERRORMSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errormsg = iprot.readString();
              struct.setErrormsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcChangeAccountField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tradeCode != null) {
        oprot.writeFieldBegin(TRADE_CODE_FIELD_DESC);
        oprot.writeString(struct.tradeCode);
        oprot.writeFieldEnd();
      }
      if (struct.bankID != null) {
        oprot.writeFieldBegin(BANK_ID_FIELD_DESC);
        oprot.writeString(struct.bankID);
        oprot.writeFieldEnd();
      }
      if (struct.bankBranchID != null) {
        oprot.writeFieldBegin(BANK_BRANCH_ID_FIELD_DESC);
        oprot.writeString(struct.bankBranchID);
        oprot.writeFieldEnd();
      }
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.brokerBranchID != null) {
        oprot.writeFieldBegin(BROKER_BRANCH_ID_FIELD_DESC);
        oprot.writeString(struct.brokerBranchID);
        oprot.writeFieldEnd();
      }
      if (struct.tradeDate != null) {
        oprot.writeFieldBegin(TRADE_DATE_FIELD_DESC);
        oprot.writeString(struct.tradeDate);
        oprot.writeFieldEnd();
      }
      if (struct.tradeTime != null) {
        oprot.writeFieldBegin(TRADE_TIME_FIELD_DESC);
        oprot.writeString(struct.tradeTime);
        oprot.writeFieldEnd();
      }
      if (struct.bankSerial != null) {
        oprot.writeFieldBegin(BANK_SERIAL_FIELD_DESC);
        oprot.writeString(struct.bankSerial);
        oprot.writeFieldEnd();
      }
      if (struct.tradingDay != null) {
        oprot.writeFieldBegin(TRADING_DAY_FIELD_DESC);
        oprot.writeString(struct.tradingDay);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PLATE_SERIAL_FIELD_DESC);
      oprot.writeI32(struct.plateSerial);
      oprot.writeFieldEnd();
      if (struct.lastFragment != null) {
        oprot.writeFieldBegin(LAST_FRAGMENT_FIELD_DESC);
        oprot.writeString(struct.lastFragment);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeI32(struct.sessionID);
      oprot.writeFieldEnd();
      if (struct.customerName != null) {
        oprot.writeFieldBegin(CUSTOMER_NAME_FIELD_DESC);
        oprot.writeString(struct.customerName);
        oprot.writeFieldEnd();
      }
      if (struct.idCardType != null) {
        oprot.writeFieldBegin(ID_CARD_TYPE_FIELD_DESC);
        oprot.writeString(struct.idCardType);
        oprot.writeFieldEnd();
      }
      if (struct.identifiedCardNo != null) {
        oprot.writeFieldBegin(IDENTIFIED_CARD_NO_FIELD_DESC);
        oprot.writeString(struct.identifiedCardNo);
        oprot.writeFieldEnd();
      }
      if (struct.gender != null) {
        oprot.writeFieldBegin(GENDER_FIELD_DESC);
        oprot.writeString(struct.gender);
        oprot.writeFieldEnd();
      }
      if (struct.countryCode != null) {
        oprot.writeFieldBegin(COUNTRY_CODE_FIELD_DESC);
        oprot.writeString(struct.countryCode);
        oprot.writeFieldEnd();
      }
      if (struct.custType != null) {
        oprot.writeFieldBegin(CUST_TYPE_FIELD_DESC);
        oprot.writeString(struct.custType);
        oprot.writeFieldEnd();
      }
      if (struct.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        oprot.writeString(struct.address);
        oprot.writeFieldEnd();
      }
      if (struct.zipCode != null) {
        oprot.writeFieldBegin(ZIP_CODE_FIELD_DESC);
        oprot.writeString(struct.zipCode);
        oprot.writeFieldEnd();
      }
      if (struct.telephone != null) {
        oprot.writeFieldBegin(TELEPHONE_FIELD_DESC);
        oprot.writeString(struct.telephone);
        oprot.writeFieldEnd();
      }
      if (struct.mobilePhone != null) {
        oprot.writeFieldBegin(MOBILE_PHONE_FIELD_DESC);
        oprot.writeString(struct.mobilePhone);
        oprot.writeFieldEnd();
      }
      if (struct.fax != null) {
        oprot.writeFieldBegin(FAX_FIELD_DESC);
        oprot.writeString(struct.fax);
        oprot.writeFieldEnd();
      }
      if (struct.eMail != null) {
        oprot.writeFieldBegin(E_MAIL_FIELD_DESC);
        oprot.writeString(struct.eMail);
        oprot.writeFieldEnd();
      }
      if (struct.moneyAccountStatus != null) {
        oprot.writeFieldBegin(MONEY_ACCOUNT_STATUS_FIELD_DESC);
        oprot.writeString(struct.moneyAccountStatus);
        oprot.writeFieldEnd();
      }
      if (struct.bankAccount != null) {
        oprot.writeFieldBegin(BANK_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.bankAccount);
        oprot.writeFieldEnd();
      }
      if (struct.bankPassWord != null) {
        oprot.writeFieldBegin(BANK_PASS_WORD_FIELD_DESC);
        oprot.writeString(struct.bankPassWord);
        oprot.writeFieldEnd();
      }
      if (struct.newBankAccount != null) {
        oprot.writeFieldBegin(NEW_BANK_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.newBankAccount);
        oprot.writeFieldEnd();
      }
      if (struct.newBankPassWord != null) {
        oprot.writeFieldBegin(NEW_BANK_PASS_WORD_FIELD_DESC);
        oprot.writeString(struct.newBankPassWord);
        oprot.writeFieldEnd();
      }
      if (struct.accountID != null) {
        oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
        oprot.writeString(struct.accountID);
        oprot.writeFieldEnd();
      }
      if (struct.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(struct.password);
        oprot.writeFieldEnd();
      }
      if (struct.bankAccType != null) {
        oprot.writeFieldBegin(BANK_ACC_TYPE_FIELD_DESC);
        oprot.writeString(struct.bankAccType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INSTALL_ID_FIELD_DESC);
      oprot.writeI32(struct.installID);
      oprot.writeFieldEnd();
      if (struct.verifyCertNoFlag != null) {
        oprot.writeFieldBegin(VERIFY_CERT_NO_FLAG_FIELD_DESC);
        oprot.writeString(struct.verifyCertNoFlag);
        oprot.writeFieldEnd();
      }
      if (struct.currencyID != null) {
        oprot.writeFieldBegin(CURRENCY_ID_FIELD_DESC);
        oprot.writeString(struct.currencyID);
        oprot.writeFieldEnd();
      }
      if (struct.brokerIDByBank != null) {
        oprot.writeFieldBegin(BROKER_IDBY_BANK_FIELD_DESC);
        oprot.writeString(struct.brokerIDByBank);
        oprot.writeFieldEnd();
      }
      if (struct.bankPwdFlag != null) {
        oprot.writeFieldBegin(BANK_PWD_FLAG_FIELD_DESC);
        oprot.writeString(struct.bankPwdFlag);
        oprot.writeFieldEnd();
      }
      if (struct.secuPwdFlag != null) {
        oprot.writeFieldBegin(SECU_PWD_FLAG_FIELD_DESC);
        oprot.writeString(struct.secuPwdFlag);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(T_ID_FIELD_DESC);
      oprot.writeI32(struct.tID);
      oprot.writeFieldEnd();
      if (struct.digest != null) {
        oprot.writeFieldBegin(DIGEST_FIELD_DESC);
        oprot.writeString(struct.digest);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ERROR_ID_FIELD_DESC);
      oprot.writeI32(struct.errorID);
      oprot.writeFieldEnd();
      if (struct.errormsg != null) {
        oprot.writeFieldBegin(ERRORMSG_FIELD_DESC);
        oprot.writeString(struct.errormsg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcChangeAccountFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcChangeAccountFieldTupleScheme getScheme() {
      return new CThostFtdcChangeAccountFieldTupleScheme();
    }
  }

  private static class CThostFtdcChangeAccountFieldTupleScheme extends TupleScheme<CThostFtdcChangeAccountField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcChangeAccountField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTradeCode()) {
        optionals.set(0);
      }
      if (struct.isSetBankID()) {
        optionals.set(1);
      }
      if (struct.isSetBankBranchID()) {
        optionals.set(2);
      }
      if (struct.isSetBrokerID()) {
        optionals.set(3);
      }
      if (struct.isSetBrokerBranchID()) {
        optionals.set(4);
      }
      if (struct.isSetTradeDate()) {
        optionals.set(5);
      }
      if (struct.isSetTradeTime()) {
        optionals.set(6);
      }
      if (struct.isSetBankSerial()) {
        optionals.set(7);
      }
      if (struct.isSetTradingDay()) {
        optionals.set(8);
      }
      if (struct.isSetPlateSerial()) {
        optionals.set(9);
      }
      if (struct.isSetLastFragment()) {
        optionals.set(10);
      }
      if (struct.isSetSessionID()) {
        optionals.set(11);
      }
      if (struct.isSetCustomerName()) {
        optionals.set(12);
      }
      if (struct.isSetIdCardType()) {
        optionals.set(13);
      }
      if (struct.isSetIdentifiedCardNo()) {
        optionals.set(14);
      }
      if (struct.isSetGender()) {
        optionals.set(15);
      }
      if (struct.isSetCountryCode()) {
        optionals.set(16);
      }
      if (struct.isSetCustType()) {
        optionals.set(17);
      }
      if (struct.isSetAddress()) {
        optionals.set(18);
      }
      if (struct.isSetZipCode()) {
        optionals.set(19);
      }
      if (struct.isSetTelephone()) {
        optionals.set(20);
      }
      if (struct.isSetMobilePhone()) {
        optionals.set(21);
      }
      if (struct.isSetFax()) {
        optionals.set(22);
      }
      if (struct.isSetEMail()) {
        optionals.set(23);
      }
      if (struct.isSetMoneyAccountStatus()) {
        optionals.set(24);
      }
      if (struct.isSetBankAccount()) {
        optionals.set(25);
      }
      if (struct.isSetBankPassWord()) {
        optionals.set(26);
      }
      if (struct.isSetNewBankAccount()) {
        optionals.set(27);
      }
      if (struct.isSetNewBankPassWord()) {
        optionals.set(28);
      }
      if (struct.isSetAccountID()) {
        optionals.set(29);
      }
      if (struct.isSetPassword()) {
        optionals.set(30);
      }
      if (struct.isSetBankAccType()) {
        optionals.set(31);
      }
      if (struct.isSetInstallID()) {
        optionals.set(32);
      }
      if (struct.isSetVerifyCertNoFlag()) {
        optionals.set(33);
      }
      if (struct.isSetCurrencyID()) {
        optionals.set(34);
      }
      if (struct.isSetBrokerIDByBank()) {
        optionals.set(35);
      }
      if (struct.isSetBankPwdFlag()) {
        optionals.set(36);
      }
      if (struct.isSetSecuPwdFlag()) {
        optionals.set(37);
      }
      if (struct.isSetTID()) {
        optionals.set(38);
      }
      if (struct.isSetDigest()) {
        optionals.set(39);
      }
      if (struct.isSetErrorID()) {
        optionals.set(40);
      }
      if (struct.isSetErrormsg()) {
        optionals.set(41);
      }
      oprot.writeBitSet(optionals, 42);
      if (struct.isSetTradeCode()) {
        oprot.writeString(struct.tradeCode);
      }
      if (struct.isSetBankID()) {
        oprot.writeString(struct.bankID);
      }
      if (struct.isSetBankBranchID()) {
        oprot.writeString(struct.bankBranchID);
      }
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetBrokerBranchID()) {
        oprot.writeString(struct.brokerBranchID);
      }
      if (struct.isSetTradeDate()) {
        oprot.writeString(struct.tradeDate);
      }
      if (struct.isSetTradeTime()) {
        oprot.writeString(struct.tradeTime);
      }
      if (struct.isSetBankSerial()) {
        oprot.writeString(struct.bankSerial);
      }
      if (struct.isSetTradingDay()) {
        oprot.writeString(struct.tradingDay);
      }
      if (struct.isSetPlateSerial()) {
        oprot.writeI32(struct.plateSerial);
      }
      if (struct.isSetLastFragment()) {
        oprot.writeString(struct.lastFragment);
      }
      if (struct.isSetSessionID()) {
        oprot.writeI32(struct.sessionID);
      }
      if (struct.isSetCustomerName()) {
        oprot.writeString(struct.customerName);
      }
      if (struct.isSetIdCardType()) {
        oprot.writeString(struct.idCardType);
      }
      if (struct.isSetIdentifiedCardNo()) {
        oprot.writeString(struct.identifiedCardNo);
      }
      if (struct.isSetGender()) {
        oprot.writeString(struct.gender);
      }
      if (struct.isSetCountryCode()) {
        oprot.writeString(struct.countryCode);
      }
      if (struct.isSetCustType()) {
        oprot.writeString(struct.custType);
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
      if (struct.isSetZipCode()) {
        oprot.writeString(struct.zipCode);
      }
      if (struct.isSetTelephone()) {
        oprot.writeString(struct.telephone);
      }
      if (struct.isSetMobilePhone()) {
        oprot.writeString(struct.mobilePhone);
      }
      if (struct.isSetFax()) {
        oprot.writeString(struct.fax);
      }
      if (struct.isSetEMail()) {
        oprot.writeString(struct.eMail);
      }
      if (struct.isSetMoneyAccountStatus()) {
        oprot.writeString(struct.moneyAccountStatus);
      }
      if (struct.isSetBankAccount()) {
        oprot.writeString(struct.bankAccount);
      }
      if (struct.isSetBankPassWord()) {
        oprot.writeString(struct.bankPassWord);
      }
      if (struct.isSetNewBankAccount()) {
        oprot.writeString(struct.newBankAccount);
      }
      if (struct.isSetNewBankPassWord()) {
        oprot.writeString(struct.newBankPassWord);
      }
      if (struct.isSetAccountID()) {
        oprot.writeString(struct.accountID);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetBankAccType()) {
        oprot.writeString(struct.bankAccType);
      }
      if (struct.isSetInstallID()) {
        oprot.writeI32(struct.installID);
      }
      if (struct.isSetVerifyCertNoFlag()) {
        oprot.writeString(struct.verifyCertNoFlag);
      }
      if (struct.isSetCurrencyID()) {
        oprot.writeString(struct.currencyID);
      }
      if (struct.isSetBrokerIDByBank()) {
        oprot.writeString(struct.brokerIDByBank);
      }
      if (struct.isSetBankPwdFlag()) {
        oprot.writeString(struct.bankPwdFlag);
      }
      if (struct.isSetSecuPwdFlag()) {
        oprot.writeString(struct.secuPwdFlag);
      }
      if (struct.isSetTID()) {
        oprot.writeI32(struct.tID);
      }
      if (struct.isSetDigest()) {
        oprot.writeString(struct.digest);
      }
      if (struct.isSetErrorID()) {
        oprot.writeI32(struct.errorID);
      }
      if (struct.isSetErrormsg()) {
        oprot.writeString(struct.errormsg);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcChangeAccountField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(42);
      if (incoming.get(0)) {
        struct.tradeCode = iprot.readString();
        struct.setTradeCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bankID = iprot.readString();
        struct.setBankIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bankBranchID = iprot.readString();
        struct.setBankBranchIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.brokerBranchID = iprot.readString();
        struct.setBrokerBranchIDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.tradeDate = iprot.readString();
        struct.setTradeDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.tradeTime = iprot.readString();
        struct.setTradeTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.bankSerial = iprot.readString();
        struct.setBankSerialIsSet(true);
      }
      if (incoming.get(8)) {
        struct.tradingDay = iprot.readString();
        struct.setTradingDayIsSet(true);
      }
      if (incoming.get(9)) {
        struct.plateSerial = iprot.readI32();
        struct.setPlateSerialIsSet(true);
      }
      if (incoming.get(10)) {
        struct.lastFragment = iprot.readString();
        struct.setLastFragmentIsSet(true);
      }
      if (incoming.get(11)) {
        struct.sessionID = iprot.readI32();
        struct.setSessionIDIsSet(true);
      }
      if (incoming.get(12)) {
        struct.customerName = iprot.readString();
        struct.setCustomerNameIsSet(true);
      }
      if (incoming.get(13)) {
        struct.idCardType = iprot.readString();
        struct.setIdCardTypeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.identifiedCardNo = iprot.readString();
        struct.setIdentifiedCardNoIsSet(true);
      }
      if (incoming.get(15)) {
        struct.gender = iprot.readString();
        struct.setGenderIsSet(true);
      }
      if (incoming.get(16)) {
        struct.countryCode = iprot.readString();
        struct.setCountryCodeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.custType = iprot.readString();
        struct.setCustTypeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(19)) {
        struct.zipCode = iprot.readString();
        struct.setZipCodeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.telephone = iprot.readString();
        struct.setTelephoneIsSet(true);
      }
      if (incoming.get(21)) {
        struct.mobilePhone = iprot.readString();
        struct.setMobilePhoneIsSet(true);
      }
      if (incoming.get(22)) {
        struct.fax = iprot.readString();
        struct.setFaxIsSet(true);
      }
      if (incoming.get(23)) {
        struct.eMail = iprot.readString();
        struct.setEMailIsSet(true);
      }
      if (incoming.get(24)) {
        struct.moneyAccountStatus = iprot.readString();
        struct.setMoneyAccountStatusIsSet(true);
      }
      if (incoming.get(25)) {
        struct.bankAccount = iprot.readString();
        struct.setBankAccountIsSet(true);
      }
      if (incoming.get(26)) {
        struct.bankPassWord = iprot.readString();
        struct.setBankPassWordIsSet(true);
      }
      if (incoming.get(27)) {
        struct.newBankAccount = iprot.readString();
        struct.setNewBankAccountIsSet(true);
      }
      if (incoming.get(28)) {
        struct.newBankPassWord = iprot.readString();
        struct.setNewBankPassWordIsSet(true);
      }
      if (incoming.get(29)) {
        struct.accountID = iprot.readString();
        struct.setAccountIDIsSet(true);
      }
      if (incoming.get(30)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(31)) {
        struct.bankAccType = iprot.readString();
        struct.setBankAccTypeIsSet(true);
      }
      if (incoming.get(32)) {
        struct.installID = iprot.readI32();
        struct.setInstallIDIsSet(true);
      }
      if (incoming.get(33)) {
        struct.verifyCertNoFlag = iprot.readString();
        struct.setVerifyCertNoFlagIsSet(true);
      }
      if (incoming.get(34)) {
        struct.currencyID = iprot.readString();
        struct.setCurrencyIDIsSet(true);
      }
      if (incoming.get(35)) {
        struct.brokerIDByBank = iprot.readString();
        struct.setBrokerIDByBankIsSet(true);
      }
      if (incoming.get(36)) {
        struct.bankPwdFlag = iprot.readString();
        struct.setBankPwdFlagIsSet(true);
      }
      if (incoming.get(37)) {
        struct.secuPwdFlag = iprot.readString();
        struct.setSecuPwdFlagIsSet(true);
      }
      if (incoming.get(38)) {
        struct.tID = iprot.readI32();
        struct.setTIDIsSet(true);
      }
      if (incoming.get(39)) {
        struct.digest = iprot.readString();
        struct.setDigestIsSet(true);
      }
      if (incoming.get(40)) {
        struct.errorID = iprot.readI32();
        struct.setErrorIDIsSet(true);
      }
      if (incoming.get(41)) {
        struct.errormsg = iprot.readString();
        struct.setErrormsgIsSet(true);
      }
    }
  }

}

