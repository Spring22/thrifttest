/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcExchangeExecOrderField implements org.apache.thrift.TBase<CThostFtdcExchangeExecOrderField, CThostFtdcExchangeExecOrderField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcExchangeExecOrderField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcExchangeExecOrderField");

  private static final org.apache.thrift.protocol.TField VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("volume", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestID", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField BUSINESS_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("businessUnit", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OFFSET_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("offsetFlag", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField HEDGE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("hedgeFlag", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ACTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("actionType", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField POSI_DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("posiDirection", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField RESERVE_POSITION_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("reservePositionFlag", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CLOSE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("closeFlag", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField EXEC_ORDER_LOCAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("execOrderLocalID", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField EXCHANGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeID", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PARTICIPANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("participantID", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientID", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField EXCHANGE_INST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeInstID", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField TRADER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("traderID", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField INSTALL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("installID", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField ORDER_SUBMIT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("orderSubmitStatus", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField NOTIFY_SEQUENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("notifySequence", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField TRADING_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("tradingDay", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField SETTLEMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("settlementID", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField EXEC_ORDER_SYS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("execOrderSysID", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField INSERT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("insertDate", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField INSERT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("insertTime", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField CANCEL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelTime", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField EXEC_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("execResult", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField CLEARING_PART_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clearingPartID", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField SEQUENCE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("sequenceNo", org.apache.thrift.protocol.TType.I32, (short)27);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcExchangeExecOrderFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcExchangeExecOrderFieldTupleSchemeFactory());
  }

  public int volume; // required
  public int requestID; // required
  public String businessUnit; // required
  public String offsetFlag; // required
  public String hedgeFlag; // required
  public String actionType; // required
  public String posiDirection; // required
  public String reservePositionFlag; // required
  public String closeFlag; // required
  public String execOrderLocalID; // required
  public String exchangeID; // required
  public String participantID; // required
  public String clientID; // required
  public String exchangeInstID; // required
  public String traderID; // required
  public int installID; // required
  public String orderSubmitStatus; // required
  public int notifySequence; // required
  public String tradingDay; // required
  public int settlementID; // required
  public String execOrderSysID; // required
  public String insertDate; // required
  public String insertTime; // required
  public String cancelTime; // required
  public String execResult; // required
  public String clearingPartID; // required
  public int sequenceNo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VOLUME((short)1, "volume"),
    REQUEST_ID((short)2, "requestID"),
    BUSINESS_UNIT((short)3, "businessUnit"),
    OFFSET_FLAG((short)4, "offsetFlag"),
    HEDGE_FLAG((short)5, "hedgeFlag"),
    ACTION_TYPE((short)6, "actionType"),
    POSI_DIRECTION((short)7, "posiDirection"),
    RESERVE_POSITION_FLAG((short)8, "reservePositionFlag"),
    CLOSE_FLAG((short)9, "closeFlag"),
    EXEC_ORDER_LOCAL_ID((short)10, "execOrderLocalID"),
    EXCHANGE_ID((short)11, "exchangeID"),
    PARTICIPANT_ID((short)12, "participantID"),
    CLIENT_ID((short)13, "clientID"),
    EXCHANGE_INST_ID((short)14, "exchangeInstID"),
    TRADER_ID((short)15, "traderID"),
    INSTALL_ID((short)16, "installID"),
    ORDER_SUBMIT_STATUS((short)17, "orderSubmitStatus"),
    NOTIFY_SEQUENCE((short)18, "notifySequence"),
    TRADING_DAY((short)19, "tradingDay"),
    SETTLEMENT_ID((short)20, "settlementID"),
    EXEC_ORDER_SYS_ID((short)21, "execOrderSysID"),
    INSERT_DATE((short)22, "insertDate"),
    INSERT_TIME((short)23, "insertTime"),
    CANCEL_TIME((short)24, "cancelTime"),
    EXEC_RESULT((short)25, "execResult"),
    CLEARING_PART_ID((short)26, "clearingPartID"),
    SEQUENCE_NO((short)27, "sequenceNo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VOLUME
          return VOLUME;
        case 2: // REQUEST_ID
          return REQUEST_ID;
        case 3: // BUSINESS_UNIT
          return BUSINESS_UNIT;
        case 4: // OFFSET_FLAG
          return OFFSET_FLAG;
        case 5: // HEDGE_FLAG
          return HEDGE_FLAG;
        case 6: // ACTION_TYPE
          return ACTION_TYPE;
        case 7: // POSI_DIRECTION
          return POSI_DIRECTION;
        case 8: // RESERVE_POSITION_FLAG
          return RESERVE_POSITION_FLAG;
        case 9: // CLOSE_FLAG
          return CLOSE_FLAG;
        case 10: // EXEC_ORDER_LOCAL_ID
          return EXEC_ORDER_LOCAL_ID;
        case 11: // EXCHANGE_ID
          return EXCHANGE_ID;
        case 12: // PARTICIPANT_ID
          return PARTICIPANT_ID;
        case 13: // CLIENT_ID
          return CLIENT_ID;
        case 14: // EXCHANGE_INST_ID
          return EXCHANGE_INST_ID;
        case 15: // TRADER_ID
          return TRADER_ID;
        case 16: // INSTALL_ID
          return INSTALL_ID;
        case 17: // ORDER_SUBMIT_STATUS
          return ORDER_SUBMIT_STATUS;
        case 18: // NOTIFY_SEQUENCE
          return NOTIFY_SEQUENCE;
        case 19: // TRADING_DAY
          return TRADING_DAY;
        case 20: // SETTLEMENT_ID
          return SETTLEMENT_ID;
        case 21: // EXEC_ORDER_SYS_ID
          return EXEC_ORDER_SYS_ID;
        case 22: // INSERT_DATE
          return INSERT_DATE;
        case 23: // INSERT_TIME
          return INSERT_TIME;
        case 24: // CANCEL_TIME
          return CANCEL_TIME;
        case 25: // EXEC_RESULT
          return EXEC_RESULT;
        case 26: // CLEARING_PART_ID
          return CLEARING_PART_ID;
        case 27: // SEQUENCE_NO
          return SEQUENCE_NO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VOLUME_ISSET_ID = 0;
  private static final int __REQUESTID_ISSET_ID = 1;
  private static final int __INSTALLID_ISSET_ID = 2;
  private static final int __NOTIFYSEQUENCE_ISSET_ID = 3;
  private static final int __SETTLEMENTID_ISSET_ID = 4;
  private static final int __SEQUENCENO_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VOLUME, new org.apache.thrift.meta_data.FieldMetaData("volume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcVolumeType")));
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcRequestIDType")));
    tmpMap.put(_Fields.BUSINESS_UNIT, new org.apache.thrift.meta_data.FieldMetaData("businessUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBusinessUnitType")));
    tmpMap.put(_Fields.OFFSET_FLAG, new org.apache.thrift.meta_data.FieldMetaData("offsetFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOffsetFlagType")));
    tmpMap.put(_Fields.HEDGE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("hedgeFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcHedgeFlagType")));
    tmpMap.put(_Fields.ACTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("actionType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcActionTypeType")));
    tmpMap.put(_Fields.POSI_DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("posiDirection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcPosiDirectionType")));
    tmpMap.put(_Fields.RESERVE_POSITION_FLAG, new org.apache.thrift.meta_data.FieldMetaData("reservePositionFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcExecOrderPositionFlagType")));
    tmpMap.put(_Fields.CLOSE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("closeFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcExecOrderCloseFlagType")));
    tmpMap.put(_Fields.EXEC_ORDER_LOCAL_ID, new org.apache.thrift.meta_data.FieldMetaData("execOrderLocalID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderLocalIDType")));
    tmpMap.put(_Fields.EXCHANGE_ID, new org.apache.thrift.meta_data.FieldMetaData("exchangeID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcExchangeIDType")));
    tmpMap.put(_Fields.PARTICIPANT_ID, new org.apache.thrift.meta_data.FieldMetaData("participantID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcParticipantIDType")));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcClientIDType")));
    tmpMap.put(_Fields.EXCHANGE_INST_ID, new org.apache.thrift.meta_data.FieldMetaData("exchangeInstID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcExchangeInstIDType")));
    tmpMap.put(_Fields.TRADER_ID, new org.apache.thrift.meta_data.FieldMetaData("traderID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTraderIDType")));
    tmpMap.put(_Fields.INSTALL_ID, new org.apache.thrift.meta_data.FieldMetaData("installID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcInstallIDType")));
    tmpMap.put(_Fields.ORDER_SUBMIT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("orderSubmitStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderSubmitStatusType")));
    tmpMap.put(_Fields.NOTIFY_SEQUENCE, new org.apache.thrift.meta_data.FieldMetaData("notifySequence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcSequenceNoType")));
    tmpMap.put(_Fields.TRADING_DAY, new org.apache.thrift.meta_data.FieldMetaData("tradingDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    tmpMap.put(_Fields.SETTLEMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("settlementID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcSettlementIDType")));
    tmpMap.put(_Fields.EXEC_ORDER_SYS_ID, new org.apache.thrift.meta_data.FieldMetaData("execOrderSysID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcExecOrderSysIDType")));
    tmpMap.put(_Fields.INSERT_DATE, new org.apache.thrift.meta_data.FieldMetaData("insertDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    tmpMap.put(_Fields.INSERT_TIME, new org.apache.thrift.meta_data.FieldMetaData("insertTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeType")));
    tmpMap.put(_Fields.CANCEL_TIME, new org.apache.thrift.meta_data.FieldMetaData("cancelTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeType")));
    tmpMap.put(_Fields.EXEC_RESULT, new org.apache.thrift.meta_data.FieldMetaData("execResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcExecResultType")));
    tmpMap.put(_Fields.CLEARING_PART_ID, new org.apache.thrift.meta_data.FieldMetaData("clearingPartID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcParticipantIDType")));
    tmpMap.put(_Fields.SEQUENCE_NO, new org.apache.thrift.meta_data.FieldMetaData("sequenceNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcSequenceNoType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcExchangeExecOrderField.class, metaDataMap);
  }

  public CThostFtdcExchangeExecOrderField() {
  }

  public CThostFtdcExchangeExecOrderField(
    int volume,
    int requestID,
    String businessUnit,
    String offsetFlag,
    String hedgeFlag,
    String actionType,
    String posiDirection,
    String reservePositionFlag,
    String closeFlag,
    String execOrderLocalID,
    String exchangeID,
    String participantID,
    String clientID,
    String exchangeInstID,
    String traderID,
    int installID,
    String orderSubmitStatus,
    int notifySequence,
    String tradingDay,
    int settlementID,
    String execOrderSysID,
    String insertDate,
    String insertTime,
    String cancelTime,
    String execResult,
    String clearingPartID,
    int sequenceNo)
  {
    this();
    this.volume = volume;
    setVolumeIsSet(true);
    this.requestID = requestID;
    setRequestIDIsSet(true);
    this.businessUnit = businessUnit;
    this.offsetFlag = offsetFlag;
    this.hedgeFlag = hedgeFlag;
    this.actionType = actionType;
    this.posiDirection = posiDirection;
    this.reservePositionFlag = reservePositionFlag;
    this.closeFlag = closeFlag;
    this.execOrderLocalID = execOrderLocalID;
    this.exchangeID = exchangeID;
    this.participantID = participantID;
    this.clientID = clientID;
    this.exchangeInstID = exchangeInstID;
    this.traderID = traderID;
    this.installID = installID;
    setInstallIDIsSet(true);
    this.orderSubmitStatus = orderSubmitStatus;
    this.notifySequence = notifySequence;
    setNotifySequenceIsSet(true);
    this.tradingDay = tradingDay;
    this.settlementID = settlementID;
    setSettlementIDIsSet(true);
    this.execOrderSysID = execOrderSysID;
    this.insertDate = insertDate;
    this.insertTime = insertTime;
    this.cancelTime = cancelTime;
    this.execResult = execResult;
    this.clearingPartID = clearingPartID;
    this.sequenceNo = sequenceNo;
    setSequenceNoIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcExchangeExecOrderField(CThostFtdcExchangeExecOrderField other) {
    __isset_bitfield = other.__isset_bitfield;
    this.volume = other.volume;
    this.requestID = other.requestID;
    if (other.isSetBusinessUnit()) {
      this.businessUnit = other.businessUnit;
    }
    if (other.isSetOffsetFlag()) {
      this.offsetFlag = other.offsetFlag;
    }
    if (other.isSetHedgeFlag()) {
      this.hedgeFlag = other.hedgeFlag;
    }
    if (other.isSetActionType()) {
      this.actionType = other.actionType;
    }
    if (other.isSetPosiDirection()) {
      this.posiDirection = other.posiDirection;
    }
    if (other.isSetReservePositionFlag()) {
      this.reservePositionFlag = other.reservePositionFlag;
    }
    if (other.isSetCloseFlag()) {
      this.closeFlag = other.closeFlag;
    }
    if (other.isSetExecOrderLocalID()) {
      this.execOrderLocalID = other.execOrderLocalID;
    }
    if (other.isSetExchangeID()) {
      this.exchangeID = other.exchangeID;
    }
    if (other.isSetParticipantID()) {
      this.participantID = other.participantID;
    }
    if (other.isSetClientID()) {
      this.clientID = other.clientID;
    }
    if (other.isSetExchangeInstID()) {
      this.exchangeInstID = other.exchangeInstID;
    }
    if (other.isSetTraderID()) {
      this.traderID = other.traderID;
    }
    this.installID = other.installID;
    if (other.isSetOrderSubmitStatus()) {
      this.orderSubmitStatus = other.orderSubmitStatus;
    }
    this.notifySequence = other.notifySequence;
    if (other.isSetTradingDay()) {
      this.tradingDay = other.tradingDay;
    }
    this.settlementID = other.settlementID;
    if (other.isSetExecOrderSysID()) {
      this.execOrderSysID = other.execOrderSysID;
    }
    if (other.isSetInsertDate()) {
      this.insertDate = other.insertDate;
    }
    if (other.isSetInsertTime()) {
      this.insertTime = other.insertTime;
    }
    if (other.isSetCancelTime()) {
      this.cancelTime = other.cancelTime;
    }
    if (other.isSetExecResult()) {
      this.execResult = other.execResult;
    }
    if (other.isSetClearingPartID()) {
      this.clearingPartID = other.clearingPartID;
    }
    this.sequenceNo = other.sequenceNo;
  }

  public CThostFtdcExchangeExecOrderField deepCopy() {
    return new CThostFtdcExchangeExecOrderField(this);
  }

  @Override
  public void clear() {
    setVolumeIsSet(false);
    this.volume = 0;
    setRequestIDIsSet(false);
    this.requestID = 0;
    this.businessUnit = null;
    this.offsetFlag = null;
    this.hedgeFlag = null;
    this.actionType = null;
    this.posiDirection = null;
    this.reservePositionFlag = null;
    this.closeFlag = null;
    this.execOrderLocalID = null;
    this.exchangeID = null;
    this.participantID = null;
    this.clientID = null;
    this.exchangeInstID = null;
    this.traderID = null;
    setInstallIDIsSet(false);
    this.installID = 0;
    this.orderSubmitStatus = null;
    setNotifySequenceIsSet(false);
    this.notifySequence = 0;
    this.tradingDay = null;
    setSettlementIDIsSet(false);
    this.settlementID = 0;
    this.execOrderSysID = null;
    this.insertDate = null;
    this.insertTime = null;
    this.cancelTime = null;
    this.execResult = null;
    this.clearingPartID = null;
    setSequenceNoIsSet(false);
    this.sequenceNo = 0;
  }

  public int getVolume() {
    return this.volume;
  }

  public CThostFtdcExchangeExecOrderField setVolume(int volume) {
    this.volume = volume;
    setVolumeIsSet(true);
    return this;
  }

  public void unsetVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLUME_ISSET_ID);
  }

  /** Returns true if field volume is set (has been assigned a value) and false otherwise */
  public boolean isSetVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __VOLUME_ISSET_ID);
  }

  public void setVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLUME_ISSET_ID, value);
  }

  public int getRequestID() {
    return this.requestID;
  }

  public CThostFtdcExchangeExecOrderField setRequestID(int requestID) {
    this.requestID = requestID;
    setRequestIDIsSet(true);
    return this;
  }

  public void unsetRequestID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  /** Returns true if field requestID is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestID() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  public void setRequestIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
  }

  public String getBusinessUnit() {
    return this.businessUnit;
  }

  public CThostFtdcExchangeExecOrderField setBusinessUnit(String businessUnit) {
    this.businessUnit = businessUnit;
    return this;
  }

  public void unsetBusinessUnit() {
    this.businessUnit = null;
  }

  /** Returns true if field businessUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessUnit() {
    return this.businessUnit != null;
  }

  public void setBusinessUnitIsSet(boolean value) {
    if (!value) {
      this.businessUnit = null;
    }
  }

  public String getOffsetFlag() {
    return this.offsetFlag;
  }

  public CThostFtdcExchangeExecOrderField setOffsetFlag(String offsetFlag) {
    this.offsetFlag = offsetFlag;
    return this;
  }

  public void unsetOffsetFlag() {
    this.offsetFlag = null;
  }

  /** Returns true if field offsetFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetOffsetFlag() {
    return this.offsetFlag != null;
  }

  public void setOffsetFlagIsSet(boolean value) {
    if (!value) {
      this.offsetFlag = null;
    }
  }

  public String getHedgeFlag() {
    return this.hedgeFlag;
  }

  public CThostFtdcExchangeExecOrderField setHedgeFlag(String hedgeFlag) {
    this.hedgeFlag = hedgeFlag;
    return this;
  }

  public void unsetHedgeFlag() {
    this.hedgeFlag = null;
  }

  /** Returns true if field hedgeFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetHedgeFlag() {
    return this.hedgeFlag != null;
  }

  public void setHedgeFlagIsSet(boolean value) {
    if (!value) {
      this.hedgeFlag = null;
    }
  }

  public String getActionType() {
    return this.actionType;
  }

  public CThostFtdcExchangeExecOrderField setActionType(String actionType) {
    this.actionType = actionType;
    return this;
  }

  public void unsetActionType() {
    this.actionType = null;
  }

  /** Returns true if field actionType is set (has been assigned a value) and false otherwise */
  public boolean isSetActionType() {
    return this.actionType != null;
  }

  public void setActionTypeIsSet(boolean value) {
    if (!value) {
      this.actionType = null;
    }
  }

  public String getPosiDirection() {
    return this.posiDirection;
  }

  public CThostFtdcExchangeExecOrderField setPosiDirection(String posiDirection) {
    this.posiDirection = posiDirection;
    return this;
  }

  public void unsetPosiDirection() {
    this.posiDirection = null;
  }

  /** Returns true if field posiDirection is set (has been assigned a value) and false otherwise */
  public boolean isSetPosiDirection() {
    return this.posiDirection != null;
  }

  public void setPosiDirectionIsSet(boolean value) {
    if (!value) {
      this.posiDirection = null;
    }
  }

  public String getReservePositionFlag() {
    return this.reservePositionFlag;
  }

  public CThostFtdcExchangeExecOrderField setReservePositionFlag(String reservePositionFlag) {
    this.reservePositionFlag = reservePositionFlag;
    return this;
  }

  public void unsetReservePositionFlag() {
    this.reservePositionFlag = null;
  }

  /** Returns true if field reservePositionFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetReservePositionFlag() {
    return this.reservePositionFlag != null;
  }

  public void setReservePositionFlagIsSet(boolean value) {
    if (!value) {
      this.reservePositionFlag = null;
    }
  }

  public String getCloseFlag() {
    return this.closeFlag;
  }

  public CThostFtdcExchangeExecOrderField setCloseFlag(String closeFlag) {
    this.closeFlag = closeFlag;
    return this;
  }

  public void unsetCloseFlag() {
    this.closeFlag = null;
  }

  /** Returns true if field closeFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseFlag() {
    return this.closeFlag != null;
  }

  public void setCloseFlagIsSet(boolean value) {
    if (!value) {
      this.closeFlag = null;
    }
  }

  public String getExecOrderLocalID() {
    return this.execOrderLocalID;
  }

  public CThostFtdcExchangeExecOrderField setExecOrderLocalID(String execOrderLocalID) {
    this.execOrderLocalID = execOrderLocalID;
    return this;
  }

  public void unsetExecOrderLocalID() {
    this.execOrderLocalID = null;
  }

  /** Returns true if field execOrderLocalID is set (has been assigned a value) and false otherwise */
  public boolean isSetExecOrderLocalID() {
    return this.execOrderLocalID != null;
  }

  public void setExecOrderLocalIDIsSet(boolean value) {
    if (!value) {
      this.execOrderLocalID = null;
    }
  }

  public String getExchangeID() {
    return this.exchangeID;
  }

  public CThostFtdcExchangeExecOrderField setExchangeID(String exchangeID) {
    this.exchangeID = exchangeID;
    return this;
  }

  public void unsetExchangeID() {
    this.exchangeID = null;
  }

  /** Returns true if field exchangeID is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeID() {
    return this.exchangeID != null;
  }

  public void setExchangeIDIsSet(boolean value) {
    if (!value) {
      this.exchangeID = null;
    }
  }

  public String getParticipantID() {
    return this.participantID;
  }

  public CThostFtdcExchangeExecOrderField setParticipantID(String participantID) {
    this.participantID = participantID;
    return this;
  }

  public void unsetParticipantID() {
    this.participantID = null;
  }

  /** Returns true if field participantID is set (has been assigned a value) and false otherwise */
  public boolean isSetParticipantID() {
    return this.participantID != null;
  }

  public void setParticipantIDIsSet(boolean value) {
    if (!value) {
      this.participantID = null;
    }
  }

  public String getClientID() {
    return this.clientID;
  }

  public CThostFtdcExchangeExecOrderField setClientID(String clientID) {
    this.clientID = clientID;
    return this;
  }

  public void unsetClientID() {
    this.clientID = null;
  }

  /** Returns true if field clientID is set (has been assigned a value) and false otherwise */
  public boolean isSetClientID() {
    return this.clientID != null;
  }

  public void setClientIDIsSet(boolean value) {
    if (!value) {
      this.clientID = null;
    }
  }

  public String getExchangeInstID() {
    return this.exchangeInstID;
  }

  public CThostFtdcExchangeExecOrderField setExchangeInstID(String exchangeInstID) {
    this.exchangeInstID = exchangeInstID;
    return this;
  }

  public void unsetExchangeInstID() {
    this.exchangeInstID = null;
  }

  /** Returns true if field exchangeInstID is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeInstID() {
    return this.exchangeInstID != null;
  }

  public void setExchangeInstIDIsSet(boolean value) {
    if (!value) {
      this.exchangeInstID = null;
    }
  }

  public String getTraderID() {
    return this.traderID;
  }

  public CThostFtdcExchangeExecOrderField setTraderID(String traderID) {
    this.traderID = traderID;
    return this;
  }

  public void unsetTraderID() {
    this.traderID = null;
  }

  /** Returns true if field traderID is set (has been assigned a value) and false otherwise */
  public boolean isSetTraderID() {
    return this.traderID != null;
  }

  public void setTraderIDIsSet(boolean value) {
    if (!value) {
      this.traderID = null;
    }
  }

  public int getInstallID() {
    return this.installID;
  }

  public CThostFtdcExchangeExecOrderField setInstallID(int installID) {
    this.installID = installID;
    setInstallIDIsSet(true);
    return this;
  }

  public void unsetInstallID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSTALLID_ISSET_ID);
  }

  /** Returns true if field installID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstallID() {
    return EncodingUtils.testBit(__isset_bitfield, __INSTALLID_ISSET_ID);
  }

  public void setInstallIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSTALLID_ISSET_ID, value);
  }

  public String getOrderSubmitStatus() {
    return this.orderSubmitStatus;
  }

  public CThostFtdcExchangeExecOrderField setOrderSubmitStatus(String orderSubmitStatus) {
    this.orderSubmitStatus = orderSubmitStatus;
    return this;
  }

  public void unsetOrderSubmitStatus() {
    this.orderSubmitStatus = null;
  }

  /** Returns true if field orderSubmitStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderSubmitStatus() {
    return this.orderSubmitStatus != null;
  }

  public void setOrderSubmitStatusIsSet(boolean value) {
    if (!value) {
      this.orderSubmitStatus = null;
    }
  }

  public int getNotifySequence() {
    return this.notifySequence;
  }

  public CThostFtdcExchangeExecOrderField setNotifySequence(int notifySequence) {
    this.notifySequence = notifySequence;
    setNotifySequenceIsSet(true);
    return this;
  }

  public void unsetNotifySequence() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTIFYSEQUENCE_ISSET_ID);
  }

  /** Returns true if field notifySequence is set (has been assigned a value) and false otherwise */
  public boolean isSetNotifySequence() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTIFYSEQUENCE_ISSET_ID);
  }

  public void setNotifySequenceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTIFYSEQUENCE_ISSET_ID, value);
  }

  public String getTradingDay() {
    return this.tradingDay;
  }

  public CThostFtdcExchangeExecOrderField setTradingDay(String tradingDay) {
    this.tradingDay = tradingDay;
    return this;
  }

  public void unsetTradingDay() {
    this.tradingDay = null;
  }

  /** Returns true if field tradingDay is set (has been assigned a value) and false otherwise */
  public boolean isSetTradingDay() {
    return this.tradingDay != null;
  }

  public void setTradingDayIsSet(boolean value) {
    if (!value) {
      this.tradingDay = null;
    }
  }

  public int getSettlementID() {
    return this.settlementID;
  }

  public CThostFtdcExchangeExecOrderField setSettlementID(int settlementID) {
    this.settlementID = settlementID;
    setSettlementIDIsSet(true);
    return this;
  }

  public void unsetSettlementID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID);
  }

  /** Returns true if field settlementID is set (has been assigned a value) and false otherwise */
  public boolean isSetSettlementID() {
    return EncodingUtils.testBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID);
  }

  public void setSettlementIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID, value);
  }

  public String getExecOrderSysID() {
    return this.execOrderSysID;
  }

  public CThostFtdcExchangeExecOrderField setExecOrderSysID(String execOrderSysID) {
    this.execOrderSysID = execOrderSysID;
    return this;
  }

  public void unsetExecOrderSysID() {
    this.execOrderSysID = null;
  }

  /** Returns true if field execOrderSysID is set (has been assigned a value) and false otherwise */
  public boolean isSetExecOrderSysID() {
    return this.execOrderSysID != null;
  }

  public void setExecOrderSysIDIsSet(boolean value) {
    if (!value) {
      this.execOrderSysID = null;
    }
  }

  public String getInsertDate() {
    return this.insertDate;
  }

  public CThostFtdcExchangeExecOrderField setInsertDate(String insertDate) {
    this.insertDate = insertDate;
    return this;
  }

  public void unsetInsertDate() {
    this.insertDate = null;
  }

  /** Returns true if field insertDate is set (has been assigned a value) and false otherwise */
  public boolean isSetInsertDate() {
    return this.insertDate != null;
  }

  public void setInsertDateIsSet(boolean value) {
    if (!value) {
      this.insertDate = null;
    }
  }

  public String getInsertTime() {
    return this.insertTime;
  }

  public CThostFtdcExchangeExecOrderField setInsertTime(String insertTime) {
    this.insertTime = insertTime;
    return this;
  }

  public void unsetInsertTime() {
    this.insertTime = null;
  }

  /** Returns true if field insertTime is set (has been assigned a value) and false otherwise */
  public boolean isSetInsertTime() {
    return this.insertTime != null;
  }

  public void setInsertTimeIsSet(boolean value) {
    if (!value) {
      this.insertTime = null;
    }
  }

  public String getCancelTime() {
    return this.cancelTime;
  }

  public CThostFtdcExchangeExecOrderField setCancelTime(String cancelTime) {
    this.cancelTime = cancelTime;
    return this;
  }

  public void unsetCancelTime() {
    this.cancelTime = null;
  }

  /** Returns true if field cancelTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelTime() {
    return this.cancelTime != null;
  }

  public void setCancelTimeIsSet(boolean value) {
    if (!value) {
      this.cancelTime = null;
    }
  }

  public String getExecResult() {
    return this.execResult;
  }

  public CThostFtdcExchangeExecOrderField setExecResult(String execResult) {
    this.execResult = execResult;
    return this;
  }

  public void unsetExecResult() {
    this.execResult = null;
  }

  /** Returns true if field execResult is set (has been assigned a value) and false otherwise */
  public boolean isSetExecResult() {
    return this.execResult != null;
  }

  public void setExecResultIsSet(boolean value) {
    if (!value) {
      this.execResult = null;
    }
  }

  public String getClearingPartID() {
    return this.clearingPartID;
  }

  public CThostFtdcExchangeExecOrderField setClearingPartID(String clearingPartID) {
    this.clearingPartID = clearingPartID;
    return this;
  }

  public void unsetClearingPartID() {
    this.clearingPartID = null;
  }

  /** Returns true if field clearingPartID is set (has been assigned a value) and false otherwise */
  public boolean isSetClearingPartID() {
    return this.clearingPartID != null;
  }

  public void setClearingPartIDIsSet(boolean value) {
    if (!value) {
      this.clearingPartID = null;
    }
  }

  public int getSequenceNo() {
    return this.sequenceNo;
  }

  public CThostFtdcExchangeExecOrderField setSequenceNo(int sequenceNo) {
    this.sequenceNo = sequenceNo;
    setSequenceNoIsSet(true);
    return this;
  }

  public void unsetSequenceNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQUENCENO_ISSET_ID);
  }

  /** Returns true if field sequenceNo is set (has been assigned a value) and false otherwise */
  public boolean isSetSequenceNo() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQUENCENO_ISSET_ID);
  }

  public void setSequenceNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQUENCENO_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VOLUME:
      if (value == null) {
        unsetVolume();
      } else {
        setVolume((Integer)value);
      }
      break;

    case REQUEST_ID:
      if (value == null) {
        unsetRequestID();
      } else {
        setRequestID((Integer)value);
      }
      break;

    case BUSINESS_UNIT:
      if (value == null) {
        unsetBusinessUnit();
      } else {
        setBusinessUnit((String)value);
      }
      break;

    case OFFSET_FLAG:
      if (value == null) {
        unsetOffsetFlag();
      } else {
        setOffsetFlag((String)value);
      }
      break;

    case HEDGE_FLAG:
      if (value == null) {
        unsetHedgeFlag();
      } else {
        setHedgeFlag((String)value);
      }
      break;

    case ACTION_TYPE:
      if (value == null) {
        unsetActionType();
      } else {
        setActionType((String)value);
      }
      break;

    case POSI_DIRECTION:
      if (value == null) {
        unsetPosiDirection();
      } else {
        setPosiDirection((String)value);
      }
      break;

    case RESERVE_POSITION_FLAG:
      if (value == null) {
        unsetReservePositionFlag();
      } else {
        setReservePositionFlag((String)value);
      }
      break;

    case CLOSE_FLAG:
      if (value == null) {
        unsetCloseFlag();
      } else {
        setCloseFlag((String)value);
      }
      break;

    case EXEC_ORDER_LOCAL_ID:
      if (value == null) {
        unsetExecOrderLocalID();
      } else {
        setExecOrderLocalID((String)value);
      }
      break;

    case EXCHANGE_ID:
      if (value == null) {
        unsetExchangeID();
      } else {
        setExchangeID((String)value);
      }
      break;

    case PARTICIPANT_ID:
      if (value == null) {
        unsetParticipantID();
      } else {
        setParticipantID((String)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientID();
      } else {
        setClientID((String)value);
      }
      break;

    case EXCHANGE_INST_ID:
      if (value == null) {
        unsetExchangeInstID();
      } else {
        setExchangeInstID((String)value);
      }
      break;

    case TRADER_ID:
      if (value == null) {
        unsetTraderID();
      } else {
        setTraderID((String)value);
      }
      break;

    case INSTALL_ID:
      if (value == null) {
        unsetInstallID();
      } else {
        setInstallID((Integer)value);
      }
      break;

    case ORDER_SUBMIT_STATUS:
      if (value == null) {
        unsetOrderSubmitStatus();
      } else {
        setOrderSubmitStatus((String)value);
      }
      break;

    case NOTIFY_SEQUENCE:
      if (value == null) {
        unsetNotifySequence();
      } else {
        setNotifySequence((Integer)value);
      }
      break;

    case TRADING_DAY:
      if (value == null) {
        unsetTradingDay();
      } else {
        setTradingDay((String)value);
      }
      break;

    case SETTLEMENT_ID:
      if (value == null) {
        unsetSettlementID();
      } else {
        setSettlementID((Integer)value);
      }
      break;

    case EXEC_ORDER_SYS_ID:
      if (value == null) {
        unsetExecOrderSysID();
      } else {
        setExecOrderSysID((String)value);
      }
      break;

    case INSERT_DATE:
      if (value == null) {
        unsetInsertDate();
      } else {
        setInsertDate((String)value);
      }
      break;

    case INSERT_TIME:
      if (value == null) {
        unsetInsertTime();
      } else {
        setInsertTime((String)value);
      }
      break;

    case CANCEL_TIME:
      if (value == null) {
        unsetCancelTime();
      } else {
        setCancelTime((String)value);
      }
      break;

    case EXEC_RESULT:
      if (value == null) {
        unsetExecResult();
      } else {
        setExecResult((String)value);
      }
      break;

    case CLEARING_PART_ID:
      if (value == null) {
        unsetClearingPartID();
      } else {
        setClearingPartID((String)value);
      }
      break;

    case SEQUENCE_NO:
      if (value == null) {
        unsetSequenceNo();
      } else {
        setSequenceNo((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VOLUME:
      return Integer.valueOf(getVolume());

    case REQUEST_ID:
      return Integer.valueOf(getRequestID());

    case BUSINESS_UNIT:
      return getBusinessUnit();

    case OFFSET_FLAG:
      return getOffsetFlag();

    case HEDGE_FLAG:
      return getHedgeFlag();

    case ACTION_TYPE:
      return getActionType();

    case POSI_DIRECTION:
      return getPosiDirection();

    case RESERVE_POSITION_FLAG:
      return getReservePositionFlag();

    case CLOSE_FLAG:
      return getCloseFlag();

    case EXEC_ORDER_LOCAL_ID:
      return getExecOrderLocalID();

    case EXCHANGE_ID:
      return getExchangeID();

    case PARTICIPANT_ID:
      return getParticipantID();

    case CLIENT_ID:
      return getClientID();

    case EXCHANGE_INST_ID:
      return getExchangeInstID();

    case TRADER_ID:
      return getTraderID();

    case INSTALL_ID:
      return Integer.valueOf(getInstallID());

    case ORDER_SUBMIT_STATUS:
      return getOrderSubmitStatus();

    case NOTIFY_SEQUENCE:
      return Integer.valueOf(getNotifySequence());

    case TRADING_DAY:
      return getTradingDay();

    case SETTLEMENT_ID:
      return Integer.valueOf(getSettlementID());

    case EXEC_ORDER_SYS_ID:
      return getExecOrderSysID();

    case INSERT_DATE:
      return getInsertDate();

    case INSERT_TIME:
      return getInsertTime();

    case CANCEL_TIME:
      return getCancelTime();

    case EXEC_RESULT:
      return getExecResult();

    case CLEARING_PART_ID:
      return getClearingPartID();

    case SEQUENCE_NO:
      return Integer.valueOf(getSequenceNo());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VOLUME:
      return isSetVolume();
    case REQUEST_ID:
      return isSetRequestID();
    case BUSINESS_UNIT:
      return isSetBusinessUnit();
    case OFFSET_FLAG:
      return isSetOffsetFlag();
    case HEDGE_FLAG:
      return isSetHedgeFlag();
    case ACTION_TYPE:
      return isSetActionType();
    case POSI_DIRECTION:
      return isSetPosiDirection();
    case RESERVE_POSITION_FLAG:
      return isSetReservePositionFlag();
    case CLOSE_FLAG:
      return isSetCloseFlag();
    case EXEC_ORDER_LOCAL_ID:
      return isSetExecOrderLocalID();
    case EXCHANGE_ID:
      return isSetExchangeID();
    case PARTICIPANT_ID:
      return isSetParticipantID();
    case CLIENT_ID:
      return isSetClientID();
    case EXCHANGE_INST_ID:
      return isSetExchangeInstID();
    case TRADER_ID:
      return isSetTraderID();
    case INSTALL_ID:
      return isSetInstallID();
    case ORDER_SUBMIT_STATUS:
      return isSetOrderSubmitStatus();
    case NOTIFY_SEQUENCE:
      return isSetNotifySequence();
    case TRADING_DAY:
      return isSetTradingDay();
    case SETTLEMENT_ID:
      return isSetSettlementID();
    case EXEC_ORDER_SYS_ID:
      return isSetExecOrderSysID();
    case INSERT_DATE:
      return isSetInsertDate();
    case INSERT_TIME:
      return isSetInsertTime();
    case CANCEL_TIME:
      return isSetCancelTime();
    case EXEC_RESULT:
      return isSetExecResult();
    case CLEARING_PART_ID:
      return isSetClearingPartID();
    case SEQUENCE_NO:
      return isSetSequenceNo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcExchangeExecOrderField)
      return this.equals((CThostFtdcExchangeExecOrderField)that);
    return false;
  }

  public boolean equals(CThostFtdcExchangeExecOrderField that) {
    if (that == null)
      return false;

    boolean this_present_volume = true;
    boolean that_present_volume = true;
    if (this_present_volume || that_present_volume) {
      if (!(this_present_volume && that_present_volume))
        return false;
      if (this.volume != that.volume)
        return false;
    }

    boolean this_present_requestID = true;
    boolean that_present_requestID = true;
    if (this_present_requestID || that_present_requestID) {
      if (!(this_present_requestID && that_present_requestID))
        return false;
      if (this.requestID != that.requestID)
        return false;
    }

    boolean this_present_businessUnit = true && this.isSetBusinessUnit();
    boolean that_present_businessUnit = true && that.isSetBusinessUnit();
    if (this_present_businessUnit || that_present_businessUnit) {
      if (!(this_present_businessUnit && that_present_businessUnit))
        return false;
      if (!this.businessUnit.equals(that.businessUnit))
        return false;
    }

    boolean this_present_offsetFlag = true && this.isSetOffsetFlag();
    boolean that_present_offsetFlag = true && that.isSetOffsetFlag();
    if (this_present_offsetFlag || that_present_offsetFlag) {
      if (!(this_present_offsetFlag && that_present_offsetFlag))
        return false;
      if (!this.offsetFlag.equals(that.offsetFlag))
        return false;
    }

    boolean this_present_hedgeFlag = true && this.isSetHedgeFlag();
    boolean that_present_hedgeFlag = true && that.isSetHedgeFlag();
    if (this_present_hedgeFlag || that_present_hedgeFlag) {
      if (!(this_present_hedgeFlag && that_present_hedgeFlag))
        return false;
      if (!this.hedgeFlag.equals(that.hedgeFlag))
        return false;
    }

    boolean this_present_actionType = true && this.isSetActionType();
    boolean that_present_actionType = true && that.isSetActionType();
    if (this_present_actionType || that_present_actionType) {
      if (!(this_present_actionType && that_present_actionType))
        return false;
      if (!this.actionType.equals(that.actionType))
        return false;
    }

    boolean this_present_posiDirection = true && this.isSetPosiDirection();
    boolean that_present_posiDirection = true && that.isSetPosiDirection();
    if (this_present_posiDirection || that_present_posiDirection) {
      if (!(this_present_posiDirection && that_present_posiDirection))
        return false;
      if (!this.posiDirection.equals(that.posiDirection))
        return false;
    }

    boolean this_present_reservePositionFlag = true && this.isSetReservePositionFlag();
    boolean that_present_reservePositionFlag = true && that.isSetReservePositionFlag();
    if (this_present_reservePositionFlag || that_present_reservePositionFlag) {
      if (!(this_present_reservePositionFlag && that_present_reservePositionFlag))
        return false;
      if (!this.reservePositionFlag.equals(that.reservePositionFlag))
        return false;
    }

    boolean this_present_closeFlag = true && this.isSetCloseFlag();
    boolean that_present_closeFlag = true && that.isSetCloseFlag();
    if (this_present_closeFlag || that_present_closeFlag) {
      if (!(this_present_closeFlag && that_present_closeFlag))
        return false;
      if (!this.closeFlag.equals(that.closeFlag))
        return false;
    }

    boolean this_present_execOrderLocalID = true && this.isSetExecOrderLocalID();
    boolean that_present_execOrderLocalID = true && that.isSetExecOrderLocalID();
    if (this_present_execOrderLocalID || that_present_execOrderLocalID) {
      if (!(this_present_execOrderLocalID && that_present_execOrderLocalID))
        return false;
      if (!this.execOrderLocalID.equals(that.execOrderLocalID))
        return false;
    }

    boolean this_present_exchangeID = true && this.isSetExchangeID();
    boolean that_present_exchangeID = true && that.isSetExchangeID();
    if (this_present_exchangeID || that_present_exchangeID) {
      if (!(this_present_exchangeID && that_present_exchangeID))
        return false;
      if (!this.exchangeID.equals(that.exchangeID))
        return false;
    }

    boolean this_present_participantID = true && this.isSetParticipantID();
    boolean that_present_participantID = true && that.isSetParticipantID();
    if (this_present_participantID || that_present_participantID) {
      if (!(this_present_participantID && that_present_participantID))
        return false;
      if (!this.participantID.equals(that.participantID))
        return false;
    }

    boolean this_present_clientID = true && this.isSetClientID();
    boolean that_present_clientID = true && that.isSetClientID();
    if (this_present_clientID || that_present_clientID) {
      if (!(this_present_clientID && that_present_clientID))
        return false;
      if (!this.clientID.equals(that.clientID))
        return false;
    }

    boolean this_present_exchangeInstID = true && this.isSetExchangeInstID();
    boolean that_present_exchangeInstID = true && that.isSetExchangeInstID();
    if (this_present_exchangeInstID || that_present_exchangeInstID) {
      if (!(this_present_exchangeInstID && that_present_exchangeInstID))
        return false;
      if (!this.exchangeInstID.equals(that.exchangeInstID))
        return false;
    }

    boolean this_present_traderID = true && this.isSetTraderID();
    boolean that_present_traderID = true && that.isSetTraderID();
    if (this_present_traderID || that_present_traderID) {
      if (!(this_present_traderID && that_present_traderID))
        return false;
      if (!this.traderID.equals(that.traderID))
        return false;
    }

    boolean this_present_installID = true;
    boolean that_present_installID = true;
    if (this_present_installID || that_present_installID) {
      if (!(this_present_installID && that_present_installID))
        return false;
      if (this.installID != that.installID)
        return false;
    }

    boolean this_present_orderSubmitStatus = true && this.isSetOrderSubmitStatus();
    boolean that_present_orderSubmitStatus = true && that.isSetOrderSubmitStatus();
    if (this_present_orderSubmitStatus || that_present_orderSubmitStatus) {
      if (!(this_present_orderSubmitStatus && that_present_orderSubmitStatus))
        return false;
      if (!this.orderSubmitStatus.equals(that.orderSubmitStatus))
        return false;
    }

    boolean this_present_notifySequence = true;
    boolean that_present_notifySequence = true;
    if (this_present_notifySequence || that_present_notifySequence) {
      if (!(this_present_notifySequence && that_present_notifySequence))
        return false;
      if (this.notifySequence != that.notifySequence)
        return false;
    }

    boolean this_present_tradingDay = true && this.isSetTradingDay();
    boolean that_present_tradingDay = true && that.isSetTradingDay();
    if (this_present_tradingDay || that_present_tradingDay) {
      if (!(this_present_tradingDay && that_present_tradingDay))
        return false;
      if (!this.tradingDay.equals(that.tradingDay))
        return false;
    }

    boolean this_present_settlementID = true;
    boolean that_present_settlementID = true;
    if (this_present_settlementID || that_present_settlementID) {
      if (!(this_present_settlementID && that_present_settlementID))
        return false;
      if (this.settlementID != that.settlementID)
        return false;
    }

    boolean this_present_execOrderSysID = true && this.isSetExecOrderSysID();
    boolean that_present_execOrderSysID = true && that.isSetExecOrderSysID();
    if (this_present_execOrderSysID || that_present_execOrderSysID) {
      if (!(this_present_execOrderSysID && that_present_execOrderSysID))
        return false;
      if (!this.execOrderSysID.equals(that.execOrderSysID))
        return false;
    }

    boolean this_present_insertDate = true && this.isSetInsertDate();
    boolean that_present_insertDate = true && that.isSetInsertDate();
    if (this_present_insertDate || that_present_insertDate) {
      if (!(this_present_insertDate && that_present_insertDate))
        return false;
      if (!this.insertDate.equals(that.insertDate))
        return false;
    }

    boolean this_present_insertTime = true && this.isSetInsertTime();
    boolean that_present_insertTime = true && that.isSetInsertTime();
    if (this_present_insertTime || that_present_insertTime) {
      if (!(this_present_insertTime && that_present_insertTime))
        return false;
      if (!this.insertTime.equals(that.insertTime))
        return false;
    }

    boolean this_present_cancelTime = true && this.isSetCancelTime();
    boolean that_present_cancelTime = true && that.isSetCancelTime();
    if (this_present_cancelTime || that_present_cancelTime) {
      if (!(this_present_cancelTime && that_present_cancelTime))
        return false;
      if (!this.cancelTime.equals(that.cancelTime))
        return false;
    }

    boolean this_present_execResult = true && this.isSetExecResult();
    boolean that_present_execResult = true && that.isSetExecResult();
    if (this_present_execResult || that_present_execResult) {
      if (!(this_present_execResult && that_present_execResult))
        return false;
      if (!this.execResult.equals(that.execResult))
        return false;
    }

    boolean this_present_clearingPartID = true && this.isSetClearingPartID();
    boolean that_present_clearingPartID = true && that.isSetClearingPartID();
    if (this_present_clearingPartID || that_present_clearingPartID) {
      if (!(this_present_clearingPartID && that_present_clearingPartID))
        return false;
      if (!this.clearingPartID.equals(that.clearingPartID))
        return false;
    }

    boolean this_present_sequenceNo = true;
    boolean that_present_sequenceNo = true;
    if (this_present_sequenceNo || that_present_sequenceNo) {
      if (!(this_present_sequenceNo && that_present_sequenceNo))
        return false;
      if (this.sequenceNo != that.sequenceNo)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcExchangeExecOrderField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVolume()).compareTo(other.isSetVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volume, other.volume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestID()).compareTo(other.isSetRequestID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestID, other.requestID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessUnit()).compareTo(other.isSetBusinessUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessUnit, other.businessUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffsetFlag()).compareTo(other.isSetOffsetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffsetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offsetFlag, other.offsetFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHedgeFlag()).compareTo(other.isSetHedgeFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHedgeFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hedgeFlag, other.hedgeFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionType()).compareTo(other.isSetActionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionType, other.actionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosiDirection()).compareTo(other.isSetPosiDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosiDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.posiDirection, other.posiDirection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReservePositionFlag()).compareTo(other.isSetReservePositionFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReservePositionFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reservePositionFlag, other.reservePositionFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseFlag()).compareTo(other.isSetCloseFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeFlag, other.closeFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecOrderLocalID()).compareTo(other.isSetExecOrderLocalID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecOrderLocalID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execOrderLocalID, other.execOrderLocalID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeID()).compareTo(other.isSetExchangeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeID, other.exchangeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParticipantID()).compareTo(other.isSetParticipantID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParticipantID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.participantID, other.participantID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientID()).compareTo(other.isSetClientID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientID, other.clientID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeInstID()).compareTo(other.isSetExchangeInstID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeInstID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeInstID, other.exchangeInstID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraderID()).compareTo(other.isSetTraderID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraderID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traderID, other.traderID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstallID()).compareTo(other.isSetInstallID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstallID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.installID, other.installID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderSubmitStatus()).compareTo(other.isSetOrderSubmitStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderSubmitStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderSubmitStatus, other.orderSubmitStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotifySequence()).compareTo(other.isSetNotifySequence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotifySequence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifySequence, other.notifySequence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradingDay()).compareTo(other.isSetTradingDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradingDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradingDay, other.tradingDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettlementID()).compareTo(other.isSetSettlementID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettlementID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settlementID, other.settlementID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecOrderSysID()).compareTo(other.isSetExecOrderSysID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecOrderSysID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execOrderSysID, other.execOrderSysID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInsertDate()).compareTo(other.isSetInsertDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInsertDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insertDate, other.insertDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInsertTime()).compareTo(other.isSetInsertTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInsertTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insertTime, other.insertTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelTime()).compareTo(other.isSetCancelTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelTime, other.cancelTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecResult()).compareTo(other.isSetExecResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execResult, other.execResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClearingPartID()).compareTo(other.isSetClearingPartID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClearingPartID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clearingPartID, other.clearingPartID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSequenceNo()).compareTo(other.isSetSequenceNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequenceNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequenceNo, other.sequenceNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcExchangeExecOrderField(");
    boolean first = true;

    sb.append("volume:");
    sb.append(this.volume);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestID:");
    sb.append(this.requestID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessUnit:");
    if (this.businessUnit == null) {
      sb.append("null");
    } else {
      sb.append(this.businessUnit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("offsetFlag:");
    if (this.offsetFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.offsetFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hedgeFlag:");
    if (this.hedgeFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.hedgeFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actionType:");
    if (this.actionType == null) {
      sb.append("null");
    } else {
      sb.append(this.actionType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("posiDirection:");
    if (this.posiDirection == null) {
      sb.append("null");
    } else {
      sb.append(this.posiDirection);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reservePositionFlag:");
    if (this.reservePositionFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.reservePositionFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("closeFlag:");
    if (this.closeFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.closeFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("execOrderLocalID:");
    if (this.execOrderLocalID == null) {
      sb.append("null");
    } else {
      sb.append(this.execOrderLocalID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchangeID:");
    if (this.exchangeID == null) {
      sb.append("null");
    } else {
      sb.append(this.exchangeID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("participantID:");
    if (this.participantID == null) {
      sb.append("null");
    } else {
      sb.append(this.participantID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientID:");
    if (this.clientID == null) {
      sb.append("null");
    } else {
      sb.append(this.clientID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchangeInstID:");
    if (this.exchangeInstID == null) {
      sb.append("null");
    } else {
      sb.append(this.exchangeInstID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("traderID:");
    if (this.traderID == null) {
      sb.append("null");
    } else {
      sb.append(this.traderID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("installID:");
    sb.append(this.installID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderSubmitStatus:");
    if (this.orderSubmitStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.orderSubmitStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notifySequence:");
    sb.append(this.notifySequence);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradingDay:");
    if (this.tradingDay == null) {
      sb.append("null");
    } else {
      sb.append(this.tradingDay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settlementID:");
    sb.append(this.settlementID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("execOrderSysID:");
    if (this.execOrderSysID == null) {
      sb.append("null");
    } else {
      sb.append(this.execOrderSysID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("insertDate:");
    if (this.insertDate == null) {
      sb.append("null");
    } else {
      sb.append(this.insertDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("insertTime:");
    if (this.insertTime == null) {
      sb.append("null");
    } else {
      sb.append(this.insertTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cancelTime:");
    if (this.cancelTime == null) {
      sb.append("null");
    } else {
      sb.append(this.cancelTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("execResult:");
    if (this.execResult == null) {
      sb.append("null");
    } else {
      sb.append(this.execResult);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clearingPartID:");
    if (this.clearingPartID == null) {
      sb.append("null");
    } else {
      sb.append(this.clearingPartID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sequenceNo:");
    sb.append(this.sequenceNo);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcExchangeExecOrderFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcExchangeExecOrderFieldStandardScheme getScheme() {
      return new CThostFtdcExchangeExecOrderFieldStandardScheme();
    }
  }

  private static class CThostFtdcExchangeExecOrderFieldStandardScheme extends StandardScheme<CThostFtdcExchangeExecOrderField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcExchangeExecOrderField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.volume = iprot.readI32();
              struct.setVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestID = iprot.readI32();
              struct.setRequestIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BUSINESS_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessUnit = iprot.readString();
              struct.setBusinessUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OFFSET_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.offsetFlag = iprot.readString();
              struct.setOffsetFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HEDGE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hedgeFlag = iprot.readString();
              struct.setHedgeFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACTION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actionType = iprot.readString();
              struct.setActionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // POSI_DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.posiDirection = iprot.readString();
              struct.setPosiDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RESERVE_POSITION_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reservePositionFlag = iprot.readString();
              struct.setReservePositionFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CLOSE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.closeFlag = iprot.readString();
              struct.setCloseFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EXEC_ORDER_LOCAL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.execOrderLocalID = iprot.readString();
              struct.setExecOrderLocalIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // EXCHANGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeID = iprot.readString();
              struct.setExchangeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PARTICIPANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.participantID = iprot.readString();
              struct.setParticipantIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientID = iprot.readString();
              struct.setClientIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // EXCHANGE_INST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeInstID = iprot.readString();
              struct.setExchangeInstIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TRADER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traderID = iprot.readString();
              struct.setTraderIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // INSTALL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.installID = iprot.readI32();
              struct.setInstallIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ORDER_SUBMIT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderSubmitStatus = iprot.readString();
              struct.setOrderSubmitStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // NOTIFY_SEQUENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.notifySequence = iprot.readI32();
              struct.setNotifySequenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // TRADING_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradingDay = iprot.readString();
              struct.setTradingDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SETTLEMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.settlementID = iprot.readI32();
              struct.setSettlementIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // EXEC_ORDER_SYS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.execOrderSysID = iprot.readString();
              struct.setExecOrderSysIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // INSERT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.insertDate = iprot.readString();
              struct.setInsertDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // INSERT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.insertTime = iprot.readString();
              struct.setInsertTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // CANCEL_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cancelTime = iprot.readString();
              struct.setCancelTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // EXEC_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.execResult = iprot.readString();
              struct.setExecResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // CLEARING_PART_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clearingPartID = iprot.readString();
              struct.setClearingPartIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // SEQUENCE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sequenceNo = iprot.readI32();
              struct.setSequenceNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcExchangeExecOrderField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VOLUME_FIELD_DESC);
      oprot.writeI32(struct.volume);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
      oprot.writeI32(struct.requestID);
      oprot.writeFieldEnd();
      if (struct.businessUnit != null) {
        oprot.writeFieldBegin(BUSINESS_UNIT_FIELD_DESC);
        oprot.writeString(struct.businessUnit);
        oprot.writeFieldEnd();
      }
      if (struct.offsetFlag != null) {
        oprot.writeFieldBegin(OFFSET_FLAG_FIELD_DESC);
        oprot.writeString(struct.offsetFlag);
        oprot.writeFieldEnd();
      }
      if (struct.hedgeFlag != null) {
        oprot.writeFieldBegin(HEDGE_FLAG_FIELD_DESC);
        oprot.writeString(struct.hedgeFlag);
        oprot.writeFieldEnd();
      }
      if (struct.actionType != null) {
        oprot.writeFieldBegin(ACTION_TYPE_FIELD_DESC);
        oprot.writeString(struct.actionType);
        oprot.writeFieldEnd();
      }
      if (struct.posiDirection != null) {
        oprot.writeFieldBegin(POSI_DIRECTION_FIELD_DESC);
        oprot.writeString(struct.posiDirection);
        oprot.writeFieldEnd();
      }
      if (struct.reservePositionFlag != null) {
        oprot.writeFieldBegin(RESERVE_POSITION_FLAG_FIELD_DESC);
        oprot.writeString(struct.reservePositionFlag);
        oprot.writeFieldEnd();
      }
      if (struct.closeFlag != null) {
        oprot.writeFieldBegin(CLOSE_FLAG_FIELD_DESC);
        oprot.writeString(struct.closeFlag);
        oprot.writeFieldEnd();
      }
      if (struct.execOrderLocalID != null) {
        oprot.writeFieldBegin(EXEC_ORDER_LOCAL_ID_FIELD_DESC);
        oprot.writeString(struct.execOrderLocalID);
        oprot.writeFieldEnd();
      }
      if (struct.exchangeID != null) {
        oprot.writeFieldBegin(EXCHANGE_ID_FIELD_DESC);
        oprot.writeString(struct.exchangeID);
        oprot.writeFieldEnd();
      }
      if (struct.participantID != null) {
        oprot.writeFieldBegin(PARTICIPANT_ID_FIELD_DESC);
        oprot.writeString(struct.participantID);
        oprot.writeFieldEnd();
      }
      if (struct.clientID != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientID);
        oprot.writeFieldEnd();
      }
      if (struct.exchangeInstID != null) {
        oprot.writeFieldBegin(EXCHANGE_INST_ID_FIELD_DESC);
        oprot.writeString(struct.exchangeInstID);
        oprot.writeFieldEnd();
      }
      if (struct.traderID != null) {
        oprot.writeFieldBegin(TRADER_ID_FIELD_DESC);
        oprot.writeString(struct.traderID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INSTALL_ID_FIELD_DESC);
      oprot.writeI32(struct.installID);
      oprot.writeFieldEnd();
      if (struct.orderSubmitStatus != null) {
        oprot.writeFieldBegin(ORDER_SUBMIT_STATUS_FIELD_DESC);
        oprot.writeString(struct.orderSubmitStatus);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NOTIFY_SEQUENCE_FIELD_DESC);
      oprot.writeI32(struct.notifySequence);
      oprot.writeFieldEnd();
      if (struct.tradingDay != null) {
        oprot.writeFieldBegin(TRADING_DAY_FIELD_DESC);
        oprot.writeString(struct.tradingDay);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SETTLEMENT_ID_FIELD_DESC);
      oprot.writeI32(struct.settlementID);
      oprot.writeFieldEnd();
      if (struct.execOrderSysID != null) {
        oprot.writeFieldBegin(EXEC_ORDER_SYS_ID_FIELD_DESC);
        oprot.writeString(struct.execOrderSysID);
        oprot.writeFieldEnd();
      }
      if (struct.insertDate != null) {
        oprot.writeFieldBegin(INSERT_DATE_FIELD_DESC);
        oprot.writeString(struct.insertDate);
        oprot.writeFieldEnd();
      }
      if (struct.insertTime != null) {
        oprot.writeFieldBegin(INSERT_TIME_FIELD_DESC);
        oprot.writeString(struct.insertTime);
        oprot.writeFieldEnd();
      }
      if (struct.cancelTime != null) {
        oprot.writeFieldBegin(CANCEL_TIME_FIELD_DESC);
        oprot.writeString(struct.cancelTime);
        oprot.writeFieldEnd();
      }
      if (struct.execResult != null) {
        oprot.writeFieldBegin(EXEC_RESULT_FIELD_DESC);
        oprot.writeString(struct.execResult);
        oprot.writeFieldEnd();
      }
      if (struct.clearingPartID != null) {
        oprot.writeFieldBegin(CLEARING_PART_ID_FIELD_DESC);
        oprot.writeString(struct.clearingPartID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEQUENCE_NO_FIELD_DESC);
      oprot.writeI32(struct.sequenceNo);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcExchangeExecOrderFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcExchangeExecOrderFieldTupleScheme getScheme() {
      return new CThostFtdcExchangeExecOrderFieldTupleScheme();
    }
  }

  private static class CThostFtdcExchangeExecOrderFieldTupleScheme extends TupleScheme<CThostFtdcExchangeExecOrderField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcExchangeExecOrderField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVolume()) {
        optionals.set(0);
      }
      if (struct.isSetRequestID()) {
        optionals.set(1);
      }
      if (struct.isSetBusinessUnit()) {
        optionals.set(2);
      }
      if (struct.isSetOffsetFlag()) {
        optionals.set(3);
      }
      if (struct.isSetHedgeFlag()) {
        optionals.set(4);
      }
      if (struct.isSetActionType()) {
        optionals.set(5);
      }
      if (struct.isSetPosiDirection()) {
        optionals.set(6);
      }
      if (struct.isSetReservePositionFlag()) {
        optionals.set(7);
      }
      if (struct.isSetCloseFlag()) {
        optionals.set(8);
      }
      if (struct.isSetExecOrderLocalID()) {
        optionals.set(9);
      }
      if (struct.isSetExchangeID()) {
        optionals.set(10);
      }
      if (struct.isSetParticipantID()) {
        optionals.set(11);
      }
      if (struct.isSetClientID()) {
        optionals.set(12);
      }
      if (struct.isSetExchangeInstID()) {
        optionals.set(13);
      }
      if (struct.isSetTraderID()) {
        optionals.set(14);
      }
      if (struct.isSetInstallID()) {
        optionals.set(15);
      }
      if (struct.isSetOrderSubmitStatus()) {
        optionals.set(16);
      }
      if (struct.isSetNotifySequence()) {
        optionals.set(17);
      }
      if (struct.isSetTradingDay()) {
        optionals.set(18);
      }
      if (struct.isSetSettlementID()) {
        optionals.set(19);
      }
      if (struct.isSetExecOrderSysID()) {
        optionals.set(20);
      }
      if (struct.isSetInsertDate()) {
        optionals.set(21);
      }
      if (struct.isSetInsertTime()) {
        optionals.set(22);
      }
      if (struct.isSetCancelTime()) {
        optionals.set(23);
      }
      if (struct.isSetExecResult()) {
        optionals.set(24);
      }
      if (struct.isSetClearingPartID()) {
        optionals.set(25);
      }
      if (struct.isSetSequenceNo()) {
        optionals.set(26);
      }
      oprot.writeBitSet(optionals, 27);
      if (struct.isSetVolume()) {
        oprot.writeI32(struct.volume);
      }
      if (struct.isSetRequestID()) {
        oprot.writeI32(struct.requestID);
      }
      if (struct.isSetBusinessUnit()) {
        oprot.writeString(struct.businessUnit);
      }
      if (struct.isSetOffsetFlag()) {
        oprot.writeString(struct.offsetFlag);
      }
      if (struct.isSetHedgeFlag()) {
        oprot.writeString(struct.hedgeFlag);
      }
      if (struct.isSetActionType()) {
        oprot.writeString(struct.actionType);
      }
      if (struct.isSetPosiDirection()) {
        oprot.writeString(struct.posiDirection);
      }
      if (struct.isSetReservePositionFlag()) {
        oprot.writeString(struct.reservePositionFlag);
      }
      if (struct.isSetCloseFlag()) {
        oprot.writeString(struct.closeFlag);
      }
      if (struct.isSetExecOrderLocalID()) {
        oprot.writeString(struct.execOrderLocalID);
      }
      if (struct.isSetExchangeID()) {
        oprot.writeString(struct.exchangeID);
      }
      if (struct.isSetParticipantID()) {
        oprot.writeString(struct.participantID);
      }
      if (struct.isSetClientID()) {
        oprot.writeString(struct.clientID);
      }
      if (struct.isSetExchangeInstID()) {
        oprot.writeString(struct.exchangeInstID);
      }
      if (struct.isSetTraderID()) {
        oprot.writeString(struct.traderID);
      }
      if (struct.isSetInstallID()) {
        oprot.writeI32(struct.installID);
      }
      if (struct.isSetOrderSubmitStatus()) {
        oprot.writeString(struct.orderSubmitStatus);
      }
      if (struct.isSetNotifySequence()) {
        oprot.writeI32(struct.notifySequence);
      }
      if (struct.isSetTradingDay()) {
        oprot.writeString(struct.tradingDay);
      }
      if (struct.isSetSettlementID()) {
        oprot.writeI32(struct.settlementID);
      }
      if (struct.isSetExecOrderSysID()) {
        oprot.writeString(struct.execOrderSysID);
      }
      if (struct.isSetInsertDate()) {
        oprot.writeString(struct.insertDate);
      }
      if (struct.isSetInsertTime()) {
        oprot.writeString(struct.insertTime);
      }
      if (struct.isSetCancelTime()) {
        oprot.writeString(struct.cancelTime);
      }
      if (struct.isSetExecResult()) {
        oprot.writeString(struct.execResult);
      }
      if (struct.isSetClearingPartID()) {
        oprot.writeString(struct.clearingPartID);
      }
      if (struct.isSetSequenceNo()) {
        oprot.writeI32(struct.sequenceNo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcExchangeExecOrderField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(27);
      if (incoming.get(0)) {
        struct.volume = iprot.readI32();
        struct.setVolumeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.requestID = iprot.readI32();
        struct.setRequestIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.businessUnit = iprot.readString();
        struct.setBusinessUnitIsSet(true);
      }
      if (incoming.get(3)) {
        struct.offsetFlag = iprot.readString();
        struct.setOffsetFlagIsSet(true);
      }
      if (incoming.get(4)) {
        struct.hedgeFlag = iprot.readString();
        struct.setHedgeFlagIsSet(true);
      }
      if (incoming.get(5)) {
        struct.actionType = iprot.readString();
        struct.setActionTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.posiDirection = iprot.readString();
        struct.setPosiDirectionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.reservePositionFlag = iprot.readString();
        struct.setReservePositionFlagIsSet(true);
      }
      if (incoming.get(8)) {
        struct.closeFlag = iprot.readString();
        struct.setCloseFlagIsSet(true);
      }
      if (incoming.get(9)) {
        struct.execOrderLocalID = iprot.readString();
        struct.setExecOrderLocalIDIsSet(true);
      }
      if (incoming.get(10)) {
        struct.exchangeID = iprot.readString();
        struct.setExchangeIDIsSet(true);
      }
      if (incoming.get(11)) {
        struct.participantID = iprot.readString();
        struct.setParticipantIDIsSet(true);
      }
      if (incoming.get(12)) {
        struct.clientID = iprot.readString();
        struct.setClientIDIsSet(true);
      }
      if (incoming.get(13)) {
        struct.exchangeInstID = iprot.readString();
        struct.setExchangeInstIDIsSet(true);
      }
      if (incoming.get(14)) {
        struct.traderID = iprot.readString();
        struct.setTraderIDIsSet(true);
      }
      if (incoming.get(15)) {
        struct.installID = iprot.readI32();
        struct.setInstallIDIsSet(true);
      }
      if (incoming.get(16)) {
        struct.orderSubmitStatus = iprot.readString();
        struct.setOrderSubmitStatusIsSet(true);
      }
      if (incoming.get(17)) {
        struct.notifySequence = iprot.readI32();
        struct.setNotifySequenceIsSet(true);
      }
      if (incoming.get(18)) {
        struct.tradingDay = iprot.readString();
        struct.setTradingDayIsSet(true);
      }
      if (incoming.get(19)) {
        struct.settlementID = iprot.readI32();
        struct.setSettlementIDIsSet(true);
      }
      if (incoming.get(20)) {
        struct.execOrderSysID = iprot.readString();
        struct.setExecOrderSysIDIsSet(true);
      }
      if (incoming.get(21)) {
        struct.insertDate = iprot.readString();
        struct.setInsertDateIsSet(true);
      }
      if (incoming.get(22)) {
        struct.insertTime = iprot.readString();
        struct.setInsertTimeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.cancelTime = iprot.readString();
        struct.setCancelTimeIsSet(true);
      }
      if (incoming.get(24)) {
        struct.execResult = iprot.readString();
        struct.setExecResultIsSet(true);
      }
      if (incoming.get(25)) {
        struct.clearingPartID = iprot.readString();
        struct.setClearingPartIDIsSet(true);
      }
      if (incoming.get(26)) {
        struct.sequenceNo = iprot.readI32();
        struct.setSequenceNoIsSet(true);
      }
    }
  }

}

