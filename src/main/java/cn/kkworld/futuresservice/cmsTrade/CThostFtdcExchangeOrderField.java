/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcExchangeOrderField implements org.apache.thrift.TBase<CThostFtdcExchangeOrderField, CThostFtdcExchangeOrderField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcExchangeOrderField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcExchangeOrderField");

  private static final org.apache.thrift.protocol.TField ORDER_PRICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderPriceType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("direction", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COMB_OFFSET_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("combOffsetFlag", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COMB_HEDGE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("combHedgeFlag", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LIMIT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("limitPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField VOLUME_TOTAL_ORIGINAL_FIELD_DESC = new org.apache.thrift.protocol.TField("volumeTotalOriginal", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TIME_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("timeCondition", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField G_TDDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("gTDDate", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField VOLUME_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("volumeCondition", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MIN_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("minVolume", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField CONTINGENT_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("contingentCondition", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField STOP_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("stopPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField FORCE_CLOSE_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("forceCloseReason", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField IS_AUTO_SUSPEND_FIELD_DESC = new org.apache.thrift.protocol.TField("isAutoSuspend", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField BUSINESS_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("businessUnit", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestID", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField ORDER_LOCAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderLocalID", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField EXCHANGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeID", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField PARTICIPANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("participantID", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientID", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField EXCHANGE_INST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeInstID", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField TRADER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("traderID", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField INSTALL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("installID", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField ORDER_SUBMIT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("orderSubmitStatus", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField NOTIFY_SEQUENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("notifySequence", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField TRADING_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("tradingDay", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField SETTLEMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("settlementID", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField ORDER_SYS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderSysID", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField ORDER_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderSource", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField ORDER_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("orderStatus", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField ORDER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderType", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField VOLUME_TRADED_FIELD_DESC = new org.apache.thrift.protocol.TField("volumeTraded", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField VOLUME_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("volumeTotal", org.apache.thrift.protocol.TType.I32, (short)33);
  private static final org.apache.thrift.protocol.TField INSERT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("insertDate", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField INSERT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("insertTime", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField ACTIVE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("activeTime", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField SUSPEND_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("suspendTime", org.apache.thrift.protocol.TType.STRING, (short)37);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField CANCEL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelTime", org.apache.thrift.protocol.TType.STRING, (short)39);
  private static final org.apache.thrift.protocol.TField ACTIVE_TRADER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activeTraderID", org.apache.thrift.protocol.TType.STRING, (short)40);
  private static final org.apache.thrift.protocol.TField CLEARING_PART_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clearingPartID", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField SEQUENCE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("sequenceNo", org.apache.thrift.protocol.TType.I32, (short)42);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcExchangeOrderFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcExchangeOrderFieldTupleSchemeFactory());
  }

  public String orderPriceType; // required
  public String direction; // required
  public String combOffsetFlag; // required
  public String combHedgeFlag; // required
  public double limitPrice; // required
  public int volumeTotalOriginal; // required
  public String timeCondition; // required
  public String gTDDate; // required
  public String volumeCondition; // required
  public int minVolume; // required
  public String contingentCondition; // required
  public double stopPrice; // required
  public String forceCloseReason; // required
  public int isAutoSuspend; // required
  public String businessUnit; // required
  public int requestID; // required
  public String orderLocalID; // required
  public String exchangeID; // required
  public String participantID; // required
  public String clientID; // required
  public String exchangeInstID; // required
  public String traderID; // required
  public int installID; // required
  public String orderSubmitStatus; // required
  public int notifySequence; // required
  public String tradingDay; // required
  public int settlementID; // required
  public String orderSysID; // required
  public String orderSource; // required
  public String orderStatus; // required
  public String orderType; // required
  public int volumeTraded; // required
  public int volumeTotal; // required
  public String insertDate; // required
  public String insertTime; // required
  public String activeTime; // required
  public String suspendTime; // required
  public String updateTime; // required
  public String cancelTime; // required
  public String activeTraderID; // required
  public String clearingPartID; // required
  public int sequenceNo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORDER_PRICE_TYPE((short)1, "orderPriceType"),
    DIRECTION((short)2, "direction"),
    COMB_OFFSET_FLAG((short)3, "combOffsetFlag"),
    COMB_HEDGE_FLAG((short)4, "combHedgeFlag"),
    LIMIT_PRICE((short)5, "limitPrice"),
    VOLUME_TOTAL_ORIGINAL((short)6, "volumeTotalOriginal"),
    TIME_CONDITION((short)7, "timeCondition"),
    G_TDDATE((short)8, "gTDDate"),
    VOLUME_CONDITION((short)9, "volumeCondition"),
    MIN_VOLUME((short)10, "minVolume"),
    CONTINGENT_CONDITION((short)11, "contingentCondition"),
    STOP_PRICE((short)12, "stopPrice"),
    FORCE_CLOSE_REASON((short)13, "forceCloseReason"),
    IS_AUTO_SUSPEND((short)14, "isAutoSuspend"),
    BUSINESS_UNIT((short)15, "businessUnit"),
    REQUEST_ID((short)16, "requestID"),
    ORDER_LOCAL_ID((short)17, "orderLocalID"),
    EXCHANGE_ID((short)18, "exchangeID"),
    PARTICIPANT_ID((short)19, "participantID"),
    CLIENT_ID((short)20, "clientID"),
    EXCHANGE_INST_ID((short)21, "exchangeInstID"),
    TRADER_ID((short)22, "traderID"),
    INSTALL_ID((short)23, "installID"),
    ORDER_SUBMIT_STATUS((short)24, "orderSubmitStatus"),
    NOTIFY_SEQUENCE((short)25, "notifySequence"),
    TRADING_DAY((short)26, "tradingDay"),
    SETTLEMENT_ID((short)27, "settlementID"),
    ORDER_SYS_ID((short)28, "orderSysID"),
    ORDER_SOURCE((short)29, "orderSource"),
    ORDER_STATUS((short)30, "orderStatus"),
    ORDER_TYPE((short)31, "orderType"),
    VOLUME_TRADED((short)32, "volumeTraded"),
    VOLUME_TOTAL((short)33, "volumeTotal"),
    INSERT_DATE((short)34, "insertDate"),
    INSERT_TIME((short)35, "insertTime"),
    ACTIVE_TIME((short)36, "activeTime"),
    SUSPEND_TIME((short)37, "suspendTime"),
    UPDATE_TIME((short)38, "updateTime"),
    CANCEL_TIME((short)39, "cancelTime"),
    ACTIVE_TRADER_ID((short)40, "activeTraderID"),
    CLEARING_PART_ID((short)41, "clearingPartID"),
    SEQUENCE_NO((short)42, "sequenceNo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_PRICE_TYPE
          return ORDER_PRICE_TYPE;
        case 2: // DIRECTION
          return DIRECTION;
        case 3: // COMB_OFFSET_FLAG
          return COMB_OFFSET_FLAG;
        case 4: // COMB_HEDGE_FLAG
          return COMB_HEDGE_FLAG;
        case 5: // LIMIT_PRICE
          return LIMIT_PRICE;
        case 6: // VOLUME_TOTAL_ORIGINAL
          return VOLUME_TOTAL_ORIGINAL;
        case 7: // TIME_CONDITION
          return TIME_CONDITION;
        case 8: // G_TDDATE
          return G_TDDATE;
        case 9: // VOLUME_CONDITION
          return VOLUME_CONDITION;
        case 10: // MIN_VOLUME
          return MIN_VOLUME;
        case 11: // CONTINGENT_CONDITION
          return CONTINGENT_CONDITION;
        case 12: // STOP_PRICE
          return STOP_PRICE;
        case 13: // FORCE_CLOSE_REASON
          return FORCE_CLOSE_REASON;
        case 14: // IS_AUTO_SUSPEND
          return IS_AUTO_SUSPEND;
        case 15: // BUSINESS_UNIT
          return BUSINESS_UNIT;
        case 16: // REQUEST_ID
          return REQUEST_ID;
        case 17: // ORDER_LOCAL_ID
          return ORDER_LOCAL_ID;
        case 18: // EXCHANGE_ID
          return EXCHANGE_ID;
        case 19: // PARTICIPANT_ID
          return PARTICIPANT_ID;
        case 20: // CLIENT_ID
          return CLIENT_ID;
        case 21: // EXCHANGE_INST_ID
          return EXCHANGE_INST_ID;
        case 22: // TRADER_ID
          return TRADER_ID;
        case 23: // INSTALL_ID
          return INSTALL_ID;
        case 24: // ORDER_SUBMIT_STATUS
          return ORDER_SUBMIT_STATUS;
        case 25: // NOTIFY_SEQUENCE
          return NOTIFY_SEQUENCE;
        case 26: // TRADING_DAY
          return TRADING_DAY;
        case 27: // SETTLEMENT_ID
          return SETTLEMENT_ID;
        case 28: // ORDER_SYS_ID
          return ORDER_SYS_ID;
        case 29: // ORDER_SOURCE
          return ORDER_SOURCE;
        case 30: // ORDER_STATUS
          return ORDER_STATUS;
        case 31: // ORDER_TYPE
          return ORDER_TYPE;
        case 32: // VOLUME_TRADED
          return VOLUME_TRADED;
        case 33: // VOLUME_TOTAL
          return VOLUME_TOTAL;
        case 34: // INSERT_DATE
          return INSERT_DATE;
        case 35: // INSERT_TIME
          return INSERT_TIME;
        case 36: // ACTIVE_TIME
          return ACTIVE_TIME;
        case 37: // SUSPEND_TIME
          return SUSPEND_TIME;
        case 38: // UPDATE_TIME
          return UPDATE_TIME;
        case 39: // CANCEL_TIME
          return CANCEL_TIME;
        case 40: // ACTIVE_TRADER_ID
          return ACTIVE_TRADER_ID;
        case 41: // CLEARING_PART_ID
          return CLEARING_PART_ID;
        case 42: // SEQUENCE_NO
          return SEQUENCE_NO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LIMITPRICE_ISSET_ID = 0;
  private static final int __VOLUMETOTALORIGINAL_ISSET_ID = 1;
  private static final int __MINVOLUME_ISSET_ID = 2;
  private static final int __STOPPRICE_ISSET_ID = 3;
  private static final int __ISAUTOSUSPEND_ISSET_ID = 4;
  private static final int __REQUESTID_ISSET_ID = 5;
  private static final int __INSTALLID_ISSET_ID = 6;
  private static final int __NOTIFYSEQUENCE_ISSET_ID = 7;
  private static final int __SETTLEMENTID_ISSET_ID = 8;
  private static final int __VOLUMETRADED_ISSET_ID = 9;
  private static final int __VOLUMETOTAL_ISSET_ID = 10;
  private static final int __SEQUENCENO_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_PRICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("orderPriceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderPriceTypeType")));
    tmpMap.put(_Fields.DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("direction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDirectionType")));
    tmpMap.put(_Fields.COMB_OFFSET_FLAG, new org.apache.thrift.meta_data.FieldMetaData("combOffsetFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcCombOffsetFlagType")));
    tmpMap.put(_Fields.COMB_HEDGE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("combHedgeFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcCombHedgeFlagType")));
    tmpMap.put(_Fields.LIMIT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("limitPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.VOLUME_TOTAL_ORIGINAL, new org.apache.thrift.meta_data.FieldMetaData("volumeTotalOriginal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcVolumeType")));
    tmpMap.put(_Fields.TIME_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("timeCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeConditionType")));
    tmpMap.put(_Fields.G_TDDATE, new org.apache.thrift.meta_data.FieldMetaData("gTDDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    tmpMap.put(_Fields.VOLUME_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("volumeCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcVolumeConditionType")));
    tmpMap.put(_Fields.MIN_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("minVolume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcVolumeType")));
    tmpMap.put(_Fields.CONTINGENT_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("contingentCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcContingentConditionType")));
    tmpMap.put(_Fields.STOP_PRICE, new org.apache.thrift.meta_data.FieldMetaData("stopPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.FORCE_CLOSE_REASON, new org.apache.thrift.meta_data.FieldMetaData("forceCloseReason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcForceCloseReasonType")));
    tmpMap.put(_Fields.IS_AUTO_SUSPEND, new org.apache.thrift.meta_data.FieldMetaData("isAutoSuspend", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcBoolType")));
    tmpMap.put(_Fields.BUSINESS_UNIT, new org.apache.thrift.meta_data.FieldMetaData("businessUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBusinessUnitType")));
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcRequestIDType")));
    tmpMap.put(_Fields.ORDER_LOCAL_ID, new org.apache.thrift.meta_data.FieldMetaData("orderLocalID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderLocalIDType")));
    tmpMap.put(_Fields.EXCHANGE_ID, new org.apache.thrift.meta_data.FieldMetaData("exchangeID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcExchangeIDType")));
    tmpMap.put(_Fields.PARTICIPANT_ID, new org.apache.thrift.meta_data.FieldMetaData("participantID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcParticipantIDType")));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcClientIDType")));
    tmpMap.put(_Fields.EXCHANGE_INST_ID, new org.apache.thrift.meta_data.FieldMetaData("exchangeInstID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcExchangeInstIDType")));
    tmpMap.put(_Fields.TRADER_ID, new org.apache.thrift.meta_data.FieldMetaData("traderID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTraderIDType")));
    tmpMap.put(_Fields.INSTALL_ID, new org.apache.thrift.meta_data.FieldMetaData("installID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcInstallIDType")));
    tmpMap.put(_Fields.ORDER_SUBMIT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("orderSubmitStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderSubmitStatusType")));
    tmpMap.put(_Fields.NOTIFY_SEQUENCE, new org.apache.thrift.meta_data.FieldMetaData("notifySequence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcSequenceNoType")));
    tmpMap.put(_Fields.TRADING_DAY, new org.apache.thrift.meta_data.FieldMetaData("tradingDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    tmpMap.put(_Fields.SETTLEMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("settlementID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcSettlementIDType")));
    tmpMap.put(_Fields.ORDER_SYS_ID, new org.apache.thrift.meta_data.FieldMetaData("orderSysID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderSysIDType")));
    tmpMap.put(_Fields.ORDER_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("orderSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderSourceType")));
    tmpMap.put(_Fields.ORDER_STATUS, new org.apache.thrift.meta_data.FieldMetaData("orderStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderStatusType")));
    tmpMap.put(_Fields.ORDER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("orderType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderTypeType")));
    tmpMap.put(_Fields.VOLUME_TRADED, new org.apache.thrift.meta_data.FieldMetaData("volumeTraded", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcVolumeType")));
    tmpMap.put(_Fields.VOLUME_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("volumeTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcVolumeType")));
    tmpMap.put(_Fields.INSERT_DATE, new org.apache.thrift.meta_data.FieldMetaData("insertDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    tmpMap.put(_Fields.INSERT_TIME, new org.apache.thrift.meta_data.FieldMetaData("insertTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeType")));
    tmpMap.put(_Fields.ACTIVE_TIME, new org.apache.thrift.meta_data.FieldMetaData("activeTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeType")));
    tmpMap.put(_Fields.SUSPEND_TIME, new org.apache.thrift.meta_data.FieldMetaData("suspendTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeType")));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeType")));
    tmpMap.put(_Fields.CANCEL_TIME, new org.apache.thrift.meta_data.FieldMetaData("cancelTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeType")));
    tmpMap.put(_Fields.ACTIVE_TRADER_ID, new org.apache.thrift.meta_data.FieldMetaData("activeTraderID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTraderIDType")));
    tmpMap.put(_Fields.CLEARING_PART_ID, new org.apache.thrift.meta_data.FieldMetaData("clearingPartID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcParticipantIDType")));
    tmpMap.put(_Fields.SEQUENCE_NO, new org.apache.thrift.meta_data.FieldMetaData("sequenceNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcSequenceNoType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcExchangeOrderField.class, metaDataMap);
  }

  public CThostFtdcExchangeOrderField() {
  }

  public CThostFtdcExchangeOrderField(
    String orderPriceType,
    String direction,
    String combOffsetFlag,
    String combHedgeFlag,
    double limitPrice,
    int volumeTotalOriginal,
    String timeCondition,
    String gTDDate,
    String volumeCondition,
    int minVolume,
    String contingentCondition,
    double stopPrice,
    String forceCloseReason,
    int isAutoSuspend,
    String businessUnit,
    int requestID,
    String orderLocalID,
    String exchangeID,
    String participantID,
    String clientID,
    String exchangeInstID,
    String traderID,
    int installID,
    String orderSubmitStatus,
    int notifySequence,
    String tradingDay,
    int settlementID,
    String orderSysID,
    String orderSource,
    String orderStatus,
    String orderType,
    int volumeTraded,
    int volumeTotal,
    String insertDate,
    String insertTime,
    String activeTime,
    String suspendTime,
    String updateTime,
    String cancelTime,
    String activeTraderID,
    String clearingPartID,
    int sequenceNo)
  {
    this();
    this.orderPriceType = orderPriceType;
    this.direction = direction;
    this.combOffsetFlag = combOffsetFlag;
    this.combHedgeFlag = combHedgeFlag;
    this.limitPrice = limitPrice;
    setLimitPriceIsSet(true);
    this.volumeTotalOriginal = volumeTotalOriginal;
    setVolumeTotalOriginalIsSet(true);
    this.timeCondition = timeCondition;
    this.gTDDate = gTDDate;
    this.volumeCondition = volumeCondition;
    this.minVolume = minVolume;
    setMinVolumeIsSet(true);
    this.contingentCondition = contingentCondition;
    this.stopPrice = stopPrice;
    setStopPriceIsSet(true);
    this.forceCloseReason = forceCloseReason;
    this.isAutoSuspend = isAutoSuspend;
    setIsAutoSuspendIsSet(true);
    this.businessUnit = businessUnit;
    this.requestID = requestID;
    setRequestIDIsSet(true);
    this.orderLocalID = orderLocalID;
    this.exchangeID = exchangeID;
    this.participantID = participantID;
    this.clientID = clientID;
    this.exchangeInstID = exchangeInstID;
    this.traderID = traderID;
    this.installID = installID;
    setInstallIDIsSet(true);
    this.orderSubmitStatus = orderSubmitStatus;
    this.notifySequence = notifySequence;
    setNotifySequenceIsSet(true);
    this.tradingDay = tradingDay;
    this.settlementID = settlementID;
    setSettlementIDIsSet(true);
    this.orderSysID = orderSysID;
    this.orderSource = orderSource;
    this.orderStatus = orderStatus;
    this.orderType = orderType;
    this.volumeTraded = volumeTraded;
    setVolumeTradedIsSet(true);
    this.volumeTotal = volumeTotal;
    setVolumeTotalIsSet(true);
    this.insertDate = insertDate;
    this.insertTime = insertTime;
    this.activeTime = activeTime;
    this.suspendTime = suspendTime;
    this.updateTime = updateTime;
    this.cancelTime = cancelTime;
    this.activeTraderID = activeTraderID;
    this.clearingPartID = clearingPartID;
    this.sequenceNo = sequenceNo;
    setSequenceNoIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcExchangeOrderField(CThostFtdcExchangeOrderField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrderPriceType()) {
      this.orderPriceType = other.orderPriceType;
    }
    if (other.isSetDirection()) {
      this.direction = other.direction;
    }
    if (other.isSetCombOffsetFlag()) {
      this.combOffsetFlag = other.combOffsetFlag;
    }
    if (other.isSetCombHedgeFlag()) {
      this.combHedgeFlag = other.combHedgeFlag;
    }
    this.limitPrice = other.limitPrice;
    this.volumeTotalOriginal = other.volumeTotalOriginal;
    if (other.isSetTimeCondition()) {
      this.timeCondition = other.timeCondition;
    }
    if (other.isSetGTDDate()) {
      this.gTDDate = other.gTDDate;
    }
    if (other.isSetVolumeCondition()) {
      this.volumeCondition = other.volumeCondition;
    }
    this.minVolume = other.minVolume;
    if (other.isSetContingentCondition()) {
      this.contingentCondition = other.contingentCondition;
    }
    this.stopPrice = other.stopPrice;
    if (other.isSetForceCloseReason()) {
      this.forceCloseReason = other.forceCloseReason;
    }
    this.isAutoSuspend = other.isAutoSuspend;
    if (other.isSetBusinessUnit()) {
      this.businessUnit = other.businessUnit;
    }
    this.requestID = other.requestID;
    if (other.isSetOrderLocalID()) {
      this.orderLocalID = other.orderLocalID;
    }
    if (other.isSetExchangeID()) {
      this.exchangeID = other.exchangeID;
    }
    if (other.isSetParticipantID()) {
      this.participantID = other.participantID;
    }
    if (other.isSetClientID()) {
      this.clientID = other.clientID;
    }
    if (other.isSetExchangeInstID()) {
      this.exchangeInstID = other.exchangeInstID;
    }
    if (other.isSetTraderID()) {
      this.traderID = other.traderID;
    }
    this.installID = other.installID;
    if (other.isSetOrderSubmitStatus()) {
      this.orderSubmitStatus = other.orderSubmitStatus;
    }
    this.notifySequence = other.notifySequence;
    if (other.isSetTradingDay()) {
      this.tradingDay = other.tradingDay;
    }
    this.settlementID = other.settlementID;
    if (other.isSetOrderSysID()) {
      this.orderSysID = other.orderSysID;
    }
    if (other.isSetOrderSource()) {
      this.orderSource = other.orderSource;
    }
    if (other.isSetOrderStatus()) {
      this.orderStatus = other.orderStatus;
    }
    if (other.isSetOrderType()) {
      this.orderType = other.orderType;
    }
    this.volumeTraded = other.volumeTraded;
    this.volumeTotal = other.volumeTotal;
    if (other.isSetInsertDate()) {
      this.insertDate = other.insertDate;
    }
    if (other.isSetInsertTime()) {
      this.insertTime = other.insertTime;
    }
    if (other.isSetActiveTime()) {
      this.activeTime = other.activeTime;
    }
    if (other.isSetSuspendTime()) {
      this.suspendTime = other.suspendTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    if (other.isSetCancelTime()) {
      this.cancelTime = other.cancelTime;
    }
    if (other.isSetActiveTraderID()) {
      this.activeTraderID = other.activeTraderID;
    }
    if (other.isSetClearingPartID()) {
      this.clearingPartID = other.clearingPartID;
    }
    this.sequenceNo = other.sequenceNo;
  }

  public CThostFtdcExchangeOrderField deepCopy() {
    return new CThostFtdcExchangeOrderField(this);
  }

  @Override
  public void clear() {
    this.orderPriceType = null;
    this.direction = null;
    this.combOffsetFlag = null;
    this.combHedgeFlag = null;
    setLimitPriceIsSet(false);
    this.limitPrice = 0.0;
    setVolumeTotalOriginalIsSet(false);
    this.volumeTotalOriginal = 0;
    this.timeCondition = null;
    this.gTDDate = null;
    this.volumeCondition = null;
    setMinVolumeIsSet(false);
    this.minVolume = 0;
    this.contingentCondition = null;
    setStopPriceIsSet(false);
    this.stopPrice = 0.0;
    this.forceCloseReason = null;
    setIsAutoSuspendIsSet(false);
    this.isAutoSuspend = 0;
    this.businessUnit = null;
    setRequestIDIsSet(false);
    this.requestID = 0;
    this.orderLocalID = null;
    this.exchangeID = null;
    this.participantID = null;
    this.clientID = null;
    this.exchangeInstID = null;
    this.traderID = null;
    setInstallIDIsSet(false);
    this.installID = 0;
    this.orderSubmitStatus = null;
    setNotifySequenceIsSet(false);
    this.notifySequence = 0;
    this.tradingDay = null;
    setSettlementIDIsSet(false);
    this.settlementID = 0;
    this.orderSysID = null;
    this.orderSource = null;
    this.orderStatus = null;
    this.orderType = null;
    setVolumeTradedIsSet(false);
    this.volumeTraded = 0;
    setVolumeTotalIsSet(false);
    this.volumeTotal = 0;
    this.insertDate = null;
    this.insertTime = null;
    this.activeTime = null;
    this.suspendTime = null;
    this.updateTime = null;
    this.cancelTime = null;
    this.activeTraderID = null;
    this.clearingPartID = null;
    setSequenceNoIsSet(false);
    this.sequenceNo = 0;
  }

  public String getOrderPriceType() {
    return this.orderPriceType;
  }

  public CThostFtdcExchangeOrderField setOrderPriceType(String orderPriceType) {
    this.orderPriceType = orderPriceType;
    return this;
  }

  public void unsetOrderPriceType() {
    this.orderPriceType = null;
  }

  /** Returns true if field orderPriceType is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderPriceType() {
    return this.orderPriceType != null;
  }

  public void setOrderPriceTypeIsSet(boolean value) {
    if (!value) {
      this.orderPriceType = null;
    }
  }

  public String getDirection() {
    return this.direction;
  }

  public CThostFtdcExchangeOrderField setDirection(String direction) {
    this.direction = direction;
    return this;
  }

  public void unsetDirection() {
    this.direction = null;
  }

  /** Returns true if field direction is set (has been assigned a value) and false otherwise */
  public boolean isSetDirection() {
    return this.direction != null;
  }

  public void setDirectionIsSet(boolean value) {
    if (!value) {
      this.direction = null;
    }
  }

  public String getCombOffsetFlag() {
    return this.combOffsetFlag;
  }

  public CThostFtdcExchangeOrderField setCombOffsetFlag(String combOffsetFlag) {
    this.combOffsetFlag = combOffsetFlag;
    return this;
  }

  public void unsetCombOffsetFlag() {
    this.combOffsetFlag = null;
  }

  /** Returns true if field combOffsetFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetCombOffsetFlag() {
    return this.combOffsetFlag != null;
  }

  public void setCombOffsetFlagIsSet(boolean value) {
    if (!value) {
      this.combOffsetFlag = null;
    }
  }

  public String getCombHedgeFlag() {
    return this.combHedgeFlag;
  }

  public CThostFtdcExchangeOrderField setCombHedgeFlag(String combHedgeFlag) {
    this.combHedgeFlag = combHedgeFlag;
    return this;
  }

  public void unsetCombHedgeFlag() {
    this.combHedgeFlag = null;
  }

  /** Returns true if field combHedgeFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetCombHedgeFlag() {
    return this.combHedgeFlag != null;
  }

  public void setCombHedgeFlagIsSet(boolean value) {
    if (!value) {
      this.combHedgeFlag = null;
    }
  }

  public double getLimitPrice() {
    return this.limitPrice;
  }

  public CThostFtdcExchangeOrderField setLimitPrice(double limitPrice) {
    this.limitPrice = limitPrice;
    setLimitPriceIsSet(true);
    return this;
  }

  public void unsetLimitPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMITPRICE_ISSET_ID);
  }

  /** Returns true if field limitPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMITPRICE_ISSET_ID);
  }

  public void setLimitPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMITPRICE_ISSET_ID, value);
  }

  public int getVolumeTotalOriginal() {
    return this.volumeTotalOriginal;
  }

  public CThostFtdcExchangeOrderField setVolumeTotalOriginal(int volumeTotalOriginal) {
    this.volumeTotalOriginal = volumeTotalOriginal;
    setVolumeTotalOriginalIsSet(true);
    return this;
  }

  public void unsetVolumeTotalOriginal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLUMETOTALORIGINAL_ISSET_ID);
  }

  /** Returns true if field volumeTotalOriginal is set (has been assigned a value) and false otherwise */
  public boolean isSetVolumeTotalOriginal() {
    return EncodingUtils.testBit(__isset_bitfield, __VOLUMETOTALORIGINAL_ISSET_ID);
  }

  public void setVolumeTotalOriginalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLUMETOTALORIGINAL_ISSET_ID, value);
  }

  public String getTimeCondition() {
    return this.timeCondition;
  }

  public CThostFtdcExchangeOrderField setTimeCondition(String timeCondition) {
    this.timeCondition = timeCondition;
    return this;
  }

  public void unsetTimeCondition() {
    this.timeCondition = null;
  }

  /** Returns true if field timeCondition is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeCondition() {
    return this.timeCondition != null;
  }

  public void setTimeConditionIsSet(boolean value) {
    if (!value) {
      this.timeCondition = null;
    }
  }

  public String getGTDDate() {
    return this.gTDDate;
  }

  public CThostFtdcExchangeOrderField setGTDDate(String gTDDate) {
    this.gTDDate = gTDDate;
    return this;
  }

  public void unsetGTDDate() {
    this.gTDDate = null;
  }

  /** Returns true if field gTDDate is set (has been assigned a value) and false otherwise */
  public boolean isSetGTDDate() {
    return this.gTDDate != null;
  }

  public void setGTDDateIsSet(boolean value) {
    if (!value) {
      this.gTDDate = null;
    }
  }

  public String getVolumeCondition() {
    return this.volumeCondition;
  }

  public CThostFtdcExchangeOrderField setVolumeCondition(String volumeCondition) {
    this.volumeCondition = volumeCondition;
    return this;
  }

  public void unsetVolumeCondition() {
    this.volumeCondition = null;
  }

  /** Returns true if field volumeCondition is set (has been assigned a value) and false otherwise */
  public boolean isSetVolumeCondition() {
    return this.volumeCondition != null;
  }

  public void setVolumeConditionIsSet(boolean value) {
    if (!value) {
      this.volumeCondition = null;
    }
  }

  public int getMinVolume() {
    return this.minVolume;
  }

  public CThostFtdcExchangeOrderField setMinVolume(int minVolume) {
    this.minVolume = minVolume;
    setMinVolumeIsSet(true);
    return this;
  }

  public void unsetMinVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINVOLUME_ISSET_ID);
  }

  /** Returns true if field minVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetMinVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __MINVOLUME_ISSET_ID);
  }

  public void setMinVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINVOLUME_ISSET_ID, value);
  }

  public String getContingentCondition() {
    return this.contingentCondition;
  }

  public CThostFtdcExchangeOrderField setContingentCondition(String contingentCondition) {
    this.contingentCondition = contingentCondition;
    return this;
  }

  public void unsetContingentCondition() {
    this.contingentCondition = null;
  }

  /** Returns true if field contingentCondition is set (has been assigned a value) and false otherwise */
  public boolean isSetContingentCondition() {
    return this.contingentCondition != null;
  }

  public void setContingentConditionIsSet(boolean value) {
    if (!value) {
      this.contingentCondition = null;
    }
  }

  public double getStopPrice() {
    return this.stopPrice;
  }

  public CThostFtdcExchangeOrderField setStopPrice(double stopPrice) {
    this.stopPrice = stopPrice;
    setStopPriceIsSet(true);
    return this;
  }

  public void unsetStopPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STOPPRICE_ISSET_ID);
  }

  /** Returns true if field stopPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetStopPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __STOPPRICE_ISSET_ID);
  }

  public void setStopPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STOPPRICE_ISSET_ID, value);
  }

  public String getForceCloseReason() {
    return this.forceCloseReason;
  }

  public CThostFtdcExchangeOrderField setForceCloseReason(String forceCloseReason) {
    this.forceCloseReason = forceCloseReason;
    return this;
  }

  public void unsetForceCloseReason() {
    this.forceCloseReason = null;
  }

  /** Returns true if field forceCloseReason is set (has been assigned a value) and false otherwise */
  public boolean isSetForceCloseReason() {
    return this.forceCloseReason != null;
  }

  public void setForceCloseReasonIsSet(boolean value) {
    if (!value) {
      this.forceCloseReason = null;
    }
  }

  public int getIsAutoSuspend() {
    return this.isAutoSuspend;
  }

  public CThostFtdcExchangeOrderField setIsAutoSuspend(int isAutoSuspend) {
    this.isAutoSuspend = isAutoSuspend;
    setIsAutoSuspendIsSet(true);
    return this;
  }

  public void unsetIsAutoSuspend() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISAUTOSUSPEND_ISSET_ID);
  }

  /** Returns true if field isAutoSuspend is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAutoSuspend() {
    return EncodingUtils.testBit(__isset_bitfield, __ISAUTOSUSPEND_ISSET_ID);
  }

  public void setIsAutoSuspendIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISAUTOSUSPEND_ISSET_ID, value);
  }

  public String getBusinessUnit() {
    return this.businessUnit;
  }

  public CThostFtdcExchangeOrderField setBusinessUnit(String businessUnit) {
    this.businessUnit = businessUnit;
    return this;
  }

  public void unsetBusinessUnit() {
    this.businessUnit = null;
  }

  /** Returns true if field businessUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessUnit() {
    return this.businessUnit != null;
  }

  public void setBusinessUnitIsSet(boolean value) {
    if (!value) {
      this.businessUnit = null;
    }
  }

  public int getRequestID() {
    return this.requestID;
  }

  public CThostFtdcExchangeOrderField setRequestID(int requestID) {
    this.requestID = requestID;
    setRequestIDIsSet(true);
    return this;
  }

  public void unsetRequestID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  /** Returns true if field requestID is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestID() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  public void setRequestIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
  }

  public String getOrderLocalID() {
    return this.orderLocalID;
  }

  public CThostFtdcExchangeOrderField setOrderLocalID(String orderLocalID) {
    this.orderLocalID = orderLocalID;
    return this;
  }

  public void unsetOrderLocalID() {
    this.orderLocalID = null;
  }

  /** Returns true if field orderLocalID is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderLocalID() {
    return this.orderLocalID != null;
  }

  public void setOrderLocalIDIsSet(boolean value) {
    if (!value) {
      this.orderLocalID = null;
    }
  }

  public String getExchangeID() {
    return this.exchangeID;
  }

  public CThostFtdcExchangeOrderField setExchangeID(String exchangeID) {
    this.exchangeID = exchangeID;
    return this;
  }

  public void unsetExchangeID() {
    this.exchangeID = null;
  }

  /** Returns true if field exchangeID is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeID() {
    return this.exchangeID != null;
  }

  public void setExchangeIDIsSet(boolean value) {
    if (!value) {
      this.exchangeID = null;
    }
  }

  public String getParticipantID() {
    return this.participantID;
  }

  public CThostFtdcExchangeOrderField setParticipantID(String participantID) {
    this.participantID = participantID;
    return this;
  }

  public void unsetParticipantID() {
    this.participantID = null;
  }

  /** Returns true if field participantID is set (has been assigned a value) and false otherwise */
  public boolean isSetParticipantID() {
    return this.participantID != null;
  }

  public void setParticipantIDIsSet(boolean value) {
    if (!value) {
      this.participantID = null;
    }
  }

  public String getClientID() {
    return this.clientID;
  }

  public CThostFtdcExchangeOrderField setClientID(String clientID) {
    this.clientID = clientID;
    return this;
  }

  public void unsetClientID() {
    this.clientID = null;
  }

  /** Returns true if field clientID is set (has been assigned a value) and false otherwise */
  public boolean isSetClientID() {
    return this.clientID != null;
  }

  public void setClientIDIsSet(boolean value) {
    if (!value) {
      this.clientID = null;
    }
  }

  public String getExchangeInstID() {
    return this.exchangeInstID;
  }

  public CThostFtdcExchangeOrderField setExchangeInstID(String exchangeInstID) {
    this.exchangeInstID = exchangeInstID;
    return this;
  }

  public void unsetExchangeInstID() {
    this.exchangeInstID = null;
  }

  /** Returns true if field exchangeInstID is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeInstID() {
    return this.exchangeInstID != null;
  }

  public void setExchangeInstIDIsSet(boolean value) {
    if (!value) {
      this.exchangeInstID = null;
    }
  }

  public String getTraderID() {
    return this.traderID;
  }

  public CThostFtdcExchangeOrderField setTraderID(String traderID) {
    this.traderID = traderID;
    return this;
  }

  public void unsetTraderID() {
    this.traderID = null;
  }

  /** Returns true if field traderID is set (has been assigned a value) and false otherwise */
  public boolean isSetTraderID() {
    return this.traderID != null;
  }

  public void setTraderIDIsSet(boolean value) {
    if (!value) {
      this.traderID = null;
    }
  }

  public int getInstallID() {
    return this.installID;
  }

  public CThostFtdcExchangeOrderField setInstallID(int installID) {
    this.installID = installID;
    setInstallIDIsSet(true);
    return this;
  }

  public void unsetInstallID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSTALLID_ISSET_ID);
  }

  /** Returns true if field installID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstallID() {
    return EncodingUtils.testBit(__isset_bitfield, __INSTALLID_ISSET_ID);
  }

  public void setInstallIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSTALLID_ISSET_ID, value);
  }

  public String getOrderSubmitStatus() {
    return this.orderSubmitStatus;
  }

  public CThostFtdcExchangeOrderField setOrderSubmitStatus(String orderSubmitStatus) {
    this.orderSubmitStatus = orderSubmitStatus;
    return this;
  }

  public void unsetOrderSubmitStatus() {
    this.orderSubmitStatus = null;
  }

  /** Returns true if field orderSubmitStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderSubmitStatus() {
    return this.orderSubmitStatus != null;
  }

  public void setOrderSubmitStatusIsSet(boolean value) {
    if (!value) {
      this.orderSubmitStatus = null;
    }
  }

  public int getNotifySequence() {
    return this.notifySequence;
  }

  public CThostFtdcExchangeOrderField setNotifySequence(int notifySequence) {
    this.notifySequence = notifySequence;
    setNotifySequenceIsSet(true);
    return this;
  }

  public void unsetNotifySequence() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTIFYSEQUENCE_ISSET_ID);
  }

  /** Returns true if field notifySequence is set (has been assigned a value) and false otherwise */
  public boolean isSetNotifySequence() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTIFYSEQUENCE_ISSET_ID);
  }

  public void setNotifySequenceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTIFYSEQUENCE_ISSET_ID, value);
  }

  public String getTradingDay() {
    return this.tradingDay;
  }

  public CThostFtdcExchangeOrderField setTradingDay(String tradingDay) {
    this.tradingDay = tradingDay;
    return this;
  }

  public void unsetTradingDay() {
    this.tradingDay = null;
  }

  /** Returns true if field tradingDay is set (has been assigned a value) and false otherwise */
  public boolean isSetTradingDay() {
    return this.tradingDay != null;
  }

  public void setTradingDayIsSet(boolean value) {
    if (!value) {
      this.tradingDay = null;
    }
  }

  public int getSettlementID() {
    return this.settlementID;
  }

  public CThostFtdcExchangeOrderField setSettlementID(int settlementID) {
    this.settlementID = settlementID;
    setSettlementIDIsSet(true);
    return this;
  }

  public void unsetSettlementID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID);
  }

  /** Returns true if field settlementID is set (has been assigned a value) and false otherwise */
  public boolean isSetSettlementID() {
    return EncodingUtils.testBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID);
  }

  public void setSettlementIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID, value);
  }

  public String getOrderSysID() {
    return this.orderSysID;
  }

  public CThostFtdcExchangeOrderField setOrderSysID(String orderSysID) {
    this.orderSysID = orderSysID;
    return this;
  }

  public void unsetOrderSysID() {
    this.orderSysID = null;
  }

  /** Returns true if field orderSysID is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderSysID() {
    return this.orderSysID != null;
  }

  public void setOrderSysIDIsSet(boolean value) {
    if (!value) {
      this.orderSysID = null;
    }
  }

  public String getOrderSource() {
    return this.orderSource;
  }

  public CThostFtdcExchangeOrderField setOrderSource(String orderSource) {
    this.orderSource = orderSource;
    return this;
  }

  public void unsetOrderSource() {
    this.orderSource = null;
  }

  /** Returns true if field orderSource is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderSource() {
    return this.orderSource != null;
  }

  public void setOrderSourceIsSet(boolean value) {
    if (!value) {
      this.orderSource = null;
    }
  }

  public String getOrderStatus() {
    return this.orderStatus;
  }

  public CThostFtdcExchangeOrderField setOrderStatus(String orderStatus) {
    this.orderStatus = orderStatus;
    return this;
  }

  public void unsetOrderStatus() {
    this.orderStatus = null;
  }

  /** Returns true if field orderStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderStatus() {
    return this.orderStatus != null;
  }

  public void setOrderStatusIsSet(boolean value) {
    if (!value) {
      this.orderStatus = null;
    }
  }

  public String getOrderType() {
    return this.orderType;
  }

  public CThostFtdcExchangeOrderField setOrderType(String orderType) {
    this.orderType = orderType;
    return this;
  }

  public void unsetOrderType() {
    this.orderType = null;
  }

  /** Returns true if field orderType is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderType() {
    return this.orderType != null;
  }

  public void setOrderTypeIsSet(boolean value) {
    if (!value) {
      this.orderType = null;
    }
  }

  public int getVolumeTraded() {
    return this.volumeTraded;
  }

  public CThostFtdcExchangeOrderField setVolumeTraded(int volumeTraded) {
    this.volumeTraded = volumeTraded;
    setVolumeTradedIsSet(true);
    return this;
  }

  public void unsetVolumeTraded() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLUMETRADED_ISSET_ID);
  }

  /** Returns true if field volumeTraded is set (has been assigned a value) and false otherwise */
  public boolean isSetVolumeTraded() {
    return EncodingUtils.testBit(__isset_bitfield, __VOLUMETRADED_ISSET_ID);
  }

  public void setVolumeTradedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLUMETRADED_ISSET_ID, value);
  }

  public int getVolumeTotal() {
    return this.volumeTotal;
  }

  public CThostFtdcExchangeOrderField setVolumeTotal(int volumeTotal) {
    this.volumeTotal = volumeTotal;
    setVolumeTotalIsSet(true);
    return this;
  }

  public void unsetVolumeTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLUMETOTAL_ISSET_ID);
  }

  /** Returns true if field volumeTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetVolumeTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __VOLUMETOTAL_ISSET_ID);
  }

  public void setVolumeTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLUMETOTAL_ISSET_ID, value);
  }

  public String getInsertDate() {
    return this.insertDate;
  }

  public CThostFtdcExchangeOrderField setInsertDate(String insertDate) {
    this.insertDate = insertDate;
    return this;
  }

  public void unsetInsertDate() {
    this.insertDate = null;
  }

  /** Returns true if field insertDate is set (has been assigned a value) and false otherwise */
  public boolean isSetInsertDate() {
    return this.insertDate != null;
  }

  public void setInsertDateIsSet(boolean value) {
    if (!value) {
      this.insertDate = null;
    }
  }

  public String getInsertTime() {
    return this.insertTime;
  }

  public CThostFtdcExchangeOrderField setInsertTime(String insertTime) {
    this.insertTime = insertTime;
    return this;
  }

  public void unsetInsertTime() {
    this.insertTime = null;
  }

  /** Returns true if field insertTime is set (has been assigned a value) and false otherwise */
  public boolean isSetInsertTime() {
    return this.insertTime != null;
  }

  public void setInsertTimeIsSet(boolean value) {
    if (!value) {
      this.insertTime = null;
    }
  }

  public String getActiveTime() {
    return this.activeTime;
  }

  public CThostFtdcExchangeOrderField setActiveTime(String activeTime) {
    this.activeTime = activeTime;
    return this;
  }

  public void unsetActiveTime() {
    this.activeTime = null;
  }

  /** Returns true if field activeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveTime() {
    return this.activeTime != null;
  }

  public void setActiveTimeIsSet(boolean value) {
    if (!value) {
      this.activeTime = null;
    }
  }

  public String getSuspendTime() {
    return this.suspendTime;
  }

  public CThostFtdcExchangeOrderField setSuspendTime(String suspendTime) {
    this.suspendTime = suspendTime;
    return this;
  }

  public void unsetSuspendTime() {
    this.suspendTime = null;
  }

  /** Returns true if field suspendTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSuspendTime() {
    return this.suspendTime != null;
  }

  public void setSuspendTimeIsSet(boolean value) {
    if (!value) {
      this.suspendTime = null;
    }
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public CThostFtdcExchangeOrderField setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public String getCancelTime() {
    return this.cancelTime;
  }

  public CThostFtdcExchangeOrderField setCancelTime(String cancelTime) {
    this.cancelTime = cancelTime;
    return this;
  }

  public void unsetCancelTime() {
    this.cancelTime = null;
  }

  /** Returns true if field cancelTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelTime() {
    return this.cancelTime != null;
  }

  public void setCancelTimeIsSet(boolean value) {
    if (!value) {
      this.cancelTime = null;
    }
  }

  public String getActiveTraderID() {
    return this.activeTraderID;
  }

  public CThostFtdcExchangeOrderField setActiveTraderID(String activeTraderID) {
    this.activeTraderID = activeTraderID;
    return this;
  }

  public void unsetActiveTraderID() {
    this.activeTraderID = null;
  }

  /** Returns true if field activeTraderID is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveTraderID() {
    return this.activeTraderID != null;
  }

  public void setActiveTraderIDIsSet(boolean value) {
    if (!value) {
      this.activeTraderID = null;
    }
  }

  public String getClearingPartID() {
    return this.clearingPartID;
  }

  public CThostFtdcExchangeOrderField setClearingPartID(String clearingPartID) {
    this.clearingPartID = clearingPartID;
    return this;
  }

  public void unsetClearingPartID() {
    this.clearingPartID = null;
  }

  /** Returns true if field clearingPartID is set (has been assigned a value) and false otherwise */
  public boolean isSetClearingPartID() {
    return this.clearingPartID != null;
  }

  public void setClearingPartIDIsSet(boolean value) {
    if (!value) {
      this.clearingPartID = null;
    }
  }

  public int getSequenceNo() {
    return this.sequenceNo;
  }

  public CThostFtdcExchangeOrderField setSequenceNo(int sequenceNo) {
    this.sequenceNo = sequenceNo;
    setSequenceNoIsSet(true);
    return this;
  }

  public void unsetSequenceNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQUENCENO_ISSET_ID);
  }

  /** Returns true if field sequenceNo is set (has been assigned a value) and false otherwise */
  public boolean isSetSequenceNo() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQUENCENO_ISSET_ID);
  }

  public void setSequenceNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQUENCENO_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_PRICE_TYPE:
      if (value == null) {
        unsetOrderPriceType();
      } else {
        setOrderPriceType((String)value);
      }
      break;

    case DIRECTION:
      if (value == null) {
        unsetDirection();
      } else {
        setDirection((String)value);
      }
      break;

    case COMB_OFFSET_FLAG:
      if (value == null) {
        unsetCombOffsetFlag();
      } else {
        setCombOffsetFlag((String)value);
      }
      break;

    case COMB_HEDGE_FLAG:
      if (value == null) {
        unsetCombHedgeFlag();
      } else {
        setCombHedgeFlag((String)value);
      }
      break;

    case LIMIT_PRICE:
      if (value == null) {
        unsetLimitPrice();
      } else {
        setLimitPrice((Double)value);
      }
      break;

    case VOLUME_TOTAL_ORIGINAL:
      if (value == null) {
        unsetVolumeTotalOriginal();
      } else {
        setVolumeTotalOriginal((Integer)value);
      }
      break;

    case TIME_CONDITION:
      if (value == null) {
        unsetTimeCondition();
      } else {
        setTimeCondition((String)value);
      }
      break;

    case G_TDDATE:
      if (value == null) {
        unsetGTDDate();
      } else {
        setGTDDate((String)value);
      }
      break;

    case VOLUME_CONDITION:
      if (value == null) {
        unsetVolumeCondition();
      } else {
        setVolumeCondition((String)value);
      }
      break;

    case MIN_VOLUME:
      if (value == null) {
        unsetMinVolume();
      } else {
        setMinVolume((Integer)value);
      }
      break;

    case CONTINGENT_CONDITION:
      if (value == null) {
        unsetContingentCondition();
      } else {
        setContingentCondition((String)value);
      }
      break;

    case STOP_PRICE:
      if (value == null) {
        unsetStopPrice();
      } else {
        setStopPrice((Double)value);
      }
      break;

    case FORCE_CLOSE_REASON:
      if (value == null) {
        unsetForceCloseReason();
      } else {
        setForceCloseReason((String)value);
      }
      break;

    case IS_AUTO_SUSPEND:
      if (value == null) {
        unsetIsAutoSuspend();
      } else {
        setIsAutoSuspend((Integer)value);
      }
      break;

    case BUSINESS_UNIT:
      if (value == null) {
        unsetBusinessUnit();
      } else {
        setBusinessUnit((String)value);
      }
      break;

    case REQUEST_ID:
      if (value == null) {
        unsetRequestID();
      } else {
        setRequestID((Integer)value);
      }
      break;

    case ORDER_LOCAL_ID:
      if (value == null) {
        unsetOrderLocalID();
      } else {
        setOrderLocalID((String)value);
      }
      break;

    case EXCHANGE_ID:
      if (value == null) {
        unsetExchangeID();
      } else {
        setExchangeID((String)value);
      }
      break;

    case PARTICIPANT_ID:
      if (value == null) {
        unsetParticipantID();
      } else {
        setParticipantID((String)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientID();
      } else {
        setClientID((String)value);
      }
      break;

    case EXCHANGE_INST_ID:
      if (value == null) {
        unsetExchangeInstID();
      } else {
        setExchangeInstID((String)value);
      }
      break;

    case TRADER_ID:
      if (value == null) {
        unsetTraderID();
      } else {
        setTraderID((String)value);
      }
      break;

    case INSTALL_ID:
      if (value == null) {
        unsetInstallID();
      } else {
        setInstallID((Integer)value);
      }
      break;

    case ORDER_SUBMIT_STATUS:
      if (value == null) {
        unsetOrderSubmitStatus();
      } else {
        setOrderSubmitStatus((String)value);
      }
      break;

    case NOTIFY_SEQUENCE:
      if (value == null) {
        unsetNotifySequence();
      } else {
        setNotifySequence((Integer)value);
      }
      break;

    case TRADING_DAY:
      if (value == null) {
        unsetTradingDay();
      } else {
        setTradingDay((String)value);
      }
      break;

    case SETTLEMENT_ID:
      if (value == null) {
        unsetSettlementID();
      } else {
        setSettlementID((Integer)value);
      }
      break;

    case ORDER_SYS_ID:
      if (value == null) {
        unsetOrderSysID();
      } else {
        setOrderSysID((String)value);
      }
      break;

    case ORDER_SOURCE:
      if (value == null) {
        unsetOrderSource();
      } else {
        setOrderSource((String)value);
      }
      break;

    case ORDER_STATUS:
      if (value == null) {
        unsetOrderStatus();
      } else {
        setOrderStatus((String)value);
      }
      break;

    case ORDER_TYPE:
      if (value == null) {
        unsetOrderType();
      } else {
        setOrderType((String)value);
      }
      break;

    case VOLUME_TRADED:
      if (value == null) {
        unsetVolumeTraded();
      } else {
        setVolumeTraded((Integer)value);
      }
      break;

    case VOLUME_TOTAL:
      if (value == null) {
        unsetVolumeTotal();
      } else {
        setVolumeTotal((Integer)value);
      }
      break;

    case INSERT_DATE:
      if (value == null) {
        unsetInsertDate();
      } else {
        setInsertDate((String)value);
      }
      break;

    case INSERT_TIME:
      if (value == null) {
        unsetInsertTime();
      } else {
        setInsertTime((String)value);
      }
      break;

    case ACTIVE_TIME:
      if (value == null) {
        unsetActiveTime();
      } else {
        setActiveTime((String)value);
      }
      break;

    case SUSPEND_TIME:
      if (value == null) {
        unsetSuspendTime();
      } else {
        setSuspendTime((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    case CANCEL_TIME:
      if (value == null) {
        unsetCancelTime();
      } else {
        setCancelTime((String)value);
      }
      break;

    case ACTIVE_TRADER_ID:
      if (value == null) {
        unsetActiveTraderID();
      } else {
        setActiveTraderID((String)value);
      }
      break;

    case CLEARING_PART_ID:
      if (value == null) {
        unsetClearingPartID();
      } else {
        setClearingPartID((String)value);
      }
      break;

    case SEQUENCE_NO:
      if (value == null) {
        unsetSequenceNo();
      } else {
        setSequenceNo((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_PRICE_TYPE:
      return getOrderPriceType();

    case DIRECTION:
      return getDirection();

    case COMB_OFFSET_FLAG:
      return getCombOffsetFlag();

    case COMB_HEDGE_FLAG:
      return getCombHedgeFlag();

    case LIMIT_PRICE:
      return Double.valueOf(getLimitPrice());

    case VOLUME_TOTAL_ORIGINAL:
      return Integer.valueOf(getVolumeTotalOriginal());

    case TIME_CONDITION:
      return getTimeCondition();

    case G_TDDATE:
      return getGTDDate();

    case VOLUME_CONDITION:
      return getVolumeCondition();

    case MIN_VOLUME:
      return Integer.valueOf(getMinVolume());

    case CONTINGENT_CONDITION:
      return getContingentCondition();

    case STOP_PRICE:
      return Double.valueOf(getStopPrice());

    case FORCE_CLOSE_REASON:
      return getForceCloseReason();

    case IS_AUTO_SUSPEND:
      return Integer.valueOf(getIsAutoSuspend());

    case BUSINESS_UNIT:
      return getBusinessUnit();

    case REQUEST_ID:
      return Integer.valueOf(getRequestID());

    case ORDER_LOCAL_ID:
      return getOrderLocalID();

    case EXCHANGE_ID:
      return getExchangeID();

    case PARTICIPANT_ID:
      return getParticipantID();

    case CLIENT_ID:
      return getClientID();

    case EXCHANGE_INST_ID:
      return getExchangeInstID();

    case TRADER_ID:
      return getTraderID();

    case INSTALL_ID:
      return Integer.valueOf(getInstallID());

    case ORDER_SUBMIT_STATUS:
      return getOrderSubmitStatus();

    case NOTIFY_SEQUENCE:
      return Integer.valueOf(getNotifySequence());

    case TRADING_DAY:
      return getTradingDay();

    case SETTLEMENT_ID:
      return Integer.valueOf(getSettlementID());

    case ORDER_SYS_ID:
      return getOrderSysID();

    case ORDER_SOURCE:
      return getOrderSource();

    case ORDER_STATUS:
      return getOrderStatus();

    case ORDER_TYPE:
      return getOrderType();

    case VOLUME_TRADED:
      return Integer.valueOf(getVolumeTraded());

    case VOLUME_TOTAL:
      return Integer.valueOf(getVolumeTotal());

    case INSERT_DATE:
      return getInsertDate();

    case INSERT_TIME:
      return getInsertTime();

    case ACTIVE_TIME:
      return getActiveTime();

    case SUSPEND_TIME:
      return getSuspendTime();

    case UPDATE_TIME:
      return getUpdateTime();

    case CANCEL_TIME:
      return getCancelTime();

    case ACTIVE_TRADER_ID:
      return getActiveTraderID();

    case CLEARING_PART_ID:
      return getClearingPartID();

    case SEQUENCE_NO:
      return Integer.valueOf(getSequenceNo());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_PRICE_TYPE:
      return isSetOrderPriceType();
    case DIRECTION:
      return isSetDirection();
    case COMB_OFFSET_FLAG:
      return isSetCombOffsetFlag();
    case COMB_HEDGE_FLAG:
      return isSetCombHedgeFlag();
    case LIMIT_PRICE:
      return isSetLimitPrice();
    case VOLUME_TOTAL_ORIGINAL:
      return isSetVolumeTotalOriginal();
    case TIME_CONDITION:
      return isSetTimeCondition();
    case G_TDDATE:
      return isSetGTDDate();
    case VOLUME_CONDITION:
      return isSetVolumeCondition();
    case MIN_VOLUME:
      return isSetMinVolume();
    case CONTINGENT_CONDITION:
      return isSetContingentCondition();
    case STOP_PRICE:
      return isSetStopPrice();
    case FORCE_CLOSE_REASON:
      return isSetForceCloseReason();
    case IS_AUTO_SUSPEND:
      return isSetIsAutoSuspend();
    case BUSINESS_UNIT:
      return isSetBusinessUnit();
    case REQUEST_ID:
      return isSetRequestID();
    case ORDER_LOCAL_ID:
      return isSetOrderLocalID();
    case EXCHANGE_ID:
      return isSetExchangeID();
    case PARTICIPANT_ID:
      return isSetParticipantID();
    case CLIENT_ID:
      return isSetClientID();
    case EXCHANGE_INST_ID:
      return isSetExchangeInstID();
    case TRADER_ID:
      return isSetTraderID();
    case INSTALL_ID:
      return isSetInstallID();
    case ORDER_SUBMIT_STATUS:
      return isSetOrderSubmitStatus();
    case NOTIFY_SEQUENCE:
      return isSetNotifySequence();
    case TRADING_DAY:
      return isSetTradingDay();
    case SETTLEMENT_ID:
      return isSetSettlementID();
    case ORDER_SYS_ID:
      return isSetOrderSysID();
    case ORDER_SOURCE:
      return isSetOrderSource();
    case ORDER_STATUS:
      return isSetOrderStatus();
    case ORDER_TYPE:
      return isSetOrderType();
    case VOLUME_TRADED:
      return isSetVolumeTraded();
    case VOLUME_TOTAL:
      return isSetVolumeTotal();
    case INSERT_DATE:
      return isSetInsertDate();
    case INSERT_TIME:
      return isSetInsertTime();
    case ACTIVE_TIME:
      return isSetActiveTime();
    case SUSPEND_TIME:
      return isSetSuspendTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case CANCEL_TIME:
      return isSetCancelTime();
    case ACTIVE_TRADER_ID:
      return isSetActiveTraderID();
    case CLEARING_PART_ID:
      return isSetClearingPartID();
    case SEQUENCE_NO:
      return isSetSequenceNo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcExchangeOrderField)
      return this.equals((CThostFtdcExchangeOrderField)that);
    return false;
  }

  public boolean equals(CThostFtdcExchangeOrderField that) {
    if (that == null)
      return false;

    boolean this_present_orderPriceType = true && this.isSetOrderPriceType();
    boolean that_present_orderPriceType = true && that.isSetOrderPriceType();
    if (this_present_orderPriceType || that_present_orderPriceType) {
      if (!(this_present_orderPriceType && that_present_orderPriceType))
        return false;
      if (!this.orderPriceType.equals(that.orderPriceType))
        return false;
    }

    boolean this_present_direction = true && this.isSetDirection();
    boolean that_present_direction = true && that.isSetDirection();
    if (this_present_direction || that_present_direction) {
      if (!(this_present_direction && that_present_direction))
        return false;
      if (!this.direction.equals(that.direction))
        return false;
    }

    boolean this_present_combOffsetFlag = true && this.isSetCombOffsetFlag();
    boolean that_present_combOffsetFlag = true && that.isSetCombOffsetFlag();
    if (this_present_combOffsetFlag || that_present_combOffsetFlag) {
      if (!(this_present_combOffsetFlag && that_present_combOffsetFlag))
        return false;
      if (!this.combOffsetFlag.equals(that.combOffsetFlag))
        return false;
    }

    boolean this_present_combHedgeFlag = true && this.isSetCombHedgeFlag();
    boolean that_present_combHedgeFlag = true && that.isSetCombHedgeFlag();
    if (this_present_combHedgeFlag || that_present_combHedgeFlag) {
      if (!(this_present_combHedgeFlag && that_present_combHedgeFlag))
        return false;
      if (!this.combHedgeFlag.equals(that.combHedgeFlag))
        return false;
    }

    boolean this_present_limitPrice = true;
    boolean that_present_limitPrice = true;
    if (this_present_limitPrice || that_present_limitPrice) {
      if (!(this_present_limitPrice && that_present_limitPrice))
        return false;
      if (this.limitPrice != that.limitPrice)
        return false;
    }

    boolean this_present_volumeTotalOriginal = true;
    boolean that_present_volumeTotalOriginal = true;
    if (this_present_volumeTotalOriginal || that_present_volumeTotalOriginal) {
      if (!(this_present_volumeTotalOriginal && that_present_volumeTotalOriginal))
        return false;
      if (this.volumeTotalOriginal != that.volumeTotalOriginal)
        return false;
    }

    boolean this_present_timeCondition = true && this.isSetTimeCondition();
    boolean that_present_timeCondition = true && that.isSetTimeCondition();
    if (this_present_timeCondition || that_present_timeCondition) {
      if (!(this_present_timeCondition && that_present_timeCondition))
        return false;
      if (!this.timeCondition.equals(that.timeCondition))
        return false;
    }

    boolean this_present_gTDDate = true && this.isSetGTDDate();
    boolean that_present_gTDDate = true && that.isSetGTDDate();
    if (this_present_gTDDate || that_present_gTDDate) {
      if (!(this_present_gTDDate && that_present_gTDDate))
        return false;
      if (!this.gTDDate.equals(that.gTDDate))
        return false;
    }

    boolean this_present_volumeCondition = true && this.isSetVolumeCondition();
    boolean that_present_volumeCondition = true && that.isSetVolumeCondition();
    if (this_present_volumeCondition || that_present_volumeCondition) {
      if (!(this_present_volumeCondition && that_present_volumeCondition))
        return false;
      if (!this.volumeCondition.equals(that.volumeCondition))
        return false;
    }

    boolean this_present_minVolume = true;
    boolean that_present_minVolume = true;
    if (this_present_minVolume || that_present_minVolume) {
      if (!(this_present_minVolume && that_present_minVolume))
        return false;
      if (this.minVolume != that.minVolume)
        return false;
    }

    boolean this_present_contingentCondition = true && this.isSetContingentCondition();
    boolean that_present_contingentCondition = true && that.isSetContingentCondition();
    if (this_present_contingentCondition || that_present_contingentCondition) {
      if (!(this_present_contingentCondition && that_present_contingentCondition))
        return false;
      if (!this.contingentCondition.equals(that.contingentCondition))
        return false;
    }

    boolean this_present_stopPrice = true;
    boolean that_present_stopPrice = true;
    if (this_present_stopPrice || that_present_stopPrice) {
      if (!(this_present_stopPrice && that_present_stopPrice))
        return false;
      if (this.stopPrice != that.stopPrice)
        return false;
    }

    boolean this_present_forceCloseReason = true && this.isSetForceCloseReason();
    boolean that_present_forceCloseReason = true && that.isSetForceCloseReason();
    if (this_present_forceCloseReason || that_present_forceCloseReason) {
      if (!(this_present_forceCloseReason && that_present_forceCloseReason))
        return false;
      if (!this.forceCloseReason.equals(that.forceCloseReason))
        return false;
    }

    boolean this_present_isAutoSuspend = true;
    boolean that_present_isAutoSuspend = true;
    if (this_present_isAutoSuspend || that_present_isAutoSuspend) {
      if (!(this_present_isAutoSuspend && that_present_isAutoSuspend))
        return false;
      if (this.isAutoSuspend != that.isAutoSuspend)
        return false;
    }

    boolean this_present_businessUnit = true && this.isSetBusinessUnit();
    boolean that_present_businessUnit = true && that.isSetBusinessUnit();
    if (this_present_businessUnit || that_present_businessUnit) {
      if (!(this_present_businessUnit && that_present_businessUnit))
        return false;
      if (!this.businessUnit.equals(that.businessUnit))
        return false;
    }

    boolean this_present_requestID = true;
    boolean that_present_requestID = true;
    if (this_present_requestID || that_present_requestID) {
      if (!(this_present_requestID && that_present_requestID))
        return false;
      if (this.requestID != that.requestID)
        return false;
    }

    boolean this_present_orderLocalID = true && this.isSetOrderLocalID();
    boolean that_present_orderLocalID = true && that.isSetOrderLocalID();
    if (this_present_orderLocalID || that_present_orderLocalID) {
      if (!(this_present_orderLocalID && that_present_orderLocalID))
        return false;
      if (!this.orderLocalID.equals(that.orderLocalID))
        return false;
    }

    boolean this_present_exchangeID = true && this.isSetExchangeID();
    boolean that_present_exchangeID = true && that.isSetExchangeID();
    if (this_present_exchangeID || that_present_exchangeID) {
      if (!(this_present_exchangeID && that_present_exchangeID))
        return false;
      if (!this.exchangeID.equals(that.exchangeID))
        return false;
    }

    boolean this_present_participantID = true && this.isSetParticipantID();
    boolean that_present_participantID = true && that.isSetParticipantID();
    if (this_present_participantID || that_present_participantID) {
      if (!(this_present_participantID && that_present_participantID))
        return false;
      if (!this.participantID.equals(that.participantID))
        return false;
    }

    boolean this_present_clientID = true && this.isSetClientID();
    boolean that_present_clientID = true && that.isSetClientID();
    if (this_present_clientID || that_present_clientID) {
      if (!(this_present_clientID && that_present_clientID))
        return false;
      if (!this.clientID.equals(that.clientID))
        return false;
    }

    boolean this_present_exchangeInstID = true && this.isSetExchangeInstID();
    boolean that_present_exchangeInstID = true && that.isSetExchangeInstID();
    if (this_present_exchangeInstID || that_present_exchangeInstID) {
      if (!(this_present_exchangeInstID && that_present_exchangeInstID))
        return false;
      if (!this.exchangeInstID.equals(that.exchangeInstID))
        return false;
    }

    boolean this_present_traderID = true && this.isSetTraderID();
    boolean that_present_traderID = true && that.isSetTraderID();
    if (this_present_traderID || that_present_traderID) {
      if (!(this_present_traderID && that_present_traderID))
        return false;
      if (!this.traderID.equals(that.traderID))
        return false;
    }

    boolean this_present_installID = true;
    boolean that_present_installID = true;
    if (this_present_installID || that_present_installID) {
      if (!(this_present_installID && that_present_installID))
        return false;
      if (this.installID != that.installID)
        return false;
    }

    boolean this_present_orderSubmitStatus = true && this.isSetOrderSubmitStatus();
    boolean that_present_orderSubmitStatus = true && that.isSetOrderSubmitStatus();
    if (this_present_orderSubmitStatus || that_present_orderSubmitStatus) {
      if (!(this_present_orderSubmitStatus && that_present_orderSubmitStatus))
        return false;
      if (!this.orderSubmitStatus.equals(that.orderSubmitStatus))
        return false;
    }

    boolean this_present_notifySequence = true;
    boolean that_present_notifySequence = true;
    if (this_present_notifySequence || that_present_notifySequence) {
      if (!(this_present_notifySequence && that_present_notifySequence))
        return false;
      if (this.notifySequence != that.notifySequence)
        return false;
    }

    boolean this_present_tradingDay = true && this.isSetTradingDay();
    boolean that_present_tradingDay = true && that.isSetTradingDay();
    if (this_present_tradingDay || that_present_tradingDay) {
      if (!(this_present_tradingDay && that_present_tradingDay))
        return false;
      if (!this.tradingDay.equals(that.tradingDay))
        return false;
    }

    boolean this_present_settlementID = true;
    boolean that_present_settlementID = true;
    if (this_present_settlementID || that_present_settlementID) {
      if (!(this_present_settlementID && that_present_settlementID))
        return false;
      if (this.settlementID != that.settlementID)
        return false;
    }

    boolean this_present_orderSysID = true && this.isSetOrderSysID();
    boolean that_present_orderSysID = true && that.isSetOrderSysID();
    if (this_present_orderSysID || that_present_orderSysID) {
      if (!(this_present_orderSysID && that_present_orderSysID))
        return false;
      if (!this.orderSysID.equals(that.orderSysID))
        return false;
    }

    boolean this_present_orderSource = true && this.isSetOrderSource();
    boolean that_present_orderSource = true && that.isSetOrderSource();
    if (this_present_orderSource || that_present_orderSource) {
      if (!(this_present_orderSource && that_present_orderSource))
        return false;
      if (!this.orderSource.equals(that.orderSource))
        return false;
    }

    boolean this_present_orderStatus = true && this.isSetOrderStatus();
    boolean that_present_orderStatus = true && that.isSetOrderStatus();
    if (this_present_orderStatus || that_present_orderStatus) {
      if (!(this_present_orderStatus && that_present_orderStatus))
        return false;
      if (!this.orderStatus.equals(that.orderStatus))
        return false;
    }

    boolean this_present_orderType = true && this.isSetOrderType();
    boolean that_present_orderType = true && that.isSetOrderType();
    if (this_present_orderType || that_present_orderType) {
      if (!(this_present_orderType && that_present_orderType))
        return false;
      if (!this.orderType.equals(that.orderType))
        return false;
    }

    boolean this_present_volumeTraded = true;
    boolean that_present_volumeTraded = true;
    if (this_present_volumeTraded || that_present_volumeTraded) {
      if (!(this_present_volumeTraded && that_present_volumeTraded))
        return false;
      if (this.volumeTraded != that.volumeTraded)
        return false;
    }

    boolean this_present_volumeTotal = true;
    boolean that_present_volumeTotal = true;
    if (this_present_volumeTotal || that_present_volumeTotal) {
      if (!(this_present_volumeTotal && that_present_volumeTotal))
        return false;
      if (this.volumeTotal != that.volumeTotal)
        return false;
    }

    boolean this_present_insertDate = true && this.isSetInsertDate();
    boolean that_present_insertDate = true && that.isSetInsertDate();
    if (this_present_insertDate || that_present_insertDate) {
      if (!(this_present_insertDate && that_present_insertDate))
        return false;
      if (!this.insertDate.equals(that.insertDate))
        return false;
    }

    boolean this_present_insertTime = true && this.isSetInsertTime();
    boolean that_present_insertTime = true && that.isSetInsertTime();
    if (this_present_insertTime || that_present_insertTime) {
      if (!(this_present_insertTime && that_present_insertTime))
        return false;
      if (!this.insertTime.equals(that.insertTime))
        return false;
    }

    boolean this_present_activeTime = true && this.isSetActiveTime();
    boolean that_present_activeTime = true && that.isSetActiveTime();
    if (this_present_activeTime || that_present_activeTime) {
      if (!(this_present_activeTime && that_present_activeTime))
        return false;
      if (!this.activeTime.equals(that.activeTime))
        return false;
    }

    boolean this_present_suspendTime = true && this.isSetSuspendTime();
    boolean that_present_suspendTime = true && that.isSetSuspendTime();
    if (this_present_suspendTime || that_present_suspendTime) {
      if (!(this_present_suspendTime && that_present_suspendTime))
        return false;
      if (!this.suspendTime.equals(that.suspendTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    boolean this_present_cancelTime = true && this.isSetCancelTime();
    boolean that_present_cancelTime = true && that.isSetCancelTime();
    if (this_present_cancelTime || that_present_cancelTime) {
      if (!(this_present_cancelTime && that_present_cancelTime))
        return false;
      if (!this.cancelTime.equals(that.cancelTime))
        return false;
    }

    boolean this_present_activeTraderID = true && this.isSetActiveTraderID();
    boolean that_present_activeTraderID = true && that.isSetActiveTraderID();
    if (this_present_activeTraderID || that_present_activeTraderID) {
      if (!(this_present_activeTraderID && that_present_activeTraderID))
        return false;
      if (!this.activeTraderID.equals(that.activeTraderID))
        return false;
    }

    boolean this_present_clearingPartID = true && this.isSetClearingPartID();
    boolean that_present_clearingPartID = true && that.isSetClearingPartID();
    if (this_present_clearingPartID || that_present_clearingPartID) {
      if (!(this_present_clearingPartID && that_present_clearingPartID))
        return false;
      if (!this.clearingPartID.equals(that.clearingPartID))
        return false;
    }

    boolean this_present_sequenceNo = true;
    boolean that_present_sequenceNo = true;
    if (this_present_sequenceNo || that_present_sequenceNo) {
      if (!(this_present_sequenceNo && that_present_sequenceNo))
        return false;
      if (this.sequenceNo != that.sequenceNo)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcExchangeOrderField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderPriceType()).compareTo(other.isSetOrderPriceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderPriceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderPriceType, other.orderPriceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDirection()).compareTo(other.isSetDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direction, other.direction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCombOffsetFlag()).compareTo(other.isSetCombOffsetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCombOffsetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.combOffsetFlag, other.combOffsetFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCombHedgeFlag()).compareTo(other.isSetCombHedgeFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCombHedgeFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.combHedgeFlag, other.combHedgeFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitPrice()).compareTo(other.isSetLimitPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitPrice, other.limitPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolumeTotalOriginal()).compareTo(other.isSetVolumeTotalOriginal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolumeTotalOriginal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volumeTotalOriginal, other.volumeTotalOriginal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeCondition()).compareTo(other.isSetTimeCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeCondition, other.timeCondition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGTDDate()).compareTo(other.isSetGTDDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGTDDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gTDDate, other.gTDDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolumeCondition()).compareTo(other.isSetVolumeCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolumeCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volumeCondition, other.volumeCondition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinVolume()).compareTo(other.isSetMinVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minVolume, other.minVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContingentCondition()).compareTo(other.isSetContingentCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContingentCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contingentCondition, other.contingentCondition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStopPrice()).compareTo(other.isSetStopPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStopPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopPrice, other.stopPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForceCloseReason()).compareTo(other.isSetForceCloseReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForceCloseReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forceCloseReason, other.forceCloseReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsAutoSuspend()).compareTo(other.isSetIsAutoSuspend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAutoSuspend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAutoSuspend, other.isAutoSuspend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessUnit()).compareTo(other.isSetBusinessUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessUnit, other.businessUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestID()).compareTo(other.isSetRequestID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestID, other.requestID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderLocalID()).compareTo(other.isSetOrderLocalID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderLocalID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderLocalID, other.orderLocalID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeID()).compareTo(other.isSetExchangeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeID, other.exchangeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParticipantID()).compareTo(other.isSetParticipantID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParticipantID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.participantID, other.participantID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientID()).compareTo(other.isSetClientID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientID, other.clientID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeInstID()).compareTo(other.isSetExchangeInstID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeInstID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeInstID, other.exchangeInstID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraderID()).compareTo(other.isSetTraderID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraderID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traderID, other.traderID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstallID()).compareTo(other.isSetInstallID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstallID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.installID, other.installID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderSubmitStatus()).compareTo(other.isSetOrderSubmitStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderSubmitStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderSubmitStatus, other.orderSubmitStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotifySequence()).compareTo(other.isSetNotifySequence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotifySequence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifySequence, other.notifySequence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradingDay()).compareTo(other.isSetTradingDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradingDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradingDay, other.tradingDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettlementID()).compareTo(other.isSetSettlementID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettlementID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settlementID, other.settlementID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderSysID()).compareTo(other.isSetOrderSysID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderSysID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderSysID, other.orderSysID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderSource()).compareTo(other.isSetOrderSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderSource, other.orderSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderStatus()).compareTo(other.isSetOrderStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderStatus, other.orderStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderType()).compareTo(other.isSetOrderType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderType, other.orderType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolumeTraded()).compareTo(other.isSetVolumeTraded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolumeTraded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volumeTraded, other.volumeTraded);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolumeTotal()).compareTo(other.isSetVolumeTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolumeTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volumeTotal, other.volumeTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInsertDate()).compareTo(other.isSetInsertDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInsertDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insertDate, other.insertDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInsertTime()).compareTo(other.isSetInsertTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInsertTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insertTime, other.insertTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveTime()).compareTo(other.isSetActiveTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeTime, other.activeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuspendTime()).compareTo(other.isSetSuspendTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuspendTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suspendTime, other.suspendTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelTime()).compareTo(other.isSetCancelTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelTime, other.cancelTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveTraderID()).compareTo(other.isSetActiveTraderID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveTraderID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeTraderID, other.activeTraderID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClearingPartID()).compareTo(other.isSetClearingPartID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClearingPartID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clearingPartID, other.clearingPartID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSequenceNo()).compareTo(other.isSetSequenceNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequenceNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequenceNo, other.sequenceNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcExchangeOrderField(");
    boolean first = true;

    sb.append("orderPriceType:");
    if (this.orderPriceType == null) {
      sb.append("null");
    } else {
      sb.append(this.orderPriceType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("direction:");
    if (this.direction == null) {
      sb.append("null");
    } else {
      sb.append(this.direction);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("combOffsetFlag:");
    if (this.combOffsetFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.combOffsetFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("combHedgeFlag:");
    if (this.combHedgeFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.combHedgeFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("limitPrice:");
    sb.append(this.limitPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("volumeTotalOriginal:");
    sb.append(this.volumeTotalOriginal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeCondition:");
    if (this.timeCondition == null) {
      sb.append("null");
    } else {
      sb.append(this.timeCondition);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gTDDate:");
    if (this.gTDDate == null) {
      sb.append("null");
    } else {
      sb.append(this.gTDDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("volumeCondition:");
    if (this.volumeCondition == null) {
      sb.append("null");
    } else {
      sb.append(this.volumeCondition);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("minVolume:");
    sb.append(this.minVolume);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contingentCondition:");
    if (this.contingentCondition == null) {
      sb.append("null");
    } else {
      sb.append(this.contingentCondition);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stopPrice:");
    sb.append(this.stopPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("forceCloseReason:");
    if (this.forceCloseReason == null) {
      sb.append("null");
    } else {
      sb.append(this.forceCloseReason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isAutoSuspend:");
    sb.append(this.isAutoSuspend);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessUnit:");
    if (this.businessUnit == null) {
      sb.append("null");
    } else {
      sb.append(this.businessUnit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestID:");
    sb.append(this.requestID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderLocalID:");
    if (this.orderLocalID == null) {
      sb.append("null");
    } else {
      sb.append(this.orderLocalID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchangeID:");
    if (this.exchangeID == null) {
      sb.append("null");
    } else {
      sb.append(this.exchangeID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("participantID:");
    if (this.participantID == null) {
      sb.append("null");
    } else {
      sb.append(this.participantID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientID:");
    if (this.clientID == null) {
      sb.append("null");
    } else {
      sb.append(this.clientID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchangeInstID:");
    if (this.exchangeInstID == null) {
      sb.append("null");
    } else {
      sb.append(this.exchangeInstID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("traderID:");
    if (this.traderID == null) {
      sb.append("null");
    } else {
      sb.append(this.traderID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("installID:");
    sb.append(this.installID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderSubmitStatus:");
    if (this.orderSubmitStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.orderSubmitStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notifySequence:");
    sb.append(this.notifySequence);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradingDay:");
    if (this.tradingDay == null) {
      sb.append("null");
    } else {
      sb.append(this.tradingDay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settlementID:");
    sb.append(this.settlementID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderSysID:");
    if (this.orderSysID == null) {
      sb.append("null");
    } else {
      sb.append(this.orderSysID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderSource:");
    if (this.orderSource == null) {
      sb.append("null");
    } else {
      sb.append(this.orderSource);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderStatus:");
    if (this.orderStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.orderStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderType:");
    if (this.orderType == null) {
      sb.append("null");
    } else {
      sb.append(this.orderType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("volumeTraded:");
    sb.append(this.volumeTraded);
    first = false;
    if (!first) sb.append(", ");
    sb.append("volumeTotal:");
    sb.append(this.volumeTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("insertDate:");
    if (this.insertDate == null) {
      sb.append("null");
    } else {
      sb.append(this.insertDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("insertTime:");
    if (this.insertTime == null) {
      sb.append("null");
    } else {
      sb.append(this.insertTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeTime:");
    if (this.activeTime == null) {
      sb.append("null");
    } else {
      sb.append(this.activeTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("suspendTime:");
    if (this.suspendTime == null) {
      sb.append("null");
    } else {
      sb.append(this.suspendTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    if (this.updateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.updateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cancelTime:");
    if (this.cancelTime == null) {
      sb.append("null");
    } else {
      sb.append(this.cancelTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeTraderID:");
    if (this.activeTraderID == null) {
      sb.append("null");
    } else {
      sb.append(this.activeTraderID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clearingPartID:");
    if (this.clearingPartID == null) {
      sb.append("null");
    } else {
      sb.append(this.clearingPartID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sequenceNo:");
    sb.append(this.sequenceNo);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcExchangeOrderFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcExchangeOrderFieldStandardScheme getScheme() {
      return new CThostFtdcExchangeOrderFieldStandardScheme();
    }
  }

  private static class CThostFtdcExchangeOrderFieldStandardScheme extends StandardScheme<CThostFtdcExchangeOrderField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcExchangeOrderField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_PRICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderPriceType = iprot.readString();
              struct.setOrderPriceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.direction = iprot.readString();
              struct.setDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMB_OFFSET_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.combOffsetFlag = iprot.readString();
              struct.setCombOffsetFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMB_HEDGE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.combHedgeFlag = iprot.readString();
              struct.setCombHedgeFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LIMIT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.limitPrice = iprot.readDouble();
              struct.setLimitPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VOLUME_TOTAL_ORIGINAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.volumeTotalOriginal = iprot.readI32();
              struct.setVolumeTotalOriginalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TIME_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timeCondition = iprot.readString();
              struct.setTimeConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // G_TDDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gTDDate = iprot.readString();
              struct.setGTDDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VOLUME_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.volumeCondition = iprot.readString();
              struct.setVolumeConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MIN_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minVolume = iprot.readI32();
              struct.setMinVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CONTINGENT_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contingentCondition = iprot.readString();
              struct.setContingentConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STOP_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.stopPrice = iprot.readDouble();
              struct.setStopPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FORCE_CLOSE_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.forceCloseReason = iprot.readString();
              struct.setForceCloseReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IS_AUTO_SUSPEND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isAutoSuspend = iprot.readI32();
              struct.setIsAutoSuspendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // BUSINESS_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessUnit = iprot.readString();
              struct.setBusinessUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestID = iprot.readI32();
              struct.setRequestIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ORDER_LOCAL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderLocalID = iprot.readString();
              struct.setOrderLocalIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // EXCHANGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeID = iprot.readString();
              struct.setExchangeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PARTICIPANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.participantID = iprot.readString();
              struct.setParticipantIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientID = iprot.readString();
              struct.setClientIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // EXCHANGE_INST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeInstID = iprot.readString();
              struct.setExchangeInstIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // TRADER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traderID = iprot.readString();
              struct.setTraderIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // INSTALL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.installID = iprot.readI32();
              struct.setInstallIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // ORDER_SUBMIT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderSubmitStatus = iprot.readString();
              struct.setOrderSubmitStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // NOTIFY_SEQUENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.notifySequence = iprot.readI32();
              struct.setNotifySequenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // TRADING_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradingDay = iprot.readString();
              struct.setTradingDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // SETTLEMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.settlementID = iprot.readI32();
              struct.setSettlementIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // ORDER_SYS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderSysID = iprot.readString();
              struct.setOrderSysIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // ORDER_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderSource = iprot.readString();
              struct.setOrderSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // ORDER_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderStatus = iprot.readString();
              struct.setOrderStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // ORDER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderType = iprot.readString();
              struct.setOrderTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // VOLUME_TRADED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.volumeTraded = iprot.readI32();
              struct.setVolumeTradedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // VOLUME_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.volumeTotal = iprot.readI32();
              struct.setVolumeTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // INSERT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.insertDate = iprot.readString();
              struct.setInsertDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // INSERT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.insertTime = iprot.readString();
              struct.setInsertTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // ACTIVE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeTime = iprot.readString();
              struct.setActiveTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // SUSPEND_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.suspendTime = iprot.readString();
              struct.setSuspendTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // CANCEL_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cancelTime = iprot.readString();
              struct.setCancelTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // ACTIVE_TRADER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeTraderID = iprot.readString();
              struct.setActiveTraderIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // CLEARING_PART_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clearingPartID = iprot.readString();
              struct.setClearingPartIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // SEQUENCE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sequenceNo = iprot.readI32();
              struct.setSequenceNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcExchangeOrderField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderPriceType != null) {
        oprot.writeFieldBegin(ORDER_PRICE_TYPE_FIELD_DESC);
        oprot.writeString(struct.orderPriceType);
        oprot.writeFieldEnd();
      }
      if (struct.direction != null) {
        oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
        oprot.writeString(struct.direction);
        oprot.writeFieldEnd();
      }
      if (struct.combOffsetFlag != null) {
        oprot.writeFieldBegin(COMB_OFFSET_FLAG_FIELD_DESC);
        oprot.writeString(struct.combOffsetFlag);
        oprot.writeFieldEnd();
      }
      if (struct.combHedgeFlag != null) {
        oprot.writeFieldBegin(COMB_HEDGE_FLAG_FIELD_DESC);
        oprot.writeString(struct.combHedgeFlag);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LIMIT_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.limitPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VOLUME_TOTAL_ORIGINAL_FIELD_DESC);
      oprot.writeI32(struct.volumeTotalOriginal);
      oprot.writeFieldEnd();
      if (struct.timeCondition != null) {
        oprot.writeFieldBegin(TIME_CONDITION_FIELD_DESC);
        oprot.writeString(struct.timeCondition);
        oprot.writeFieldEnd();
      }
      if (struct.gTDDate != null) {
        oprot.writeFieldBegin(G_TDDATE_FIELD_DESC);
        oprot.writeString(struct.gTDDate);
        oprot.writeFieldEnd();
      }
      if (struct.volumeCondition != null) {
        oprot.writeFieldBegin(VOLUME_CONDITION_FIELD_DESC);
        oprot.writeString(struct.volumeCondition);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MIN_VOLUME_FIELD_DESC);
      oprot.writeI32(struct.minVolume);
      oprot.writeFieldEnd();
      if (struct.contingentCondition != null) {
        oprot.writeFieldBegin(CONTINGENT_CONDITION_FIELD_DESC);
        oprot.writeString(struct.contingentCondition);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STOP_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.stopPrice);
      oprot.writeFieldEnd();
      if (struct.forceCloseReason != null) {
        oprot.writeFieldBegin(FORCE_CLOSE_REASON_FIELD_DESC);
        oprot.writeString(struct.forceCloseReason);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_AUTO_SUSPEND_FIELD_DESC);
      oprot.writeI32(struct.isAutoSuspend);
      oprot.writeFieldEnd();
      if (struct.businessUnit != null) {
        oprot.writeFieldBegin(BUSINESS_UNIT_FIELD_DESC);
        oprot.writeString(struct.businessUnit);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
      oprot.writeI32(struct.requestID);
      oprot.writeFieldEnd();
      if (struct.orderLocalID != null) {
        oprot.writeFieldBegin(ORDER_LOCAL_ID_FIELD_DESC);
        oprot.writeString(struct.orderLocalID);
        oprot.writeFieldEnd();
      }
      if (struct.exchangeID != null) {
        oprot.writeFieldBegin(EXCHANGE_ID_FIELD_DESC);
        oprot.writeString(struct.exchangeID);
        oprot.writeFieldEnd();
      }
      if (struct.participantID != null) {
        oprot.writeFieldBegin(PARTICIPANT_ID_FIELD_DESC);
        oprot.writeString(struct.participantID);
        oprot.writeFieldEnd();
      }
      if (struct.clientID != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientID);
        oprot.writeFieldEnd();
      }
      if (struct.exchangeInstID != null) {
        oprot.writeFieldBegin(EXCHANGE_INST_ID_FIELD_DESC);
        oprot.writeString(struct.exchangeInstID);
        oprot.writeFieldEnd();
      }
      if (struct.traderID != null) {
        oprot.writeFieldBegin(TRADER_ID_FIELD_DESC);
        oprot.writeString(struct.traderID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INSTALL_ID_FIELD_DESC);
      oprot.writeI32(struct.installID);
      oprot.writeFieldEnd();
      if (struct.orderSubmitStatus != null) {
        oprot.writeFieldBegin(ORDER_SUBMIT_STATUS_FIELD_DESC);
        oprot.writeString(struct.orderSubmitStatus);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NOTIFY_SEQUENCE_FIELD_DESC);
      oprot.writeI32(struct.notifySequence);
      oprot.writeFieldEnd();
      if (struct.tradingDay != null) {
        oprot.writeFieldBegin(TRADING_DAY_FIELD_DESC);
        oprot.writeString(struct.tradingDay);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SETTLEMENT_ID_FIELD_DESC);
      oprot.writeI32(struct.settlementID);
      oprot.writeFieldEnd();
      if (struct.orderSysID != null) {
        oprot.writeFieldBegin(ORDER_SYS_ID_FIELD_DESC);
        oprot.writeString(struct.orderSysID);
        oprot.writeFieldEnd();
      }
      if (struct.orderSource != null) {
        oprot.writeFieldBegin(ORDER_SOURCE_FIELD_DESC);
        oprot.writeString(struct.orderSource);
        oprot.writeFieldEnd();
      }
      if (struct.orderStatus != null) {
        oprot.writeFieldBegin(ORDER_STATUS_FIELD_DESC);
        oprot.writeString(struct.orderStatus);
        oprot.writeFieldEnd();
      }
      if (struct.orderType != null) {
        oprot.writeFieldBegin(ORDER_TYPE_FIELD_DESC);
        oprot.writeString(struct.orderType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VOLUME_TRADED_FIELD_DESC);
      oprot.writeI32(struct.volumeTraded);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VOLUME_TOTAL_FIELD_DESC);
      oprot.writeI32(struct.volumeTotal);
      oprot.writeFieldEnd();
      if (struct.insertDate != null) {
        oprot.writeFieldBegin(INSERT_DATE_FIELD_DESC);
        oprot.writeString(struct.insertDate);
        oprot.writeFieldEnd();
      }
      if (struct.insertTime != null) {
        oprot.writeFieldBegin(INSERT_TIME_FIELD_DESC);
        oprot.writeString(struct.insertTime);
        oprot.writeFieldEnd();
      }
      if (struct.activeTime != null) {
        oprot.writeFieldBegin(ACTIVE_TIME_FIELD_DESC);
        oprot.writeString(struct.activeTime);
        oprot.writeFieldEnd();
      }
      if (struct.suspendTime != null) {
        oprot.writeFieldBegin(SUSPEND_TIME_FIELD_DESC);
        oprot.writeString(struct.suspendTime);
        oprot.writeFieldEnd();
      }
      if (struct.updateTime != null) {
        oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.updateTime);
        oprot.writeFieldEnd();
      }
      if (struct.cancelTime != null) {
        oprot.writeFieldBegin(CANCEL_TIME_FIELD_DESC);
        oprot.writeString(struct.cancelTime);
        oprot.writeFieldEnd();
      }
      if (struct.activeTraderID != null) {
        oprot.writeFieldBegin(ACTIVE_TRADER_ID_FIELD_DESC);
        oprot.writeString(struct.activeTraderID);
        oprot.writeFieldEnd();
      }
      if (struct.clearingPartID != null) {
        oprot.writeFieldBegin(CLEARING_PART_ID_FIELD_DESC);
        oprot.writeString(struct.clearingPartID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEQUENCE_NO_FIELD_DESC);
      oprot.writeI32(struct.sequenceNo);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcExchangeOrderFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcExchangeOrderFieldTupleScheme getScheme() {
      return new CThostFtdcExchangeOrderFieldTupleScheme();
    }
  }

  private static class CThostFtdcExchangeOrderFieldTupleScheme extends TupleScheme<CThostFtdcExchangeOrderField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcExchangeOrderField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderPriceType()) {
        optionals.set(0);
      }
      if (struct.isSetDirection()) {
        optionals.set(1);
      }
      if (struct.isSetCombOffsetFlag()) {
        optionals.set(2);
      }
      if (struct.isSetCombHedgeFlag()) {
        optionals.set(3);
      }
      if (struct.isSetLimitPrice()) {
        optionals.set(4);
      }
      if (struct.isSetVolumeTotalOriginal()) {
        optionals.set(5);
      }
      if (struct.isSetTimeCondition()) {
        optionals.set(6);
      }
      if (struct.isSetGTDDate()) {
        optionals.set(7);
      }
      if (struct.isSetVolumeCondition()) {
        optionals.set(8);
      }
      if (struct.isSetMinVolume()) {
        optionals.set(9);
      }
      if (struct.isSetContingentCondition()) {
        optionals.set(10);
      }
      if (struct.isSetStopPrice()) {
        optionals.set(11);
      }
      if (struct.isSetForceCloseReason()) {
        optionals.set(12);
      }
      if (struct.isSetIsAutoSuspend()) {
        optionals.set(13);
      }
      if (struct.isSetBusinessUnit()) {
        optionals.set(14);
      }
      if (struct.isSetRequestID()) {
        optionals.set(15);
      }
      if (struct.isSetOrderLocalID()) {
        optionals.set(16);
      }
      if (struct.isSetExchangeID()) {
        optionals.set(17);
      }
      if (struct.isSetParticipantID()) {
        optionals.set(18);
      }
      if (struct.isSetClientID()) {
        optionals.set(19);
      }
      if (struct.isSetExchangeInstID()) {
        optionals.set(20);
      }
      if (struct.isSetTraderID()) {
        optionals.set(21);
      }
      if (struct.isSetInstallID()) {
        optionals.set(22);
      }
      if (struct.isSetOrderSubmitStatus()) {
        optionals.set(23);
      }
      if (struct.isSetNotifySequence()) {
        optionals.set(24);
      }
      if (struct.isSetTradingDay()) {
        optionals.set(25);
      }
      if (struct.isSetSettlementID()) {
        optionals.set(26);
      }
      if (struct.isSetOrderSysID()) {
        optionals.set(27);
      }
      if (struct.isSetOrderSource()) {
        optionals.set(28);
      }
      if (struct.isSetOrderStatus()) {
        optionals.set(29);
      }
      if (struct.isSetOrderType()) {
        optionals.set(30);
      }
      if (struct.isSetVolumeTraded()) {
        optionals.set(31);
      }
      if (struct.isSetVolumeTotal()) {
        optionals.set(32);
      }
      if (struct.isSetInsertDate()) {
        optionals.set(33);
      }
      if (struct.isSetInsertTime()) {
        optionals.set(34);
      }
      if (struct.isSetActiveTime()) {
        optionals.set(35);
      }
      if (struct.isSetSuspendTime()) {
        optionals.set(36);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(37);
      }
      if (struct.isSetCancelTime()) {
        optionals.set(38);
      }
      if (struct.isSetActiveTraderID()) {
        optionals.set(39);
      }
      if (struct.isSetClearingPartID()) {
        optionals.set(40);
      }
      if (struct.isSetSequenceNo()) {
        optionals.set(41);
      }
      oprot.writeBitSet(optionals, 42);
      if (struct.isSetOrderPriceType()) {
        oprot.writeString(struct.orderPriceType);
      }
      if (struct.isSetDirection()) {
        oprot.writeString(struct.direction);
      }
      if (struct.isSetCombOffsetFlag()) {
        oprot.writeString(struct.combOffsetFlag);
      }
      if (struct.isSetCombHedgeFlag()) {
        oprot.writeString(struct.combHedgeFlag);
      }
      if (struct.isSetLimitPrice()) {
        oprot.writeDouble(struct.limitPrice);
      }
      if (struct.isSetVolumeTotalOriginal()) {
        oprot.writeI32(struct.volumeTotalOriginal);
      }
      if (struct.isSetTimeCondition()) {
        oprot.writeString(struct.timeCondition);
      }
      if (struct.isSetGTDDate()) {
        oprot.writeString(struct.gTDDate);
      }
      if (struct.isSetVolumeCondition()) {
        oprot.writeString(struct.volumeCondition);
      }
      if (struct.isSetMinVolume()) {
        oprot.writeI32(struct.minVolume);
      }
      if (struct.isSetContingentCondition()) {
        oprot.writeString(struct.contingentCondition);
      }
      if (struct.isSetStopPrice()) {
        oprot.writeDouble(struct.stopPrice);
      }
      if (struct.isSetForceCloseReason()) {
        oprot.writeString(struct.forceCloseReason);
      }
      if (struct.isSetIsAutoSuspend()) {
        oprot.writeI32(struct.isAutoSuspend);
      }
      if (struct.isSetBusinessUnit()) {
        oprot.writeString(struct.businessUnit);
      }
      if (struct.isSetRequestID()) {
        oprot.writeI32(struct.requestID);
      }
      if (struct.isSetOrderLocalID()) {
        oprot.writeString(struct.orderLocalID);
      }
      if (struct.isSetExchangeID()) {
        oprot.writeString(struct.exchangeID);
      }
      if (struct.isSetParticipantID()) {
        oprot.writeString(struct.participantID);
      }
      if (struct.isSetClientID()) {
        oprot.writeString(struct.clientID);
      }
      if (struct.isSetExchangeInstID()) {
        oprot.writeString(struct.exchangeInstID);
      }
      if (struct.isSetTraderID()) {
        oprot.writeString(struct.traderID);
      }
      if (struct.isSetInstallID()) {
        oprot.writeI32(struct.installID);
      }
      if (struct.isSetOrderSubmitStatus()) {
        oprot.writeString(struct.orderSubmitStatus);
      }
      if (struct.isSetNotifySequence()) {
        oprot.writeI32(struct.notifySequence);
      }
      if (struct.isSetTradingDay()) {
        oprot.writeString(struct.tradingDay);
      }
      if (struct.isSetSettlementID()) {
        oprot.writeI32(struct.settlementID);
      }
      if (struct.isSetOrderSysID()) {
        oprot.writeString(struct.orderSysID);
      }
      if (struct.isSetOrderSource()) {
        oprot.writeString(struct.orderSource);
      }
      if (struct.isSetOrderStatus()) {
        oprot.writeString(struct.orderStatus);
      }
      if (struct.isSetOrderType()) {
        oprot.writeString(struct.orderType);
      }
      if (struct.isSetVolumeTraded()) {
        oprot.writeI32(struct.volumeTraded);
      }
      if (struct.isSetVolumeTotal()) {
        oprot.writeI32(struct.volumeTotal);
      }
      if (struct.isSetInsertDate()) {
        oprot.writeString(struct.insertDate);
      }
      if (struct.isSetInsertTime()) {
        oprot.writeString(struct.insertTime);
      }
      if (struct.isSetActiveTime()) {
        oprot.writeString(struct.activeTime);
      }
      if (struct.isSetSuspendTime()) {
        oprot.writeString(struct.suspendTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
      if (struct.isSetCancelTime()) {
        oprot.writeString(struct.cancelTime);
      }
      if (struct.isSetActiveTraderID()) {
        oprot.writeString(struct.activeTraderID);
      }
      if (struct.isSetClearingPartID()) {
        oprot.writeString(struct.clearingPartID);
      }
      if (struct.isSetSequenceNo()) {
        oprot.writeI32(struct.sequenceNo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcExchangeOrderField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(42);
      if (incoming.get(0)) {
        struct.orderPriceType = iprot.readString();
        struct.setOrderPriceTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.direction = iprot.readString();
        struct.setDirectionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.combOffsetFlag = iprot.readString();
        struct.setCombOffsetFlagIsSet(true);
      }
      if (incoming.get(3)) {
        struct.combHedgeFlag = iprot.readString();
        struct.setCombHedgeFlagIsSet(true);
      }
      if (incoming.get(4)) {
        struct.limitPrice = iprot.readDouble();
        struct.setLimitPriceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.volumeTotalOriginal = iprot.readI32();
        struct.setVolumeTotalOriginalIsSet(true);
      }
      if (incoming.get(6)) {
        struct.timeCondition = iprot.readString();
        struct.setTimeConditionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.gTDDate = iprot.readString();
        struct.setGTDDateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.volumeCondition = iprot.readString();
        struct.setVolumeConditionIsSet(true);
      }
      if (incoming.get(9)) {
        struct.minVolume = iprot.readI32();
        struct.setMinVolumeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.contingentCondition = iprot.readString();
        struct.setContingentConditionIsSet(true);
      }
      if (incoming.get(11)) {
        struct.stopPrice = iprot.readDouble();
        struct.setStopPriceIsSet(true);
      }
      if (incoming.get(12)) {
        struct.forceCloseReason = iprot.readString();
        struct.setForceCloseReasonIsSet(true);
      }
      if (incoming.get(13)) {
        struct.isAutoSuspend = iprot.readI32();
        struct.setIsAutoSuspendIsSet(true);
      }
      if (incoming.get(14)) {
        struct.businessUnit = iprot.readString();
        struct.setBusinessUnitIsSet(true);
      }
      if (incoming.get(15)) {
        struct.requestID = iprot.readI32();
        struct.setRequestIDIsSet(true);
      }
      if (incoming.get(16)) {
        struct.orderLocalID = iprot.readString();
        struct.setOrderLocalIDIsSet(true);
      }
      if (incoming.get(17)) {
        struct.exchangeID = iprot.readString();
        struct.setExchangeIDIsSet(true);
      }
      if (incoming.get(18)) {
        struct.participantID = iprot.readString();
        struct.setParticipantIDIsSet(true);
      }
      if (incoming.get(19)) {
        struct.clientID = iprot.readString();
        struct.setClientIDIsSet(true);
      }
      if (incoming.get(20)) {
        struct.exchangeInstID = iprot.readString();
        struct.setExchangeInstIDIsSet(true);
      }
      if (incoming.get(21)) {
        struct.traderID = iprot.readString();
        struct.setTraderIDIsSet(true);
      }
      if (incoming.get(22)) {
        struct.installID = iprot.readI32();
        struct.setInstallIDIsSet(true);
      }
      if (incoming.get(23)) {
        struct.orderSubmitStatus = iprot.readString();
        struct.setOrderSubmitStatusIsSet(true);
      }
      if (incoming.get(24)) {
        struct.notifySequence = iprot.readI32();
        struct.setNotifySequenceIsSet(true);
      }
      if (incoming.get(25)) {
        struct.tradingDay = iprot.readString();
        struct.setTradingDayIsSet(true);
      }
      if (incoming.get(26)) {
        struct.settlementID = iprot.readI32();
        struct.setSettlementIDIsSet(true);
      }
      if (incoming.get(27)) {
        struct.orderSysID = iprot.readString();
        struct.setOrderSysIDIsSet(true);
      }
      if (incoming.get(28)) {
        struct.orderSource = iprot.readString();
        struct.setOrderSourceIsSet(true);
      }
      if (incoming.get(29)) {
        struct.orderStatus = iprot.readString();
        struct.setOrderStatusIsSet(true);
      }
      if (incoming.get(30)) {
        struct.orderType = iprot.readString();
        struct.setOrderTypeIsSet(true);
      }
      if (incoming.get(31)) {
        struct.volumeTraded = iprot.readI32();
        struct.setVolumeTradedIsSet(true);
      }
      if (incoming.get(32)) {
        struct.volumeTotal = iprot.readI32();
        struct.setVolumeTotalIsSet(true);
      }
      if (incoming.get(33)) {
        struct.insertDate = iprot.readString();
        struct.setInsertDateIsSet(true);
      }
      if (incoming.get(34)) {
        struct.insertTime = iprot.readString();
        struct.setInsertTimeIsSet(true);
      }
      if (incoming.get(35)) {
        struct.activeTime = iprot.readString();
        struct.setActiveTimeIsSet(true);
      }
      if (incoming.get(36)) {
        struct.suspendTime = iprot.readString();
        struct.setSuspendTimeIsSet(true);
      }
      if (incoming.get(37)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(38)) {
        struct.cancelTime = iprot.readString();
        struct.setCancelTimeIsSet(true);
      }
      if (incoming.get(39)) {
        struct.activeTraderID = iprot.readString();
        struct.setActiveTraderIDIsSet(true);
      }
      if (incoming.get(40)) {
        struct.clearingPartID = iprot.readString();
        struct.setClearingPartIDIsSet(true);
      }
      if (incoming.get(41)) {
        struct.sequenceNo = iprot.readI32();
        struct.setSequenceNoIsSet(true);
      }
    }
  }

}

