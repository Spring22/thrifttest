/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcInputOrderField implements org.apache.thrift.TBase<CThostFtdcInputOrderField, CThostFtdcInputOrderField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcInputOrderField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcInputOrderField");

  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INVESTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("investorID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INSTRUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instrumentID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ORDER_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("orderRef", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ORDER_PRICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderPriceType", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("direction", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField COMB_OFFSET_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("combOffsetFlag", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField COMB_HEDGE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("combHedgeFlag", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField LIMIT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("limitPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField VOLUME_TOTAL_ORIGINAL_FIELD_DESC = new org.apache.thrift.protocol.TField("volumeTotalOriginal", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField TIME_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("timeCondition", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField GTD_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("gtdDate", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField VOLUME_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("volumeCondition", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField MIN_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("minVolume", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField CONTINGENT_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("contingentCondition", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField STOP_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("stopPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField FORCE_CLOSE_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("forceCloseReason", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField IS_AUTO_SUSPEND_FIELD_DESC = new org.apache.thrift.protocol.TField("isAutoSuspend", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField BUSINESS_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("businessUnit", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestID", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField USER_FORCE_CLOSE_FIELD_DESC = new org.apache.thrift.protocol.TField("userForceClose", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField IS_SWAP_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("isSwapOrder", org.apache.thrift.protocol.TType.I32, (short)23);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcInputOrderFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcInputOrderFieldTupleSchemeFactory());
  }

  public String brokerID; // required
  public String investorID; // required
  public String instrumentID; // required
  public String orderRef; // required
  public String userID; // required
  public String orderPriceType; // required
  public String direction; // required
  public String combOffsetFlag; // required
  public String combHedgeFlag; // required
  public double limitPrice; // required
  public int volumeTotalOriginal; // required
  public String timeCondition; // required
  public String gtdDate; // required
  public String volumeCondition; // required
  public int minVolume; // required
  public String contingentCondition; // required
  public double stopPrice; // required
  public String forceCloseReason; // required
  public int isAutoSuspend; // required
  public String businessUnit; // required
  public int requestID; // required
  public int userForceClose; // required
  public int isSwapOrder; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BROKER_ID((short)1, "brokerID"),
    INVESTOR_ID((short)2, "investorID"),
    INSTRUMENT_ID((short)3, "instrumentID"),
    ORDER_REF((short)4, "orderRef"),
    USER_ID((short)5, "userID"),
    ORDER_PRICE_TYPE((short)6, "orderPriceType"),
    DIRECTION((short)7, "direction"),
    COMB_OFFSET_FLAG((short)8, "combOffsetFlag"),
    COMB_HEDGE_FLAG((short)9, "combHedgeFlag"),
    LIMIT_PRICE((short)10, "limitPrice"),
    VOLUME_TOTAL_ORIGINAL((short)11, "volumeTotalOriginal"),
    TIME_CONDITION((short)12, "timeCondition"),
    GTD_DATE((short)13, "gtdDate"),
    VOLUME_CONDITION((short)14, "volumeCondition"),
    MIN_VOLUME((short)15, "minVolume"),
    CONTINGENT_CONDITION((short)16, "contingentCondition"),
    STOP_PRICE((short)17, "stopPrice"),
    FORCE_CLOSE_REASON((short)18, "forceCloseReason"),
    IS_AUTO_SUSPEND((short)19, "isAutoSuspend"),
    BUSINESS_UNIT((short)20, "businessUnit"),
    REQUEST_ID((short)21, "requestID"),
    USER_FORCE_CLOSE((short)22, "userForceClose"),
    IS_SWAP_ORDER((short)23, "isSwapOrder");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BROKER_ID
          return BROKER_ID;
        case 2: // INVESTOR_ID
          return INVESTOR_ID;
        case 3: // INSTRUMENT_ID
          return INSTRUMENT_ID;
        case 4: // ORDER_REF
          return ORDER_REF;
        case 5: // USER_ID
          return USER_ID;
        case 6: // ORDER_PRICE_TYPE
          return ORDER_PRICE_TYPE;
        case 7: // DIRECTION
          return DIRECTION;
        case 8: // COMB_OFFSET_FLAG
          return COMB_OFFSET_FLAG;
        case 9: // COMB_HEDGE_FLAG
          return COMB_HEDGE_FLAG;
        case 10: // LIMIT_PRICE
          return LIMIT_PRICE;
        case 11: // VOLUME_TOTAL_ORIGINAL
          return VOLUME_TOTAL_ORIGINAL;
        case 12: // TIME_CONDITION
          return TIME_CONDITION;
        case 13: // GTD_DATE
          return GTD_DATE;
        case 14: // VOLUME_CONDITION
          return VOLUME_CONDITION;
        case 15: // MIN_VOLUME
          return MIN_VOLUME;
        case 16: // CONTINGENT_CONDITION
          return CONTINGENT_CONDITION;
        case 17: // STOP_PRICE
          return STOP_PRICE;
        case 18: // FORCE_CLOSE_REASON
          return FORCE_CLOSE_REASON;
        case 19: // IS_AUTO_SUSPEND
          return IS_AUTO_SUSPEND;
        case 20: // BUSINESS_UNIT
          return BUSINESS_UNIT;
        case 21: // REQUEST_ID
          return REQUEST_ID;
        case 22: // USER_FORCE_CLOSE
          return USER_FORCE_CLOSE;
        case 23: // IS_SWAP_ORDER
          return IS_SWAP_ORDER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LIMITPRICE_ISSET_ID = 0;
  private static final int __VOLUMETOTALORIGINAL_ISSET_ID = 1;
  private static final int __MINVOLUME_ISSET_ID = 2;
  private static final int __STOPPRICE_ISSET_ID = 3;
  private static final int __ISAUTOSUSPEND_ISSET_ID = 4;
  private static final int __REQUESTID_ISSET_ID = 5;
  private static final int __USERFORCECLOSE_ISSET_ID = 6;
  private static final int __ISSWAPORDER_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.INVESTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("investorID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInvestorIDType")));
    tmpMap.put(_Fields.INSTRUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("instrumentID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInstrumentIDType")));
    tmpMap.put(_Fields.ORDER_REF, new org.apache.thrift.meta_data.FieldMetaData("orderRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderRefType")));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcUserIDType")));
    tmpMap.put(_Fields.ORDER_PRICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("orderPriceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderPriceTypeType")));
    tmpMap.put(_Fields.DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("direction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDirectionType")));
    tmpMap.put(_Fields.COMB_OFFSET_FLAG, new org.apache.thrift.meta_data.FieldMetaData("combOffsetFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcCombOffsetFlagType")));
    tmpMap.put(_Fields.COMB_HEDGE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("combHedgeFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcCombHedgeFlagType")));
    tmpMap.put(_Fields.LIMIT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("limitPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.VOLUME_TOTAL_ORIGINAL, new org.apache.thrift.meta_data.FieldMetaData("volumeTotalOriginal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcVolumeType")));
    tmpMap.put(_Fields.TIME_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("timeCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeConditionType")));
    tmpMap.put(_Fields.GTD_DATE, new org.apache.thrift.meta_data.FieldMetaData("gtdDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    tmpMap.put(_Fields.VOLUME_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("volumeCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcVolumeConditionType")));
    tmpMap.put(_Fields.MIN_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("minVolume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcVolumeType")));
    tmpMap.put(_Fields.CONTINGENT_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("contingentCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcContingentConditionType")));
    tmpMap.put(_Fields.STOP_PRICE, new org.apache.thrift.meta_data.FieldMetaData("stopPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.FORCE_CLOSE_REASON, new org.apache.thrift.meta_data.FieldMetaData("forceCloseReason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcForceCloseReasonType")));
    tmpMap.put(_Fields.IS_AUTO_SUSPEND, new org.apache.thrift.meta_data.FieldMetaData("isAutoSuspend", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcBoolType")));
    tmpMap.put(_Fields.BUSINESS_UNIT, new org.apache.thrift.meta_data.FieldMetaData("businessUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBusinessUnitType")));
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcRequestIDType")));
    tmpMap.put(_Fields.USER_FORCE_CLOSE, new org.apache.thrift.meta_data.FieldMetaData("userForceClose", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcBoolType")));
    tmpMap.put(_Fields.IS_SWAP_ORDER, new org.apache.thrift.meta_data.FieldMetaData("isSwapOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcBoolType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcInputOrderField.class, metaDataMap);
  }

  public CThostFtdcInputOrderField() {
  }

  public CThostFtdcInputOrderField(
    String brokerID,
    String investorID,
    String instrumentID,
    String orderRef,
    String userID,
    String orderPriceType,
    String direction,
    String combOffsetFlag,
    String combHedgeFlag,
    double limitPrice,
    int volumeTotalOriginal,
    String timeCondition,
    String gtdDate,
    String volumeCondition,
    int minVolume,
    String contingentCondition,
    double stopPrice,
    String forceCloseReason,
    int isAutoSuspend,
    String businessUnit,
    int requestID,
    int userForceClose,
    int isSwapOrder)
  {
    this();
    this.brokerID = brokerID;
    this.investorID = investorID;
    this.instrumentID = instrumentID;
    this.orderRef = orderRef;
    this.userID = userID;
    this.orderPriceType = orderPriceType;
    this.direction = direction;
    this.combOffsetFlag = combOffsetFlag;
    this.combHedgeFlag = combHedgeFlag;
    this.limitPrice = limitPrice;
    setLimitPriceIsSet(true);
    this.volumeTotalOriginal = volumeTotalOriginal;
    setVolumeTotalOriginalIsSet(true);
    this.timeCondition = timeCondition;
    this.gtdDate = gtdDate;
    this.volumeCondition = volumeCondition;
    this.minVolume = minVolume;
    setMinVolumeIsSet(true);
    this.contingentCondition = contingentCondition;
    this.stopPrice = stopPrice;
    setStopPriceIsSet(true);
    this.forceCloseReason = forceCloseReason;
    this.isAutoSuspend = isAutoSuspend;
    setIsAutoSuspendIsSet(true);
    this.businessUnit = businessUnit;
    this.requestID = requestID;
    setRequestIDIsSet(true);
    this.userForceClose = userForceClose;
    setUserForceCloseIsSet(true);
    this.isSwapOrder = isSwapOrder;
    setIsSwapOrderIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcInputOrderField(CThostFtdcInputOrderField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetInvestorID()) {
      this.investorID = other.investorID;
    }
    if (other.isSetInstrumentID()) {
      this.instrumentID = other.instrumentID;
    }
    if (other.isSetOrderRef()) {
      this.orderRef = other.orderRef;
    }
    if (other.isSetUserID()) {
      this.userID = other.userID;
    }
    if (other.isSetOrderPriceType()) {
      this.orderPriceType = other.orderPriceType;
    }
    if (other.isSetDirection()) {
      this.direction = other.direction;
    }
    if (other.isSetCombOffsetFlag()) {
      this.combOffsetFlag = other.combOffsetFlag;
    }
    if (other.isSetCombHedgeFlag()) {
      this.combHedgeFlag = other.combHedgeFlag;
    }
    this.limitPrice = other.limitPrice;
    this.volumeTotalOriginal = other.volumeTotalOriginal;
    if (other.isSetTimeCondition()) {
      this.timeCondition = other.timeCondition;
    }
    if (other.isSetGtdDate()) {
      this.gtdDate = other.gtdDate;
    }
    if (other.isSetVolumeCondition()) {
      this.volumeCondition = other.volumeCondition;
    }
    this.minVolume = other.minVolume;
    if (other.isSetContingentCondition()) {
      this.contingentCondition = other.contingentCondition;
    }
    this.stopPrice = other.stopPrice;
    if (other.isSetForceCloseReason()) {
      this.forceCloseReason = other.forceCloseReason;
    }
    this.isAutoSuspend = other.isAutoSuspend;
    if (other.isSetBusinessUnit()) {
      this.businessUnit = other.businessUnit;
    }
    this.requestID = other.requestID;
    this.userForceClose = other.userForceClose;
    this.isSwapOrder = other.isSwapOrder;
  }

  public CThostFtdcInputOrderField deepCopy() {
    return new CThostFtdcInputOrderField(this);
  }

  @Override
  public void clear() {
    this.brokerID = null;
    this.investorID = null;
    this.instrumentID = null;
    this.orderRef = null;
    this.userID = null;
    this.orderPriceType = null;
    this.direction = null;
    this.combOffsetFlag = null;
    this.combHedgeFlag = null;
    setLimitPriceIsSet(false);
    this.limitPrice = 0.0;
    setVolumeTotalOriginalIsSet(false);
    this.volumeTotalOriginal = 0;
    this.timeCondition = null;
    this.gtdDate = null;
    this.volumeCondition = null;
    setMinVolumeIsSet(false);
    this.minVolume = 0;
    this.contingentCondition = null;
    setStopPriceIsSet(false);
    this.stopPrice = 0.0;
    this.forceCloseReason = null;
    setIsAutoSuspendIsSet(false);
    this.isAutoSuspend = 0;
    this.businessUnit = null;
    setRequestIDIsSet(false);
    this.requestID = 0;
    setUserForceCloseIsSet(false);
    this.userForceClose = 0;
    setIsSwapOrderIsSet(false);
    this.isSwapOrder = 0;
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcInputOrderField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getInvestorID() {
    return this.investorID;
  }

  public CThostFtdcInputOrderField setInvestorID(String investorID) {
    this.investorID = investorID;
    return this;
  }

  public void unsetInvestorID() {
    this.investorID = null;
  }

  /** Returns true if field investorID is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorID() {
    return this.investorID != null;
  }

  public void setInvestorIDIsSet(boolean value) {
    if (!value) {
      this.investorID = null;
    }
  }

  public String getInstrumentID() {
    return this.instrumentID;
  }

  public CThostFtdcInputOrderField setInstrumentID(String instrumentID) {
    this.instrumentID = instrumentID;
    return this;
  }

  public void unsetInstrumentID() {
    this.instrumentID = null;
  }

  /** Returns true if field instrumentID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstrumentID() {
    return this.instrumentID != null;
  }

  public void setInstrumentIDIsSet(boolean value) {
    if (!value) {
      this.instrumentID = null;
    }
  }

  public String getOrderRef() {
    return this.orderRef;
  }

  public CThostFtdcInputOrderField setOrderRef(String orderRef) {
    this.orderRef = orderRef;
    return this;
  }

  public void unsetOrderRef() {
    this.orderRef = null;
  }

  /** Returns true if field orderRef is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderRef() {
    return this.orderRef != null;
  }

  public void setOrderRefIsSet(boolean value) {
    if (!value) {
      this.orderRef = null;
    }
  }

  public String getUserID() {
    return this.userID;
  }

  public CThostFtdcInputOrderField setUserID(String userID) {
    this.userID = userID;
    return this;
  }

  public void unsetUserID() {
    this.userID = null;
  }

  /** Returns true if field userID is set (has been assigned a value) and false otherwise */
  public boolean isSetUserID() {
    return this.userID != null;
  }

  public void setUserIDIsSet(boolean value) {
    if (!value) {
      this.userID = null;
    }
  }

  public String getOrderPriceType() {
    return this.orderPriceType;
  }

  public CThostFtdcInputOrderField setOrderPriceType(String orderPriceType) {
    this.orderPriceType = orderPriceType;
    return this;
  }

  public void unsetOrderPriceType() {
    this.orderPriceType = null;
  }

  /** Returns true if field orderPriceType is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderPriceType() {
    return this.orderPriceType != null;
  }

  public void setOrderPriceTypeIsSet(boolean value) {
    if (!value) {
      this.orderPriceType = null;
    }
  }

  public String getDirection() {
    return this.direction;
  }

  public CThostFtdcInputOrderField setDirection(String direction) {
    this.direction = direction;
    return this;
  }

  public void unsetDirection() {
    this.direction = null;
  }

  /** Returns true if field direction is set (has been assigned a value) and false otherwise */
  public boolean isSetDirection() {
    return this.direction != null;
  }

  public void setDirectionIsSet(boolean value) {
    if (!value) {
      this.direction = null;
    }
  }

  public String getCombOffsetFlag() {
    return this.combOffsetFlag;
  }

  public CThostFtdcInputOrderField setCombOffsetFlag(String combOffsetFlag) {
    this.combOffsetFlag = combOffsetFlag;
    return this;
  }

  public void unsetCombOffsetFlag() {
    this.combOffsetFlag = null;
  }

  /** Returns true if field combOffsetFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetCombOffsetFlag() {
    return this.combOffsetFlag != null;
  }

  public void setCombOffsetFlagIsSet(boolean value) {
    if (!value) {
      this.combOffsetFlag = null;
    }
  }

  public String getCombHedgeFlag() {
    return this.combHedgeFlag;
  }

  public CThostFtdcInputOrderField setCombHedgeFlag(String combHedgeFlag) {
    this.combHedgeFlag = combHedgeFlag;
    return this;
  }

  public void unsetCombHedgeFlag() {
    this.combHedgeFlag = null;
  }

  /** Returns true if field combHedgeFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetCombHedgeFlag() {
    return this.combHedgeFlag != null;
  }

  public void setCombHedgeFlagIsSet(boolean value) {
    if (!value) {
      this.combHedgeFlag = null;
    }
  }

  public double getLimitPrice() {
    return this.limitPrice;
  }

  public CThostFtdcInputOrderField setLimitPrice(double limitPrice) {
    this.limitPrice = limitPrice;
    setLimitPriceIsSet(true);
    return this;
  }

  public void unsetLimitPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMITPRICE_ISSET_ID);
  }

  /** Returns true if field limitPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMITPRICE_ISSET_ID);
  }

  public void setLimitPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMITPRICE_ISSET_ID, value);
  }

  public int getVolumeTotalOriginal() {
    return this.volumeTotalOriginal;
  }

  public CThostFtdcInputOrderField setVolumeTotalOriginal(int volumeTotalOriginal) {
    this.volumeTotalOriginal = volumeTotalOriginal;
    setVolumeTotalOriginalIsSet(true);
    return this;
  }

  public void unsetVolumeTotalOriginal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLUMETOTALORIGINAL_ISSET_ID);
  }

  /** Returns true if field volumeTotalOriginal is set (has been assigned a value) and false otherwise */
  public boolean isSetVolumeTotalOriginal() {
    return EncodingUtils.testBit(__isset_bitfield, __VOLUMETOTALORIGINAL_ISSET_ID);
  }

  public void setVolumeTotalOriginalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLUMETOTALORIGINAL_ISSET_ID, value);
  }

  public String getTimeCondition() {
    return this.timeCondition;
  }

  public CThostFtdcInputOrderField setTimeCondition(String timeCondition) {
    this.timeCondition = timeCondition;
    return this;
  }

  public void unsetTimeCondition() {
    this.timeCondition = null;
  }

  /** Returns true if field timeCondition is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeCondition() {
    return this.timeCondition != null;
  }

  public void setTimeConditionIsSet(boolean value) {
    if (!value) {
      this.timeCondition = null;
    }
  }

  public String getGtdDate() {
    return this.gtdDate;
  }

  public CThostFtdcInputOrderField setGtdDate(String gtdDate) {
    this.gtdDate = gtdDate;
    return this;
  }

  public void unsetGtdDate() {
    this.gtdDate = null;
  }

  /** Returns true if field gtdDate is set (has been assigned a value) and false otherwise */
  public boolean isSetGtdDate() {
    return this.gtdDate != null;
  }

  public void setGtdDateIsSet(boolean value) {
    if (!value) {
      this.gtdDate = null;
    }
  }

  public String getVolumeCondition() {
    return this.volumeCondition;
  }

  public CThostFtdcInputOrderField setVolumeCondition(String volumeCondition) {
    this.volumeCondition = volumeCondition;
    return this;
  }

  public void unsetVolumeCondition() {
    this.volumeCondition = null;
  }

  /** Returns true if field volumeCondition is set (has been assigned a value) and false otherwise */
  public boolean isSetVolumeCondition() {
    return this.volumeCondition != null;
  }

  public void setVolumeConditionIsSet(boolean value) {
    if (!value) {
      this.volumeCondition = null;
    }
  }

  public int getMinVolume() {
    return this.minVolume;
  }

  public CThostFtdcInputOrderField setMinVolume(int minVolume) {
    this.minVolume = minVolume;
    setMinVolumeIsSet(true);
    return this;
  }

  public void unsetMinVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINVOLUME_ISSET_ID);
  }

  /** Returns true if field minVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetMinVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __MINVOLUME_ISSET_ID);
  }

  public void setMinVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINVOLUME_ISSET_ID, value);
  }

  public String getContingentCondition() {
    return this.contingentCondition;
  }

  public CThostFtdcInputOrderField setContingentCondition(String contingentCondition) {
    this.contingentCondition = contingentCondition;
    return this;
  }

  public void unsetContingentCondition() {
    this.contingentCondition = null;
  }

  /** Returns true if field contingentCondition is set (has been assigned a value) and false otherwise */
  public boolean isSetContingentCondition() {
    return this.contingentCondition != null;
  }

  public void setContingentConditionIsSet(boolean value) {
    if (!value) {
      this.contingentCondition = null;
    }
  }

  public double getStopPrice() {
    return this.stopPrice;
  }

  public CThostFtdcInputOrderField setStopPrice(double stopPrice) {
    this.stopPrice = stopPrice;
    setStopPriceIsSet(true);
    return this;
  }

  public void unsetStopPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STOPPRICE_ISSET_ID);
  }

  /** Returns true if field stopPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetStopPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __STOPPRICE_ISSET_ID);
  }

  public void setStopPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STOPPRICE_ISSET_ID, value);
  }

  public String getForceCloseReason() {
    return this.forceCloseReason;
  }

  public CThostFtdcInputOrderField setForceCloseReason(String forceCloseReason) {
    this.forceCloseReason = forceCloseReason;
    return this;
  }

  public void unsetForceCloseReason() {
    this.forceCloseReason = null;
  }

  /** Returns true if field forceCloseReason is set (has been assigned a value) and false otherwise */
  public boolean isSetForceCloseReason() {
    return this.forceCloseReason != null;
  }

  public void setForceCloseReasonIsSet(boolean value) {
    if (!value) {
      this.forceCloseReason = null;
    }
  }

  public int getIsAutoSuspend() {
    return this.isAutoSuspend;
  }

  public CThostFtdcInputOrderField setIsAutoSuspend(int isAutoSuspend) {
    this.isAutoSuspend = isAutoSuspend;
    setIsAutoSuspendIsSet(true);
    return this;
  }

  public void unsetIsAutoSuspend() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISAUTOSUSPEND_ISSET_ID);
  }

  /** Returns true if field isAutoSuspend is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAutoSuspend() {
    return EncodingUtils.testBit(__isset_bitfield, __ISAUTOSUSPEND_ISSET_ID);
  }

  public void setIsAutoSuspendIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISAUTOSUSPEND_ISSET_ID, value);
  }

  public String getBusinessUnit() {
    return this.businessUnit;
  }

  public CThostFtdcInputOrderField setBusinessUnit(String businessUnit) {
    this.businessUnit = businessUnit;
    return this;
  }

  public void unsetBusinessUnit() {
    this.businessUnit = null;
  }

  /** Returns true if field businessUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessUnit() {
    return this.businessUnit != null;
  }

  public void setBusinessUnitIsSet(boolean value) {
    if (!value) {
      this.businessUnit = null;
    }
  }

  public int getRequestID() {
    return this.requestID;
  }

  public CThostFtdcInputOrderField setRequestID(int requestID) {
    this.requestID = requestID;
    setRequestIDIsSet(true);
    return this;
  }

  public void unsetRequestID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  /** Returns true if field requestID is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestID() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  public void setRequestIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
  }

  public int getUserForceClose() {
    return this.userForceClose;
  }

  public CThostFtdcInputOrderField setUserForceClose(int userForceClose) {
    this.userForceClose = userForceClose;
    setUserForceCloseIsSet(true);
    return this;
  }

  public void unsetUserForceClose() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERFORCECLOSE_ISSET_ID);
  }

  /** Returns true if field userForceClose is set (has been assigned a value) and false otherwise */
  public boolean isSetUserForceClose() {
    return EncodingUtils.testBit(__isset_bitfield, __USERFORCECLOSE_ISSET_ID);
  }

  public void setUserForceCloseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERFORCECLOSE_ISSET_ID, value);
  }

  public int getIsSwapOrder() {
    return this.isSwapOrder;
  }

  public CThostFtdcInputOrderField setIsSwapOrder(int isSwapOrder) {
    this.isSwapOrder = isSwapOrder;
    setIsSwapOrderIsSet(true);
    return this;
  }

  public void unsetIsSwapOrder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSWAPORDER_ISSET_ID);
  }

  /** Returns true if field isSwapOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSwapOrder() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSWAPORDER_ISSET_ID);
  }

  public void setIsSwapOrderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSWAPORDER_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case INVESTOR_ID:
      if (value == null) {
        unsetInvestorID();
      } else {
        setInvestorID((String)value);
      }
      break;

    case INSTRUMENT_ID:
      if (value == null) {
        unsetInstrumentID();
      } else {
        setInstrumentID((String)value);
      }
      break;

    case ORDER_REF:
      if (value == null) {
        unsetOrderRef();
      } else {
        setOrderRef((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserID();
      } else {
        setUserID((String)value);
      }
      break;

    case ORDER_PRICE_TYPE:
      if (value == null) {
        unsetOrderPriceType();
      } else {
        setOrderPriceType((String)value);
      }
      break;

    case DIRECTION:
      if (value == null) {
        unsetDirection();
      } else {
        setDirection((String)value);
      }
      break;

    case COMB_OFFSET_FLAG:
      if (value == null) {
        unsetCombOffsetFlag();
      } else {
        setCombOffsetFlag((String)value);
      }
      break;

    case COMB_HEDGE_FLAG:
      if (value == null) {
        unsetCombHedgeFlag();
      } else {
        setCombHedgeFlag((String)value);
      }
      break;

    case LIMIT_PRICE:
      if (value == null) {
        unsetLimitPrice();
      } else {
        setLimitPrice((Double)value);
      }
      break;

    case VOLUME_TOTAL_ORIGINAL:
      if (value == null) {
        unsetVolumeTotalOriginal();
      } else {
        setVolumeTotalOriginal((Integer)value);
      }
      break;

    case TIME_CONDITION:
      if (value == null) {
        unsetTimeCondition();
      } else {
        setTimeCondition((String)value);
      }
      break;

    case GTD_DATE:
      if (value == null) {
        unsetGtdDate();
      } else {
        setGtdDate((String)value);
      }
      break;

    case VOLUME_CONDITION:
      if (value == null) {
        unsetVolumeCondition();
      } else {
        setVolumeCondition((String)value);
      }
      break;

    case MIN_VOLUME:
      if (value == null) {
        unsetMinVolume();
      } else {
        setMinVolume((Integer)value);
      }
      break;

    case CONTINGENT_CONDITION:
      if (value == null) {
        unsetContingentCondition();
      } else {
        setContingentCondition((String)value);
      }
      break;

    case STOP_PRICE:
      if (value == null) {
        unsetStopPrice();
      } else {
        setStopPrice((Double)value);
      }
      break;

    case FORCE_CLOSE_REASON:
      if (value == null) {
        unsetForceCloseReason();
      } else {
        setForceCloseReason((String)value);
      }
      break;

    case IS_AUTO_SUSPEND:
      if (value == null) {
        unsetIsAutoSuspend();
      } else {
        setIsAutoSuspend((Integer)value);
      }
      break;

    case BUSINESS_UNIT:
      if (value == null) {
        unsetBusinessUnit();
      } else {
        setBusinessUnit((String)value);
      }
      break;

    case REQUEST_ID:
      if (value == null) {
        unsetRequestID();
      } else {
        setRequestID((Integer)value);
      }
      break;

    case USER_FORCE_CLOSE:
      if (value == null) {
        unsetUserForceClose();
      } else {
        setUserForceClose((Integer)value);
      }
      break;

    case IS_SWAP_ORDER:
      if (value == null) {
        unsetIsSwapOrder();
      } else {
        setIsSwapOrder((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BROKER_ID:
      return getBrokerID();

    case INVESTOR_ID:
      return getInvestorID();

    case INSTRUMENT_ID:
      return getInstrumentID();

    case ORDER_REF:
      return getOrderRef();

    case USER_ID:
      return getUserID();

    case ORDER_PRICE_TYPE:
      return getOrderPriceType();

    case DIRECTION:
      return getDirection();

    case COMB_OFFSET_FLAG:
      return getCombOffsetFlag();

    case COMB_HEDGE_FLAG:
      return getCombHedgeFlag();

    case LIMIT_PRICE:
      return Double.valueOf(getLimitPrice());

    case VOLUME_TOTAL_ORIGINAL:
      return Integer.valueOf(getVolumeTotalOriginal());

    case TIME_CONDITION:
      return getTimeCondition();

    case GTD_DATE:
      return getGtdDate();

    case VOLUME_CONDITION:
      return getVolumeCondition();

    case MIN_VOLUME:
      return Integer.valueOf(getMinVolume());

    case CONTINGENT_CONDITION:
      return getContingentCondition();

    case STOP_PRICE:
      return Double.valueOf(getStopPrice());

    case FORCE_CLOSE_REASON:
      return getForceCloseReason();

    case IS_AUTO_SUSPEND:
      return Integer.valueOf(getIsAutoSuspend());

    case BUSINESS_UNIT:
      return getBusinessUnit();

    case REQUEST_ID:
      return Integer.valueOf(getRequestID());

    case USER_FORCE_CLOSE:
      return Integer.valueOf(getUserForceClose());

    case IS_SWAP_ORDER:
      return Integer.valueOf(getIsSwapOrder());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BROKER_ID:
      return isSetBrokerID();
    case INVESTOR_ID:
      return isSetInvestorID();
    case INSTRUMENT_ID:
      return isSetInstrumentID();
    case ORDER_REF:
      return isSetOrderRef();
    case USER_ID:
      return isSetUserID();
    case ORDER_PRICE_TYPE:
      return isSetOrderPriceType();
    case DIRECTION:
      return isSetDirection();
    case COMB_OFFSET_FLAG:
      return isSetCombOffsetFlag();
    case COMB_HEDGE_FLAG:
      return isSetCombHedgeFlag();
    case LIMIT_PRICE:
      return isSetLimitPrice();
    case VOLUME_TOTAL_ORIGINAL:
      return isSetVolumeTotalOriginal();
    case TIME_CONDITION:
      return isSetTimeCondition();
    case GTD_DATE:
      return isSetGtdDate();
    case VOLUME_CONDITION:
      return isSetVolumeCondition();
    case MIN_VOLUME:
      return isSetMinVolume();
    case CONTINGENT_CONDITION:
      return isSetContingentCondition();
    case STOP_PRICE:
      return isSetStopPrice();
    case FORCE_CLOSE_REASON:
      return isSetForceCloseReason();
    case IS_AUTO_SUSPEND:
      return isSetIsAutoSuspend();
    case BUSINESS_UNIT:
      return isSetBusinessUnit();
    case REQUEST_ID:
      return isSetRequestID();
    case USER_FORCE_CLOSE:
      return isSetUserForceClose();
    case IS_SWAP_ORDER:
      return isSetIsSwapOrder();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcInputOrderField)
      return this.equals((CThostFtdcInputOrderField)that);
    return false;
  }

  public boolean equals(CThostFtdcInputOrderField that) {
    if (that == null)
      return false;

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_investorID = true && this.isSetInvestorID();
    boolean that_present_investorID = true && that.isSetInvestorID();
    if (this_present_investorID || that_present_investorID) {
      if (!(this_present_investorID && that_present_investorID))
        return false;
      if (!this.investorID.equals(that.investorID))
        return false;
    }

    boolean this_present_instrumentID = true && this.isSetInstrumentID();
    boolean that_present_instrumentID = true && that.isSetInstrumentID();
    if (this_present_instrumentID || that_present_instrumentID) {
      if (!(this_present_instrumentID && that_present_instrumentID))
        return false;
      if (!this.instrumentID.equals(that.instrumentID))
        return false;
    }

    boolean this_present_orderRef = true && this.isSetOrderRef();
    boolean that_present_orderRef = true && that.isSetOrderRef();
    if (this_present_orderRef || that_present_orderRef) {
      if (!(this_present_orderRef && that_present_orderRef))
        return false;
      if (!this.orderRef.equals(that.orderRef))
        return false;
    }

    boolean this_present_userID = true && this.isSetUserID();
    boolean that_present_userID = true && that.isSetUserID();
    if (this_present_userID || that_present_userID) {
      if (!(this_present_userID && that_present_userID))
        return false;
      if (!this.userID.equals(that.userID))
        return false;
    }

    boolean this_present_orderPriceType = true && this.isSetOrderPriceType();
    boolean that_present_orderPriceType = true && that.isSetOrderPriceType();
    if (this_present_orderPriceType || that_present_orderPriceType) {
      if (!(this_present_orderPriceType && that_present_orderPriceType))
        return false;
      if (!this.orderPriceType.equals(that.orderPriceType))
        return false;
    }

    boolean this_present_direction = true && this.isSetDirection();
    boolean that_present_direction = true && that.isSetDirection();
    if (this_present_direction || that_present_direction) {
      if (!(this_present_direction && that_present_direction))
        return false;
      if (!this.direction.equals(that.direction))
        return false;
    }

    boolean this_present_combOffsetFlag = true && this.isSetCombOffsetFlag();
    boolean that_present_combOffsetFlag = true && that.isSetCombOffsetFlag();
    if (this_present_combOffsetFlag || that_present_combOffsetFlag) {
      if (!(this_present_combOffsetFlag && that_present_combOffsetFlag))
        return false;
      if (!this.combOffsetFlag.equals(that.combOffsetFlag))
        return false;
    }

    boolean this_present_combHedgeFlag = true && this.isSetCombHedgeFlag();
    boolean that_present_combHedgeFlag = true && that.isSetCombHedgeFlag();
    if (this_present_combHedgeFlag || that_present_combHedgeFlag) {
      if (!(this_present_combHedgeFlag && that_present_combHedgeFlag))
        return false;
      if (!this.combHedgeFlag.equals(that.combHedgeFlag))
        return false;
    }

    boolean this_present_limitPrice = true;
    boolean that_present_limitPrice = true;
    if (this_present_limitPrice || that_present_limitPrice) {
      if (!(this_present_limitPrice && that_present_limitPrice))
        return false;
      if (this.limitPrice != that.limitPrice)
        return false;
    }

    boolean this_present_volumeTotalOriginal = true;
    boolean that_present_volumeTotalOriginal = true;
    if (this_present_volumeTotalOriginal || that_present_volumeTotalOriginal) {
      if (!(this_present_volumeTotalOriginal && that_present_volumeTotalOriginal))
        return false;
      if (this.volumeTotalOriginal != that.volumeTotalOriginal)
        return false;
    }

    boolean this_present_timeCondition = true && this.isSetTimeCondition();
    boolean that_present_timeCondition = true && that.isSetTimeCondition();
    if (this_present_timeCondition || that_present_timeCondition) {
      if (!(this_present_timeCondition && that_present_timeCondition))
        return false;
      if (!this.timeCondition.equals(that.timeCondition))
        return false;
    }

    boolean this_present_gtdDate = true && this.isSetGtdDate();
    boolean that_present_gtdDate = true && that.isSetGtdDate();
    if (this_present_gtdDate || that_present_gtdDate) {
      if (!(this_present_gtdDate && that_present_gtdDate))
        return false;
      if (!this.gtdDate.equals(that.gtdDate))
        return false;
    }

    boolean this_present_volumeCondition = true && this.isSetVolumeCondition();
    boolean that_present_volumeCondition = true && that.isSetVolumeCondition();
    if (this_present_volumeCondition || that_present_volumeCondition) {
      if (!(this_present_volumeCondition && that_present_volumeCondition))
        return false;
      if (!this.volumeCondition.equals(that.volumeCondition))
        return false;
    }

    boolean this_present_minVolume = true;
    boolean that_present_minVolume = true;
    if (this_present_minVolume || that_present_minVolume) {
      if (!(this_present_minVolume && that_present_minVolume))
        return false;
      if (this.minVolume != that.minVolume)
        return false;
    }

    boolean this_present_contingentCondition = true && this.isSetContingentCondition();
    boolean that_present_contingentCondition = true && that.isSetContingentCondition();
    if (this_present_contingentCondition || that_present_contingentCondition) {
      if (!(this_present_contingentCondition && that_present_contingentCondition))
        return false;
      if (!this.contingentCondition.equals(that.contingentCondition))
        return false;
    }

    boolean this_present_stopPrice = true;
    boolean that_present_stopPrice = true;
    if (this_present_stopPrice || that_present_stopPrice) {
      if (!(this_present_stopPrice && that_present_stopPrice))
        return false;
      if (this.stopPrice != that.stopPrice)
        return false;
    }

    boolean this_present_forceCloseReason = true && this.isSetForceCloseReason();
    boolean that_present_forceCloseReason = true && that.isSetForceCloseReason();
    if (this_present_forceCloseReason || that_present_forceCloseReason) {
      if (!(this_present_forceCloseReason && that_present_forceCloseReason))
        return false;
      if (!this.forceCloseReason.equals(that.forceCloseReason))
        return false;
    }

    boolean this_present_isAutoSuspend = true;
    boolean that_present_isAutoSuspend = true;
    if (this_present_isAutoSuspend || that_present_isAutoSuspend) {
      if (!(this_present_isAutoSuspend && that_present_isAutoSuspend))
        return false;
      if (this.isAutoSuspend != that.isAutoSuspend)
        return false;
    }

    boolean this_present_businessUnit = true && this.isSetBusinessUnit();
    boolean that_present_businessUnit = true && that.isSetBusinessUnit();
    if (this_present_businessUnit || that_present_businessUnit) {
      if (!(this_present_businessUnit && that_present_businessUnit))
        return false;
      if (!this.businessUnit.equals(that.businessUnit))
        return false;
    }

    boolean this_present_requestID = true;
    boolean that_present_requestID = true;
    if (this_present_requestID || that_present_requestID) {
      if (!(this_present_requestID && that_present_requestID))
        return false;
      if (this.requestID != that.requestID)
        return false;
    }

    boolean this_present_userForceClose = true;
    boolean that_present_userForceClose = true;
    if (this_present_userForceClose || that_present_userForceClose) {
      if (!(this_present_userForceClose && that_present_userForceClose))
        return false;
      if (this.userForceClose != that.userForceClose)
        return false;
    }

    boolean this_present_isSwapOrder = true;
    boolean that_present_isSwapOrder = true;
    if (this_present_isSwapOrder || that_present_isSwapOrder) {
      if (!(this_present_isSwapOrder && that_present_isSwapOrder))
        return false;
      if (this.isSwapOrder != that.isSwapOrder)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcInputOrderField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestorID()).compareTo(other.isSetInvestorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorID, other.investorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstrumentID()).compareTo(other.isSetInstrumentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstrumentID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instrumentID, other.instrumentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderRef()).compareTo(other.isSetOrderRef());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderRef()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderRef, other.orderRef);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserID()).compareTo(other.isSetUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, other.userID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderPriceType()).compareTo(other.isSetOrderPriceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderPriceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderPriceType, other.orderPriceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDirection()).compareTo(other.isSetDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direction, other.direction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCombOffsetFlag()).compareTo(other.isSetCombOffsetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCombOffsetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.combOffsetFlag, other.combOffsetFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCombHedgeFlag()).compareTo(other.isSetCombHedgeFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCombHedgeFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.combHedgeFlag, other.combHedgeFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitPrice()).compareTo(other.isSetLimitPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitPrice, other.limitPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolumeTotalOriginal()).compareTo(other.isSetVolumeTotalOriginal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolumeTotalOriginal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volumeTotalOriginal, other.volumeTotalOriginal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeCondition()).compareTo(other.isSetTimeCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeCondition, other.timeCondition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGtdDate()).compareTo(other.isSetGtdDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGtdDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gtdDate, other.gtdDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolumeCondition()).compareTo(other.isSetVolumeCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolumeCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volumeCondition, other.volumeCondition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinVolume()).compareTo(other.isSetMinVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minVolume, other.minVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContingentCondition()).compareTo(other.isSetContingentCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContingentCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contingentCondition, other.contingentCondition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStopPrice()).compareTo(other.isSetStopPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStopPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopPrice, other.stopPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForceCloseReason()).compareTo(other.isSetForceCloseReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForceCloseReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forceCloseReason, other.forceCloseReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsAutoSuspend()).compareTo(other.isSetIsAutoSuspend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAutoSuspend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAutoSuspend, other.isAutoSuspend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessUnit()).compareTo(other.isSetBusinessUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessUnit, other.businessUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestID()).compareTo(other.isSetRequestID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestID, other.requestID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserForceClose()).compareTo(other.isSetUserForceClose());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserForceClose()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userForceClose, other.userForceClose);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSwapOrder()).compareTo(other.isSetIsSwapOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSwapOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSwapOrder, other.isSwapOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcInputOrderField(");
    boolean first = true;

    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("investorID:");
    if (this.investorID == null) {
      sb.append("null");
    } else {
      sb.append(this.investorID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("instrumentID:");
    if (this.instrumentID == null) {
      sb.append("null");
    } else {
      sb.append(this.instrumentID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderRef:");
    if (this.orderRef == null) {
      sb.append("null");
    } else {
      sb.append(this.orderRef);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userID:");
    if (this.userID == null) {
      sb.append("null");
    } else {
      sb.append(this.userID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderPriceType:");
    if (this.orderPriceType == null) {
      sb.append("null");
    } else {
      sb.append(this.orderPriceType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("direction:");
    if (this.direction == null) {
      sb.append("null");
    } else {
      sb.append(this.direction);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("combOffsetFlag:");
    if (this.combOffsetFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.combOffsetFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("combHedgeFlag:");
    if (this.combHedgeFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.combHedgeFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("limitPrice:");
    sb.append(this.limitPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("volumeTotalOriginal:");
    sb.append(this.volumeTotalOriginal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeCondition:");
    if (this.timeCondition == null) {
      sb.append("null");
    } else {
      sb.append(this.timeCondition);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gtdDate:");
    if (this.gtdDate == null) {
      sb.append("null");
    } else {
      sb.append(this.gtdDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("volumeCondition:");
    if (this.volumeCondition == null) {
      sb.append("null");
    } else {
      sb.append(this.volumeCondition);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("minVolume:");
    sb.append(this.minVolume);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contingentCondition:");
    if (this.contingentCondition == null) {
      sb.append("null");
    } else {
      sb.append(this.contingentCondition);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stopPrice:");
    sb.append(this.stopPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("forceCloseReason:");
    if (this.forceCloseReason == null) {
      sb.append("null");
    } else {
      sb.append(this.forceCloseReason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isAutoSuspend:");
    sb.append(this.isAutoSuspend);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessUnit:");
    if (this.businessUnit == null) {
      sb.append("null");
    } else {
      sb.append(this.businessUnit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestID:");
    sb.append(this.requestID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userForceClose:");
    sb.append(this.userForceClose);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isSwapOrder:");
    sb.append(this.isSwapOrder);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcInputOrderFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcInputOrderFieldStandardScheme getScheme() {
      return new CThostFtdcInputOrderFieldStandardScheme();
    }
  }

  private static class CThostFtdcInputOrderFieldStandardScheme extends StandardScheme<CThostFtdcInputOrderField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcInputOrderField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INVESTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorID = iprot.readString();
              struct.setInvestorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INSTRUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instrumentID = iprot.readString();
              struct.setInstrumentIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORDER_REF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderRef = iprot.readString();
              struct.setOrderRefIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userID = iprot.readString();
              struct.setUserIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ORDER_PRICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderPriceType = iprot.readString();
              struct.setOrderPriceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.direction = iprot.readString();
              struct.setDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COMB_OFFSET_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.combOffsetFlag = iprot.readString();
              struct.setCombOffsetFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // COMB_HEDGE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.combHedgeFlag = iprot.readString();
              struct.setCombHedgeFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LIMIT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.limitPrice = iprot.readDouble();
              struct.setLimitPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // VOLUME_TOTAL_ORIGINAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.volumeTotalOriginal = iprot.readI32();
              struct.setVolumeTotalOriginalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TIME_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timeCondition = iprot.readString();
              struct.setTimeConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // GTD_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gtdDate = iprot.readString();
              struct.setGtdDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // VOLUME_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.volumeCondition = iprot.readString();
              struct.setVolumeConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // MIN_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minVolume = iprot.readI32();
              struct.setMinVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CONTINGENT_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contingentCondition = iprot.readString();
              struct.setContingentConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // STOP_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.stopPrice = iprot.readDouble();
              struct.setStopPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // FORCE_CLOSE_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.forceCloseReason = iprot.readString();
              struct.setForceCloseReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // IS_AUTO_SUSPEND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isAutoSuspend = iprot.readI32();
              struct.setIsAutoSuspendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // BUSINESS_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessUnit = iprot.readString();
              struct.setBusinessUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestID = iprot.readI32();
              struct.setRequestIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // USER_FORCE_CLOSE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userForceClose = iprot.readI32();
              struct.setUserForceCloseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // IS_SWAP_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isSwapOrder = iprot.readI32();
              struct.setIsSwapOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcInputOrderField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.investorID != null) {
        oprot.writeFieldBegin(INVESTOR_ID_FIELD_DESC);
        oprot.writeString(struct.investorID);
        oprot.writeFieldEnd();
      }
      if (struct.instrumentID != null) {
        oprot.writeFieldBegin(INSTRUMENT_ID_FIELD_DESC);
        oprot.writeString(struct.instrumentID);
        oprot.writeFieldEnd();
      }
      if (struct.orderRef != null) {
        oprot.writeFieldBegin(ORDER_REF_FIELD_DESC);
        oprot.writeString(struct.orderRef);
        oprot.writeFieldEnd();
      }
      if (struct.userID != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userID);
        oprot.writeFieldEnd();
      }
      if (struct.orderPriceType != null) {
        oprot.writeFieldBegin(ORDER_PRICE_TYPE_FIELD_DESC);
        oprot.writeString(struct.orderPriceType);
        oprot.writeFieldEnd();
      }
      if (struct.direction != null) {
        oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
        oprot.writeString(struct.direction);
        oprot.writeFieldEnd();
      }
      if (struct.combOffsetFlag != null) {
        oprot.writeFieldBegin(COMB_OFFSET_FLAG_FIELD_DESC);
        oprot.writeString(struct.combOffsetFlag);
        oprot.writeFieldEnd();
      }
      if (struct.combHedgeFlag != null) {
        oprot.writeFieldBegin(COMB_HEDGE_FLAG_FIELD_DESC);
        oprot.writeString(struct.combHedgeFlag);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LIMIT_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.limitPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VOLUME_TOTAL_ORIGINAL_FIELD_DESC);
      oprot.writeI32(struct.volumeTotalOriginal);
      oprot.writeFieldEnd();
      if (struct.timeCondition != null) {
        oprot.writeFieldBegin(TIME_CONDITION_FIELD_DESC);
        oprot.writeString(struct.timeCondition);
        oprot.writeFieldEnd();
      }
      if (struct.gtdDate != null) {
        oprot.writeFieldBegin(GTD_DATE_FIELD_DESC);
        oprot.writeString(struct.gtdDate);
        oprot.writeFieldEnd();
      }
      if (struct.volumeCondition != null) {
        oprot.writeFieldBegin(VOLUME_CONDITION_FIELD_DESC);
        oprot.writeString(struct.volumeCondition);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MIN_VOLUME_FIELD_DESC);
      oprot.writeI32(struct.minVolume);
      oprot.writeFieldEnd();
      if (struct.contingentCondition != null) {
        oprot.writeFieldBegin(CONTINGENT_CONDITION_FIELD_DESC);
        oprot.writeString(struct.contingentCondition);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STOP_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.stopPrice);
      oprot.writeFieldEnd();
      if (struct.forceCloseReason != null) {
        oprot.writeFieldBegin(FORCE_CLOSE_REASON_FIELD_DESC);
        oprot.writeString(struct.forceCloseReason);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_AUTO_SUSPEND_FIELD_DESC);
      oprot.writeI32(struct.isAutoSuspend);
      oprot.writeFieldEnd();
      if (struct.businessUnit != null) {
        oprot.writeFieldBegin(BUSINESS_UNIT_FIELD_DESC);
        oprot.writeString(struct.businessUnit);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
      oprot.writeI32(struct.requestID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_FORCE_CLOSE_FIELD_DESC);
      oprot.writeI32(struct.userForceClose);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_SWAP_ORDER_FIELD_DESC);
      oprot.writeI32(struct.isSwapOrder);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcInputOrderFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcInputOrderFieldTupleScheme getScheme() {
      return new CThostFtdcInputOrderFieldTupleScheme();
    }
  }

  private static class CThostFtdcInputOrderFieldTupleScheme extends TupleScheme<CThostFtdcInputOrderField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcInputOrderField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBrokerID()) {
        optionals.set(0);
      }
      if (struct.isSetInvestorID()) {
        optionals.set(1);
      }
      if (struct.isSetInstrumentID()) {
        optionals.set(2);
      }
      if (struct.isSetOrderRef()) {
        optionals.set(3);
      }
      if (struct.isSetUserID()) {
        optionals.set(4);
      }
      if (struct.isSetOrderPriceType()) {
        optionals.set(5);
      }
      if (struct.isSetDirection()) {
        optionals.set(6);
      }
      if (struct.isSetCombOffsetFlag()) {
        optionals.set(7);
      }
      if (struct.isSetCombHedgeFlag()) {
        optionals.set(8);
      }
      if (struct.isSetLimitPrice()) {
        optionals.set(9);
      }
      if (struct.isSetVolumeTotalOriginal()) {
        optionals.set(10);
      }
      if (struct.isSetTimeCondition()) {
        optionals.set(11);
      }
      if (struct.isSetGtdDate()) {
        optionals.set(12);
      }
      if (struct.isSetVolumeCondition()) {
        optionals.set(13);
      }
      if (struct.isSetMinVolume()) {
        optionals.set(14);
      }
      if (struct.isSetContingentCondition()) {
        optionals.set(15);
      }
      if (struct.isSetStopPrice()) {
        optionals.set(16);
      }
      if (struct.isSetForceCloseReason()) {
        optionals.set(17);
      }
      if (struct.isSetIsAutoSuspend()) {
        optionals.set(18);
      }
      if (struct.isSetBusinessUnit()) {
        optionals.set(19);
      }
      if (struct.isSetRequestID()) {
        optionals.set(20);
      }
      if (struct.isSetUserForceClose()) {
        optionals.set(21);
      }
      if (struct.isSetIsSwapOrder()) {
        optionals.set(22);
      }
      oprot.writeBitSet(optionals, 23);
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetInvestorID()) {
        oprot.writeString(struct.investorID);
      }
      if (struct.isSetInstrumentID()) {
        oprot.writeString(struct.instrumentID);
      }
      if (struct.isSetOrderRef()) {
        oprot.writeString(struct.orderRef);
      }
      if (struct.isSetUserID()) {
        oprot.writeString(struct.userID);
      }
      if (struct.isSetOrderPriceType()) {
        oprot.writeString(struct.orderPriceType);
      }
      if (struct.isSetDirection()) {
        oprot.writeString(struct.direction);
      }
      if (struct.isSetCombOffsetFlag()) {
        oprot.writeString(struct.combOffsetFlag);
      }
      if (struct.isSetCombHedgeFlag()) {
        oprot.writeString(struct.combHedgeFlag);
      }
      if (struct.isSetLimitPrice()) {
        oprot.writeDouble(struct.limitPrice);
      }
      if (struct.isSetVolumeTotalOriginal()) {
        oprot.writeI32(struct.volumeTotalOriginal);
      }
      if (struct.isSetTimeCondition()) {
        oprot.writeString(struct.timeCondition);
      }
      if (struct.isSetGtdDate()) {
        oprot.writeString(struct.gtdDate);
      }
      if (struct.isSetVolumeCondition()) {
        oprot.writeString(struct.volumeCondition);
      }
      if (struct.isSetMinVolume()) {
        oprot.writeI32(struct.minVolume);
      }
      if (struct.isSetContingentCondition()) {
        oprot.writeString(struct.contingentCondition);
      }
      if (struct.isSetStopPrice()) {
        oprot.writeDouble(struct.stopPrice);
      }
      if (struct.isSetForceCloseReason()) {
        oprot.writeString(struct.forceCloseReason);
      }
      if (struct.isSetIsAutoSuspend()) {
        oprot.writeI32(struct.isAutoSuspend);
      }
      if (struct.isSetBusinessUnit()) {
        oprot.writeString(struct.businessUnit);
      }
      if (struct.isSetRequestID()) {
        oprot.writeI32(struct.requestID);
      }
      if (struct.isSetUserForceClose()) {
        oprot.writeI32(struct.userForceClose);
      }
      if (struct.isSetIsSwapOrder()) {
        oprot.writeI32(struct.isSwapOrder);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcInputOrderField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(23);
      if (incoming.get(0)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.investorID = iprot.readString();
        struct.setInvestorIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.instrumentID = iprot.readString();
        struct.setInstrumentIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.orderRef = iprot.readString();
        struct.setOrderRefIsSet(true);
      }
      if (incoming.get(4)) {
        struct.userID = iprot.readString();
        struct.setUserIDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.orderPriceType = iprot.readString();
        struct.setOrderPriceTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.direction = iprot.readString();
        struct.setDirectionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.combOffsetFlag = iprot.readString();
        struct.setCombOffsetFlagIsSet(true);
      }
      if (incoming.get(8)) {
        struct.combHedgeFlag = iprot.readString();
        struct.setCombHedgeFlagIsSet(true);
      }
      if (incoming.get(9)) {
        struct.limitPrice = iprot.readDouble();
        struct.setLimitPriceIsSet(true);
      }
      if (incoming.get(10)) {
        struct.volumeTotalOriginal = iprot.readI32();
        struct.setVolumeTotalOriginalIsSet(true);
      }
      if (incoming.get(11)) {
        struct.timeCondition = iprot.readString();
        struct.setTimeConditionIsSet(true);
      }
      if (incoming.get(12)) {
        struct.gtdDate = iprot.readString();
        struct.setGtdDateIsSet(true);
      }
      if (incoming.get(13)) {
        struct.volumeCondition = iprot.readString();
        struct.setVolumeConditionIsSet(true);
      }
      if (incoming.get(14)) {
        struct.minVolume = iprot.readI32();
        struct.setMinVolumeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.contingentCondition = iprot.readString();
        struct.setContingentConditionIsSet(true);
      }
      if (incoming.get(16)) {
        struct.stopPrice = iprot.readDouble();
        struct.setStopPriceIsSet(true);
      }
      if (incoming.get(17)) {
        struct.forceCloseReason = iprot.readString();
        struct.setForceCloseReasonIsSet(true);
      }
      if (incoming.get(18)) {
        struct.isAutoSuspend = iprot.readI32();
        struct.setIsAutoSuspendIsSet(true);
      }
      if (incoming.get(19)) {
        struct.businessUnit = iprot.readString();
        struct.setBusinessUnitIsSet(true);
      }
      if (incoming.get(20)) {
        struct.requestID = iprot.readI32();
        struct.setRequestIDIsSet(true);
      }
      if (incoming.get(21)) {
        struct.userForceClose = iprot.readI32();
        struct.setUserForceCloseIsSet(true);
      }
      if (incoming.get(22)) {
        struct.isSwapOrder = iprot.readI32();
        struct.setIsSwapOrderIsSet(true);
      }
    }
  }

}

