/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcUserSessionField implements org.apache.thrift.TBase<CThostFtdcUserSessionField, CThostFtdcUserSessionField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcUserSessionField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcUserSessionField");

  private static final org.apache.thrift.protocol.TField FRONT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("frontID", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LOGIN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("loginDate", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField LOGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("loginTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField I_PADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("iPAddress", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField USER_PRODUCT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("userProductInfo", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField INTERFACE_PRODUCT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("interfaceProductInfo", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PROTOCOL_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("protocolInfo", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField MAC_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("macAddress", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcUserSessionFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcUserSessionFieldTupleSchemeFactory());
  }

  public int frontID; // required
  public int sessionID; // required
  public String brokerID; // required
  public String userID; // required
  public String loginDate; // required
  public String loginTime; // required
  public String iPAddress; // required
  public String userProductInfo; // required
  public String interfaceProductInfo; // required
  public String protocolInfo; // required
  public String macAddress; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FRONT_ID((short)1, "frontID"),
    SESSION_ID((short)2, "sessionID"),
    BROKER_ID((short)3, "brokerID"),
    USER_ID((short)4, "userID"),
    LOGIN_DATE((short)5, "loginDate"),
    LOGIN_TIME((short)6, "loginTime"),
    I_PADDRESS((short)7, "iPAddress"),
    USER_PRODUCT_INFO((short)8, "userProductInfo"),
    INTERFACE_PRODUCT_INFO((short)9, "interfaceProductInfo"),
    PROTOCOL_INFO((short)10, "protocolInfo"),
    MAC_ADDRESS((short)11, "macAddress");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FRONT_ID
          return FRONT_ID;
        case 2: // SESSION_ID
          return SESSION_ID;
        case 3: // BROKER_ID
          return BROKER_ID;
        case 4: // USER_ID
          return USER_ID;
        case 5: // LOGIN_DATE
          return LOGIN_DATE;
        case 6: // LOGIN_TIME
          return LOGIN_TIME;
        case 7: // I_PADDRESS
          return I_PADDRESS;
        case 8: // USER_PRODUCT_INFO
          return USER_PRODUCT_INFO;
        case 9: // INTERFACE_PRODUCT_INFO
          return INTERFACE_PRODUCT_INFO;
        case 10: // PROTOCOL_INFO
          return PROTOCOL_INFO;
        case 11: // MAC_ADDRESS
          return MAC_ADDRESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FRONTID_ISSET_ID = 0;
  private static final int __SESSIONID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FRONT_ID, new org.apache.thrift.meta_data.FieldMetaData("frontID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcFrontIDType")));
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcSessionIDType")));
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcUserIDType")));
    tmpMap.put(_Fields.LOGIN_DATE, new org.apache.thrift.meta_data.FieldMetaData("loginDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    tmpMap.put(_Fields.LOGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("loginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeType")));
    tmpMap.put(_Fields.I_PADDRESS, new org.apache.thrift.meta_data.FieldMetaData("iPAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcIPAddressType")));
    tmpMap.put(_Fields.USER_PRODUCT_INFO, new org.apache.thrift.meta_data.FieldMetaData("userProductInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcProductInfoType")));
    tmpMap.put(_Fields.INTERFACE_PRODUCT_INFO, new org.apache.thrift.meta_data.FieldMetaData("interfaceProductInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcProductInfoType")));
    tmpMap.put(_Fields.PROTOCOL_INFO, new org.apache.thrift.meta_data.FieldMetaData("protocolInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcProtocolInfoType")));
    tmpMap.put(_Fields.MAC_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("macAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcMacAddressType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcUserSessionField.class, metaDataMap);
  }

  public CThostFtdcUserSessionField() {
  }

  public CThostFtdcUserSessionField(
    int frontID,
    int sessionID,
    String brokerID,
    String userID,
    String loginDate,
    String loginTime,
    String iPAddress,
    String userProductInfo,
    String interfaceProductInfo,
    String protocolInfo,
    String macAddress)
  {
    this();
    this.frontID = frontID;
    setFrontIDIsSet(true);
    this.sessionID = sessionID;
    setSessionIDIsSet(true);
    this.brokerID = brokerID;
    this.userID = userID;
    this.loginDate = loginDate;
    this.loginTime = loginTime;
    this.iPAddress = iPAddress;
    this.userProductInfo = userProductInfo;
    this.interfaceProductInfo = interfaceProductInfo;
    this.protocolInfo = protocolInfo;
    this.macAddress = macAddress;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcUserSessionField(CThostFtdcUserSessionField other) {
    __isset_bitfield = other.__isset_bitfield;
    this.frontID = other.frontID;
    this.sessionID = other.sessionID;
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetUserID()) {
      this.userID = other.userID;
    }
    if (other.isSetLoginDate()) {
      this.loginDate = other.loginDate;
    }
    if (other.isSetLoginTime()) {
      this.loginTime = other.loginTime;
    }
    if (other.isSetIPAddress()) {
      this.iPAddress = other.iPAddress;
    }
    if (other.isSetUserProductInfo()) {
      this.userProductInfo = other.userProductInfo;
    }
    if (other.isSetInterfaceProductInfo()) {
      this.interfaceProductInfo = other.interfaceProductInfo;
    }
    if (other.isSetProtocolInfo()) {
      this.protocolInfo = other.protocolInfo;
    }
    if (other.isSetMacAddress()) {
      this.macAddress = other.macAddress;
    }
  }

  public CThostFtdcUserSessionField deepCopy() {
    return new CThostFtdcUserSessionField(this);
  }

  @Override
  public void clear() {
    setFrontIDIsSet(false);
    this.frontID = 0;
    setSessionIDIsSet(false);
    this.sessionID = 0;
    this.brokerID = null;
    this.userID = null;
    this.loginDate = null;
    this.loginTime = null;
    this.iPAddress = null;
    this.userProductInfo = null;
    this.interfaceProductInfo = null;
    this.protocolInfo = null;
    this.macAddress = null;
  }

  public int getFrontID() {
    return this.frontID;
  }

  public CThostFtdcUserSessionField setFrontID(int frontID) {
    this.frontID = frontID;
    setFrontIDIsSet(true);
    return this;
  }

  public void unsetFrontID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FRONTID_ISSET_ID);
  }

  /** Returns true if field frontID is set (has been assigned a value) and false otherwise */
  public boolean isSetFrontID() {
    return EncodingUtils.testBit(__isset_bitfield, __FRONTID_ISSET_ID);
  }

  public void setFrontIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FRONTID_ISSET_ID, value);
  }

  public int getSessionID() {
    return this.sessionID;
  }

  public CThostFtdcUserSessionField setSessionID(int sessionID) {
    this.sessionID = sessionID;
    setSessionIDIsSet(true);
    return this;
  }

  public void unsetSessionID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionID() {
    return EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  public void setSessionIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcUserSessionField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getUserID() {
    return this.userID;
  }

  public CThostFtdcUserSessionField setUserID(String userID) {
    this.userID = userID;
    return this;
  }

  public void unsetUserID() {
    this.userID = null;
  }

  /** Returns true if field userID is set (has been assigned a value) and false otherwise */
  public boolean isSetUserID() {
    return this.userID != null;
  }

  public void setUserIDIsSet(boolean value) {
    if (!value) {
      this.userID = null;
    }
  }

  public String getLoginDate() {
    return this.loginDate;
  }

  public CThostFtdcUserSessionField setLoginDate(String loginDate) {
    this.loginDate = loginDate;
    return this;
  }

  public void unsetLoginDate() {
    this.loginDate = null;
  }

  /** Returns true if field loginDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginDate() {
    return this.loginDate != null;
  }

  public void setLoginDateIsSet(boolean value) {
    if (!value) {
      this.loginDate = null;
    }
  }

  public String getLoginTime() {
    return this.loginTime;
  }

  public CThostFtdcUserSessionField setLoginTime(String loginTime) {
    this.loginTime = loginTime;
    return this;
  }

  public void unsetLoginTime() {
    this.loginTime = null;
  }

  /** Returns true if field loginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginTime() {
    return this.loginTime != null;
  }

  public void setLoginTimeIsSet(boolean value) {
    if (!value) {
      this.loginTime = null;
    }
  }

  public String getIPAddress() {
    return this.iPAddress;
  }

  public CThostFtdcUserSessionField setIPAddress(String iPAddress) {
    this.iPAddress = iPAddress;
    return this;
  }

  public void unsetIPAddress() {
    this.iPAddress = null;
  }

  /** Returns true if field iPAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetIPAddress() {
    return this.iPAddress != null;
  }

  public void setIPAddressIsSet(boolean value) {
    if (!value) {
      this.iPAddress = null;
    }
  }

  public String getUserProductInfo() {
    return this.userProductInfo;
  }

  public CThostFtdcUserSessionField setUserProductInfo(String userProductInfo) {
    this.userProductInfo = userProductInfo;
    return this;
  }

  public void unsetUserProductInfo() {
    this.userProductInfo = null;
  }

  /** Returns true if field userProductInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetUserProductInfo() {
    return this.userProductInfo != null;
  }

  public void setUserProductInfoIsSet(boolean value) {
    if (!value) {
      this.userProductInfo = null;
    }
  }

  public String getInterfaceProductInfo() {
    return this.interfaceProductInfo;
  }

  public CThostFtdcUserSessionField setInterfaceProductInfo(String interfaceProductInfo) {
    this.interfaceProductInfo = interfaceProductInfo;
    return this;
  }

  public void unsetInterfaceProductInfo() {
    this.interfaceProductInfo = null;
  }

  /** Returns true if field interfaceProductInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetInterfaceProductInfo() {
    return this.interfaceProductInfo != null;
  }

  public void setInterfaceProductInfoIsSet(boolean value) {
    if (!value) {
      this.interfaceProductInfo = null;
    }
  }

  public String getProtocolInfo() {
    return this.protocolInfo;
  }

  public CThostFtdcUserSessionField setProtocolInfo(String protocolInfo) {
    this.protocolInfo = protocolInfo;
    return this;
  }

  public void unsetProtocolInfo() {
    this.protocolInfo = null;
  }

  /** Returns true if field protocolInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocolInfo() {
    return this.protocolInfo != null;
  }

  public void setProtocolInfoIsSet(boolean value) {
    if (!value) {
      this.protocolInfo = null;
    }
  }

  public String getMacAddress() {
    return this.macAddress;
  }

  public CThostFtdcUserSessionField setMacAddress(String macAddress) {
    this.macAddress = macAddress;
    return this;
  }

  public void unsetMacAddress() {
    this.macAddress = null;
  }

  /** Returns true if field macAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetMacAddress() {
    return this.macAddress != null;
  }

  public void setMacAddressIsSet(boolean value) {
    if (!value) {
      this.macAddress = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FRONT_ID:
      if (value == null) {
        unsetFrontID();
      } else {
        setFrontID((Integer)value);
      }
      break;

    case SESSION_ID:
      if (value == null) {
        unsetSessionID();
      } else {
        setSessionID((Integer)value);
      }
      break;

    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserID();
      } else {
        setUserID((String)value);
      }
      break;

    case LOGIN_DATE:
      if (value == null) {
        unsetLoginDate();
      } else {
        setLoginDate((String)value);
      }
      break;

    case LOGIN_TIME:
      if (value == null) {
        unsetLoginTime();
      } else {
        setLoginTime((String)value);
      }
      break;

    case I_PADDRESS:
      if (value == null) {
        unsetIPAddress();
      } else {
        setIPAddress((String)value);
      }
      break;

    case USER_PRODUCT_INFO:
      if (value == null) {
        unsetUserProductInfo();
      } else {
        setUserProductInfo((String)value);
      }
      break;

    case INTERFACE_PRODUCT_INFO:
      if (value == null) {
        unsetInterfaceProductInfo();
      } else {
        setInterfaceProductInfo((String)value);
      }
      break;

    case PROTOCOL_INFO:
      if (value == null) {
        unsetProtocolInfo();
      } else {
        setProtocolInfo((String)value);
      }
      break;

    case MAC_ADDRESS:
      if (value == null) {
        unsetMacAddress();
      } else {
        setMacAddress((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FRONT_ID:
      return Integer.valueOf(getFrontID());

    case SESSION_ID:
      return Integer.valueOf(getSessionID());

    case BROKER_ID:
      return getBrokerID();

    case USER_ID:
      return getUserID();

    case LOGIN_DATE:
      return getLoginDate();

    case LOGIN_TIME:
      return getLoginTime();

    case I_PADDRESS:
      return getIPAddress();

    case USER_PRODUCT_INFO:
      return getUserProductInfo();

    case INTERFACE_PRODUCT_INFO:
      return getInterfaceProductInfo();

    case PROTOCOL_INFO:
      return getProtocolInfo();

    case MAC_ADDRESS:
      return getMacAddress();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FRONT_ID:
      return isSetFrontID();
    case SESSION_ID:
      return isSetSessionID();
    case BROKER_ID:
      return isSetBrokerID();
    case USER_ID:
      return isSetUserID();
    case LOGIN_DATE:
      return isSetLoginDate();
    case LOGIN_TIME:
      return isSetLoginTime();
    case I_PADDRESS:
      return isSetIPAddress();
    case USER_PRODUCT_INFO:
      return isSetUserProductInfo();
    case INTERFACE_PRODUCT_INFO:
      return isSetInterfaceProductInfo();
    case PROTOCOL_INFO:
      return isSetProtocolInfo();
    case MAC_ADDRESS:
      return isSetMacAddress();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcUserSessionField)
      return this.equals((CThostFtdcUserSessionField)that);
    return false;
  }

  public boolean equals(CThostFtdcUserSessionField that) {
    if (that == null)
      return false;

    boolean this_present_frontID = true;
    boolean that_present_frontID = true;
    if (this_present_frontID || that_present_frontID) {
      if (!(this_present_frontID && that_present_frontID))
        return false;
      if (this.frontID != that.frontID)
        return false;
    }

    boolean this_present_sessionID = true;
    boolean that_present_sessionID = true;
    if (this_present_sessionID || that_present_sessionID) {
      if (!(this_present_sessionID && that_present_sessionID))
        return false;
      if (this.sessionID != that.sessionID)
        return false;
    }

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_userID = true && this.isSetUserID();
    boolean that_present_userID = true && that.isSetUserID();
    if (this_present_userID || that_present_userID) {
      if (!(this_present_userID && that_present_userID))
        return false;
      if (!this.userID.equals(that.userID))
        return false;
    }

    boolean this_present_loginDate = true && this.isSetLoginDate();
    boolean that_present_loginDate = true && that.isSetLoginDate();
    if (this_present_loginDate || that_present_loginDate) {
      if (!(this_present_loginDate && that_present_loginDate))
        return false;
      if (!this.loginDate.equals(that.loginDate))
        return false;
    }

    boolean this_present_loginTime = true && this.isSetLoginTime();
    boolean that_present_loginTime = true && that.isSetLoginTime();
    if (this_present_loginTime || that_present_loginTime) {
      if (!(this_present_loginTime && that_present_loginTime))
        return false;
      if (!this.loginTime.equals(that.loginTime))
        return false;
    }

    boolean this_present_iPAddress = true && this.isSetIPAddress();
    boolean that_present_iPAddress = true && that.isSetIPAddress();
    if (this_present_iPAddress || that_present_iPAddress) {
      if (!(this_present_iPAddress && that_present_iPAddress))
        return false;
      if (!this.iPAddress.equals(that.iPAddress))
        return false;
    }

    boolean this_present_userProductInfo = true && this.isSetUserProductInfo();
    boolean that_present_userProductInfo = true && that.isSetUserProductInfo();
    if (this_present_userProductInfo || that_present_userProductInfo) {
      if (!(this_present_userProductInfo && that_present_userProductInfo))
        return false;
      if (!this.userProductInfo.equals(that.userProductInfo))
        return false;
    }

    boolean this_present_interfaceProductInfo = true && this.isSetInterfaceProductInfo();
    boolean that_present_interfaceProductInfo = true && that.isSetInterfaceProductInfo();
    if (this_present_interfaceProductInfo || that_present_interfaceProductInfo) {
      if (!(this_present_interfaceProductInfo && that_present_interfaceProductInfo))
        return false;
      if (!this.interfaceProductInfo.equals(that.interfaceProductInfo))
        return false;
    }

    boolean this_present_protocolInfo = true && this.isSetProtocolInfo();
    boolean that_present_protocolInfo = true && that.isSetProtocolInfo();
    if (this_present_protocolInfo || that_present_protocolInfo) {
      if (!(this_present_protocolInfo && that_present_protocolInfo))
        return false;
      if (!this.protocolInfo.equals(that.protocolInfo))
        return false;
    }

    boolean this_present_macAddress = true && this.isSetMacAddress();
    boolean that_present_macAddress = true && that.isSetMacAddress();
    if (this_present_macAddress || that_present_macAddress) {
      if (!(this_present_macAddress && that_present_macAddress))
        return false;
      if (!this.macAddress.equals(that.macAddress))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcUserSessionField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFrontID()).compareTo(other.isSetFrontID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrontID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frontID, other.frontID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserID()).compareTo(other.isSetUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, other.userID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginDate()).compareTo(other.isSetLoginDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginDate, other.loginDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginTime()).compareTo(other.isSetLoginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginTime, other.loginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIPAddress()).compareTo(other.isSetIPAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIPAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iPAddress, other.iPAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserProductInfo()).compareTo(other.isSetUserProductInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserProductInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userProductInfo, other.userProductInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterfaceProductInfo()).compareTo(other.isSetInterfaceProductInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterfaceProductInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interfaceProductInfo, other.interfaceProductInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProtocolInfo()).compareTo(other.isSetProtocolInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocolInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocolInfo, other.protocolInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMacAddress()).compareTo(other.isSetMacAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMacAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.macAddress, other.macAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcUserSessionField(");
    boolean first = true;

    sb.append("frontID:");
    sb.append(this.frontID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sessionID:");
    sb.append(this.sessionID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userID:");
    if (this.userID == null) {
      sb.append("null");
    } else {
      sb.append(this.userID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginDate:");
    if (this.loginDate == null) {
      sb.append("null");
    } else {
      sb.append(this.loginDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginTime:");
    if (this.loginTime == null) {
      sb.append("null");
    } else {
      sb.append(this.loginTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iPAddress:");
    if (this.iPAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.iPAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userProductInfo:");
    if (this.userProductInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.userProductInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("interfaceProductInfo:");
    if (this.interfaceProductInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.interfaceProductInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("protocolInfo:");
    if (this.protocolInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.protocolInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("macAddress:");
    if (this.macAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.macAddress);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcUserSessionFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcUserSessionFieldStandardScheme getScheme() {
      return new CThostFtdcUserSessionFieldStandardScheme();
    }
  }

  private static class CThostFtdcUserSessionFieldStandardScheme extends StandardScheme<CThostFtdcUserSessionField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcUserSessionField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FRONT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.frontID = iprot.readI32();
              struct.setFrontIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sessionID = iprot.readI32();
              struct.setSessionIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userID = iprot.readString();
              struct.setUserIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOGIN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginDate = iprot.readString();
              struct.setLoginDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LOGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginTime = iprot.readString();
              struct.setLoginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // I_PADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.iPAddress = iprot.readString();
              struct.setIPAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // USER_PRODUCT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userProductInfo = iprot.readString();
              struct.setUserProductInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // INTERFACE_PRODUCT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.interfaceProductInfo = iprot.readString();
              struct.setInterfaceProductInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PROTOCOL_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.protocolInfo = iprot.readString();
              struct.setProtocolInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MAC_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.macAddress = iprot.readString();
              struct.setMacAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcUserSessionField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FRONT_ID_FIELD_DESC);
      oprot.writeI32(struct.frontID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeI32(struct.sessionID);
      oprot.writeFieldEnd();
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.userID != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userID);
        oprot.writeFieldEnd();
      }
      if (struct.loginDate != null) {
        oprot.writeFieldBegin(LOGIN_DATE_FIELD_DESC);
        oprot.writeString(struct.loginDate);
        oprot.writeFieldEnd();
      }
      if (struct.loginTime != null) {
        oprot.writeFieldBegin(LOGIN_TIME_FIELD_DESC);
        oprot.writeString(struct.loginTime);
        oprot.writeFieldEnd();
      }
      if (struct.iPAddress != null) {
        oprot.writeFieldBegin(I_PADDRESS_FIELD_DESC);
        oprot.writeString(struct.iPAddress);
        oprot.writeFieldEnd();
      }
      if (struct.userProductInfo != null) {
        oprot.writeFieldBegin(USER_PRODUCT_INFO_FIELD_DESC);
        oprot.writeString(struct.userProductInfo);
        oprot.writeFieldEnd();
      }
      if (struct.interfaceProductInfo != null) {
        oprot.writeFieldBegin(INTERFACE_PRODUCT_INFO_FIELD_DESC);
        oprot.writeString(struct.interfaceProductInfo);
        oprot.writeFieldEnd();
      }
      if (struct.protocolInfo != null) {
        oprot.writeFieldBegin(PROTOCOL_INFO_FIELD_DESC);
        oprot.writeString(struct.protocolInfo);
        oprot.writeFieldEnd();
      }
      if (struct.macAddress != null) {
        oprot.writeFieldBegin(MAC_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.macAddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcUserSessionFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcUserSessionFieldTupleScheme getScheme() {
      return new CThostFtdcUserSessionFieldTupleScheme();
    }
  }

  private static class CThostFtdcUserSessionFieldTupleScheme extends TupleScheme<CThostFtdcUserSessionField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcUserSessionField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFrontID()) {
        optionals.set(0);
      }
      if (struct.isSetSessionID()) {
        optionals.set(1);
      }
      if (struct.isSetBrokerID()) {
        optionals.set(2);
      }
      if (struct.isSetUserID()) {
        optionals.set(3);
      }
      if (struct.isSetLoginDate()) {
        optionals.set(4);
      }
      if (struct.isSetLoginTime()) {
        optionals.set(5);
      }
      if (struct.isSetIPAddress()) {
        optionals.set(6);
      }
      if (struct.isSetUserProductInfo()) {
        optionals.set(7);
      }
      if (struct.isSetInterfaceProductInfo()) {
        optionals.set(8);
      }
      if (struct.isSetProtocolInfo()) {
        optionals.set(9);
      }
      if (struct.isSetMacAddress()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetFrontID()) {
        oprot.writeI32(struct.frontID);
      }
      if (struct.isSetSessionID()) {
        oprot.writeI32(struct.sessionID);
      }
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetUserID()) {
        oprot.writeString(struct.userID);
      }
      if (struct.isSetLoginDate()) {
        oprot.writeString(struct.loginDate);
      }
      if (struct.isSetLoginTime()) {
        oprot.writeString(struct.loginTime);
      }
      if (struct.isSetIPAddress()) {
        oprot.writeString(struct.iPAddress);
      }
      if (struct.isSetUserProductInfo()) {
        oprot.writeString(struct.userProductInfo);
      }
      if (struct.isSetInterfaceProductInfo()) {
        oprot.writeString(struct.interfaceProductInfo);
      }
      if (struct.isSetProtocolInfo()) {
        oprot.writeString(struct.protocolInfo);
      }
      if (struct.isSetMacAddress()) {
        oprot.writeString(struct.macAddress);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcUserSessionField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.frontID = iprot.readI32();
        struct.setFrontIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sessionID = iprot.readI32();
        struct.setSessionIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.userID = iprot.readString();
        struct.setUserIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.loginDate = iprot.readString();
        struct.setLoginDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.loginTime = iprot.readString();
        struct.setLoginTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.iPAddress = iprot.readString();
        struct.setIPAddressIsSet(true);
      }
      if (incoming.get(7)) {
        struct.userProductInfo = iprot.readString();
        struct.setUserProductInfoIsSet(true);
      }
      if (incoming.get(8)) {
        struct.interfaceProductInfo = iprot.readString();
        struct.setInterfaceProductInfoIsSet(true);
      }
      if (incoming.get(9)) {
        struct.protocolInfo = iprot.readString();
        struct.setProtocolInfoIsSet(true);
      }
      if (incoming.get(10)) {
        struct.macAddress = iprot.readString();
        struct.setMacAddressIsSet(true);
      }
    }
  }

}

