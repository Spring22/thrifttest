/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TraderPart1Service {

  public interface Iface extends cn.kkworld.futuresservice.cmsTrade.TraderPart2Service.Iface {

    public void release() throws org.apache.thrift.TException;

    public void init() throws org.apache.thrift.TException;

    public int join() throws org.apache.thrift.TException;

    public String getTradingDay() throws org.apache.thrift.TException;

    public void registerFront(String pszFrontAddress) throws org.apache.thrift.TException;

    public void registerNameServer(String pszNsAddress) throws org.apache.thrift.TException;

    public void registerFensUserInfo(cn.kkworld.futuresservice.cmsTrade.CThostFtdcFensUserInfoField pFensUserInfo) throws org.apache.thrift.TException;

    public int reqAuthenticate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqAuthenticateField pReqAuthenticateField, int nRequestID) throws org.apache.thrift.TException;

    public int reqUserLogin(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqUserLoginField pReqUserLoginField, int nRequestID) throws org.apache.thrift.TException;

    public int reqUserLogout(cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserLogoutField pUserLogout, int nRequestID) throws org.apache.thrift.TException;

    public int reqUserPasswordUpdate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserPasswordUpdateField pUserPasswordUpdate, int nRequestID) throws org.apache.thrift.TException;

    public int reqTradingAccountPasswordUpdate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcTradingAccountPasswordUpdateField pTradingAccountPasswordUpdate, int nRequestID) throws org.apache.thrift.TException;

    public int reqOrderInsert(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderField pInputOrder, int nRequestID) throws org.apache.thrift.TException;

    public int reqParkedOrderInsert(cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderField pParkedOrder, int nRequestID) throws org.apache.thrift.TException;

    public int reqParkedOrderAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderActionField pParkedOrderAction, int nRequestID) throws org.apache.thrift.TException;

    public int reqOrderAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderActionField pInputOrderAction, int nRequestID) throws org.apache.thrift.TException;

    public int reqQueryMaxOrderVolume(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryMaxOrderVolumeField pQueryMaxOrderVolume, int nRequestID) throws org.apache.thrift.TException;

    public int reqSettlementInfoConfirm(cn.kkworld.futuresservice.cmsTrade.CThostFtdcSettlementInfoConfirmField pSettlementInfoConfirm, int nRequestID) throws org.apache.thrift.TException;

    public int reqRemoveParkedOrder(cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderField pRemoveParkedOrder, int nRequestID) throws org.apache.thrift.TException;

    public int reqRemoveParkedOrderAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderActionField pRemoveParkedOrderAction, int nRequestID) throws org.apache.thrift.TException;

    public int reqExecOrderInsert(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderField pInputExecOrder, int nRequestID) throws org.apache.thrift.TException;

    public int reqExecOrderAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderActionField pInputExecOrderAction, int nRequestID) throws org.apache.thrift.TException;

    public int reqForQuoteInsert(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputForQuoteField pInputForQuote, int nRequestID) throws org.apache.thrift.TException;

    public int reqQuoteInsert(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteField pInputQuote, int nRequestID) throws org.apache.thrift.TException;

    public int reqQuoteAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteActionField pInputQuoteAction, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryOrder(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOrderField pQryOrder, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryTrade(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradeField pQryTrade, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryInvestorPosition(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionField pQryInvestorPosition, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryTradingAccount(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingAccountField pQryTradingAccount, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryInvestor(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorField pQryInvestor, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryTradingCode(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingCodeField pQryTradingCode, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryInstrumentMarginRate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentMarginRateField pQryInstrumentMarginRate, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryInstrumentCommissionRate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentCommissionRateField pQryInstrumentCommissionRate, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryExchange(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeField pQryExchange, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryProduct(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryProductField pQryProduct, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryInstrument(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentField pQryInstrument, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryDepthMarketData(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryDepthMarketDataField pQryDepthMarketData, int nRequestID) throws org.apache.thrift.TException;

    public int reqQrySettlementInfo(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoField pQrySettlementInfo, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryTransferBank(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferBankField pQryTransferBank, int nRequestID) throws org.apache.thrift.TException;

    public int reqQryInvestorPositionDetail(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionDetailField pQryInvestorPositionDetail, int nRequestID) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends cn.kkworld.futuresservice.cmsTrade.TraderPart2Service .AsyncIface {

    public void release(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void init(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void join(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTradingDay(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void registerFront(String pszFrontAddress, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void registerNameServer(String pszNsAddress, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void registerFensUserInfo(cn.kkworld.futuresservice.cmsTrade.CThostFtdcFensUserInfoField pFensUserInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqAuthenticate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqAuthenticateField pReqAuthenticateField, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqUserLogin(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqUserLoginField pReqUserLoginField, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqUserLogout(cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserLogoutField pUserLogout, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqUserPasswordUpdate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserPasswordUpdateField pUserPasswordUpdate, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqTradingAccountPasswordUpdate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcTradingAccountPasswordUpdateField pTradingAccountPasswordUpdate, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqOrderInsert(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderField pInputOrder, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqParkedOrderInsert(cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderField pParkedOrder, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqParkedOrderAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderActionField pParkedOrderAction, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqOrderAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderActionField pInputOrderAction, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQueryMaxOrderVolume(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryMaxOrderVolumeField pQueryMaxOrderVolume, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqSettlementInfoConfirm(cn.kkworld.futuresservice.cmsTrade.CThostFtdcSettlementInfoConfirmField pSettlementInfoConfirm, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqRemoveParkedOrder(cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderField pRemoveParkedOrder, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqRemoveParkedOrderAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderActionField pRemoveParkedOrderAction, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqExecOrderInsert(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderField pInputExecOrder, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqExecOrderAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderActionField pInputExecOrderAction, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqForQuoteInsert(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputForQuoteField pInputForQuote, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQuoteInsert(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteField pInputQuote, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQuoteAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteActionField pInputQuoteAction, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryOrder(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOrderField pQryOrder, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryTrade(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradeField pQryTrade, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryInvestorPosition(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionField pQryInvestorPosition, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryTradingAccount(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingAccountField pQryTradingAccount, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryInvestor(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorField pQryInvestor, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryTradingCode(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingCodeField pQryTradingCode, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryInstrumentMarginRate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentMarginRateField pQryInstrumentMarginRate, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryInstrumentCommissionRate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentCommissionRateField pQryInstrumentCommissionRate, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryExchange(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeField pQryExchange, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryProduct(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryProductField pQryProduct, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryInstrument(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentField pQryInstrument, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryDepthMarketData(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryDepthMarketDataField pQryDepthMarketData, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQrySettlementInfo(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoField pQrySettlementInfo, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryTransferBank(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferBankField pQryTransferBank, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqQryInvestorPositionDetail(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionDetailField pQryInvestorPositionDetail, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends cn.kkworld.futuresservice.cmsTrade.TraderPart2Service.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void release() throws org.apache.thrift.TException
    {
      send_release();
      recv_release();
    }

    public void send_release() throws org.apache.thrift.TException
    {
      release_args args = new release_args();
      sendBase("release", args);
    }

    public void recv_release() throws org.apache.thrift.TException
    {
      release_result result = new release_result();
      receiveBase(result, "release");
      return;
    }

    public void init() throws org.apache.thrift.TException
    {
      send_init();
      recv_init();
    }

    public void send_init() throws org.apache.thrift.TException
    {
      init_args args = new init_args();
      sendBase("init", args);
    }

    public void recv_init() throws org.apache.thrift.TException
    {
      init_result result = new init_result();
      receiveBase(result, "init");
      return;
    }

    public int join() throws org.apache.thrift.TException
    {
      send_join();
      return recv_join();
    }

    public void send_join() throws org.apache.thrift.TException
    {
      join_args args = new join_args();
      sendBase("join", args);
    }

    public int recv_join() throws org.apache.thrift.TException
    {
      join_result result = new join_result();
      receiveBase(result, "join");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "join failed: unknown result");
    }

    public String getTradingDay() throws org.apache.thrift.TException
    {
      send_getTradingDay();
      return recv_getTradingDay();
    }

    public void send_getTradingDay() throws org.apache.thrift.TException
    {
      getTradingDay_args args = new getTradingDay_args();
      sendBase("getTradingDay", args);
    }

    public String recv_getTradingDay() throws org.apache.thrift.TException
    {
      getTradingDay_result result = new getTradingDay_result();
      receiveBase(result, "getTradingDay");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTradingDay failed: unknown result");
    }

    public void registerFront(String pszFrontAddress) throws org.apache.thrift.TException
    {
      send_registerFront(pszFrontAddress);
      recv_registerFront();
    }

    public void send_registerFront(String pszFrontAddress) throws org.apache.thrift.TException
    {
      registerFront_args args = new registerFront_args();
      args.setPszFrontAddress(pszFrontAddress);
      sendBase("registerFront", args);
    }

    public void recv_registerFront() throws org.apache.thrift.TException
    {
      registerFront_result result = new registerFront_result();
      receiveBase(result, "registerFront");
      return;
    }

    public void registerNameServer(String pszNsAddress) throws org.apache.thrift.TException
    {
      send_registerNameServer(pszNsAddress);
      recv_registerNameServer();
    }

    public void send_registerNameServer(String pszNsAddress) throws org.apache.thrift.TException
    {
      registerNameServer_args args = new registerNameServer_args();
      args.setPszNsAddress(pszNsAddress);
      sendBase("registerNameServer", args);
    }

    public void recv_registerNameServer() throws org.apache.thrift.TException
    {
      registerNameServer_result result = new registerNameServer_result();
      receiveBase(result, "registerNameServer");
      return;
    }

    public void registerFensUserInfo(cn.kkworld.futuresservice.cmsTrade.CThostFtdcFensUserInfoField pFensUserInfo) throws org.apache.thrift.TException
    {
      send_registerFensUserInfo(pFensUserInfo);
      recv_registerFensUserInfo();
    }

    public void send_registerFensUserInfo(cn.kkworld.futuresservice.cmsTrade.CThostFtdcFensUserInfoField pFensUserInfo) throws org.apache.thrift.TException
    {
      registerFensUserInfo_args args = new registerFensUserInfo_args();
      args.setPFensUserInfo(pFensUserInfo);
      sendBase("registerFensUserInfo", args);
    }

    public void recv_registerFensUserInfo() throws org.apache.thrift.TException
    {
      registerFensUserInfo_result result = new registerFensUserInfo_result();
      receiveBase(result, "registerFensUserInfo");
      return;
    }

    public int reqAuthenticate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqAuthenticateField pReqAuthenticateField, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqAuthenticate(pReqAuthenticateField, nRequestID);
      return recv_reqAuthenticate();
    }

    public void send_reqAuthenticate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqAuthenticateField pReqAuthenticateField, int nRequestID) throws org.apache.thrift.TException
    {
      reqAuthenticate_args args = new reqAuthenticate_args();
      args.setPReqAuthenticateField(pReqAuthenticateField);
      args.setNRequestID(nRequestID);
      sendBase("reqAuthenticate", args);
    }

    public int recv_reqAuthenticate() throws org.apache.thrift.TException
    {
      reqAuthenticate_result result = new reqAuthenticate_result();
      receiveBase(result, "reqAuthenticate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqAuthenticate failed: unknown result");
    }

    public int reqUserLogin(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqUserLoginField pReqUserLoginField, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqUserLogin(pReqUserLoginField, nRequestID);
      return recv_reqUserLogin();
    }

    public void send_reqUserLogin(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqUserLoginField pReqUserLoginField, int nRequestID) throws org.apache.thrift.TException
    {
      reqUserLogin_args args = new reqUserLogin_args();
      args.setPReqUserLoginField(pReqUserLoginField);
      args.setNRequestID(nRequestID);
      sendBase("reqUserLogin", args);
    }

    public int recv_reqUserLogin() throws org.apache.thrift.TException
    {
      reqUserLogin_result result = new reqUserLogin_result();
      receiveBase(result, "reqUserLogin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqUserLogin failed: unknown result");
    }

    public int reqUserLogout(cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserLogoutField pUserLogout, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqUserLogout(pUserLogout, nRequestID);
      return recv_reqUserLogout();
    }

    public void send_reqUserLogout(cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserLogoutField pUserLogout, int nRequestID) throws org.apache.thrift.TException
    {
      reqUserLogout_args args = new reqUserLogout_args();
      args.setPUserLogout(pUserLogout);
      args.setNRequestID(nRequestID);
      sendBase("reqUserLogout", args);
    }

    public int recv_reqUserLogout() throws org.apache.thrift.TException
    {
      reqUserLogout_result result = new reqUserLogout_result();
      receiveBase(result, "reqUserLogout");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqUserLogout failed: unknown result");
    }

    public int reqUserPasswordUpdate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserPasswordUpdateField pUserPasswordUpdate, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqUserPasswordUpdate(pUserPasswordUpdate, nRequestID);
      return recv_reqUserPasswordUpdate();
    }

    public void send_reqUserPasswordUpdate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserPasswordUpdateField pUserPasswordUpdate, int nRequestID) throws org.apache.thrift.TException
    {
      reqUserPasswordUpdate_args args = new reqUserPasswordUpdate_args();
      args.setPUserPasswordUpdate(pUserPasswordUpdate);
      args.setNRequestID(nRequestID);
      sendBase("reqUserPasswordUpdate", args);
    }

    public int recv_reqUserPasswordUpdate() throws org.apache.thrift.TException
    {
      reqUserPasswordUpdate_result result = new reqUserPasswordUpdate_result();
      receiveBase(result, "reqUserPasswordUpdate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqUserPasswordUpdate failed: unknown result");
    }

    public int reqTradingAccountPasswordUpdate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcTradingAccountPasswordUpdateField pTradingAccountPasswordUpdate, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqTradingAccountPasswordUpdate(pTradingAccountPasswordUpdate, nRequestID);
      return recv_reqTradingAccountPasswordUpdate();
    }

    public void send_reqTradingAccountPasswordUpdate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcTradingAccountPasswordUpdateField pTradingAccountPasswordUpdate, int nRequestID) throws org.apache.thrift.TException
    {
      reqTradingAccountPasswordUpdate_args args = new reqTradingAccountPasswordUpdate_args();
      args.setPTradingAccountPasswordUpdate(pTradingAccountPasswordUpdate);
      args.setNRequestID(nRequestID);
      sendBase("reqTradingAccountPasswordUpdate", args);
    }

    public int recv_reqTradingAccountPasswordUpdate() throws org.apache.thrift.TException
    {
      reqTradingAccountPasswordUpdate_result result = new reqTradingAccountPasswordUpdate_result();
      receiveBase(result, "reqTradingAccountPasswordUpdate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqTradingAccountPasswordUpdate failed: unknown result");
    }

    public int reqOrderInsert(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderField pInputOrder, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqOrderInsert(pInputOrder, nRequestID);
      return recv_reqOrderInsert();
    }

    public void send_reqOrderInsert(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderField pInputOrder, int nRequestID) throws org.apache.thrift.TException
    {
      reqOrderInsert_args args = new reqOrderInsert_args();
      args.setPInputOrder(pInputOrder);
      args.setNRequestID(nRequestID);
      sendBase("reqOrderInsert", args);
    }

    public int recv_reqOrderInsert() throws org.apache.thrift.TException
    {
      reqOrderInsert_result result = new reqOrderInsert_result();
      receiveBase(result, "reqOrderInsert");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqOrderInsert failed: unknown result");
    }

    public int reqParkedOrderInsert(cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderField pParkedOrder, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqParkedOrderInsert(pParkedOrder, nRequestID);
      return recv_reqParkedOrderInsert();
    }

    public void send_reqParkedOrderInsert(cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderField pParkedOrder, int nRequestID) throws org.apache.thrift.TException
    {
      reqParkedOrderInsert_args args = new reqParkedOrderInsert_args();
      args.setPParkedOrder(pParkedOrder);
      args.setNRequestID(nRequestID);
      sendBase("reqParkedOrderInsert", args);
    }

    public int recv_reqParkedOrderInsert() throws org.apache.thrift.TException
    {
      reqParkedOrderInsert_result result = new reqParkedOrderInsert_result();
      receiveBase(result, "reqParkedOrderInsert");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqParkedOrderInsert failed: unknown result");
    }

    public int reqParkedOrderAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderActionField pParkedOrderAction, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqParkedOrderAction(pParkedOrderAction, nRequestID);
      return recv_reqParkedOrderAction();
    }

    public void send_reqParkedOrderAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderActionField pParkedOrderAction, int nRequestID) throws org.apache.thrift.TException
    {
      reqParkedOrderAction_args args = new reqParkedOrderAction_args();
      args.setPParkedOrderAction(pParkedOrderAction);
      args.setNRequestID(nRequestID);
      sendBase("reqParkedOrderAction", args);
    }

    public int recv_reqParkedOrderAction() throws org.apache.thrift.TException
    {
      reqParkedOrderAction_result result = new reqParkedOrderAction_result();
      receiveBase(result, "reqParkedOrderAction");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqParkedOrderAction failed: unknown result");
    }

    public int reqOrderAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderActionField pInputOrderAction, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqOrderAction(pInputOrderAction, nRequestID);
      return recv_reqOrderAction();
    }

    public void send_reqOrderAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderActionField pInputOrderAction, int nRequestID) throws org.apache.thrift.TException
    {
      reqOrderAction_args args = new reqOrderAction_args();
      args.setPInputOrderAction(pInputOrderAction);
      args.setNRequestID(nRequestID);
      sendBase("reqOrderAction", args);
    }

    public int recv_reqOrderAction() throws org.apache.thrift.TException
    {
      reqOrderAction_result result = new reqOrderAction_result();
      receiveBase(result, "reqOrderAction");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqOrderAction failed: unknown result");
    }

    public int reqQueryMaxOrderVolume(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryMaxOrderVolumeField pQueryMaxOrderVolume, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQueryMaxOrderVolume(pQueryMaxOrderVolume, nRequestID);
      return recv_reqQueryMaxOrderVolume();
    }

    public void send_reqQueryMaxOrderVolume(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryMaxOrderVolumeField pQueryMaxOrderVolume, int nRequestID) throws org.apache.thrift.TException
    {
      reqQueryMaxOrderVolume_args args = new reqQueryMaxOrderVolume_args();
      args.setPQueryMaxOrderVolume(pQueryMaxOrderVolume);
      args.setNRequestID(nRequestID);
      sendBase("reqQueryMaxOrderVolume", args);
    }

    public int recv_reqQueryMaxOrderVolume() throws org.apache.thrift.TException
    {
      reqQueryMaxOrderVolume_result result = new reqQueryMaxOrderVolume_result();
      receiveBase(result, "reqQueryMaxOrderVolume");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQueryMaxOrderVolume failed: unknown result");
    }

    public int reqSettlementInfoConfirm(cn.kkworld.futuresservice.cmsTrade.CThostFtdcSettlementInfoConfirmField pSettlementInfoConfirm, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqSettlementInfoConfirm(pSettlementInfoConfirm, nRequestID);
      return recv_reqSettlementInfoConfirm();
    }

    public void send_reqSettlementInfoConfirm(cn.kkworld.futuresservice.cmsTrade.CThostFtdcSettlementInfoConfirmField pSettlementInfoConfirm, int nRequestID) throws org.apache.thrift.TException
    {
      reqSettlementInfoConfirm_args args = new reqSettlementInfoConfirm_args();
      args.setPSettlementInfoConfirm(pSettlementInfoConfirm);
      args.setNRequestID(nRequestID);
      sendBase("reqSettlementInfoConfirm", args);
    }

    public int recv_reqSettlementInfoConfirm() throws org.apache.thrift.TException
    {
      reqSettlementInfoConfirm_result result = new reqSettlementInfoConfirm_result();
      receiveBase(result, "reqSettlementInfoConfirm");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqSettlementInfoConfirm failed: unknown result");
    }

    public int reqRemoveParkedOrder(cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderField pRemoveParkedOrder, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqRemoveParkedOrder(pRemoveParkedOrder, nRequestID);
      return recv_reqRemoveParkedOrder();
    }

    public void send_reqRemoveParkedOrder(cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderField pRemoveParkedOrder, int nRequestID) throws org.apache.thrift.TException
    {
      reqRemoveParkedOrder_args args = new reqRemoveParkedOrder_args();
      args.setPRemoveParkedOrder(pRemoveParkedOrder);
      args.setNRequestID(nRequestID);
      sendBase("reqRemoveParkedOrder", args);
    }

    public int recv_reqRemoveParkedOrder() throws org.apache.thrift.TException
    {
      reqRemoveParkedOrder_result result = new reqRemoveParkedOrder_result();
      receiveBase(result, "reqRemoveParkedOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqRemoveParkedOrder failed: unknown result");
    }

    public int reqRemoveParkedOrderAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderActionField pRemoveParkedOrderAction, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqRemoveParkedOrderAction(pRemoveParkedOrderAction, nRequestID);
      return recv_reqRemoveParkedOrderAction();
    }

    public void send_reqRemoveParkedOrderAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderActionField pRemoveParkedOrderAction, int nRequestID) throws org.apache.thrift.TException
    {
      reqRemoveParkedOrderAction_args args = new reqRemoveParkedOrderAction_args();
      args.setPRemoveParkedOrderAction(pRemoveParkedOrderAction);
      args.setNRequestID(nRequestID);
      sendBase("reqRemoveParkedOrderAction", args);
    }

    public int recv_reqRemoveParkedOrderAction() throws org.apache.thrift.TException
    {
      reqRemoveParkedOrderAction_result result = new reqRemoveParkedOrderAction_result();
      receiveBase(result, "reqRemoveParkedOrderAction");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqRemoveParkedOrderAction failed: unknown result");
    }

    public int reqExecOrderInsert(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderField pInputExecOrder, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqExecOrderInsert(pInputExecOrder, nRequestID);
      return recv_reqExecOrderInsert();
    }

    public void send_reqExecOrderInsert(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderField pInputExecOrder, int nRequestID) throws org.apache.thrift.TException
    {
      reqExecOrderInsert_args args = new reqExecOrderInsert_args();
      args.setPInputExecOrder(pInputExecOrder);
      args.setNRequestID(nRequestID);
      sendBase("reqExecOrderInsert", args);
    }

    public int recv_reqExecOrderInsert() throws org.apache.thrift.TException
    {
      reqExecOrderInsert_result result = new reqExecOrderInsert_result();
      receiveBase(result, "reqExecOrderInsert");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqExecOrderInsert failed: unknown result");
    }

    public int reqExecOrderAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderActionField pInputExecOrderAction, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqExecOrderAction(pInputExecOrderAction, nRequestID);
      return recv_reqExecOrderAction();
    }

    public void send_reqExecOrderAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderActionField pInputExecOrderAction, int nRequestID) throws org.apache.thrift.TException
    {
      reqExecOrderAction_args args = new reqExecOrderAction_args();
      args.setPInputExecOrderAction(pInputExecOrderAction);
      args.setNRequestID(nRequestID);
      sendBase("reqExecOrderAction", args);
    }

    public int recv_reqExecOrderAction() throws org.apache.thrift.TException
    {
      reqExecOrderAction_result result = new reqExecOrderAction_result();
      receiveBase(result, "reqExecOrderAction");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqExecOrderAction failed: unknown result");
    }

    public int reqForQuoteInsert(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputForQuoteField pInputForQuote, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqForQuoteInsert(pInputForQuote, nRequestID);
      return recv_reqForQuoteInsert();
    }

    public void send_reqForQuoteInsert(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputForQuoteField pInputForQuote, int nRequestID) throws org.apache.thrift.TException
    {
      reqForQuoteInsert_args args = new reqForQuoteInsert_args();
      args.setPInputForQuote(pInputForQuote);
      args.setNRequestID(nRequestID);
      sendBase("reqForQuoteInsert", args);
    }

    public int recv_reqForQuoteInsert() throws org.apache.thrift.TException
    {
      reqForQuoteInsert_result result = new reqForQuoteInsert_result();
      receiveBase(result, "reqForQuoteInsert");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqForQuoteInsert failed: unknown result");
    }

    public int reqQuoteInsert(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteField pInputQuote, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQuoteInsert(pInputQuote, nRequestID);
      return recv_reqQuoteInsert();
    }

    public void send_reqQuoteInsert(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteField pInputQuote, int nRequestID) throws org.apache.thrift.TException
    {
      reqQuoteInsert_args args = new reqQuoteInsert_args();
      args.setPInputQuote(pInputQuote);
      args.setNRequestID(nRequestID);
      sendBase("reqQuoteInsert", args);
    }

    public int recv_reqQuoteInsert() throws org.apache.thrift.TException
    {
      reqQuoteInsert_result result = new reqQuoteInsert_result();
      receiveBase(result, "reqQuoteInsert");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQuoteInsert failed: unknown result");
    }

    public int reqQuoteAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteActionField pInputQuoteAction, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQuoteAction(pInputQuoteAction, nRequestID);
      return recv_reqQuoteAction();
    }

    public void send_reqQuoteAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteActionField pInputQuoteAction, int nRequestID) throws org.apache.thrift.TException
    {
      reqQuoteAction_args args = new reqQuoteAction_args();
      args.setPInputQuoteAction(pInputQuoteAction);
      args.setNRequestID(nRequestID);
      sendBase("reqQuoteAction", args);
    }

    public int recv_reqQuoteAction() throws org.apache.thrift.TException
    {
      reqQuoteAction_result result = new reqQuoteAction_result();
      receiveBase(result, "reqQuoteAction");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQuoteAction failed: unknown result");
    }

    public int reqQryOrder(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOrderField pQryOrder, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryOrder(pQryOrder, nRequestID);
      return recv_reqQryOrder();
    }

    public void send_reqQryOrder(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOrderField pQryOrder, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryOrder_args args = new reqQryOrder_args();
      args.setPQryOrder(pQryOrder);
      args.setNRequestID(nRequestID);
      sendBase("reqQryOrder", args);
    }

    public int recv_reqQryOrder() throws org.apache.thrift.TException
    {
      reqQryOrder_result result = new reqQryOrder_result();
      receiveBase(result, "reqQryOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryOrder failed: unknown result");
    }

    public int reqQryTrade(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradeField pQryTrade, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryTrade(pQryTrade, nRequestID);
      return recv_reqQryTrade();
    }

    public void send_reqQryTrade(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradeField pQryTrade, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryTrade_args args = new reqQryTrade_args();
      args.setPQryTrade(pQryTrade);
      args.setNRequestID(nRequestID);
      sendBase("reqQryTrade", args);
    }

    public int recv_reqQryTrade() throws org.apache.thrift.TException
    {
      reqQryTrade_result result = new reqQryTrade_result();
      receiveBase(result, "reqQryTrade");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryTrade failed: unknown result");
    }

    public int reqQryInvestorPosition(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionField pQryInvestorPosition, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryInvestorPosition(pQryInvestorPosition, nRequestID);
      return recv_reqQryInvestorPosition();
    }

    public void send_reqQryInvestorPosition(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionField pQryInvestorPosition, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryInvestorPosition_args args = new reqQryInvestorPosition_args();
      args.setPQryInvestorPosition(pQryInvestorPosition);
      args.setNRequestID(nRequestID);
      sendBase("reqQryInvestorPosition", args);
    }

    public int recv_reqQryInvestorPosition() throws org.apache.thrift.TException
    {
      reqQryInvestorPosition_result result = new reqQryInvestorPosition_result();
      receiveBase(result, "reqQryInvestorPosition");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryInvestorPosition failed: unknown result");
    }

    public int reqQryTradingAccount(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingAccountField pQryTradingAccount, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryTradingAccount(pQryTradingAccount, nRequestID);
      return recv_reqQryTradingAccount();
    }

    public void send_reqQryTradingAccount(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingAccountField pQryTradingAccount, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryTradingAccount_args args = new reqQryTradingAccount_args();
      args.setPQryTradingAccount(pQryTradingAccount);
      args.setNRequestID(nRequestID);
      sendBase("reqQryTradingAccount", args);
    }

    public int recv_reqQryTradingAccount() throws org.apache.thrift.TException
    {
      reqQryTradingAccount_result result = new reqQryTradingAccount_result();
      receiveBase(result, "reqQryTradingAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryTradingAccount failed: unknown result");
    }

    public int reqQryInvestor(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorField pQryInvestor, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryInvestor(pQryInvestor, nRequestID);
      return recv_reqQryInvestor();
    }

    public void send_reqQryInvestor(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorField pQryInvestor, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryInvestor_args args = new reqQryInvestor_args();
      args.setPQryInvestor(pQryInvestor);
      args.setNRequestID(nRequestID);
      sendBase("reqQryInvestor", args);
    }

    public int recv_reqQryInvestor() throws org.apache.thrift.TException
    {
      reqQryInvestor_result result = new reqQryInvestor_result();
      receiveBase(result, "reqQryInvestor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryInvestor failed: unknown result");
    }

    public int reqQryTradingCode(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingCodeField pQryTradingCode, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryTradingCode(pQryTradingCode, nRequestID);
      return recv_reqQryTradingCode();
    }

    public void send_reqQryTradingCode(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingCodeField pQryTradingCode, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryTradingCode_args args = new reqQryTradingCode_args();
      args.setPQryTradingCode(pQryTradingCode);
      args.setNRequestID(nRequestID);
      sendBase("reqQryTradingCode", args);
    }

    public int recv_reqQryTradingCode() throws org.apache.thrift.TException
    {
      reqQryTradingCode_result result = new reqQryTradingCode_result();
      receiveBase(result, "reqQryTradingCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryTradingCode failed: unknown result");
    }

    public int reqQryInstrumentMarginRate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentMarginRateField pQryInstrumentMarginRate, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryInstrumentMarginRate(pQryInstrumentMarginRate, nRequestID);
      return recv_reqQryInstrumentMarginRate();
    }

    public void send_reqQryInstrumentMarginRate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentMarginRateField pQryInstrumentMarginRate, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryInstrumentMarginRate_args args = new reqQryInstrumentMarginRate_args();
      args.setPQryInstrumentMarginRate(pQryInstrumentMarginRate);
      args.setNRequestID(nRequestID);
      sendBase("reqQryInstrumentMarginRate", args);
    }

    public int recv_reqQryInstrumentMarginRate() throws org.apache.thrift.TException
    {
      reqQryInstrumentMarginRate_result result = new reqQryInstrumentMarginRate_result();
      receiveBase(result, "reqQryInstrumentMarginRate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryInstrumentMarginRate failed: unknown result");
    }

    public int reqQryInstrumentCommissionRate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentCommissionRateField pQryInstrumentCommissionRate, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryInstrumentCommissionRate(pQryInstrumentCommissionRate, nRequestID);
      return recv_reqQryInstrumentCommissionRate();
    }

    public void send_reqQryInstrumentCommissionRate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentCommissionRateField pQryInstrumentCommissionRate, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryInstrumentCommissionRate_args args = new reqQryInstrumentCommissionRate_args();
      args.setPQryInstrumentCommissionRate(pQryInstrumentCommissionRate);
      args.setNRequestID(nRequestID);
      sendBase("reqQryInstrumentCommissionRate", args);
    }

    public int recv_reqQryInstrumentCommissionRate() throws org.apache.thrift.TException
    {
      reqQryInstrumentCommissionRate_result result = new reqQryInstrumentCommissionRate_result();
      receiveBase(result, "reqQryInstrumentCommissionRate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryInstrumentCommissionRate failed: unknown result");
    }

    public int reqQryExchange(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeField pQryExchange, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryExchange(pQryExchange, nRequestID);
      return recv_reqQryExchange();
    }

    public void send_reqQryExchange(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeField pQryExchange, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryExchange_args args = new reqQryExchange_args();
      args.setPQryExchange(pQryExchange);
      args.setNRequestID(nRequestID);
      sendBase("reqQryExchange", args);
    }

    public int recv_reqQryExchange() throws org.apache.thrift.TException
    {
      reqQryExchange_result result = new reqQryExchange_result();
      receiveBase(result, "reqQryExchange");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryExchange failed: unknown result");
    }

    public int reqQryProduct(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryProductField pQryProduct, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryProduct(pQryProduct, nRequestID);
      return recv_reqQryProduct();
    }

    public void send_reqQryProduct(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryProductField pQryProduct, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryProduct_args args = new reqQryProduct_args();
      args.setPQryProduct(pQryProduct);
      args.setNRequestID(nRequestID);
      sendBase("reqQryProduct", args);
    }

    public int recv_reqQryProduct() throws org.apache.thrift.TException
    {
      reqQryProduct_result result = new reqQryProduct_result();
      receiveBase(result, "reqQryProduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryProduct failed: unknown result");
    }

    public int reqQryInstrument(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentField pQryInstrument, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryInstrument(pQryInstrument, nRequestID);
      return recv_reqQryInstrument();
    }

    public void send_reqQryInstrument(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentField pQryInstrument, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryInstrument_args args = new reqQryInstrument_args();
      args.setPQryInstrument(pQryInstrument);
      args.setNRequestID(nRequestID);
      sendBase("reqQryInstrument", args);
    }

    public int recv_reqQryInstrument() throws org.apache.thrift.TException
    {
      reqQryInstrument_result result = new reqQryInstrument_result();
      receiveBase(result, "reqQryInstrument");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryInstrument failed: unknown result");
    }

    public int reqQryDepthMarketData(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryDepthMarketDataField pQryDepthMarketData, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryDepthMarketData(pQryDepthMarketData, nRequestID);
      return recv_reqQryDepthMarketData();
    }

    public void send_reqQryDepthMarketData(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryDepthMarketDataField pQryDepthMarketData, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryDepthMarketData_args args = new reqQryDepthMarketData_args();
      args.setPQryDepthMarketData(pQryDepthMarketData);
      args.setNRequestID(nRequestID);
      sendBase("reqQryDepthMarketData", args);
    }

    public int recv_reqQryDepthMarketData() throws org.apache.thrift.TException
    {
      reqQryDepthMarketData_result result = new reqQryDepthMarketData_result();
      receiveBase(result, "reqQryDepthMarketData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryDepthMarketData failed: unknown result");
    }

    public int reqQrySettlementInfo(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoField pQrySettlementInfo, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQrySettlementInfo(pQrySettlementInfo, nRequestID);
      return recv_reqQrySettlementInfo();
    }

    public void send_reqQrySettlementInfo(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoField pQrySettlementInfo, int nRequestID) throws org.apache.thrift.TException
    {
      reqQrySettlementInfo_args args = new reqQrySettlementInfo_args();
      args.setPQrySettlementInfo(pQrySettlementInfo);
      args.setNRequestID(nRequestID);
      sendBase("reqQrySettlementInfo", args);
    }

    public int recv_reqQrySettlementInfo() throws org.apache.thrift.TException
    {
      reqQrySettlementInfo_result result = new reqQrySettlementInfo_result();
      receiveBase(result, "reqQrySettlementInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQrySettlementInfo failed: unknown result");
    }

    public int reqQryTransferBank(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferBankField pQryTransferBank, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryTransferBank(pQryTransferBank, nRequestID);
      return recv_reqQryTransferBank();
    }

    public void send_reqQryTransferBank(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferBankField pQryTransferBank, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryTransferBank_args args = new reqQryTransferBank_args();
      args.setPQryTransferBank(pQryTransferBank);
      args.setNRequestID(nRequestID);
      sendBase("reqQryTransferBank", args);
    }

    public int recv_reqQryTransferBank() throws org.apache.thrift.TException
    {
      reqQryTransferBank_result result = new reqQryTransferBank_result();
      receiveBase(result, "reqQryTransferBank");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryTransferBank failed: unknown result");
    }

    public int reqQryInvestorPositionDetail(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionDetailField pQryInvestorPositionDetail, int nRequestID) throws org.apache.thrift.TException
    {
      send_reqQryInvestorPositionDetail(pQryInvestorPositionDetail, nRequestID);
      return recv_reqQryInvestorPositionDetail();
    }

    public void send_reqQryInvestorPositionDetail(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionDetailField pQryInvestorPositionDetail, int nRequestID) throws org.apache.thrift.TException
    {
      reqQryInvestorPositionDetail_args args = new reqQryInvestorPositionDetail_args();
      args.setPQryInvestorPositionDetail(pQryInvestorPositionDetail);
      args.setNRequestID(nRequestID);
      sendBase("reqQryInvestorPositionDetail", args);
    }

    public int recv_reqQryInvestorPositionDetail() throws org.apache.thrift.TException
    {
      reqQryInvestorPositionDetail_result result = new reqQryInvestorPositionDetail_result();
      receiveBase(result, "reqQryInvestorPositionDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqQryInvestorPositionDetail failed: unknown result");
    }

  }
  public static class AsyncClient extends cn.kkworld.futuresservice.cmsTrade.TraderPart2Service.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void release(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      release_call method_call = new release_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class release_call extends org.apache.thrift.async.TAsyncMethodCall {
      public release_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("release", org.apache.thrift.protocol.TMessageType.CALL, 0));
        release_args args = new release_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_release();
      }
    }

    public void init(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      init_call method_call = new init_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class init_call extends org.apache.thrift.async.TAsyncMethodCall {
      public init_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("init", org.apache.thrift.protocol.TMessageType.CALL, 0));
        init_args args = new init_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_init();
      }
    }

    public void join(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      join_call method_call = new join_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class join_call extends org.apache.thrift.async.TAsyncMethodCall {
      public join_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("join", org.apache.thrift.protocol.TMessageType.CALL, 0));
        join_args args = new join_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_join();
      }
    }

    public void getTradingDay(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTradingDay_call method_call = new getTradingDay_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTradingDay_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getTradingDay_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTradingDay", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTradingDay_args args = new getTradingDay_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTradingDay();
      }
    }

    public void registerFront(String pszFrontAddress, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerFront_call method_call = new registerFront_call(pszFrontAddress, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerFront_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String pszFrontAddress;
      public registerFront_call(String pszFrontAddress, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pszFrontAddress = pszFrontAddress;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerFront", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerFront_args args = new registerFront_args();
        args.setPszFrontAddress(pszFrontAddress);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_registerFront();
      }
    }

    public void registerNameServer(String pszNsAddress, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerNameServer_call method_call = new registerNameServer_call(pszNsAddress, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerNameServer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String pszNsAddress;
      public registerNameServer_call(String pszNsAddress, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pszNsAddress = pszNsAddress;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerNameServer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerNameServer_args args = new registerNameServer_args();
        args.setPszNsAddress(pszNsAddress);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_registerNameServer();
      }
    }

    public void registerFensUserInfo(cn.kkworld.futuresservice.cmsTrade.CThostFtdcFensUserInfoField pFensUserInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerFensUserInfo_call method_call = new registerFensUserInfo_call(pFensUserInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerFensUserInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcFensUserInfoField pFensUserInfo;
      public registerFensUserInfo_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcFensUserInfoField pFensUserInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pFensUserInfo = pFensUserInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerFensUserInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerFensUserInfo_args args = new registerFensUserInfo_args();
        args.setPFensUserInfo(pFensUserInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_registerFensUserInfo();
      }
    }

    public void reqAuthenticate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqAuthenticateField pReqAuthenticateField, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqAuthenticate_call method_call = new reqAuthenticate_call(pReqAuthenticateField, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqAuthenticate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqAuthenticateField pReqAuthenticateField;
      private int nRequestID;
      public reqAuthenticate_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqAuthenticateField pReqAuthenticateField, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pReqAuthenticateField = pReqAuthenticateField;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqAuthenticate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqAuthenticate_args args = new reqAuthenticate_args();
        args.setPReqAuthenticateField(pReqAuthenticateField);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqAuthenticate();
      }
    }

    public void reqUserLogin(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqUserLoginField pReqUserLoginField, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqUserLogin_call method_call = new reqUserLogin_call(pReqUserLoginField, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqUserLogin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqUserLoginField pReqUserLoginField;
      private int nRequestID;
      public reqUserLogin_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqUserLoginField pReqUserLoginField, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pReqUserLoginField = pReqUserLoginField;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqUserLogin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqUserLogin_args args = new reqUserLogin_args();
        args.setPReqUserLoginField(pReqUserLoginField);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqUserLogin();
      }
    }

    public void reqUserLogout(cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserLogoutField pUserLogout, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqUserLogout_call method_call = new reqUserLogout_call(pUserLogout, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqUserLogout_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserLogoutField pUserLogout;
      private int nRequestID;
      public reqUserLogout_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserLogoutField pUserLogout, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pUserLogout = pUserLogout;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqUserLogout", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqUserLogout_args args = new reqUserLogout_args();
        args.setPUserLogout(pUserLogout);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqUserLogout();
      }
    }

    public void reqUserPasswordUpdate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserPasswordUpdateField pUserPasswordUpdate, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqUserPasswordUpdate_call method_call = new reqUserPasswordUpdate_call(pUserPasswordUpdate, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqUserPasswordUpdate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserPasswordUpdateField pUserPasswordUpdate;
      private int nRequestID;
      public reqUserPasswordUpdate_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserPasswordUpdateField pUserPasswordUpdate, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pUserPasswordUpdate = pUserPasswordUpdate;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqUserPasswordUpdate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqUserPasswordUpdate_args args = new reqUserPasswordUpdate_args();
        args.setPUserPasswordUpdate(pUserPasswordUpdate);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqUserPasswordUpdate();
      }
    }

    public void reqTradingAccountPasswordUpdate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcTradingAccountPasswordUpdateField pTradingAccountPasswordUpdate, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqTradingAccountPasswordUpdate_call method_call = new reqTradingAccountPasswordUpdate_call(pTradingAccountPasswordUpdate, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqTradingAccountPasswordUpdate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcTradingAccountPasswordUpdateField pTradingAccountPasswordUpdate;
      private int nRequestID;
      public reqTradingAccountPasswordUpdate_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcTradingAccountPasswordUpdateField pTradingAccountPasswordUpdate, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pTradingAccountPasswordUpdate = pTradingAccountPasswordUpdate;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqTradingAccountPasswordUpdate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqTradingAccountPasswordUpdate_args args = new reqTradingAccountPasswordUpdate_args();
        args.setPTradingAccountPasswordUpdate(pTradingAccountPasswordUpdate);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqTradingAccountPasswordUpdate();
      }
    }

    public void reqOrderInsert(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderField pInputOrder, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqOrderInsert_call method_call = new reqOrderInsert_call(pInputOrder, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqOrderInsert_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderField pInputOrder;
      private int nRequestID;
      public reqOrderInsert_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderField pInputOrder, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pInputOrder = pInputOrder;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqOrderInsert", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqOrderInsert_args args = new reqOrderInsert_args();
        args.setPInputOrder(pInputOrder);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqOrderInsert();
      }
    }

    public void reqParkedOrderInsert(cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderField pParkedOrder, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqParkedOrderInsert_call method_call = new reqParkedOrderInsert_call(pParkedOrder, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqParkedOrderInsert_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderField pParkedOrder;
      private int nRequestID;
      public reqParkedOrderInsert_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderField pParkedOrder, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pParkedOrder = pParkedOrder;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqParkedOrderInsert", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqParkedOrderInsert_args args = new reqParkedOrderInsert_args();
        args.setPParkedOrder(pParkedOrder);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqParkedOrderInsert();
      }
    }

    public void reqParkedOrderAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderActionField pParkedOrderAction, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqParkedOrderAction_call method_call = new reqParkedOrderAction_call(pParkedOrderAction, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqParkedOrderAction_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderActionField pParkedOrderAction;
      private int nRequestID;
      public reqParkedOrderAction_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderActionField pParkedOrderAction, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pParkedOrderAction = pParkedOrderAction;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqParkedOrderAction", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqParkedOrderAction_args args = new reqParkedOrderAction_args();
        args.setPParkedOrderAction(pParkedOrderAction);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqParkedOrderAction();
      }
    }

    public void reqOrderAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderActionField pInputOrderAction, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqOrderAction_call method_call = new reqOrderAction_call(pInputOrderAction, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqOrderAction_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderActionField pInputOrderAction;
      private int nRequestID;
      public reqOrderAction_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderActionField pInputOrderAction, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pInputOrderAction = pInputOrderAction;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqOrderAction", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqOrderAction_args args = new reqOrderAction_args();
        args.setPInputOrderAction(pInputOrderAction);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqOrderAction();
      }
    }

    public void reqQueryMaxOrderVolume(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryMaxOrderVolumeField pQueryMaxOrderVolume, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQueryMaxOrderVolume_call method_call = new reqQueryMaxOrderVolume_call(pQueryMaxOrderVolume, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQueryMaxOrderVolume_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryMaxOrderVolumeField pQueryMaxOrderVolume;
      private int nRequestID;
      public reqQueryMaxOrderVolume_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryMaxOrderVolumeField pQueryMaxOrderVolume, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQueryMaxOrderVolume = pQueryMaxOrderVolume;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQueryMaxOrderVolume", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQueryMaxOrderVolume_args args = new reqQueryMaxOrderVolume_args();
        args.setPQueryMaxOrderVolume(pQueryMaxOrderVolume);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQueryMaxOrderVolume();
      }
    }

    public void reqSettlementInfoConfirm(cn.kkworld.futuresservice.cmsTrade.CThostFtdcSettlementInfoConfirmField pSettlementInfoConfirm, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqSettlementInfoConfirm_call method_call = new reqSettlementInfoConfirm_call(pSettlementInfoConfirm, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqSettlementInfoConfirm_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcSettlementInfoConfirmField pSettlementInfoConfirm;
      private int nRequestID;
      public reqSettlementInfoConfirm_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcSettlementInfoConfirmField pSettlementInfoConfirm, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pSettlementInfoConfirm = pSettlementInfoConfirm;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqSettlementInfoConfirm", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqSettlementInfoConfirm_args args = new reqSettlementInfoConfirm_args();
        args.setPSettlementInfoConfirm(pSettlementInfoConfirm);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqSettlementInfoConfirm();
      }
    }

    public void reqRemoveParkedOrder(cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderField pRemoveParkedOrder, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqRemoveParkedOrder_call method_call = new reqRemoveParkedOrder_call(pRemoveParkedOrder, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqRemoveParkedOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderField pRemoveParkedOrder;
      private int nRequestID;
      public reqRemoveParkedOrder_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderField pRemoveParkedOrder, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pRemoveParkedOrder = pRemoveParkedOrder;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqRemoveParkedOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqRemoveParkedOrder_args args = new reqRemoveParkedOrder_args();
        args.setPRemoveParkedOrder(pRemoveParkedOrder);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqRemoveParkedOrder();
      }
    }

    public void reqRemoveParkedOrderAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderActionField pRemoveParkedOrderAction, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqRemoveParkedOrderAction_call method_call = new reqRemoveParkedOrderAction_call(pRemoveParkedOrderAction, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqRemoveParkedOrderAction_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderActionField pRemoveParkedOrderAction;
      private int nRequestID;
      public reqRemoveParkedOrderAction_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderActionField pRemoveParkedOrderAction, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pRemoveParkedOrderAction = pRemoveParkedOrderAction;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqRemoveParkedOrderAction", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqRemoveParkedOrderAction_args args = new reqRemoveParkedOrderAction_args();
        args.setPRemoveParkedOrderAction(pRemoveParkedOrderAction);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqRemoveParkedOrderAction();
      }
    }

    public void reqExecOrderInsert(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderField pInputExecOrder, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqExecOrderInsert_call method_call = new reqExecOrderInsert_call(pInputExecOrder, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqExecOrderInsert_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderField pInputExecOrder;
      private int nRequestID;
      public reqExecOrderInsert_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderField pInputExecOrder, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pInputExecOrder = pInputExecOrder;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqExecOrderInsert", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqExecOrderInsert_args args = new reqExecOrderInsert_args();
        args.setPInputExecOrder(pInputExecOrder);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqExecOrderInsert();
      }
    }

    public void reqExecOrderAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderActionField pInputExecOrderAction, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqExecOrderAction_call method_call = new reqExecOrderAction_call(pInputExecOrderAction, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqExecOrderAction_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderActionField pInputExecOrderAction;
      private int nRequestID;
      public reqExecOrderAction_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderActionField pInputExecOrderAction, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pInputExecOrderAction = pInputExecOrderAction;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqExecOrderAction", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqExecOrderAction_args args = new reqExecOrderAction_args();
        args.setPInputExecOrderAction(pInputExecOrderAction);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqExecOrderAction();
      }
    }

    public void reqForQuoteInsert(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputForQuoteField pInputForQuote, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqForQuoteInsert_call method_call = new reqForQuoteInsert_call(pInputForQuote, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqForQuoteInsert_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputForQuoteField pInputForQuote;
      private int nRequestID;
      public reqForQuoteInsert_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputForQuoteField pInputForQuote, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pInputForQuote = pInputForQuote;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqForQuoteInsert", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqForQuoteInsert_args args = new reqForQuoteInsert_args();
        args.setPInputForQuote(pInputForQuote);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqForQuoteInsert();
      }
    }

    public void reqQuoteInsert(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteField pInputQuote, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQuoteInsert_call method_call = new reqQuoteInsert_call(pInputQuote, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQuoteInsert_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteField pInputQuote;
      private int nRequestID;
      public reqQuoteInsert_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteField pInputQuote, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pInputQuote = pInputQuote;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQuoteInsert", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQuoteInsert_args args = new reqQuoteInsert_args();
        args.setPInputQuote(pInputQuote);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQuoteInsert();
      }
    }

    public void reqQuoteAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteActionField pInputQuoteAction, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQuoteAction_call method_call = new reqQuoteAction_call(pInputQuoteAction, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQuoteAction_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteActionField pInputQuoteAction;
      private int nRequestID;
      public reqQuoteAction_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteActionField pInputQuoteAction, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pInputQuoteAction = pInputQuoteAction;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQuoteAction", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQuoteAction_args args = new reqQuoteAction_args();
        args.setPInputQuoteAction(pInputQuoteAction);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQuoteAction();
      }
    }

    public void reqQryOrder(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOrderField pQryOrder, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryOrder_call method_call = new reqQryOrder_call(pQryOrder, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOrderField pQryOrder;
      private int nRequestID;
      public reqQryOrder_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOrderField pQryOrder, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryOrder = pQryOrder;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryOrder_args args = new reqQryOrder_args();
        args.setPQryOrder(pQryOrder);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryOrder();
      }
    }

    public void reqQryTrade(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradeField pQryTrade, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryTrade_call method_call = new reqQryTrade_call(pQryTrade, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryTrade_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradeField pQryTrade;
      private int nRequestID;
      public reqQryTrade_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradeField pQryTrade, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryTrade = pQryTrade;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryTrade", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryTrade_args args = new reqQryTrade_args();
        args.setPQryTrade(pQryTrade);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryTrade();
      }
    }

    public void reqQryInvestorPosition(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionField pQryInvestorPosition, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryInvestorPosition_call method_call = new reqQryInvestorPosition_call(pQryInvestorPosition, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryInvestorPosition_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionField pQryInvestorPosition;
      private int nRequestID;
      public reqQryInvestorPosition_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionField pQryInvestorPosition, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryInvestorPosition = pQryInvestorPosition;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryInvestorPosition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryInvestorPosition_args args = new reqQryInvestorPosition_args();
        args.setPQryInvestorPosition(pQryInvestorPosition);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryInvestorPosition();
      }
    }

    public void reqQryTradingAccount(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingAccountField pQryTradingAccount, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryTradingAccount_call method_call = new reqQryTradingAccount_call(pQryTradingAccount, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryTradingAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingAccountField pQryTradingAccount;
      private int nRequestID;
      public reqQryTradingAccount_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingAccountField pQryTradingAccount, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryTradingAccount = pQryTradingAccount;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryTradingAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryTradingAccount_args args = new reqQryTradingAccount_args();
        args.setPQryTradingAccount(pQryTradingAccount);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryTradingAccount();
      }
    }

    public void reqQryInvestor(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorField pQryInvestor, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryInvestor_call method_call = new reqQryInvestor_call(pQryInvestor, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryInvestor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorField pQryInvestor;
      private int nRequestID;
      public reqQryInvestor_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorField pQryInvestor, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryInvestor = pQryInvestor;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryInvestor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryInvestor_args args = new reqQryInvestor_args();
        args.setPQryInvestor(pQryInvestor);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryInvestor();
      }
    }

    public void reqQryTradingCode(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingCodeField pQryTradingCode, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryTradingCode_call method_call = new reqQryTradingCode_call(pQryTradingCode, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryTradingCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingCodeField pQryTradingCode;
      private int nRequestID;
      public reqQryTradingCode_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingCodeField pQryTradingCode, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryTradingCode = pQryTradingCode;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryTradingCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryTradingCode_args args = new reqQryTradingCode_args();
        args.setPQryTradingCode(pQryTradingCode);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryTradingCode();
      }
    }

    public void reqQryInstrumentMarginRate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentMarginRateField pQryInstrumentMarginRate, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryInstrumentMarginRate_call method_call = new reqQryInstrumentMarginRate_call(pQryInstrumentMarginRate, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryInstrumentMarginRate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentMarginRateField pQryInstrumentMarginRate;
      private int nRequestID;
      public reqQryInstrumentMarginRate_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentMarginRateField pQryInstrumentMarginRate, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryInstrumentMarginRate = pQryInstrumentMarginRate;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryInstrumentMarginRate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryInstrumentMarginRate_args args = new reqQryInstrumentMarginRate_args();
        args.setPQryInstrumentMarginRate(pQryInstrumentMarginRate);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryInstrumentMarginRate();
      }
    }

    public void reqQryInstrumentCommissionRate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentCommissionRateField pQryInstrumentCommissionRate, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryInstrumentCommissionRate_call method_call = new reqQryInstrumentCommissionRate_call(pQryInstrumentCommissionRate, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryInstrumentCommissionRate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentCommissionRateField pQryInstrumentCommissionRate;
      private int nRequestID;
      public reqQryInstrumentCommissionRate_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentCommissionRateField pQryInstrumentCommissionRate, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryInstrumentCommissionRate = pQryInstrumentCommissionRate;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryInstrumentCommissionRate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryInstrumentCommissionRate_args args = new reqQryInstrumentCommissionRate_args();
        args.setPQryInstrumentCommissionRate(pQryInstrumentCommissionRate);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryInstrumentCommissionRate();
      }
    }

    public void reqQryExchange(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeField pQryExchange, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryExchange_call method_call = new reqQryExchange_call(pQryExchange, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryExchange_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeField pQryExchange;
      private int nRequestID;
      public reqQryExchange_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeField pQryExchange, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryExchange = pQryExchange;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryExchange", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryExchange_args args = new reqQryExchange_args();
        args.setPQryExchange(pQryExchange);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryExchange();
      }
    }

    public void reqQryProduct(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryProductField pQryProduct, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryProduct_call method_call = new reqQryProduct_call(pQryProduct, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryProduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryProductField pQryProduct;
      private int nRequestID;
      public reqQryProduct_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryProductField pQryProduct, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryProduct = pQryProduct;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryProduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryProduct_args args = new reqQryProduct_args();
        args.setPQryProduct(pQryProduct);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryProduct();
      }
    }

    public void reqQryInstrument(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentField pQryInstrument, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryInstrument_call method_call = new reqQryInstrument_call(pQryInstrument, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryInstrument_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentField pQryInstrument;
      private int nRequestID;
      public reqQryInstrument_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentField pQryInstrument, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryInstrument = pQryInstrument;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryInstrument", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryInstrument_args args = new reqQryInstrument_args();
        args.setPQryInstrument(pQryInstrument);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryInstrument();
      }
    }

    public void reqQryDepthMarketData(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryDepthMarketDataField pQryDepthMarketData, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryDepthMarketData_call method_call = new reqQryDepthMarketData_call(pQryDepthMarketData, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryDepthMarketData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryDepthMarketDataField pQryDepthMarketData;
      private int nRequestID;
      public reqQryDepthMarketData_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryDepthMarketDataField pQryDepthMarketData, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryDepthMarketData = pQryDepthMarketData;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryDepthMarketData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryDepthMarketData_args args = new reqQryDepthMarketData_args();
        args.setPQryDepthMarketData(pQryDepthMarketData);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryDepthMarketData();
      }
    }

    public void reqQrySettlementInfo(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoField pQrySettlementInfo, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQrySettlementInfo_call method_call = new reqQrySettlementInfo_call(pQrySettlementInfo, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQrySettlementInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoField pQrySettlementInfo;
      private int nRequestID;
      public reqQrySettlementInfo_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoField pQrySettlementInfo, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQrySettlementInfo = pQrySettlementInfo;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQrySettlementInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQrySettlementInfo_args args = new reqQrySettlementInfo_args();
        args.setPQrySettlementInfo(pQrySettlementInfo);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQrySettlementInfo();
      }
    }

    public void reqQryTransferBank(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferBankField pQryTransferBank, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryTransferBank_call method_call = new reqQryTransferBank_call(pQryTransferBank, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryTransferBank_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferBankField pQryTransferBank;
      private int nRequestID;
      public reqQryTransferBank_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferBankField pQryTransferBank, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryTransferBank = pQryTransferBank;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryTransferBank", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryTransferBank_args args = new reqQryTransferBank_args();
        args.setPQryTransferBank(pQryTransferBank);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryTransferBank();
      }
    }

    public void reqQryInvestorPositionDetail(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionDetailField pQryInvestorPositionDetail, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqQryInvestorPositionDetail_call method_call = new reqQryInvestorPositionDetail_call(pQryInvestorPositionDetail, nRequestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqQryInvestorPositionDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionDetailField pQryInvestorPositionDetail;
      private int nRequestID;
      public reqQryInvestorPositionDetail_call(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionDetailField pQryInvestorPositionDetail, int nRequestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pQryInvestorPositionDetail = pQryInvestorPositionDetail;
        this.nRequestID = nRequestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqQryInvestorPositionDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqQryInvestorPositionDetail_args args = new reqQryInvestorPositionDetail_args();
        args.setPQryInvestorPositionDetail(pQryInvestorPositionDetail);
        args.setNRequestID(nRequestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqQryInvestorPositionDetail();
      }
    }

  }

  public static class Processor<I extends Iface> extends cn.kkworld.futuresservice.cmsTrade.TraderPart2Service.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("release", new release());
      processMap.put("init", new init());
      processMap.put("join", new join());
      processMap.put("getTradingDay", new getTradingDay());
      processMap.put("registerFront", new registerFront());
      processMap.put("registerNameServer", new registerNameServer());
      processMap.put("registerFensUserInfo", new registerFensUserInfo());
      processMap.put("reqAuthenticate", new reqAuthenticate());
      processMap.put("reqUserLogin", new reqUserLogin());
      processMap.put("reqUserLogout", new reqUserLogout());
      processMap.put("reqUserPasswordUpdate", new reqUserPasswordUpdate());
      processMap.put("reqTradingAccountPasswordUpdate", new reqTradingAccountPasswordUpdate());
      processMap.put("reqOrderInsert", new reqOrderInsert());
      processMap.put("reqParkedOrderInsert", new reqParkedOrderInsert());
      processMap.put("reqParkedOrderAction", new reqParkedOrderAction());
      processMap.put("reqOrderAction", new reqOrderAction());
      processMap.put("reqQueryMaxOrderVolume", new reqQueryMaxOrderVolume());
      processMap.put("reqSettlementInfoConfirm", new reqSettlementInfoConfirm());
      processMap.put("reqRemoveParkedOrder", new reqRemoveParkedOrder());
      processMap.put("reqRemoveParkedOrderAction", new reqRemoveParkedOrderAction());
      processMap.put("reqExecOrderInsert", new reqExecOrderInsert());
      processMap.put("reqExecOrderAction", new reqExecOrderAction());
      processMap.put("reqForQuoteInsert", new reqForQuoteInsert());
      processMap.put("reqQuoteInsert", new reqQuoteInsert());
      processMap.put("reqQuoteAction", new reqQuoteAction());
      processMap.put("reqQryOrder", new reqQryOrder());
      processMap.put("reqQryTrade", new reqQryTrade());
      processMap.put("reqQryInvestorPosition", new reqQryInvestorPosition());
      processMap.put("reqQryTradingAccount", new reqQryTradingAccount());
      processMap.put("reqQryInvestor", new reqQryInvestor());
      processMap.put("reqQryTradingCode", new reqQryTradingCode());
      processMap.put("reqQryInstrumentMarginRate", new reqQryInstrumentMarginRate());
      processMap.put("reqQryInstrumentCommissionRate", new reqQryInstrumentCommissionRate());
      processMap.put("reqQryExchange", new reqQryExchange());
      processMap.put("reqQryProduct", new reqQryProduct());
      processMap.put("reqQryInstrument", new reqQryInstrument());
      processMap.put("reqQryDepthMarketData", new reqQryDepthMarketData());
      processMap.put("reqQrySettlementInfo", new reqQrySettlementInfo());
      processMap.put("reqQryTransferBank", new reqQryTransferBank());
      processMap.put("reqQryInvestorPositionDetail", new reqQryInvestorPositionDetail());
      return processMap;
    }

    public static class release<I extends Iface> extends org.apache.thrift.ProcessFunction<I, release_args> {
      public release() {
        super("release");
      }

      public release_args getEmptyArgsInstance() {
        return new release_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public release_result getResult(I iface, release_args args) throws org.apache.thrift.TException {
        release_result result = new release_result();
        iface.release();
        return result;
      }
    }

    public static class init<I extends Iface> extends org.apache.thrift.ProcessFunction<I, init_args> {
      public init() {
        super("init");
      }

      public init_args getEmptyArgsInstance() {
        return new init_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public init_result getResult(I iface, init_args args) throws org.apache.thrift.TException {
        init_result result = new init_result();
        iface.init();
        return result;
      }
    }

    public static class join<I extends Iface> extends org.apache.thrift.ProcessFunction<I, join_args> {
      public join() {
        super("join");
      }

      public join_args getEmptyArgsInstance() {
        return new join_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public join_result getResult(I iface, join_args args) throws org.apache.thrift.TException {
        join_result result = new join_result();
        result.success = iface.join();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getTradingDay<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTradingDay_args> {
      public getTradingDay() {
        super("getTradingDay");
      }

      public getTradingDay_args getEmptyArgsInstance() {
        return new getTradingDay_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTradingDay_result getResult(I iface, getTradingDay_args args) throws org.apache.thrift.TException {
        getTradingDay_result result = new getTradingDay_result();
        result.success = iface.getTradingDay();
        return result;
      }
    }

    public static class registerFront<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerFront_args> {
      public registerFront() {
        super("registerFront");
      }

      public registerFront_args getEmptyArgsInstance() {
        return new registerFront_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registerFront_result getResult(I iface, registerFront_args args) throws org.apache.thrift.TException {
        registerFront_result result = new registerFront_result();
        iface.registerFront(args.pszFrontAddress);
        return result;
      }
    }

    public static class registerNameServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerNameServer_args> {
      public registerNameServer() {
        super("registerNameServer");
      }

      public registerNameServer_args getEmptyArgsInstance() {
        return new registerNameServer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registerNameServer_result getResult(I iface, registerNameServer_args args) throws org.apache.thrift.TException {
        registerNameServer_result result = new registerNameServer_result();
        iface.registerNameServer(args.pszNsAddress);
        return result;
      }
    }

    public static class registerFensUserInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerFensUserInfo_args> {
      public registerFensUserInfo() {
        super("registerFensUserInfo");
      }

      public registerFensUserInfo_args getEmptyArgsInstance() {
        return new registerFensUserInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registerFensUserInfo_result getResult(I iface, registerFensUserInfo_args args) throws org.apache.thrift.TException {
        registerFensUserInfo_result result = new registerFensUserInfo_result();
        iface.registerFensUserInfo(args.pFensUserInfo);
        return result;
      }
    }

    public static class reqAuthenticate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqAuthenticate_args> {
      public reqAuthenticate() {
        super("reqAuthenticate");
      }

      public reqAuthenticate_args getEmptyArgsInstance() {
        return new reqAuthenticate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqAuthenticate_result getResult(I iface, reqAuthenticate_args args) throws org.apache.thrift.TException {
        reqAuthenticate_result result = new reqAuthenticate_result();
        result.success = iface.reqAuthenticate(args.pReqAuthenticateField, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqUserLogin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqUserLogin_args> {
      public reqUserLogin() {
        super("reqUserLogin");
      }

      public reqUserLogin_args getEmptyArgsInstance() {
        return new reqUserLogin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqUserLogin_result getResult(I iface, reqUserLogin_args args) throws org.apache.thrift.TException {
        reqUserLogin_result result = new reqUserLogin_result();
        result.success = iface.reqUserLogin(args.pReqUserLoginField, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqUserLogout<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqUserLogout_args> {
      public reqUserLogout() {
        super("reqUserLogout");
      }

      public reqUserLogout_args getEmptyArgsInstance() {
        return new reqUserLogout_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqUserLogout_result getResult(I iface, reqUserLogout_args args) throws org.apache.thrift.TException {
        reqUserLogout_result result = new reqUserLogout_result();
        result.success = iface.reqUserLogout(args.pUserLogout, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqUserPasswordUpdate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqUserPasswordUpdate_args> {
      public reqUserPasswordUpdate() {
        super("reqUserPasswordUpdate");
      }

      public reqUserPasswordUpdate_args getEmptyArgsInstance() {
        return new reqUserPasswordUpdate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqUserPasswordUpdate_result getResult(I iface, reqUserPasswordUpdate_args args) throws org.apache.thrift.TException {
        reqUserPasswordUpdate_result result = new reqUserPasswordUpdate_result();
        result.success = iface.reqUserPasswordUpdate(args.pUserPasswordUpdate, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqTradingAccountPasswordUpdate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqTradingAccountPasswordUpdate_args> {
      public reqTradingAccountPasswordUpdate() {
        super("reqTradingAccountPasswordUpdate");
      }

      public reqTradingAccountPasswordUpdate_args getEmptyArgsInstance() {
        return new reqTradingAccountPasswordUpdate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqTradingAccountPasswordUpdate_result getResult(I iface, reqTradingAccountPasswordUpdate_args args) throws org.apache.thrift.TException {
        reqTradingAccountPasswordUpdate_result result = new reqTradingAccountPasswordUpdate_result();
        result.success = iface.reqTradingAccountPasswordUpdate(args.pTradingAccountPasswordUpdate, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqOrderInsert<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqOrderInsert_args> {
      public reqOrderInsert() {
        super("reqOrderInsert");
      }

      public reqOrderInsert_args getEmptyArgsInstance() {
        return new reqOrderInsert_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqOrderInsert_result getResult(I iface, reqOrderInsert_args args) throws org.apache.thrift.TException {
        reqOrderInsert_result result = new reqOrderInsert_result();
        result.success = iface.reqOrderInsert(args.pInputOrder, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqParkedOrderInsert<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqParkedOrderInsert_args> {
      public reqParkedOrderInsert() {
        super("reqParkedOrderInsert");
      }

      public reqParkedOrderInsert_args getEmptyArgsInstance() {
        return new reqParkedOrderInsert_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqParkedOrderInsert_result getResult(I iface, reqParkedOrderInsert_args args) throws org.apache.thrift.TException {
        reqParkedOrderInsert_result result = new reqParkedOrderInsert_result();
        result.success = iface.reqParkedOrderInsert(args.pParkedOrder, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqParkedOrderAction<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqParkedOrderAction_args> {
      public reqParkedOrderAction() {
        super("reqParkedOrderAction");
      }

      public reqParkedOrderAction_args getEmptyArgsInstance() {
        return new reqParkedOrderAction_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqParkedOrderAction_result getResult(I iface, reqParkedOrderAction_args args) throws org.apache.thrift.TException {
        reqParkedOrderAction_result result = new reqParkedOrderAction_result();
        result.success = iface.reqParkedOrderAction(args.pParkedOrderAction, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqOrderAction<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqOrderAction_args> {
      public reqOrderAction() {
        super("reqOrderAction");
      }

      public reqOrderAction_args getEmptyArgsInstance() {
        return new reqOrderAction_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqOrderAction_result getResult(I iface, reqOrderAction_args args) throws org.apache.thrift.TException {
        reqOrderAction_result result = new reqOrderAction_result();
        result.success = iface.reqOrderAction(args.pInputOrderAction, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQueryMaxOrderVolume<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQueryMaxOrderVolume_args> {
      public reqQueryMaxOrderVolume() {
        super("reqQueryMaxOrderVolume");
      }

      public reqQueryMaxOrderVolume_args getEmptyArgsInstance() {
        return new reqQueryMaxOrderVolume_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQueryMaxOrderVolume_result getResult(I iface, reqQueryMaxOrderVolume_args args) throws org.apache.thrift.TException {
        reqQueryMaxOrderVolume_result result = new reqQueryMaxOrderVolume_result();
        result.success = iface.reqQueryMaxOrderVolume(args.pQueryMaxOrderVolume, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqSettlementInfoConfirm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqSettlementInfoConfirm_args> {
      public reqSettlementInfoConfirm() {
        super("reqSettlementInfoConfirm");
      }

      public reqSettlementInfoConfirm_args getEmptyArgsInstance() {
        return new reqSettlementInfoConfirm_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqSettlementInfoConfirm_result getResult(I iface, reqSettlementInfoConfirm_args args) throws org.apache.thrift.TException {
        reqSettlementInfoConfirm_result result = new reqSettlementInfoConfirm_result();
        result.success = iface.reqSettlementInfoConfirm(args.pSettlementInfoConfirm, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqRemoveParkedOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqRemoveParkedOrder_args> {
      public reqRemoveParkedOrder() {
        super("reqRemoveParkedOrder");
      }

      public reqRemoveParkedOrder_args getEmptyArgsInstance() {
        return new reqRemoveParkedOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqRemoveParkedOrder_result getResult(I iface, reqRemoveParkedOrder_args args) throws org.apache.thrift.TException {
        reqRemoveParkedOrder_result result = new reqRemoveParkedOrder_result();
        result.success = iface.reqRemoveParkedOrder(args.pRemoveParkedOrder, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqRemoveParkedOrderAction<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqRemoveParkedOrderAction_args> {
      public reqRemoveParkedOrderAction() {
        super("reqRemoveParkedOrderAction");
      }

      public reqRemoveParkedOrderAction_args getEmptyArgsInstance() {
        return new reqRemoveParkedOrderAction_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqRemoveParkedOrderAction_result getResult(I iface, reqRemoveParkedOrderAction_args args) throws org.apache.thrift.TException {
        reqRemoveParkedOrderAction_result result = new reqRemoveParkedOrderAction_result();
        result.success = iface.reqRemoveParkedOrderAction(args.pRemoveParkedOrderAction, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqExecOrderInsert<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqExecOrderInsert_args> {
      public reqExecOrderInsert() {
        super("reqExecOrderInsert");
      }

      public reqExecOrderInsert_args getEmptyArgsInstance() {
        return new reqExecOrderInsert_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqExecOrderInsert_result getResult(I iface, reqExecOrderInsert_args args) throws org.apache.thrift.TException {
        reqExecOrderInsert_result result = new reqExecOrderInsert_result();
        result.success = iface.reqExecOrderInsert(args.pInputExecOrder, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqExecOrderAction<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqExecOrderAction_args> {
      public reqExecOrderAction() {
        super("reqExecOrderAction");
      }

      public reqExecOrderAction_args getEmptyArgsInstance() {
        return new reqExecOrderAction_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqExecOrderAction_result getResult(I iface, reqExecOrderAction_args args) throws org.apache.thrift.TException {
        reqExecOrderAction_result result = new reqExecOrderAction_result();
        result.success = iface.reqExecOrderAction(args.pInputExecOrderAction, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqForQuoteInsert<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqForQuoteInsert_args> {
      public reqForQuoteInsert() {
        super("reqForQuoteInsert");
      }

      public reqForQuoteInsert_args getEmptyArgsInstance() {
        return new reqForQuoteInsert_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqForQuoteInsert_result getResult(I iface, reqForQuoteInsert_args args) throws org.apache.thrift.TException {
        reqForQuoteInsert_result result = new reqForQuoteInsert_result();
        result.success = iface.reqForQuoteInsert(args.pInputForQuote, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQuoteInsert<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQuoteInsert_args> {
      public reqQuoteInsert() {
        super("reqQuoteInsert");
      }

      public reqQuoteInsert_args getEmptyArgsInstance() {
        return new reqQuoteInsert_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQuoteInsert_result getResult(I iface, reqQuoteInsert_args args) throws org.apache.thrift.TException {
        reqQuoteInsert_result result = new reqQuoteInsert_result();
        result.success = iface.reqQuoteInsert(args.pInputQuote, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQuoteAction<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQuoteAction_args> {
      public reqQuoteAction() {
        super("reqQuoteAction");
      }

      public reqQuoteAction_args getEmptyArgsInstance() {
        return new reqQuoteAction_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQuoteAction_result getResult(I iface, reqQuoteAction_args args) throws org.apache.thrift.TException {
        reqQuoteAction_result result = new reqQuoteAction_result();
        result.success = iface.reqQuoteAction(args.pInputQuoteAction, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryOrder_args> {
      public reqQryOrder() {
        super("reqQryOrder");
      }

      public reqQryOrder_args getEmptyArgsInstance() {
        return new reqQryOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryOrder_result getResult(I iface, reqQryOrder_args args) throws org.apache.thrift.TException {
        reqQryOrder_result result = new reqQryOrder_result();
        result.success = iface.reqQryOrder(args.pQryOrder, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryTrade<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryTrade_args> {
      public reqQryTrade() {
        super("reqQryTrade");
      }

      public reqQryTrade_args getEmptyArgsInstance() {
        return new reqQryTrade_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryTrade_result getResult(I iface, reqQryTrade_args args) throws org.apache.thrift.TException {
        reqQryTrade_result result = new reqQryTrade_result();
        result.success = iface.reqQryTrade(args.pQryTrade, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryInvestorPosition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryInvestorPosition_args> {
      public reqQryInvestorPosition() {
        super("reqQryInvestorPosition");
      }

      public reqQryInvestorPosition_args getEmptyArgsInstance() {
        return new reqQryInvestorPosition_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryInvestorPosition_result getResult(I iface, reqQryInvestorPosition_args args) throws org.apache.thrift.TException {
        reqQryInvestorPosition_result result = new reqQryInvestorPosition_result();
        result.success = iface.reqQryInvestorPosition(args.pQryInvestorPosition, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryTradingAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryTradingAccount_args> {
      public reqQryTradingAccount() {
        super("reqQryTradingAccount");
      }

      public reqQryTradingAccount_args getEmptyArgsInstance() {
        return new reqQryTradingAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryTradingAccount_result getResult(I iface, reqQryTradingAccount_args args) throws org.apache.thrift.TException {
        reqQryTradingAccount_result result = new reqQryTradingAccount_result();
        result.success = iface.reqQryTradingAccount(args.pQryTradingAccount, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryInvestor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryInvestor_args> {
      public reqQryInvestor() {
        super("reqQryInvestor");
      }

      public reqQryInvestor_args getEmptyArgsInstance() {
        return new reqQryInvestor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryInvestor_result getResult(I iface, reqQryInvestor_args args) throws org.apache.thrift.TException {
        reqQryInvestor_result result = new reqQryInvestor_result();
        result.success = iface.reqQryInvestor(args.pQryInvestor, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryTradingCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryTradingCode_args> {
      public reqQryTradingCode() {
        super("reqQryTradingCode");
      }

      public reqQryTradingCode_args getEmptyArgsInstance() {
        return new reqQryTradingCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryTradingCode_result getResult(I iface, reqQryTradingCode_args args) throws org.apache.thrift.TException {
        reqQryTradingCode_result result = new reqQryTradingCode_result();
        result.success = iface.reqQryTradingCode(args.pQryTradingCode, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryInstrumentMarginRate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryInstrumentMarginRate_args> {
      public reqQryInstrumentMarginRate() {
        super("reqQryInstrumentMarginRate");
      }

      public reqQryInstrumentMarginRate_args getEmptyArgsInstance() {
        return new reqQryInstrumentMarginRate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryInstrumentMarginRate_result getResult(I iface, reqQryInstrumentMarginRate_args args) throws org.apache.thrift.TException {
        reqQryInstrumentMarginRate_result result = new reqQryInstrumentMarginRate_result();
        result.success = iface.reqQryInstrumentMarginRate(args.pQryInstrumentMarginRate, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryInstrumentCommissionRate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryInstrumentCommissionRate_args> {
      public reqQryInstrumentCommissionRate() {
        super("reqQryInstrumentCommissionRate");
      }

      public reqQryInstrumentCommissionRate_args getEmptyArgsInstance() {
        return new reqQryInstrumentCommissionRate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryInstrumentCommissionRate_result getResult(I iface, reqQryInstrumentCommissionRate_args args) throws org.apache.thrift.TException {
        reqQryInstrumentCommissionRate_result result = new reqQryInstrumentCommissionRate_result();
        result.success = iface.reqQryInstrumentCommissionRate(args.pQryInstrumentCommissionRate, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryExchange<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryExchange_args> {
      public reqQryExchange() {
        super("reqQryExchange");
      }

      public reqQryExchange_args getEmptyArgsInstance() {
        return new reqQryExchange_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryExchange_result getResult(I iface, reqQryExchange_args args) throws org.apache.thrift.TException {
        reqQryExchange_result result = new reqQryExchange_result();
        result.success = iface.reqQryExchange(args.pQryExchange, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryProduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryProduct_args> {
      public reqQryProduct() {
        super("reqQryProduct");
      }

      public reqQryProduct_args getEmptyArgsInstance() {
        return new reqQryProduct_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryProduct_result getResult(I iface, reqQryProduct_args args) throws org.apache.thrift.TException {
        reqQryProduct_result result = new reqQryProduct_result();
        result.success = iface.reqQryProduct(args.pQryProduct, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryInstrument<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryInstrument_args> {
      public reqQryInstrument() {
        super("reqQryInstrument");
      }

      public reqQryInstrument_args getEmptyArgsInstance() {
        return new reqQryInstrument_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryInstrument_result getResult(I iface, reqQryInstrument_args args) throws org.apache.thrift.TException {
        reqQryInstrument_result result = new reqQryInstrument_result();
        result.success = iface.reqQryInstrument(args.pQryInstrument, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryDepthMarketData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryDepthMarketData_args> {
      public reqQryDepthMarketData() {
        super("reqQryDepthMarketData");
      }

      public reqQryDepthMarketData_args getEmptyArgsInstance() {
        return new reqQryDepthMarketData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryDepthMarketData_result getResult(I iface, reqQryDepthMarketData_args args) throws org.apache.thrift.TException {
        reqQryDepthMarketData_result result = new reqQryDepthMarketData_result();
        result.success = iface.reqQryDepthMarketData(args.pQryDepthMarketData, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQrySettlementInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQrySettlementInfo_args> {
      public reqQrySettlementInfo() {
        super("reqQrySettlementInfo");
      }

      public reqQrySettlementInfo_args getEmptyArgsInstance() {
        return new reqQrySettlementInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQrySettlementInfo_result getResult(I iface, reqQrySettlementInfo_args args) throws org.apache.thrift.TException {
        reqQrySettlementInfo_result result = new reqQrySettlementInfo_result();
        result.success = iface.reqQrySettlementInfo(args.pQrySettlementInfo, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryTransferBank<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryTransferBank_args> {
      public reqQryTransferBank() {
        super("reqQryTransferBank");
      }

      public reqQryTransferBank_args getEmptyArgsInstance() {
        return new reqQryTransferBank_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryTransferBank_result getResult(I iface, reqQryTransferBank_args args) throws org.apache.thrift.TException {
        reqQryTransferBank_result result = new reqQryTransferBank_result();
        result.success = iface.reqQryTransferBank(args.pQryTransferBank, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class reqQryInvestorPositionDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqQryInvestorPositionDetail_args> {
      public reqQryInvestorPositionDetail() {
        super("reqQryInvestorPositionDetail");
      }

      public reqQryInvestorPositionDetail_args getEmptyArgsInstance() {
        return new reqQryInvestorPositionDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqQryInvestorPositionDetail_result getResult(I iface, reqQryInvestorPositionDetail_args args) throws org.apache.thrift.TException {
        reqQryInvestorPositionDetail_result result = new reqQryInvestorPositionDetail_result();
        result.success = iface.reqQryInvestorPositionDetail(args.pQryInvestorPositionDetail, args.nRequestID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends cn.kkworld.futuresservice.cmsTrade.TraderPart2Service.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("release", new release());
      processMap.put("init", new init());
      processMap.put("join", new join());
      processMap.put("getTradingDay", new getTradingDay());
      processMap.put("registerFront", new registerFront());
      processMap.put("registerNameServer", new registerNameServer());
      processMap.put("registerFensUserInfo", new registerFensUserInfo());
      processMap.put("reqAuthenticate", new reqAuthenticate());
      processMap.put("reqUserLogin", new reqUserLogin());
      processMap.put("reqUserLogout", new reqUserLogout());
      processMap.put("reqUserPasswordUpdate", new reqUserPasswordUpdate());
      processMap.put("reqTradingAccountPasswordUpdate", new reqTradingAccountPasswordUpdate());
      processMap.put("reqOrderInsert", new reqOrderInsert());
      processMap.put("reqParkedOrderInsert", new reqParkedOrderInsert());
      processMap.put("reqParkedOrderAction", new reqParkedOrderAction());
      processMap.put("reqOrderAction", new reqOrderAction());
      processMap.put("reqQueryMaxOrderVolume", new reqQueryMaxOrderVolume());
      processMap.put("reqSettlementInfoConfirm", new reqSettlementInfoConfirm());
      processMap.put("reqRemoveParkedOrder", new reqRemoveParkedOrder());
      processMap.put("reqRemoveParkedOrderAction", new reqRemoveParkedOrderAction());
      processMap.put("reqExecOrderInsert", new reqExecOrderInsert());
      processMap.put("reqExecOrderAction", new reqExecOrderAction());
      processMap.put("reqForQuoteInsert", new reqForQuoteInsert());
      processMap.put("reqQuoteInsert", new reqQuoteInsert());
      processMap.put("reqQuoteAction", new reqQuoteAction());
      processMap.put("reqQryOrder", new reqQryOrder());
      processMap.put("reqQryTrade", new reqQryTrade());
      processMap.put("reqQryInvestorPosition", new reqQryInvestorPosition());
      processMap.put("reqQryTradingAccount", new reqQryTradingAccount());
      processMap.put("reqQryInvestor", new reqQryInvestor());
      processMap.put("reqQryTradingCode", new reqQryTradingCode());
      processMap.put("reqQryInstrumentMarginRate", new reqQryInstrumentMarginRate());
      processMap.put("reqQryInstrumentCommissionRate", new reqQryInstrumentCommissionRate());
      processMap.put("reqQryExchange", new reqQryExchange());
      processMap.put("reqQryProduct", new reqQryProduct());
      processMap.put("reqQryInstrument", new reqQryInstrument());
      processMap.put("reqQryDepthMarketData", new reqQryDepthMarketData());
      processMap.put("reqQrySettlementInfo", new reqQrySettlementInfo());
      processMap.put("reqQryTransferBank", new reqQryTransferBank());
      processMap.put("reqQryInvestorPositionDetail", new reqQryInvestorPositionDetail());
      return processMap;
    }

    public static class release<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, release_args, Void> {
      public release() {
        super("release");
      }

      public release_args getEmptyArgsInstance() {
        return new release_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            release_result result = new release_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            release_result result = new release_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, release_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.release(resultHandler);
      }
    }

    public static class init<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, init_args, Void> {
      public init() {
        super("init");
      }

      public init_args getEmptyArgsInstance() {
        return new init_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            init_result result = new init_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            init_result result = new init_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, init_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.init(resultHandler);
      }
    }

    public static class join<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, join_args, Integer> {
      public join() {
        super("join");
      }

      public join_args getEmptyArgsInstance() {
        return new join_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            join_result result = new join_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            join_result result = new join_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, join_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.join(resultHandler);
      }
    }

    public static class getTradingDay<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTradingDay_args, String> {
      public getTradingDay() {
        super("getTradingDay");
      }

      public getTradingDay_args getEmptyArgsInstance() {
        return new getTradingDay_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getTradingDay_result result = new getTradingDay_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTradingDay_result result = new getTradingDay_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTradingDay_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getTradingDay(resultHandler);
      }
    }

    public static class registerFront<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerFront_args, Void> {
      public registerFront() {
        super("registerFront");
      }

      public registerFront_args getEmptyArgsInstance() {
        return new registerFront_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            registerFront_result result = new registerFront_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            registerFront_result result = new registerFront_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerFront_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.registerFront(args.pszFrontAddress,resultHandler);
      }
    }

    public static class registerNameServer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerNameServer_args, Void> {
      public registerNameServer() {
        super("registerNameServer");
      }

      public registerNameServer_args getEmptyArgsInstance() {
        return new registerNameServer_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            registerNameServer_result result = new registerNameServer_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            registerNameServer_result result = new registerNameServer_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerNameServer_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.registerNameServer(args.pszNsAddress,resultHandler);
      }
    }

    public static class registerFensUserInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerFensUserInfo_args, Void> {
      public registerFensUserInfo() {
        super("registerFensUserInfo");
      }

      public registerFensUserInfo_args getEmptyArgsInstance() {
        return new registerFensUserInfo_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            registerFensUserInfo_result result = new registerFensUserInfo_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            registerFensUserInfo_result result = new registerFensUserInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerFensUserInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.registerFensUserInfo(args.pFensUserInfo,resultHandler);
      }
    }

    public static class reqAuthenticate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqAuthenticate_args, Integer> {
      public reqAuthenticate() {
        super("reqAuthenticate");
      }

      public reqAuthenticate_args getEmptyArgsInstance() {
        return new reqAuthenticate_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqAuthenticate_result result = new reqAuthenticate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqAuthenticate_result result = new reqAuthenticate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqAuthenticate_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqAuthenticate(args.pReqAuthenticateField, args.nRequestID,resultHandler);
      }
    }

    public static class reqUserLogin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqUserLogin_args, Integer> {
      public reqUserLogin() {
        super("reqUserLogin");
      }

      public reqUserLogin_args getEmptyArgsInstance() {
        return new reqUserLogin_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqUserLogin_result result = new reqUserLogin_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqUserLogin_result result = new reqUserLogin_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqUserLogin_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqUserLogin(args.pReqUserLoginField, args.nRequestID,resultHandler);
      }
    }

    public static class reqUserLogout<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqUserLogout_args, Integer> {
      public reqUserLogout() {
        super("reqUserLogout");
      }

      public reqUserLogout_args getEmptyArgsInstance() {
        return new reqUserLogout_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqUserLogout_result result = new reqUserLogout_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqUserLogout_result result = new reqUserLogout_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqUserLogout_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqUserLogout(args.pUserLogout, args.nRequestID,resultHandler);
      }
    }

    public static class reqUserPasswordUpdate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqUserPasswordUpdate_args, Integer> {
      public reqUserPasswordUpdate() {
        super("reqUserPasswordUpdate");
      }

      public reqUserPasswordUpdate_args getEmptyArgsInstance() {
        return new reqUserPasswordUpdate_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqUserPasswordUpdate_result result = new reqUserPasswordUpdate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqUserPasswordUpdate_result result = new reqUserPasswordUpdate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqUserPasswordUpdate_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqUserPasswordUpdate(args.pUserPasswordUpdate, args.nRequestID,resultHandler);
      }
    }

    public static class reqTradingAccountPasswordUpdate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqTradingAccountPasswordUpdate_args, Integer> {
      public reqTradingAccountPasswordUpdate() {
        super("reqTradingAccountPasswordUpdate");
      }

      public reqTradingAccountPasswordUpdate_args getEmptyArgsInstance() {
        return new reqTradingAccountPasswordUpdate_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqTradingAccountPasswordUpdate_result result = new reqTradingAccountPasswordUpdate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqTradingAccountPasswordUpdate_result result = new reqTradingAccountPasswordUpdate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqTradingAccountPasswordUpdate_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqTradingAccountPasswordUpdate(args.pTradingAccountPasswordUpdate, args.nRequestID,resultHandler);
      }
    }

    public static class reqOrderInsert<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqOrderInsert_args, Integer> {
      public reqOrderInsert() {
        super("reqOrderInsert");
      }

      public reqOrderInsert_args getEmptyArgsInstance() {
        return new reqOrderInsert_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqOrderInsert_result result = new reqOrderInsert_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqOrderInsert_result result = new reqOrderInsert_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqOrderInsert_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqOrderInsert(args.pInputOrder, args.nRequestID,resultHandler);
      }
    }

    public static class reqParkedOrderInsert<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqParkedOrderInsert_args, Integer> {
      public reqParkedOrderInsert() {
        super("reqParkedOrderInsert");
      }

      public reqParkedOrderInsert_args getEmptyArgsInstance() {
        return new reqParkedOrderInsert_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqParkedOrderInsert_result result = new reqParkedOrderInsert_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqParkedOrderInsert_result result = new reqParkedOrderInsert_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqParkedOrderInsert_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqParkedOrderInsert(args.pParkedOrder, args.nRequestID,resultHandler);
      }
    }

    public static class reqParkedOrderAction<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqParkedOrderAction_args, Integer> {
      public reqParkedOrderAction() {
        super("reqParkedOrderAction");
      }

      public reqParkedOrderAction_args getEmptyArgsInstance() {
        return new reqParkedOrderAction_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqParkedOrderAction_result result = new reqParkedOrderAction_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqParkedOrderAction_result result = new reqParkedOrderAction_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqParkedOrderAction_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqParkedOrderAction(args.pParkedOrderAction, args.nRequestID,resultHandler);
      }
    }

    public static class reqOrderAction<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqOrderAction_args, Integer> {
      public reqOrderAction() {
        super("reqOrderAction");
      }

      public reqOrderAction_args getEmptyArgsInstance() {
        return new reqOrderAction_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqOrderAction_result result = new reqOrderAction_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqOrderAction_result result = new reqOrderAction_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqOrderAction_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqOrderAction(args.pInputOrderAction, args.nRequestID,resultHandler);
      }
    }

    public static class reqQueryMaxOrderVolume<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQueryMaxOrderVolume_args, Integer> {
      public reqQueryMaxOrderVolume() {
        super("reqQueryMaxOrderVolume");
      }

      public reqQueryMaxOrderVolume_args getEmptyArgsInstance() {
        return new reqQueryMaxOrderVolume_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQueryMaxOrderVolume_result result = new reqQueryMaxOrderVolume_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQueryMaxOrderVolume_result result = new reqQueryMaxOrderVolume_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQueryMaxOrderVolume_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQueryMaxOrderVolume(args.pQueryMaxOrderVolume, args.nRequestID,resultHandler);
      }
    }

    public static class reqSettlementInfoConfirm<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqSettlementInfoConfirm_args, Integer> {
      public reqSettlementInfoConfirm() {
        super("reqSettlementInfoConfirm");
      }

      public reqSettlementInfoConfirm_args getEmptyArgsInstance() {
        return new reqSettlementInfoConfirm_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqSettlementInfoConfirm_result result = new reqSettlementInfoConfirm_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqSettlementInfoConfirm_result result = new reqSettlementInfoConfirm_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqSettlementInfoConfirm_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqSettlementInfoConfirm(args.pSettlementInfoConfirm, args.nRequestID,resultHandler);
      }
    }

    public static class reqRemoveParkedOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqRemoveParkedOrder_args, Integer> {
      public reqRemoveParkedOrder() {
        super("reqRemoveParkedOrder");
      }

      public reqRemoveParkedOrder_args getEmptyArgsInstance() {
        return new reqRemoveParkedOrder_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqRemoveParkedOrder_result result = new reqRemoveParkedOrder_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqRemoveParkedOrder_result result = new reqRemoveParkedOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqRemoveParkedOrder_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqRemoveParkedOrder(args.pRemoveParkedOrder, args.nRequestID,resultHandler);
      }
    }

    public static class reqRemoveParkedOrderAction<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqRemoveParkedOrderAction_args, Integer> {
      public reqRemoveParkedOrderAction() {
        super("reqRemoveParkedOrderAction");
      }

      public reqRemoveParkedOrderAction_args getEmptyArgsInstance() {
        return new reqRemoveParkedOrderAction_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqRemoveParkedOrderAction_result result = new reqRemoveParkedOrderAction_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqRemoveParkedOrderAction_result result = new reqRemoveParkedOrderAction_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqRemoveParkedOrderAction_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqRemoveParkedOrderAction(args.pRemoveParkedOrderAction, args.nRequestID,resultHandler);
      }
    }

    public static class reqExecOrderInsert<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqExecOrderInsert_args, Integer> {
      public reqExecOrderInsert() {
        super("reqExecOrderInsert");
      }

      public reqExecOrderInsert_args getEmptyArgsInstance() {
        return new reqExecOrderInsert_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqExecOrderInsert_result result = new reqExecOrderInsert_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqExecOrderInsert_result result = new reqExecOrderInsert_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqExecOrderInsert_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqExecOrderInsert(args.pInputExecOrder, args.nRequestID,resultHandler);
      }
    }

    public static class reqExecOrderAction<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqExecOrderAction_args, Integer> {
      public reqExecOrderAction() {
        super("reqExecOrderAction");
      }

      public reqExecOrderAction_args getEmptyArgsInstance() {
        return new reqExecOrderAction_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqExecOrderAction_result result = new reqExecOrderAction_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqExecOrderAction_result result = new reqExecOrderAction_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqExecOrderAction_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqExecOrderAction(args.pInputExecOrderAction, args.nRequestID,resultHandler);
      }
    }

    public static class reqForQuoteInsert<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqForQuoteInsert_args, Integer> {
      public reqForQuoteInsert() {
        super("reqForQuoteInsert");
      }

      public reqForQuoteInsert_args getEmptyArgsInstance() {
        return new reqForQuoteInsert_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqForQuoteInsert_result result = new reqForQuoteInsert_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqForQuoteInsert_result result = new reqForQuoteInsert_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqForQuoteInsert_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqForQuoteInsert(args.pInputForQuote, args.nRequestID,resultHandler);
      }
    }

    public static class reqQuoteInsert<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQuoteInsert_args, Integer> {
      public reqQuoteInsert() {
        super("reqQuoteInsert");
      }

      public reqQuoteInsert_args getEmptyArgsInstance() {
        return new reqQuoteInsert_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQuoteInsert_result result = new reqQuoteInsert_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQuoteInsert_result result = new reqQuoteInsert_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQuoteInsert_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQuoteInsert(args.pInputQuote, args.nRequestID,resultHandler);
      }
    }

    public static class reqQuoteAction<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQuoteAction_args, Integer> {
      public reqQuoteAction() {
        super("reqQuoteAction");
      }

      public reqQuoteAction_args getEmptyArgsInstance() {
        return new reqQuoteAction_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQuoteAction_result result = new reqQuoteAction_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQuoteAction_result result = new reqQuoteAction_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQuoteAction_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQuoteAction(args.pInputQuoteAction, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryOrder_args, Integer> {
      public reqQryOrder() {
        super("reqQryOrder");
      }

      public reqQryOrder_args getEmptyArgsInstance() {
        return new reqQryOrder_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryOrder_result result = new reqQryOrder_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryOrder_result result = new reqQryOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryOrder_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryOrder(args.pQryOrder, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryTrade<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryTrade_args, Integer> {
      public reqQryTrade() {
        super("reqQryTrade");
      }

      public reqQryTrade_args getEmptyArgsInstance() {
        return new reqQryTrade_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryTrade_result result = new reqQryTrade_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryTrade_result result = new reqQryTrade_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryTrade_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryTrade(args.pQryTrade, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryInvestorPosition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryInvestorPosition_args, Integer> {
      public reqQryInvestorPosition() {
        super("reqQryInvestorPosition");
      }

      public reqQryInvestorPosition_args getEmptyArgsInstance() {
        return new reqQryInvestorPosition_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryInvestorPosition_result result = new reqQryInvestorPosition_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryInvestorPosition_result result = new reqQryInvestorPosition_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryInvestorPosition_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryInvestorPosition(args.pQryInvestorPosition, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryTradingAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryTradingAccount_args, Integer> {
      public reqQryTradingAccount() {
        super("reqQryTradingAccount");
      }

      public reqQryTradingAccount_args getEmptyArgsInstance() {
        return new reqQryTradingAccount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryTradingAccount_result result = new reqQryTradingAccount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryTradingAccount_result result = new reqQryTradingAccount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryTradingAccount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryTradingAccount(args.pQryTradingAccount, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryInvestor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryInvestor_args, Integer> {
      public reqQryInvestor() {
        super("reqQryInvestor");
      }

      public reqQryInvestor_args getEmptyArgsInstance() {
        return new reqQryInvestor_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryInvestor_result result = new reqQryInvestor_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryInvestor_result result = new reqQryInvestor_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryInvestor_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryInvestor(args.pQryInvestor, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryTradingCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryTradingCode_args, Integer> {
      public reqQryTradingCode() {
        super("reqQryTradingCode");
      }

      public reqQryTradingCode_args getEmptyArgsInstance() {
        return new reqQryTradingCode_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryTradingCode_result result = new reqQryTradingCode_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryTradingCode_result result = new reqQryTradingCode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryTradingCode_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryTradingCode(args.pQryTradingCode, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryInstrumentMarginRate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryInstrumentMarginRate_args, Integer> {
      public reqQryInstrumentMarginRate() {
        super("reqQryInstrumentMarginRate");
      }

      public reqQryInstrumentMarginRate_args getEmptyArgsInstance() {
        return new reqQryInstrumentMarginRate_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryInstrumentMarginRate_result result = new reqQryInstrumentMarginRate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryInstrumentMarginRate_result result = new reqQryInstrumentMarginRate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryInstrumentMarginRate_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryInstrumentMarginRate(args.pQryInstrumentMarginRate, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryInstrumentCommissionRate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryInstrumentCommissionRate_args, Integer> {
      public reqQryInstrumentCommissionRate() {
        super("reqQryInstrumentCommissionRate");
      }

      public reqQryInstrumentCommissionRate_args getEmptyArgsInstance() {
        return new reqQryInstrumentCommissionRate_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryInstrumentCommissionRate_result result = new reqQryInstrumentCommissionRate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryInstrumentCommissionRate_result result = new reqQryInstrumentCommissionRate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryInstrumentCommissionRate_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryInstrumentCommissionRate(args.pQryInstrumentCommissionRate, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryExchange<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryExchange_args, Integer> {
      public reqQryExchange() {
        super("reqQryExchange");
      }

      public reqQryExchange_args getEmptyArgsInstance() {
        return new reqQryExchange_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryExchange_result result = new reqQryExchange_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryExchange_result result = new reqQryExchange_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryExchange_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryExchange(args.pQryExchange, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryProduct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryProduct_args, Integer> {
      public reqQryProduct() {
        super("reqQryProduct");
      }

      public reqQryProduct_args getEmptyArgsInstance() {
        return new reqQryProduct_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryProduct_result result = new reqQryProduct_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryProduct_result result = new reqQryProduct_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryProduct_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryProduct(args.pQryProduct, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryInstrument<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryInstrument_args, Integer> {
      public reqQryInstrument() {
        super("reqQryInstrument");
      }

      public reqQryInstrument_args getEmptyArgsInstance() {
        return new reqQryInstrument_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryInstrument_result result = new reqQryInstrument_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryInstrument_result result = new reqQryInstrument_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryInstrument_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryInstrument(args.pQryInstrument, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryDepthMarketData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryDepthMarketData_args, Integer> {
      public reqQryDepthMarketData() {
        super("reqQryDepthMarketData");
      }

      public reqQryDepthMarketData_args getEmptyArgsInstance() {
        return new reqQryDepthMarketData_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryDepthMarketData_result result = new reqQryDepthMarketData_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryDepthMarketData_result result = new reqQryDepthMarketData_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryDepthMarketData_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryDepthMarketData(args.pQryDepthMarketData, args.nRequestID,resultHandler);
      }
    }

    public static class reqQrySettlementInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQrySettlementInfo_args, Integer> {
      public reqQrySettlementInfo() {
        super("reqQrySettlementInfo");
      }

      public reqQrySettlementInfo_args getEmptyArgsInstance() {
        return new reqQrySettlementInfo_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQrySettlementInfo_result result = new reqQrySettlementInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQrySettlementInfo_result result = new reqQrySettlementInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQrySettlementInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQrySettlementInfo(args.pQrySettlementInfo, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryTransferBank<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryTransferBank_args, Integer> {
      public reqQryTransferBank() {
        super("reqQryTransferBank");
      }

      public reqQryTransferBank_args getEmptyArgsInstance() {
        return new reqQryTransferBank_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryTransferBank_result result = new reqQryTransferBank_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryTransferBank_result result = new reqQryTransferBank_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryTransferBank_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryTransferBank(args.pQryTransferBank, args.nRequestID,resultHandler);
      }
    }

    public static class reqQryInvestorPositionDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqQryInvestorPositionDetail_args, Integer> {
      public reqQryInvestorPositionDetail() {
        super("reqQryInvestorPositionDetail");
      }

      public reqQryInvestorPositionDetail_args getEmptyArgsInstance() {
        return new reqQryInvestorPositionDetail_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reqQryInvestorPositionDetail_result result = new reqQryInvestorPositionDetail_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqQryInvestorPositionDetail_result result = new reqQryInvestorPositionDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqQryInvestorPositionDetail_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reqQryInvestorPositionDetail(args.pQryInvestorPositionDetail, args.nRequestID,resultHandler);
      }
    }

  }

  public static class release_args implements org.apache.thrift.TBase<release_args, release_args._Fields>, java.io.Serializable, Cloneable, Comparable<release_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("release_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new release_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new release_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(release_args.class, metaDataMap);
    }

    public release_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public release_args(release_args other) {
    }

    public release_args deepCopy() {
      return new release_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof release_args)
        return this.equals((release_args)that);
      return false;
    }

    public boolean equals(release_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(release_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("release_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class release_argsStandardSchemeFactory implements SchemeFactory {
      public release_argsStandardScheme getScheme() {
        return new release_argsStandardScheme();
      }
    }

    private static class release_argsStandardScheme extends StandardScheme<release_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, release_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, release_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class release_argsTupleSchemeFactory implements SchemeFactory {
      public release_argsTupleScheme getScheme() {
        return new release_argsTupleScheme();
      }
    }

    private static class release_argsTupleScheme extends TupleScheme<release_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, release_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, release_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class release_result implements org.apache.thrift.TBase<release_result, release_result._Fields>, java.io.Serializable, Cloneable, Comparable<release_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("release_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new release_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new release_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(release_result.class, metaDataMap);
    }

    public release_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public release_result(release_result other) {
    }

    public release_result deepCopy() {
      return new release_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof release_result)
        return this.equals((release_result)that);
      return false;
    }

    public boolean equals(release_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(release_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("release_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class release_resultStandardSchemeFactory implements SchemeFactory {
      public release_resultStandardScheme getScheme() {
        return new release_resultStandardScheme();
      }
    }

    private static class release_resultStandardScheme extends StandardScheme<release_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, release_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, release_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class release_resultTupleSchemeFactory implements SchemeFactory {
      public release_resultTupleScheme getScheme() {
        return new release_resultTupleScheme();
      }
    }

    private static class release_resultTupleScheme extends TupleScheme<release_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, release_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, release_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class init_args implements org.apache.thrift.TBase<init_args, init_args._Fields>, java.io.Serializable, Cloneable, Comparable<init_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("init_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new init_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new init_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(init_args.class, metaDataMap);
    }

    public init_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public init_args(init_args other) {
    }

    public init_args deepCopy() {
      return new init_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof init_args)
        return this.equals((init_args)that);
      return false;
    }

    public boolean equals(init_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(init_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("init_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class init_argsStandardSchemeFactory implements SchemeFactory {
      public init_argsStandardScheme getScheme() {
        return new init_argsStandardScheme();
      }
    }

    private static class init_argsStandardScheme extends StandardScheme<init_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, init_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, init_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class init_argsTupleSchemeFactory implements SchemeFactory {
      public init_argsTupleScheme getScheme() {
        return new init_argsTupleScheme();
      }
    }

    private static class init_argsTupleScheme extends TupleScheme<init_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, init_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, init_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class init_result implements org.apache.thrift.TBase<init_result, init_result._Fields>, java.io.Serializable, Cloneable, Comparable<init_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("init_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new init_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new init_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(init_result.class, metaDataMap);
    }

    public init_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public init_result(init_result other) {
    }

    public init_result deepCopy() {
      return new init_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof init_result)
        return this.equals((init_result)that);
      return false;
    }

    public boolean equals(init_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(init_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("init_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class init_resultStandardSchemeFactory implements SchemeFactory {
      public init_resultStandardScheme getScheme() {
        return new init_resultStandardScheme();
      }
    }

    private static class init_resultStandardScheme extends StandardScheme<init_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, init_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, init_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class init_resultTupleSchemeFactory implements SchemeFactory {
      public init_resultTupleScheme getScheme() {
        return new init_resultTupleScheme();
      }
    }

    private static class init_resultTupleScheme extends TupleScheme<init_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, init_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, init_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class join_args implements org.apache.thrift.TBase<join_args, join_args._Fields>, java.io.Serializable, Cloneable, Comparable<join_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("join_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new join_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new join_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(join_args.class, metaDataMap);
    }

    public join_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public join_args(join_args other) {
    }

    public join_args deepCopy() {
      return new join_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof join_args)
        return this.equals((join_args)that);
      return false;
    }

    public boolean equals(join_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(join_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("join_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class join_argsStandardSchemeFactory implements SchemeFactory {
      public join_argsStandardScheme getScheme() {
        return new join_argsStandardScheme();
      }
    }

    private static class join_argsStandardScheme extends StandardScheme<join_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, join_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, join_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class join_argsTupleSchemeFactory implements SchemeFactory {
      public join_argsTupleScheme getScheme() {
        return new join_argsTupleScheme();
      }
    }

    private static class join_argsTupleScheme extends TupleScheme<join_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, join_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, join_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class join_result implements org.apache.thrift.TBase<join_result, join_result._Fields>, java.io.Serializable, Cloneable, Comparable<join_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("join_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new join_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new join_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(join_result.class, metaDataMap);
    }

    public join_result() {
    }

    public join_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public join_result(join_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public join_result deepCopy() {
      return new join_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public join_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof join_result)
        return this.equals((join_result)that);
      return false;
    }

    public boolean equals(join_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(join_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("join_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class join_resultStandardSchemeFactory implements SchemeFactory {
      public join_resultStandardScheme getScheme() {
        return new join_resultStandardScheme();
      }
    }

    private static class join_resultStandardScheme extends StandardScheme<join_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, join_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, join_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class join_resultTupleSchemeFactory implements SchemeFactory {
      public join_resultTupleScheme getScheme() {
        return new join_resultTupleScheme();
      }
    }

    private static class join_resultTupleScheme extends TupleScheme<join_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, join_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, join_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTradingDay_args implements org.apache.thrift.TBase<getTradingDay_args, getTradingDay_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTradingDay_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTradingDay_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTradingDay_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTradingDay_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTradingDay_args.class, metaDataMap);
    }

    public getTradingDay_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTradingDay_args(getTradingDay_args other) {
    }

    public getTradingDay_args deepCopy() {
      return new getTradingDay_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTradingDay_args)
        return this.equals((getTradingDay_args)that);
      return false;
    }

    public boolean equals(getTradingDay_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getTradingDay_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTradingDay_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTradingDay_argsStandardSchemeFactory implements SchemeFactory {
      public getTradingDay_argsStandardScheme getScheme() {
        return new getTradingDay_argsStandardScheme();
      }
    }

    private static class getTradingDay_argsStandardScheme extends StandardScheme<getTradingDay_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTradingDay_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTradingDay_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTradingDay_argsTupleSchemeFactory implements SchemeFactory {
      public getTradingDay_argsTupleScheme getScheme() {
        return new getTradingDay_argsTupleScheme();
      }
    }

    private static class getTradingDay_argsTupleScheme extends TupleScheme<getTradingDay_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTradingDay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTradingDay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getTradingDay_result implements org.apache.thrift.TBase<getTradingDay_result, getTradingDay_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTradingDay_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTradingDay_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTradingDay_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTradingDay_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTradingDay_result.class, metaDataMap);
    }

    public getTradingDay_result() {
    }

    public getTradingDay_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTradingDay_result(getTradingDay_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getTradingDay_result deepCopy() {
      return new getTradingDay_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getTradingDay_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTradingDay_result)
        return this.equals((getTradingDay_result)that);
      return false;
    }

    public boolean equals(getTradingDay_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getTradingDay_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTradingDay_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTradingDay_resultStandardSchemeFactory implements SchemeFactory {
      public getTradingDay_resultStandardScheme getScheme() {
        return new getTradingDay_resultStandardScheme();
      }
    }

    private static class getTradingDay_resultStandardScheme extends StandardScheme<getTradingDay_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTradingDay_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTradingDay_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTradingDay_resultTupleSchemeFactory implements SchemeFactory {
      public getTradingDay_resultTupleScheme getScheme() {
        return new getTradingDay_resultTupleScheme();
      }
    }

    private static class getTradingDay_resultTupleScheme extends TupleScheme<getTradingDay_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTradingDay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTradingDay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class registerFront_args implements org.apache.thrift.TBase<registerFront_args, registerFront_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerFront_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerFront_args");

    private static final org.apache.thrift.protocol.TField PSZ_FRONT_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("pszFrontAddress", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerFront_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerFront_argsTupleSchemeFactory());
    }

    public String pszFrontAddress; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PSZ_FRONT_ADDRESS((short)1, "pszFrontAddress");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PSZ_FRONT_ADDRESS
            return PSZ_FRONT_ADDRESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PSZ_FRONT_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("pszFrontAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerFront_args.class, metaDataMap);
    }

    public registerFront_args() {
    }

    public registerFront_args(
      String pszFrontAddress)
    {
      this();
      this.pszFrontAddress = pszFrontAddress;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerFront_args(registerFront_args other) {
      if (other.isSetPszFrontAddress()) {
        this.pszFrontAddress = other.pszFrontAddress;
      }
    }

    public registerFront_args deepCopy() {
      return new registerFront_args(this);
    }

    @Override
    public void clear() {
      this.pszFrontAddress = null;
    }

    public String getPszFrontAddress() {
      return this.pszFrontAddress;
    }

    public registerFront_args setPszFrontAddress(String pszFrontAddress) {
      this.pszFrontAddress = pszFrontAddress;
      return this;
    }

    public void unsetPszFrontAddress() {
      this.pszFrontAddress = null;
    }

    /** Returns true if field pszFrontAddress is set (has been assigned a value) and false otherwise */
    public boolean isSetPszFrontAddress() {
      return this.pszFrontAddress != null;
    }

    public void setPszFrontAddressIsSet(boolean value) {
      if (!value) {
        this.pszFrontAddress = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PSZ_FRONT_ADDRESS:
        if (value == null) {
          unsetPszFrontAddress();
        } else {
          setPszFrontAddress((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PSZ_FRONT_ADDRESS:
        return getPszFrontAddress();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PSZ_FRONT_ADDRESS:
        return isSetPszFrontAddress();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerFront_args)
        return this.equals((registerFront_args)that);
      return false;
    }

    public boolean equals(registerFront_args that) {
      if (that == null)
        return false;

      boolean this_present_pszFrontAddress = true && this.isSetPszFrontAddress();
      boolean that_present_pszFrontAddress = true && that.isSetPszFrontAddress();
      if (this_present_pszFrontAddress || that_present_pszFrontAddress) {
        if (!(this_present_pszFrontAddress && that_present_pszFrontAddress))
          return false;
        if (!this.pszFrontAddress.equals(that.pszFrontAddress))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(registerFront_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPszFrontAddress()).compareTo(other.isSetPszFrontAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPszFrontAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pszFrontAddress, other.pszFrontAddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerFront_args(");
      boolean first = true;

      sb.append("pszFrontAddress:");
      if (this.pszFrontAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.pszFrontAddress);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerFront_argsStandardSchemeFactory implements SchemeFactory {
      public registerFront_argsStandardScheme getScheme() {
        return new registerFront_argsStandardScheme();
      }
    }

    private static class registerFront_argsStandardScheme extends StandardScheme<registerFront_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerFront_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PSZ_FRONT_ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pszFrontAddress = iprot.readString();
                struct.setPszFrontAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerFront_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pszFrontAddress != null) {
          oprot.writeFieldBegin(PSZ_FRONT_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.pszFrontAddress);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerFront_argsTupleSchemeFactory implements SchemeFactory {
      public registerFront_argsTupleScheme getScheme() {
        return new registerFront_argsTupleScheme();
      }
    }

    private static class registerFront_argsTupleScheme extends TupleScheme<registerFront_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerFront_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPszFrontAddress()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPszFrontAddress()) {
          oprot.writeString(struct.pszFrontAddress);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerFront_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pszFrontAddress = iprot.readString();
          struct.setPszFrontAddressIsSet(true);
        }
      }
    }

  }

  public static class registerFront_result implements org.apache.thrift.TBase<registerFront_result, registerFront_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerFront_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerFront_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerFront_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerFront_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerFront_result.class, metaDataMap);
    }

    public registerFront_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerFront_result(registerFront_result other) {
    }

    public registerFront_result deepCopy() {
      return new registerFront_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerFront_result)
        return this.equals((registerFront_result)that);
      return false;
    }

    public boolean equals(registerFront_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(registerFront_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerFront_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerFront_resultStandardSchemeFactory implements SchemeFactory {
      public registerFront_resultStandardScheme getScheme() {
        return new registerFront_resultStandardScheme();
      }
    }

    private static class registerFront_resultStandardScheme extends StandardScheme<registerFront_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerFront_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerFront_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerFront_resultTupleSchemeFactory implements SchemeFactory {
      public registerFront_resultTupleScheme getScheme() {
        return new registerFront_resultTupleScheme();
      }
    }

    private static class registerFront_resultTupleScheme extends TupleScheme<registerFront_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerFront_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerFront_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class registerNameServer_args implements org.apache.thrift.TBase<registerNameServer_args, registerNameServer_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerNameServer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerNameServer_args");

    private static final org.apache.thrift.protocol.TField PSZ_NS_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("pszNsAddress", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerNameServer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerNameServer_argsTupleSchemeFactory());
    }

    public String pszNsAddress; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PSZ_NS_ADDRESS((short)1, "pszNsAddress");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PSZ_NS_ADDRESS
            return PSZ_NS_ADDRESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PSZ_NS_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("pszNsAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerNameServer_args.class, metaDataMap);
    }

    public registerNameServer_args() {
    }

    public registerNameServer_args(
      String pszNsAddress)
    {
      this();
      this.pszNsAddress = pszNsAddress;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerNameServer_args(registerNameServer_args other) {
      if (other.isSetPszNsAddress()) {
        this.pszNsAddress = other.pszNsAddress;
      }
    }

    public registerNameServer_args deepCopy() {
      return new registerNameServer_args(this);
    }

    @Override
    public void clear() {
      this.pszNsAddress = null;
    }

    public String getPszNsAddress() {
      return this.pszNsAddress;
    }

    public registerNameServer_args setPszNsAddress(String pszNsAddress) {
      this.pszNsAddress = pszNsAddress;
      return this;
    }

    public void unsetPszNsAddress() {
      this.pszNsAddress = null;
    }

    /** Returns true if field pszNsAddress is set (has been assigned a value) and false otherwise */
    public boolean isSetPszNsAddress() {
      return this.pszNsAddress != null;
    }

    public void setPszNsAddressIsSet(boolean value) {
      if (!value) {
        this.pszNsAddress = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PSZ_NS_ADDRESS:
        if (value == null) {
          unsetPszNsAddress();
        } else {
          setPszNsAddress((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PSZ_NS_ADDRESS:
        return getPszNsAddress();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PSZ_NS_ADDRESS:
        return isSetPszNsAddress();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerNameServer_args)
        return this.equals((registerNameServer_args)that);
      return false;
    }

    public boolean equals(registerNameServer_args that) {
      if (that == null)
        return false;

      boolean this_present_pszNsAddress = true && this.isSetPszNsAddress();
      boolean that_present_pszNsAddress = true && that.isSetPszNsAddress();
      if (this_present_pszNsAddress || that_present_pszNsAddress) {
        if (!(this_present_pszNsAddress && that_present_pszNsAddress))
          return false;
        if (!this.pszNsAddress.equals(that.pszNsAddress))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(registerNameServer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPszNsAddress()).compareTo(other.isSetPszNsAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPszNsAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pszNsAddress, other.pszNsAddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerNameServer_args(");
      boolean first = true;

      sb.append("pszNsAddress:");
      if (this.pszNsAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.pszNsAddress);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerNameServer_argsStandardSchemeFactory implements SchemeFactory {
      public registerNameServer_argsStandardScheme getScheme() {
        return new registerNameServer_argsStandardScheme();
      }
    }

    private static class registerNameServer_argsStandardScheme extends StandardScheme<registerNameServer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerNameServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PSZ_NS_ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pszNsAddress = iprot.readString();
                struct.setPszNsAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerNameServer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pszNsAddress != null) {
          oprot.writeFieldBegin(PSZ_NS_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.pszNsAddress);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerNameServer_argsTupleSchemeFactory implements SchemeFactory {
      public registerNameServer_argsTupleScheme getScheme() {
        return new registerNameServer_argsTupleScheme();
      }
    }

    private static class registerNameServer_argsTupleScheme extends TupleScheme<registerNameServer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerNameServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPszNsAddress()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPszNsAddress()) {
          oprot.writeString(struct.pszNsAddress);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerNameServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pszNsAddress = iprot.readString();
          struct.setPszNsAddressIsSet(true);
        }
      }
    }

  }

  public static class registerNameServer_result implements org.apache.thrift.TBase<registerNameServer_result, registerNameServer_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerNameServer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerNameServer_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerNameServer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerNameServer_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerNameServer_result.class, metaDataMap);
    }

    public registerNameServer_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerNameServer_result(registerNameServer_result other) {
    }

    public registerNameServer_result deepCopy() {
      return new registerNameServer_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerNameServer_result)
        return this.equals((registerNameServer_result)that);
      return false;
    }

    public boolean equals(registerNameServer_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(registerNameServer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerNameServer_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerNameServer_resultStandardSchemeFactory implements SchemeFactory {
      public registerNameServer_resultStandardScheme getScheme() {
        return new registerNameServer_resultStandardScheme();
      }
    }

    private static class registerNameServer_resultStandardScheme extends StandardScheme<registerNameServer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerNameServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerNameServer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerNameServer_resultTupleSchemeFactory implements SchemeFactory {
      public registerNameServer_resultTupleScheme getScheme() {
        return new registerNameServer_resultTupleScheme();
      }
    }

    private static class registerNameServer_resultTupleScheme extends TupleScheme<registerNameServer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerNameServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerNameServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class registerFensUserInfo_args implements org.apache.thrift.TBase<registerFensUserInfo_args, registerFensUserInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerFensUserInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerFensUserInfo_args");

    private static final org.apache.thrift.protocol.TField P_FENS_USER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("pFensUserInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerFensUserInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerFensUserInfo_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcFensUserInfoField pFensUserInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_FENS_USER_INFO((short)1, "pFensUserInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_FENS_USER_INFO
            return P_FENS_USER_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_FENS_USER_INFO, new org.apache.thrift.meta_data.FieldMetaData("pFensUserInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcFensUserInfoField.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerFensUserInfo_args.class, metaDataMap);
    }

    public registerFensUserInfo_args() {
    }

    public registerFensUserInfo_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcFensUserInfoField pFensUserInfo)
    {
      this();
      this.pFensUserInfo = pFensUserInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerFensUserInfo_args(registerFensUserInfo_args other) {
      if (other.isSetPFensUserInfo()) {
        this.pFensUserInfo = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcFensUserInfoField(other.pFensUserInfo);
      }
    }

    public registerFensUserInfo_args deepCopy() {
      return new registerFensUserInfo_args(this);
    }

    @Override
    public void clear() {
      this.pFensUserInfo = null;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcFensUserInfoField getPFensUserInfo() {
      return this.pFensUserInfo;
    }

    public registerFensUserInfo_args setPFensUserInfo(cn.kkworld.futuresservice.cmsTrade.CThostFtdcFensUserInfoField pFensUserInfo) {
      this.pFensUserInfo = pFensUserInfo;
      return this;
    }

    public void unsetPFensUserInfo() {
      this.pFensUserInfo = null;
    }

    /** Returns true if field pFensUserInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetPFensUserInfo() {
      return this.pFensUserInfo != null;
    }

    public void setPFensUserInfoIsSet(boolean value) {
      if (!value) {
        this.pFensUserInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_FENS_USER_INFO:
        if (value == null) {
          unsetPFensUserInfo();
        } else {
          setPFensUserInfo((cn.kkworld.futuresservice.cmsTrade.CThostFtdcFensUserInfoField)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_FENS_USER_INFO:
        return getPFensUserInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_FENS_USER_INFO:
        return isSetPFensUserInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerFensUserInfo_args)
        return this.equals((registerFensUserInfo_args)that);
      return false;
    }

    public boolean equals(registerFensUserInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_pFensUserInfo = true && this.isSetPFensUserInfo();
      boolean that_present_pFensUserInfo = true && that.isSetPFensUserInfo();
      if (this_present_pFensUserInfo || that_present_pFensUserInfo) {
        if (!(this_present_pFensUserInfo && that_present_pFensUserInfo))
          return false;
        if (!this.pFensUserInfo.equals(that.pFensUserInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(registerFensUserInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPFensUserInfo()).compareTo(other.isSetPFensUserInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPFensUserInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pFensUserInfo, other.pFensUserInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerFensUserInfo_args(");
      boolean first = true;

      sb.append("pFensUserInfo:");
      if (this.pFensUserInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.pFensUserInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pFensUserInfo != null) {
        pFensUserInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerFensUserInfo_argsStandardSchemeFactory implements SchemeFactory {
      public registerFensUserInfo_argsStandardScheme getScheme() {
        return new registerFensUserInfo_argsStandardScheme();
      }
    }

    private static class registerFensUserInfo_argsStandardScheme extends StandardScheme<registerFensUserInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerFensUserInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_FENS_USER_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pFensUserInfo = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcFensUserInfoField();
                struct.pFensUserInfo.read(iprot);
                struct.setPFensUserInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerFensUserInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pFensUserInfo != null) {
          oprot.writeFieldBegin(P_FENS_USER_INFO_FIELD_DESC);
          struct.pFensUserInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerFensUserInfo_argsTupleSchemeFactory implements SchemeFactory {
      public registerFensUserInfo_argsTupleScheme getScheme() {
        return new registerFensUserInfo_argsTupleScheme();
      }
    }

    private static class registerFensUserInfo_argsTupleScheme extends TupleScheme<registerFensUserInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerFensUserInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPFensUserInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPFensUserInfo()) {
          struct.pFensUserInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerFensUserInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pFensUserInfo = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcFensUserInfoField();
          struct.pFensUserInfo.read(iprot);
          struct.setPFensUserInfoIsSet(true);
        }
      }
    }

  }

  public static class registerFensUserInfo_result implements org.apache.thrift.TBase<registerFensUserInfo_result, registerFensUserInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerFensUserInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerFensUserInfo_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerFensUserInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerFensUserInfo_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerFensUserInfo_result.class, metaDataMap);
    }

    public registerFensUserInfo_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerFensUserInfo_result(registerFensUserInfo_result other) {
    }

    public registerFensUserInfo_result deepCopy() {
      return new registerFensUserInfo_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerFensUserInfo_result)
        return this.equals((registerFensUserInfo_result)that);
      return false;
    }

    public boolean equals(registerFensUserInfo_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(registerFensUserInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerFensUserInfo_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerFensUserInfo_resultStandardSchemeFactory implements SchemeFactory {
      public registerFensUserInfo_resultStandardScheme getScheme() {
        return new registerFensUserInfo_resultStandardScheme();
      }
    }

    private static class registerFensUserInfo_resultStandardScheme extends StandardScheme<registerFensUserInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerFensUserInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerFensUserInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerFensUserInfo_resultTupleSchemeFactory implements SchemeFactory {
      public registerFensUserInfo_resultTupleScheme getScheme() {
        return new registerFensUserInfo_resultTupleScheme();
      }
    }

    private static class registerFensUserInfo_resultTupleScheme extends TupleScheme<registerFensUserInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerFensUserInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerFensUserInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class reqAuthenticate_args implements org.apache.thrift.TBase<reqAuthenticate_args, reqAuthenticate_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqAuthenticate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqAuthenticate_args");

    private static final org.apache.thrift.protocol.TField P_REQ_AUTHENTICATE_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("pReqAuthenticateField", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqAuthenticate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqAuthenticate_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqAuthenticateField pReqAuthenticateField; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_REQ_AUTHENTICATE_FIELD((short)1, "pReqAuthenticateField"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_REQ_AUTHENTICATE_FIELD
            return P_REQ_AUTHENTICATE_FIELD;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_REQ_AUTHENTICATE_FIELD, new org.apache.thrift.meta_data.FieldMetaData("pReqAuthenticateField", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqAuthenticateField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqAuthenticate_args.class, metaDataMap);
    }

    public reqAuthenticate_args() {
    }

    public reqAuthenticate_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqAuthenticateField pReqAuthenticateField,
      int nRequestID)
    {
      this();
      this.pReqAuthenticateField = pReqAuthenticateField;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqAuthenticate_args(reqAuthenticate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPReqAuthenticateField()) {
        this.pReqAuthenticateField = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqAuthenticateField(other.pReqAuthenticateField);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqAuthenticate_args deepCopy() {
      return new reqAuthenticate_args(this);
    }

    @Override
    public void clear() {
      this.pReqAuthenticateField = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqAuthenticateField getPReqAuthenticateField() {
      return this.pReqAuthenticateField;
    }

    public reqAuthenticate_args setPReqAuthenticateField(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqAuthenticateField pReqAuthenticateField) {
      this.pReqAuthenticateField = pReqAuthenticateField;
      return this;
    }

    public void unsetPReqAuthenticateField() {
      this.pReqAuthenticateField = null;
    }

    /** Returns true if field pReqAuthenticateField is set (has been assigned a value) and false otherwise */
    public boolean isSetPReqAuthenticateField() {
      return this.pReqAuthenticateField != null;
    }

    public void setPReqAuthenticateFieldIsSet(boolean value) {
      if (!value) {
        this.pReqAuthenticateField = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqAuthenticate_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_REQ_AUTHENTICATE_FIELD:
        if (value == null) {
          unsetPReqAuthenticateField();
        } else {
          setPReqAuthenticateField((cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqAuthenticateField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_REQ_AUTHENTICATE_FIELD:
        return getPReqAuthenticateField();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_REQ_AUTHENTICATE_FIELD:
        return isSetPReqAuthenticateField();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqAuthenticate_args)
        return this.equals((reqAuthenticate_args)that);
      return false;
    }

    public boolean equals(reqAuthenticate_args that) {
      if (that == null)
        return false;

      boolean this_present_pReqAuthenticateField = true && this.isSetPReqAuthenticateField();
      boolean that_present_pReqAuthenticateField = true && that.isSetPReqAuthenticateField();
      if (this_present_pReqAuthenticateField || that_present_pReqAuthenticateField) {
        if (!(this_present_pReqAuthenticateField && that_present_pReqAuthenticateField))
          return false;
        if (!this.pReqAuthenticateField.equals(that.pReqAuthenticateField))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqAuthenticate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPReqAuthenticateField()).compareTo(other.isSetPReqAuthenticateField());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPReqAuthenticateField()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pReqAuthenticateField, other.pReqAuthenticateField);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqAuthenticate_args(");
      boolean first = true;

      sb.append("pReqAuthenticateField:");
      if (this.pReqAuthenticateField == null) {
        sb.append("null");
      } else {
        sb.append(this.pReqAuthenticateField);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pReqAuthenticateField != null) {
        pReqAuthenticateField.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqAuthenticate_argsStandardSchemeFactory implements SchemeFactory {
      public reqAuthenticate_argsStandardScheme getScheme() {
        return new reqAuthenticate_argsStandardScheme();
      }
    }

    private static class reqAuthenticate_argsStandardScheme extends StandardScheme<reqAuthenticate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqAuthenticate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_REQ_AUTHENTICATE_FIELD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pReqAuthenticateField = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqAuthenticateField();
                struct.pReqAuthenticateField.read(iprot);
                struct.setPReqAuthenticateFieldIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqAuthenticate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pReqAuthenticateField != null) {
          oprot.writeFieldBegin(P_REQ_AUTHENTICATE_FIELD_FIELD_DESC);
          struct.pReqAuthenticateField.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqAuthenticate_argsTupleSchemeFactory implements SchemeFactory {
      public reqAuthenticate_argsTupleScheme getScheme() {
        return new reqAuthenticate_argsTupleScheme();
      }
    }

    private static class reqAuthenticate_argsTupleScheme extends TupleScheme<reqAuthenticate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqAuthenticate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPReqAuthenticateField()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPReqAuthenticateField()) {
          struct.pReqAuthenticateField.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqAuthenticate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pReqAuthenticateField = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqAuthenticateField();
          struct.pReqAuthenticateField.read(iprot);
          struct.setPReqAuthenticateFieldIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqAuthenticate_result implements org.apache.thrift.TBase<reqAuthenticate_result, reqAuthenticate_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqAuthenticate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqAuthenticate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqAuthenticate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqAuthenticate_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqAuthenticate_result.class, metaDataMap);
    }

    public reqAuthenticate_result() {
    }

    public reqAuthenticate_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqAuthenticate_result(reqAuthenticate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqAuthenticate_result deepCopy() {
      return new reqAuthenticate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqAuthenticate_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqAuthenticate_result)
        return this.equals((reqAuthenticate_result)that);
      return false;
    }

    public boolean equals(reqAuthenticate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqAuthenticate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqAuthenticate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqAuthenticate_resultStandardSchemeFactory implements SchemeFactory {
      public reqAuthenticate_resultStandardScheme getScheme() {
        return new reqAuthenticate_resultStandardScheme();
      }
    }

    private static class reqAuthenticate_resultStandardScheme extends StandardScheme<reqAuthenticate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqAuthenticate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqAuthenticate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqAuthenticate_resultTupleSchemeFactory implements SchemeFactory {
      public reqAuthenticate_resultTupleScheme getScheme() {
        return new reqAuthenticate_resultTupleScheme();
      }
    }

    private static class reqAuthenticate_resultTupleScheme extends TupleScheme<reqAuthenticate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqAuthenticate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqAuthenticate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqUserLogin_args implements org.apache.thrift.TBase<reqUserLogin_args, reqUserLogin_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqUserLogin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqUserLogin_args");

    private static final org.apache.thrift.protocol.TField P_REQ_USER_LOGIN_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("pReqUserLoginField", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqUserLogin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqUserLogin_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqUserLoginField pReqUserLoginField; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_REQ_USER_LOGIN_FIELD((short)1, "pReqUserLoginField"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_REQ_USER_LOGIN_FIELD
            return P_REQ_USER_LOGIN_FIELD;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_REQ_USER_LOGIN_FIELD, new org.apache.thrift.meta_data.FieldMetaData("pReqUserLoginField", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqUserLoginField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqUserLogin_args.class, metaDataMap);
    }

    public reqUserLogin_args() {
    }

    public reqUserLogin_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqUserLoginField pReqUserLoginField,
      int nRequestID)
    {
      this();
      this.pReqUserLoginField = pReqUserLoginField;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqUserLogin_args(reqUserLogin_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPReqUserLoginField()) {
        this.pReqUserLoginField = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqUserLoginField(other.pReqUserLoginField);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqUserLogin_args deepCopy() {
      return new reqUserLogin_args(this);
    }

    @Override
    public void clear() {
      this.pReqUserLoginField = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqUserLoginField getPReqUserLoginField() {
      return this.pReqUserLoginField;
    }

    public reqUserLogin_args setPReqUserLoginField(cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqUserLoginField pReqUserLoginField) {
      this.pReqUserLoginField = pReqUserLoginField;
      return this;
    }

    public void unsetPReqUserLoginField() {
      this.pReqUserLoginField = null;
    }

    /** Returns true if field pReqUserLoginField is set (has been assigned a value) and false otherwise */
    public boolean isSetPReqUserLoginField() {
      return this.pReqUserLoginField != null;
    }

    public void setPReqUserLoginFieldIsSet(boolean value) {
      if (!value) {
        this.pReqUserLoginField = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqUserLogin_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_REQ_USER_LOGIN_FIELD:
        if (value == null) {
          unsetPReqUserLoginField();
        } else {
          setPReqUserLoginField((cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqUserLoginField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_REQ_USER_LOGIN_FIELD:
        return getPReqUserLoginField();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_REQ_USER_LOGIN_FIELD:
        return isSetPReqUserLoginField();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqUserLogin_args)
        return this.equals((reqUserLogin_args)that);
      return false;
    }

    public boolean equals(reqUserLogin_args that) {
      if (that == null)
        return false;

      boolean this_present_pReqUserLoginField = true && this.isSetPReqUserLoginField();
      boolean that_present_pReqUserLoginField = true && that.isSetPReqUserLoginField();
      if (this_present_pReqUserLoginField || that_present_pReqUserLoginField) {
        if (!(this_present_pReqUserLoginField && that_present_pReqUserLoginField))
          return false;
        if (!this.pReqUserLoginField.equals(that.pReqUserLoginField))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqUserLogin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPReqUserLoginField()).compareTo(other.isSetPReqUserLoginField());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPReqUserLoginField()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pReqUserLoginField, other.pReqUserLoginField);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqUserLogin_args(");
      boolean first = true;

      sb.append("pReqUserLoginField:");
      if (this.pReqUserLoginField == null) {
        sb.append("null");
      } else {
        sb.append(this.pReqUserLoginField);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pReqUserLoginField != null) {
        pReqUserLoginField.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqUserLogin_argsStandardSchemeFactory implements SchemeFactory {
      public reqUserLogin_argsStandardScheme getScheme() {
        return new reqUserLogin_argsStandardScheme();
      }
    }

    private static class reqUserLogin_argsStandardScheme extends StandardScheme<reqUserLogin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqUserLogin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_REQ_USER_LOGIN_FIELD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pReqUserLoginField = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqUserLoginField();
                struct.pReqUserLoginField.read(iprot);
                struct.setPReqUserLoginFieldIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqUserLogin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pReqUserLoginField != null) {
          oprot.writeFieldBegin(P_REQ_USER_LOGIN_FIELD_FIELD_DESC);
          struct.pReqUserLoginField.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqUserLogin_argsTupleSchemeFactory implements SchemeFactory {
      public reqUserLogin_argsTupleScheme getScheme() {
        return new reqUserLogin_argsTupleScheme();
      }
    }

    private static class reqUserLogin_argsTupleScheme extends TupleScheme<reqUserLogin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqUserLogin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPReqUserLoginField()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPReqUserLoginField()) {
          struct.pReqUserLoginField.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqUserLogin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pReqUserLoginField = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcReqUserLoginField();
          struct.pReqUserLoginField.read(iprot);
          struct.setPReqUserLoginFieldIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqUserLogin_result implements org.apache.thrift.TBase<reqUserLogin_result, reqUserLogin_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqUserLogin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqUserLogin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqUserLogin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqUserLogin_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqUserLogin_result.class, metaDataMap);
    }

    public reqUserLogin_result() {
    }

    public reqUserLogin_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqUserLogin_result(reqUserLogin_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqUserLogin_result deepCopy() {
      return new reqUserLogin_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqUserLogin_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqUserLogin_result)
        return this.equals((reqUserLogin_result)that);
      return false;
    }

    public boolean equals(reqUserLogin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqUserLogin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqUserLogin_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqUserLogin_resultStandardSchemeFactory implements SchemeFactory {
      public reqUserLogin_resultStandardScheme getScheme() {
        return new reqUserLogin_resultStandardScheme();
      }
    }

    private static class reqUserLogin_resultStandardScheme extends StandardScheme<reqUserLogin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqUserLogin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqUserLogin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqUserLogin_resultTupleSchemeFactory implements SchemeFactory {
      public reqUserLogin_resultTupleScheme getScheme() {
        return new reqUserLogin_resultTupleScheme();
      }
    }

    private static class reqUserLogin_resultTupleScheme extends TupleScheme<reqUserLogin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqUserLogin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqUserLogin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqUserLogout_args implements org.apache.thrift.TBase<reqUserLogout_args, reqUserLogout_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqUserLogout_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqUserLogout_args");

    private static final org.apache.thrift.protocol.TField P_USER_LOGOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("pUserLogout", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqUserLogout_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqUserLogout_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserLogoutField pUserLogout; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_USER_LOGOUT((short)1, "pUserLogout"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_USER_LOGOUT
            return P_USER_LOGOUT;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_USER_LOGOUT, new org.apache.thrift.meta_data.FieldMetaData("pUserLogout", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserLogoutField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqUserLogout_args.class, metaDataMap);
    }

    public reqUserLogout_args() {
    }

    public reqUserLogout_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserLogoutField pUserLogout,
      int nRequestID)
    {
      this();
      this.pUserLogout = pUserLogout;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqUserLogout_args(reqUserLogout_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPUserLogout()) {
        this.pUserLogout = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserLogoutField(other.pUserLogout);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqUserLogout_args deepCopy() {
      return new reqUserLogout_args(this);
    }

    @Override
    public void clear() {
      this.pUserLogout = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserLogoutField getPUserLogout() {
      return this.pUserLogout;
    }

    public reqUserLogout_args setPUserLogout(cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserLogoutField pUserLogout) {
      this.pUserLogout = pUserLogout;
      return this;
    }

    public void unsetPUserLogout() {
      this.pUserLogout = null;
    }

    /** Returns true if field pUserLogout is set (has been assigned a value) and false otherwise */
    public boolean isSetPUserLogout() {
      return this.pUserLogout != null;
    }

    public void setPUserLogoutIsSet(boolean value) {
      if (!value) {
        this.pUserLogout = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqUserLogout_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_USER_LOGOUT:
        if (value == null) {
          unsetPUserLogout();
        } else {
          setPUserLogout((cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserLogoutField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_USER_LOGOUT:
        return getPUserLogout();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_USER_LOGOUT:
        return isSetPUserLogout();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqUserLogout_args)
        return this.equals((reqUserLogout_args)that);
      return false;
    }

    public boolean equals(reqUserLogout_args that) {
      if (that == null)
        return false;

      boolean this_present_pUserLogout = true && this.isSetPUserLogout();
      boolean that_present_pUserLogout = true && that.isSetPUserLogout();
      if (this_present_pUserLogout || that_present_pUserLogout) {
        if (!(this_present_pUserLogout && that_present_pUserLogout))
          return false;
        if (!this.pUserLogout.equals(that.pUserLogout))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqUserLogout_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPUserLogout()).compareTo(other.isSetPUserLogout());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPUserLogout()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pUserLogout, other.pUserLogout);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqUserLogout_args(");
      boolean first = true;

      sb.append("pUserLogout:");
      if (this.pUserLogout == null) {
        sb.append("null");
      } else {
        sb.append(this.pUserLogout);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pUserLogout != null) {
        pUserLogout.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqUserLogout_argsStandardSchemeFactory implements SchemeFactory {
      public reqUserLogout_argsStandardScheme getScheme() {
        return new reqUserLogout_argsStandardScheme();
      }
    }

    private static class reqUserLogout_argsStandardScheme extends StandardScheme<reqUserLogout_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqUserLogout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_USER_LOGOUT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pUserLogout = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserLogoutField();
                struct.pUserLogout.read(iprot);
                struct.setPUserLogoutIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqUserLogout_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pUserLogout != null) {
          oprot.writeFieldBegin(P_USER_LOGOUT_FIELD_DESC);
          struct.pUserLogout.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqUserLogout_argsTupleSchemeFactory implements SchemeFactory {
      public reqUserLogout_argsTupleScheme getScheme() {
        return new reqUserLogout_argsTupleScheme();
      }
    }

    private static class reqUserLogout_argsTupleScheme extends TupleScheme<reqUserLogout_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqUserLogout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPUserLogout()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPUserLogout()) {
          struct.pUserLogout.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqUserLogout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pUserLogout = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserLogoutField();
          struct.pUserLogout.read(iprot);
          struct.setPUserLogoutIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqUserLogout_result implements org.apache.thrift.TBase<reqUserLogout_result, reqUserLogout_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqUserLogout_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqUserLogout_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqUserLogout_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqUserLogout_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqUserLogout_result.class, metaDataMap);
    }

    public reqUserLogout_result() {
    }

    public reqUserLogout_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqUserLogout_result(reqUserLogout_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqUserLogout_result deepCopy() {
      return new reqUserLogout_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqUserLogout_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqUserLogout_result)
        return this.equals((reqUserLogout_result)that);
      return false;
    }

    public boolean equals(reqUserLogout_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqUserLogout_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqUserLogout_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqUserLogout_resultStandardSchemeFactory implements SchemeFactory {
      public reqUserLogout_resultStandardScheme getScheme() {
        return new reqUserLogout_resultStandardScheme();
      }
    }

    private static class reqUserLogout_resultStandardScheme extends StandardScheme<reqUserLogout_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqUserLogout_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqUserLogout_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqUserLogout_resultTupleSchemeFactory implements SchemeFactory {
      public reqUserLogout_resultTupleScheme getScheme() {
        return new reqUserLogout_resultTupleScheme();
      }
    }

    private static class reqUserLogout_resultTupleScheme extends TupleScheme<reqUserLogout_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqUserLogout_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqUserLogout_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqUserPasswordUpdate_args implements org.apache.thrift.TBase<reqUserPasswordUpdate_args, reqUserPasswordUpdate_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqUserPasswordUpdate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqUserPasswordUpdate_args");

    private static final org.apache.thrift.protocol.TField P_USER_PASSWORD_UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("pUserPasswordUpdate", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqUserPasswordUpdate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqUserPasswordUpdate_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserPasswordUpdateField pUserPasswordUpdate; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_USER_PASSWORD_UPDATE((short)1, "pUserPasswordUpdate"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_USER_PASSWORD_UPDATE
            return P_USER_PASSWORD_UPDATE;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_USER_PASSWORD_UPDATE, new org.apache.thrift.meta_data.FieldMetaData("pUserPasswordUpdate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserPasswordUpdateField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqUserPasswordUpdate_args.class, metaDataMap);
    }

    public reqUserPasswordUpdate_args() {
    }

    public reqUserPasswordUpdate_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserPasswordUpdateField pUserPasswordUpdate,
      int nRequestID)
    {
      this();
      this.pUserPasswordUpdate = pUserPasswordUpdate;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqUserPasswordUpdate_args(reqUserPasswordUpdate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPUserPasswordUpdate()) {
        this.pUserPasswordUpdate = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserPasswordUpdateField(other.pUserPasswordUpdate);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqUserPasswordUpdate_args deepCopy() {
      return new reqUserPasswordUpdate_args(this);
    }

    @Override
    public void clear() {
      this.pUserPasswordUpdate = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserPasswordUpdateField getPUserPasswordUpdate() {
      return this.pUserPasswordUpdate;
    }

    public reqUserPasswordUpdate_args setPUserPasswordUpdate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserPasswordUpdateField pUserPasswordUpdate) {
      this.pUserPasswordUpdate = pUserPasswordUpdate;
      return this;
    }

    public void unsetPUserPasswordUpdate() {
      this.pUserPasswordUpdate = null;
    }

    /** Returns true if field pUserPasswordUpdate is set (has been assigned a value) and false otherwise */
    public boolean isSetPUserPasswordUpdate() {
      return this.pUserPasswordUpdate != null;
    }

    public void setPUserPasswordUpdateIsSet(boolean value) {
      if (!value) {
        this.pUserPasswordUpdate = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqUserPasswordUpdate_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_USER_PASSWORD_UPDATE:
        if (value == null) {
          unsetPUserPasswordUpdate();
        } else {
          setPUserPasswordUpdate((cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserPasswordUpdateField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_USER_PASSWORD_UPDATE:
        return getPUserPasswordUpdate();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_USER_PASSWORD_UPDATE:
        return isSetPUserPasswordUpdate();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqUserPasswordUpdate_args)
        return this.equals((reqUserPasswordUpdate_args)that);
      return false;
    }

    public boolean equals(reqUserPasswordUpdate_args that) {
      if (that == null)
        return false;

      boolean this_present_pUserPasswordUpdate = true && this.isSetPUserPasswordUpdate();
      boolean that_present_pUserPasswordUpdate = true && that.isSetPUserPasswordUpdate();
      if (this_present_pUserPasswordUpdate || that_present_pUserPasswordUpdate) {
        if (!(this_present_pUserPasswordUpdate && that_present_pUserPasswordUpdate))
          return false;
        if (!this.pUserPasswordUpdate.equals(that.pUserPasswordUpdate))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqUserPasswordUpdate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPUserPasswordUpdate()).compareTo(other.isSetPUserPasswordUpdate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPUserPasswordUpdate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pUserPasswordUpdate, other.pUserPasswordUpdate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqUserPasswordUpdate_args(");
      boolean first = true;

      sb.append("pUserPasswordUpdate:");
      if (this.pUserPasswordUpdate == null) {
        sb.append("null");
      } else {
        sb.append(this.pUserPasswordUpdate);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pUserPasswordUpdate != null) {
        pUserPasswordUpdate.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqUserPasswordUpdate_argsStandardSchemeFactory implements SchemeFactory {
      public reqUserPasswordUpdate_argsStandardScheme getScheme() {
        return new reqUserPasswordUpdate_argsStandardScheme();
      }
    }

    private static class reqUserPasswordUpdate_argsStandardScheme extends StandardScheme<reqUserPasswordUpdate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqUserPasswordUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_USER_PASSWORD_UPDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pUserPasswordUpdate = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserPasswordUpdateField();
                struct.pUserPasswordUpdate.read(iprot);
                struct.setPUserPasswordUpdateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqUserPasswordUpdate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pUserPasswordUpdate != null) {
          oprot.writeFieldBegin(P_USER_PASSWORD_UPDATE_FIELD_DESC);
          struct.pUserPasswordUpdate.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqUserPasswordUpdate_argsTupleSchemeFactory implements SchemeFactory {
      public reqUserPasswordUpdate_argsTupleScheme getScheme() {
        return new reqUserPasswordUpdate_argsTupleScheme();
      }
    }

    private static class reqUserPasswordUpdate_argsTupleScheme extends TupleScheme<reqUserPasswordUpdate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqUserPasswordUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPUserPasswordUpdate()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPUserPasswordUpdate()) {
          struct.pUserPasswordUpdate.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqUserPasswordUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pUserPasswordUpdate = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcUserPasswordUpdateField();
          struct.pUserPasswordUpdate.read(iprot);
          struct.setPUserPasswordUpdateIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqUserPasswordUpdate_result implements org.apache.thrift.TBase<reqUserPasswordUpdate_result, reqUserPasswordUpdate_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqUserPasswordUpdate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqUserPasswordUpdate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqUserPasswordUpdate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqUserPasswordUpdate_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqUserPasswordUpdate_result.class, metaDataMap);
    }

    public reqUserPasswordUpdate_result() {
    }

    public reqUserPasswordUpdate_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqUserPasswordUpdate_result(reqUserPasswordUpdate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqUserPasswordUpdate_result deepCopy() {
      return new reqUserPasswordUpdate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqUserPasswordUpdate_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqUserPasswordUpdate_result)
        return this.equals((reqUserPasswordUpdate_result)that);
      return false;
    }

    public boolean equals(reqUserPasswordUpdate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqUserPasswordUpdate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqUserPasswordUpdate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqUserPasswordUpdate_resultStandardSchemeFactory implements SchemeFactory {
      public reqUserPasswordUpdate_resultStandardScheme getScheme() {
        return new reqUserPasswordUpdate_resultStandardScheme();
      }
    }

    private static class reqUserPasswordUpdate_resultStandardScheme extends StandardScheme<reqUserPasswordUpdate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqUserPasswordUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqUserPasswordUpdate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqUserPasswordUpdate_resultTupleSchemeFactory implements SchemeFactory {
      public reqUserPasswordUpdate_resultTupleScheme getScheme() {
        return new reqUserPasswordUpdate_resultTupleScheme();
      }
    }

    private static class reqUserPasswordUpdate_resultTupleScheme extends TupleScheme<reqUserPasswordUpdate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqUserPasswordUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqUserPasswordUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqTradingAccountPasswordUpdate_args implements org.apache.thrift.TBase<reqTradingAccountPasswordUpdate_args, reqTradingAccountPasswordUpdate_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqTradingAccountPasswordUpdate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqTradingAccountPasswordUpdate_args");

    private static final org.apache.thrift.protocol.TField P_TRADING_ACCOUNT_PASSWORD_UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("pTradingAccountPasswordUpdate", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqTradingAccountPasswordUpdate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqTradingAccountPasswordUpdate_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcTradingAccountPasswordUpdateField pTradingAccountPasswordUpdate; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_TRADING_ACCOUNT_PASSWORD_UPDATE((short)1, "pTradingAccountPasswordUpdate"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_TRADING_ACCOUNT_PASSWORD_UPDATE
            return P_TRADING_ACCOUNT_PASSWORD_UPDATE;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_TRADING_ACCOUNT_PASSWORD_UPDATE, new org.apache.thrift.meta_data.FieldMetaData("pTradingAccountPasswordUpdate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcTradingAccountPasswordUpdateField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqTradingAccountPasswordUpdate_args.class, metaDataMap);
    }

    public reqTradingAccountPasswordUpdate_args() {
    }

    public reqTradingAccountPasswordUpdate_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcTradingAccountPasswordUpdateField pTradingAccountPasswordUpdate,
      int nRequestID)
    {
      this();
      this.pTradingAccountPasswordUpdate = pTradingAccountPasswordUpdate;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqTradingAccountPasswordUpdate_args(reqTradingAccountPasswordUpdate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPTradingAccountPasswordUpdate()) {
        this.pTradingAccountPasswordUpdate = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcTradingAccountPasswordUpdateField(other.pTradingAccountPasswordUpdate);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqTradingAccountPasswordUpdate_args deepCopy() {
      return new reqTradingAccountPasswordUpdate_args(this);
    }

    @Override
    public void clear() {
      this.pTradingAccountPasswordUpdate = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcTradingAccountPasswordUpdateField getPTradingAccountPasswordUpdate() {
      return this.pTradingAccountPasswordUpdate;
    }

    public reqTradingAccountPasswordUpdate_args setPTradingAccountPasswordUpdate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcTradingAccountPasswordUpdateField pTradingAccountPasswordUpdate) {
      this.pTradingAccountPasswordUpdate = pTradingAccountPasswordUpdate;
      return this;
    }

    public void unsetPTradingAccountPasswordUpdate() {
      this.pTradingAccountPasswordUpdate = null;
    }

    /** Returns true if field pTradingAccountPasswordUpdate is set (has been assigned a value) and false otherwise */
    public boolean isSetPTradingAccountPasswordUpdate() {
      return this.pTradingAccountPasswordUpdate != null;
    }

    public void setPTradingAccountPasswordUpdateIsSet(boolean value) {
      if (!value) {
        this.pTradingAccountPasswordUpdate = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqTradingAccountPasswordUpdate_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_TRADING_ACCOUNT_PASSWORD_UPDATE:
        if (value == null) {
          unsetPTradingAccountPasswordUpdate();
        } else {
          setPTradingAccountPasswordUpdate((cn.kkworld.futuresservice.cmsTrade.CThostFtdcTradingAccountPasswordUpdateField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_TRADING_ACCOUNT_PASSWORD_UPDATE:
        return getPTradingAccountPasswordUpdate();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_TRADING_ACCOUNT_PASSWORD_UPDATE:
        return isSetPTradingAccountPasswordUpdate();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqTradingAccountPasswordUpdate_args)
        return this.equals((reqTradingAccountPasswordUpdate_args)that);
      return false;
    }

    public boolean equals(reqTradingAccountPasswordUpdate_args that) {
      if (that == null)
        return false;

      boolean this_present_pTradingAccountPasswordUpdate = true && this.isSetPTradingAccountPasswordUpdate();
      boolean that_present_pTradingAccountPasswordUpdate = true && that.isSetPTradingAccountPasswordUpdate();
      if (this_present_pTradingAccountPasswordUpdate || that_present_pTradingAccountPasswordUpdate) {
        if (!(this_present_pTradingAccountPasswordUpdate && that_present_pTradingAccountPasswordUpdate))
          return false;
        if (!this.pTradingAccountPasswordUpdate.equals(that.pTradingAccountPasswordUpdate))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqTradingAccountPasswordUpdate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPTradingAccountPasswordUpdate()).compareTo(other.isSetPTradingAccountPasswordUpdate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPTradingAccountPasswordUpdate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pTradingAccountPasswordUpdate, other.pTradingAccountPasswordUpdate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqTradingAccountPasswordUpdate_args(");
      boolean first = true;

      sb.append("pTradingAccountPasswordUpdate:");
      if (this.pTradingAccountPasswordUpdate == null) {
        sb.append("null");
      } else {
        sb.append(this.pTradingAccountPasswordUpdate);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pTradingAccountPasswordUpdate != null) {
        pTradingAccountPasswordUpdate.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqTradingAccountPasswordUpdate_argsStandardSchemeFactory implements SchemeFactory {
      public reqTradingAccountPasswordUpdate_argsStandardScheme getScheme() {
        return new reqTradingAccountPasswordUpdate_argsStandardScheme();
      }
    }

    private static class reqTradingAccountPasswordUpdate_argsStandardScheme extends StandardScheme<reqTradingAccountPasswordUpdate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqTradingAccountPasswordUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_TRADING_ACCOUNT_PASSWORD_UPDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pTradingAccountPasswordUpdate = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcTradingAccountPasswordUpdateField();
                struct.pTradingAccountPasswordUpdate.read(iprot);
                struct.setPTradingAccountPasswordUpdateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqTradingAccountPasswordUpdate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pTradingAccountPasswordUpdate != null) {
          oprot.writeFieldBegin(P_TRADING_ACCOUNT_PASSWORD_UPDATE_FIELD_DESC);
          struct.pTradingAccountPasswordUpdate.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqTradingAccountPasswordUpdate_argsTupleSchemeFactory implements SchemeFactory {
      public reqTradingAccountPasswordUpdate_argsTupleScheme getScheme() {
        return new reqTradingAccountPasswordUpdate_argsTupleScheme();
      }
    }

    private static class reqTradingAccountPasswordUpdate_argsTupleScheme extends TupleScheme<reqTradingAccountPasswordUpdate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqTradingAccountPasswordUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPTradingAccountPasswordUpdate()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPTradingAccountPasswordUpdate()) {
          struct.pTradingAccountPasswordUpdate.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqTradingAccountPasswordUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pTradingAccountPasswordUpdate = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcTradingAccountPasswordUpdateField();
          struct.pTradingAccountPasswordUpdate.read(iprot);
          struct.setPTradingAccountPasswordUpdateIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqTradingAccountPasswordUpdate_result implements org.apache.thrift.TBase<reqTradingAccountPasswordUpdate_result, reqTradingAccountPasswordUpdate_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqTradingAccountPasswordUpdate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqTradingAccountPasswordUpdate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqTradingAccountPasswordUpdate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqTradingAccountPasswordUpdate_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqTradingAccountPasswordUpdate_result.class, metaDataMap);
    }

    public reqTradingAccountPasswordUpdate_result() {
    }

    public reqTradingAccountPasswordUpdate_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqTradingAccountPasswordUpdate_result(reqTradingAccountPasswordUpdate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqTradingAccountPasswordUpdate_result deepCopy() {
      return new reqTradingAccountPasswordUpdate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqTradingAccountPasswordUpdate_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqTradingAccountPasswordUpdate_result)
        return this.equals((reqTradingAccountPasswordUpdate_result)that);
      return false;
    }

    public boolean equals(reqTradingAccountPasswordUpdate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqTradingAccountPasswordUpdate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqTradingAccountPasswordUpdate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqTradingAccountPasswordUpdate_resultStandardSchemeFactory implements SchemeFactory {
      public reqTradingAccountPasswordUpdate_resultStandardScheme getScheme() {
        return new reqTradingAccountPasswordUpdate_resultStandardScheme();
      }
    }

    private static class reqTradingAccountPasswordUpdate_resultStandardScheme extends StandardScheme<reqTradingAccountPasswordUpdate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqTradingAccountPasswordUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqTradingAccountPasswordUpdate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqTradingAccountPasswordUpdate_resultTupleSchemeFactory implements SchemeFactory {
      public reqTradingAccountPasswordUpdate_resultTupleScheme getScheme() {
        return new reqTradingAccountPasswordUpdate_resultTupleScheme();
      }
    }

    private static class reqTradingAccountPasswordUpdate_resultTupleScheme extends TupleScheme<reqTradingAccountPasswordUpdate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqTradingAccountPasswordUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqTradingAccountPasswordUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqOrderInsert_args implements org.apache.thrift.TBase<reqOrderInsert_args, reqOrderInsert_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqOrderInsert_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqOrderInsert_args");

    private static final org.apache.thrift.protocol.TField P_INPUT_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("pInputOrder", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqOrderInsert_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqOrderInsert_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderField pInputOrder; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_INPUT_ORDER((short)1, "pInputOrder"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_INPUT_ORDER
            return P_INPUT_ORDER;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_INPUT_ORDER, new org.apache.thrift.meta_data.FieldMetaData("pInputOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqOrderInsert_args.class, metaDataMap);
    }

    public reqOrderInsert_args() {
    }

    public reqOrderInsert_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderField pInputOrder,
      int nRequestID)
    {
      this();
      this.pInputOrder = pInputOrder;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqOrderInsert_args(reqOrderInsert_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPInputOrder()) {
        this.pInputOrder = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderField(other.pInputOrder);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqOrderInsert_args deepCopy() {
      return new reqOrderInsert_args(this);
    }

    @Override
    public void clear() {
      this.pInputOrder = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderField getPInputOrder() {
      return this.pInputOrder;
    }

    public reqOrderInsert_args setPInputOrder(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderField pInputOrder) {
      this.pInputOrder = pInputOrder;
      return this;
    }

    public void unsetPInputOrder() {
      this.pInputOrder = null;
    }

    /** Returns true if field pInputOrder is set (has been assigned a value) and false otherwise */
    public boolean isSetPInputOrder() {
      return this.pInputOrder != null;
    }

    public void setPInputOrderIsSet(boolean value) {
      if (!value) {
        this.pInputOrder = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqOrderInsert_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_INPUT_ORDER:
        if (value == null) {
          unsetPInputOrder();
        } else {
          setPInputOrder((cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_INPUT_ORDER:
        return getPInputOrder();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_INPUT_ORDER:
        return isSetPInputOrder();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqOrderInsert_args)
        return this.equals((reqOrderInsert_args)that);
      return false;
    }

    public boolean equals(reqOrderInsert_args that) {
      if (that == null)
        return false;

      boolean this_present_pInputOrder = true && this.isSetPInputOrder();
      boolean that_present_pInputOrder = true && that.isSetPInputOrder();
      if (this_present_pInputOrder || that_present_pInputOrder) {
        if (!(this_present_pInputOrder && that_present_pInputOrder))
          return false;
        if (!this.pInputOrder.equals(that.pInputOrder))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqOrderInsert_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPInputOrder()).compareTo(other.isSetPInputOrder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPInputOrder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pInputOrder, other.pInputOrder);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqOrderInsert_args(");
      boolean first = true;

      sb.append("pInputOrder:");
      if (this.pInputOrder == null) {
        sb.append("null");
      } else {
        sb.append(this.pInputOrder);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pInputOrder != null) {
        pInputOrder.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqOrderInsert_argsStandardSchemeFactory implements SchemeFactory {
      public reqOrderInsert_argsStandardScheme getScheme() {
        return new reqOrderInsert_argsStandardScheme();
      }
    }

    private static class reqOrderInsert_argsStandardScheme extends StandardScheme<reqOrderInsert_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqOrderInsert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_INPUT_ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pInputOrder = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderField();
                struct.pInputOrder.read(iprot);
                struct.setPInputOrderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqOrderInsert_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pInputOrder != null) {
          oprot.writeFieldBegin(P_INPUT_ORDER_FIELD_DESC);
          struct.pInputOrder.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqOrderInsert_argsTupleSchemeFactory implements SchemeFactory {
      public reqOrderInsert_argsTupleScheme getScheme() {
        return new reqOrderInsert_argsTupleScheme();
      }
    }

    private static class reqOrderInsert_argsTupleScheme extends TupleScheme<reqOrderInsert_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqOrderInsert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPInputOrder()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPInputOrder()) {
          struct.pInputOrder.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqOrderInsert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pInputOrder = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderField();
          struct.pInputOrder.read(iprot);
          struct.setPInputOrderIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqOrderInsert_result implements org.apache.thrift.TBase<reqOrderInsert_result, reqOrderInsert_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqOrderInsert_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqOrderInsert_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqOrderInsert_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqOrderInsert_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqOrderInsert_result.class, metaDataMap);
    }

    public reqOrderInsert_result() {
    }

    public reqOrderInsert_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqOrderInsert_result(reqOrderInsert_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqOrderInsert_result deepCopy() {
      return new reqOrderInsert_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqOrderInsert_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqOrderInsert_result)
        return this.equals((reqOrderInsert_result)that);
      return false;
    }

    public boolean equals(reqOrderInsert_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqOrderInsert_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqOrderInsert_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqOrderInsert_resultStandardSchemeFactory implements SchemeFactory {
      public reqOrderInsert_resultStandardScheme getScheme() {
        return new reqOrderInsert_resultStandardScheme();
      }
    }

    private static class reqOrderInsert_resultStandardScheme extends StandardScheme<reqOrderInsert_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqOrderInsert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqOrderInsert_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqOrderInsert_resultTupleSchemeFactory implements SchemeFactory {
      public reqOrderInsert_resultTupleScheme getScheme() {
        return new reqOrderInsert_resultTupleScheme();
      }
    }

    private static class reqOrderInsert_resultTupleScheme extends TupleScheme<reqOrderInsert_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqOrderInsert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqOrderInsert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqParkedOrderInsert_args implements org.apache.thrift.TBase<reqParkedOrderInsert_args, reqParkedOrderInsert_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqParkedOrderInsert_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqParkedOrderInsert_args");

    private static final org.apache.thrift.protocol.TField P_PARKED_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("pParkedOrder", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqParkedOrderInsert_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqParkedOrderInsert_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderField pParkedOrder; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_PARKED_ORDER((short)1, "pParkedOrder"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_PARKED_ORDER
            return P_PARKED_ORDER;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_PARKED_ORDER, new org.apache.thrift.meta_data.FieldMetaData("pParkedOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqParkedOrderInsert_args.class, metaDataMap);
    }

    public reqParkedOrderInsert_args() {
    }

    public reqParkedOrderInsert_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderField pParkedOrder,
      int nRequestID)
    {
      this();
      this.pParkedOrder = pParkedOrder;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqParkedOrderInsert_args(reqParkedOrderInsert_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPParkedOrder()) {
        this.pParkedOrder = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderField(other.pParkedOrder);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqParkedOrderInsert_args deepCopy() {
      return new reqParkedOrderInsert_args(this);
    }

    @Override
    public void clear() {
      this.pParkedOrder = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderField getPParkedOrder() {
      return this.pParkedOrder;
    }

    public reqParkedOrderInsert_args setPParkedOrder(cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderField pParkedOrder) {
      this.pParkedOrder = pParkedOrder;
      return this;
    }

    public void unsetPParkedOrder() {
      this.pParkedOrder = null;
    }

    /** Returns true if field pParkedOrder is set (has been assigned a value) and false otherwise */
    public boolean isSetPParkedOrder() {
      return this.pParkedOrder != null;
    }

    public void setPParkedOrderIsSet(boolean value) {
      if (!value) {
        this.pParkedOrder = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqParkedOrderInsert_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_PARKED_ORDER:
        if (value == null) {
          unsetPParkedOrder();
        } else {
          setPParkedOrder((cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_PARKED_ORDER:
        return getPParkedOrder();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_PARKED_ORDER:
        return isSetPParkedOrder();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqParkedOrderInsert_args)
        return this.equals((reqParkedOrderInsert_args)that);
      return false;
    }

    public boolean equals(reqParkedOrderInsert_args that) {
      if (that == null)
        return false;

      boolean this_present_pParkedOrder = true && this.isSetPParkedOrder();
      boolean that_present_pParkedOrder = true && that.isSetPParkedOrder();
      if (this_present_pParkedOrder || that_present_pParkedOrder) {
        if (!(this_present_pParkedOrder && that_present_pParkedOrder))
          return false;
        if (!this.pParkedOrder.equals(that.pParkedOrder))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqParkedOrderInsert_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPParkedOrder()).compareTo(other.isSetPParkedOrder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPParkedOrder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pParkedOrder, other.pParkedOrder);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqParkedOrderInsert_args(");
      boolean first = true;

      sb.append("pParkedOrder:");
      if (this.pParkedOrder == null) {
        sb.append("null");
      } else {
        sb.append(this.pParkedOrder);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pParkedOrder != null) {
        pParkedOrder.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqParkedOrderInsert_argsStandardSchemeFactory implements SchemeFactory {
      public reqParkedOrderInsert_argsStandardScheme getScheme() {
        return new reqParkedOrderInsert_argsStandardScheme();
      }
    }

    private static class reqParkedOrderInsert_argsStandardScheme extends StandardScheme<reqParkedOrderInsert_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqParkedOrderInsert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_PARKED_ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pParkedOrder = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderField();
                struct.pParkedOrder.read(iprot);
                struct.setPParkedOrderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqParkedOrderInsert_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pParkedOrder != null) {
          oprot.writeFieldBegin(P_PARKED_ORDER_FIELD_DESC);
          struct.pParkedOrder.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqParkedOrderInsert_argsTupleSchemeFactory implements SchemeFactory {
      public reqParkedOrderInsert_argsTupleScheme getScheme() {
        return new reqParkedOrderInsert_argsTupleScheme();
      }
    }

    private static class reqParkedOrderInsert_argsTupleScheme extends TupleScheme<reqParkedOrderInsert_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqParkedOrderInsert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPParkedOrder()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPParkedOrder()) {
          struct.pParkedOrder.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqParkedOrderInsert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pParkedOrder = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderField();
          struct.pParkedOrder.read(iprot);
          struct.setPParkedOrderIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqParkedOrderInsert_result implements org.apache.thrift.TBase<reqParkedOrderInsert_result, reqParkedOrderInsert_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqParkedOrderInsert_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqParkedOrderInsert_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqParkedOrderInsert_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqParkedOrderInsert_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqParkedOrderInsert_result.class, metaDataMap);
    }

    public reqParkedOrderInsert_result() {
    }

    public reqParkedOrderInsert_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqParkedOrderInsert_result(reqParkedOrderInsert_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqParkedOrderInsert_result deepCopy() {
      return new reqParkedOrderInsert_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqParkedOrderInsert_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqParkedOrderInsert_result)
        return this.equals((reqParkedOrderInsert_result)that);
      return false;
    }

    public boolean equals(reqParkedOrderInsert_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqParkedOrderInsert_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqParkedOrderInsert_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqParkedOrderInsert_resultStandardSchemeFactory implements SchemeFactory {
      public reqParkedOrderInsert_resultStandardScheme getScheme() {
        return new reqParkedOrderInsert_resultStandardScheme();
      }
    }

    private static class reqParkedOrderInsert_resultStandardScheme extends StandardScheme<reqParkedOrderInsert_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqParkedOrderInsert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqParkedOrderInsert_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqParkedOrderInsert_resultTupleSchemeFactory implements SchemeFactory {
      public reqParkedOrderInsert_resultTupleScheme getScheme() {
        return new reqParkedOrderInsert_resultTupleScheme();
      }
    }

    private static class reqParkedOrderInsert_resultTupleScheme extends TupleScheme<reqParkedOrderInsert_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqParkedOrderInsert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqParkedOrderInsert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqParkedOrderAction_args implements org.apache.thrift.TBase<reqParkedOrderAction_args, reqParkedOrderAction_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqParkedOrderAction_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqParkedOrderAction_args");

    private static final org.apache.thrift.protocol.TField P_PARKED_ORDER_ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("pParkedOrderAction", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqParkedOrderAction_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqParkedOrderAction_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderActionField pParkedOrderAction; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_PARKED_ORDER_ACTION((short)1, "pParkedOrderAction"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_PARKED_ORDER_ACTION
            return P_PARKED_ORDER_ACTION;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_PARKED_ORDER_ACTION, new org.apache.thrift.meta_data.FieldMetaData("pParkedOrderAction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderActionField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqParkedOrderAction_args.class, metaDataMap);
    }

    public reqParkedOrderAction_args() {
    }

    public reqParkedOrderAction_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderActionField pParkedOrderAction,
      int nRequestID)
    {
      this();
      this.pParkedOrderAction = pParkedOrderAction;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqParkedOrderAction_args(reqParkedOrderAction_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPParkedOrderAction()) {
        this.pParkedOrderAction = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderActionField(other.pParkedOrderAction);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqParkedOrderAction_args deepCopy() {
      return new reqParkedOrderAction_args(this);
    }

    @Override
    public void clear() {
      this.pParkedOrderAction = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderActionField getPParkedOrderAction() {
      return this.pParkedOrderAction;
    }

    public reqParkedOrderAction_args setPParkedOrderAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderActionField pParkedOrderAction) {
      this.pParkedOrderAction = pParkedOrderAction;
      return this;
    }

    public void unsetPParkedOrderAction() {
      this.pParkedOrderAction = null;
    }

    /** Returns true if field pParkedOrderAction is set (has been assigned a value) and false otherwise */
    public boolean isSetPParkedOrderAction() {
      return this.pParkedOrderAction != null;
    }

    public void setPParkedOrderActionIsSet(boolean value) {
      if (!value) {
        this.pParkedOrderAction = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqParkedOrderAction_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_PARKED_ORDER_ACTION:
        if (value == null) {
          unsetPParkedOrderAction();
        } else {
          setPParkedOrderAction((cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderActionField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_PARKED_ORDER_ACTION:
        return getPParkedOrderAction();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_PARKED_ORDER_ACTION:
        return isSetPParkedOrderAction();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqParkedOrderAction_args)
        return this.equals((reqParkedOrderAction_args)that);
      return false;
    }

    public boolean equals(reqParkedOrderAction_args that) {
      if (that == null)
        return false;

      boolean this_present_pParkedOrderAction = true && this.isSetPParkedOrderAction();
      boolean that_present_pParkedOrderAction = true && that.isSetPParkedOrderAction();
      if (this_present_pParkedOrderAction || that_present_pParkedOrderAction) {
        if (!(this_present_pParkedOrderAction && that_present_pParkedOrderAction))
          return false;
        if (!this.pParkedOrderAction.equals(that.pParkedOrderAction))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqParkedOrderAction_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPParkedOrderAction()).compareTo(other.isSetPParkedOrderAction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPParkedOrderAction()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pParkedOrderAction, other.pParkedOrderAction);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqParkedOrderAction_args(");
      boolean first = true;

      sb.append("pParkedOrderAction:");
      if (this.pParkedOrderAction == null) {
        sb.append("null");
      } else {
        sb.append(this.pParkedOrderAction);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pParkedOrderAction != null) {
        pParkedOrderAction.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqParkedOrderAction_argsStandardSchemeFactory implements SchemeFactory {
      public reqParkedOrderAction_argsStandardScheme getScheme() {
        return new reqParkedOrderAction_argsStandardScheme();
      }
    }

    private static class reqParkedOrderAction_argsStandardScheme extends StandardScheme<reqParkedOrderAction_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqParkedOrderAction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_PARKED_ORDER_ACTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pParkedOrderAction = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderActionField();
                struct.pParkedOrderAction.read(iprot);
                struct.setPParkedOrderActionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqParkedOrderAction_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pParkedOrderAction != null) {
          oprot.writeFieldBegin(P_PARKED_ORDER_ACTION_FIELD_DESC);
          struct.pParkedOrderAction.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqParkedOrderAction_argsTupleSchemeFactory implements SchemeFactory {
      public reqParkedOrderAction_argsTupleScheme getScheme() {
        return new reqParkedOrderAction_argsTupleScheme();
      }
    }

    private static class reqParkedOrderAction_argsTupleScheme extends TupleScheme<reqParkedOrderAction_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqParkedOrderAction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPParkedOrderAction()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPParkedOrderAction()) {
          struct.pParkedOrderAction.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqParkedOrderAction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pParkedOrderAction = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcParkedOrderActionField();
          struct.pParkedOrderAction.read(iprot);
          struct.setPParkedOrderActionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqParkedOrderAction_result implements org.apache.thrift.TBase<reqParkedOrderAction_result, reqParkedOrderAction_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqParkedOrderAction_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqParkedOrderAction_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqParkedOrderAction_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqParkedOrderAction_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqParkedOrderAction_result.class, metaDataMap);
    }

    public reqParkedOrderAction_result() {
    }

    public reqParkedOrderAction_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqParkedOrderAction_result(reqParkedOrderAction_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqParkedOrderAction_result deepCopy() {
      return new reqParkedOrderAction_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqParkedOrderAction_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqParkedOrderAction_result)
        return this.equals((reqParkedOrderAction_result)that);
      return false;
    }

    public boolean equals(reqParkedOrderAction_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqParkedOrderAction_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqParkedOrderAction_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqParkedOrderAction_resultStandardSchemeFactory implements SchemeFactory {
      public reqParkedOrderAction_resultStandardScheme getScheme() {
        return new reqParkedOrderAction_resultStandardScheme();
      }
    }

    private static class reqParkedOrderAction_resultStandardScheme extends StandardScheme<reqParkedOrderAction_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqParkedOrderAction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqParkedOrderAction_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqParkedOrderAction_resultTupleSchemeFactory implements SchemeFactory {
      public reqParkedOrderAction_resultTupleScheme getScheme() {
        return new reqParkedOrderAction_resultTupleScheme();
      }
    }

    private static class reqParkedOrderAction_resultTupleScheme extends TupleScheme<reqParkedOrderAction_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqParkedOrderAction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqParkedOrderAction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqOrderAction_args implements org.apache.thrift.TBase<reqOrderAction_args, reqOrderAction_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqOrderAction_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqOrderAction_args");

    private static final org.apache.thrift.protocol.TField P_INPUT_ORDER_ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("pInputOrderAction", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqOrderAction_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqOrderAction_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderActionField pInputOrderAction; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_INPUT_ORDER_ACTION((short)1, "pInputOrderAction"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_INPUT_ORDER_ACTION
            return P_INPUT_ORDER_ACTION;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_INPUT_ORDER_ACTION, new org.apache.thrift.meta_data.FieldMetaData("pInputOrderAction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderActionField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqOrderAction_args.class, metaDataMap);
    }

    public reqOrderAction_args() {
    }

    public reqOrderAction_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderActionField pInputOrderAction,
      int nRequestID)
    {
      this();
      this.pInputOrderAction = pInputOrderAction;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqOrderAction_args(reqOrderAction_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPInputOrderAction()) {
        this.pInputOrderAction = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderActionField(other.pInputOrderAction);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqOrderAction_args deepCopy() {
      return new reqOrderAction_args(this);
    }

    @Override
    public void clear() {
      this.pInputOrderAction = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderActionField getPInputOrderAction() {
      return this.pInputOrderAction;
    }

    public reqOrderAction_args setPInputOrderAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderActionField pInputOrderAction) {
      this.pInputOrderAction = pInputOrderAction;
      return this;
    }

    public void unsetPInputOrderAction() {
      this.pInputOrderAction = null;
    }

    /** Returns true if field pInputOrderAction is set (has been assigned a value) and false otherwise */
    public boolean isSetPInputOrderAction() {
      return this.pInputOrderAction != null;
    }

    public void setPInputOrderActionIsSet(boolean value) {
      if (!value) {
        this.pInputOrderAction = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqOrderAction_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_INPUT_ORDER_ACTION:
        if (value == null) {
          unsetPInputOrderAction();
        } else {
          setPInputOrderAction((cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderActionField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_INPUT_ORDER_ACTION:
        return getPInputOrderAction();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_INPUT_ORDER_ACTION:
        return isSetPInputOrderAction();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqOrderAction_args)
        return this.equals((reqOrderAction_args)that);
      return false;
    }

    public boolean equals(reqOrderAction_args that) {
      if (that == null)
        return false;

      boolean this_present_pInputOrderAction = true && this.isSetPInputOrderAction();
      boolean that_present_pInputOrderAction = true && that.isSetPInputOrderAction();
      if (this_present_pInputOrderAction || that_present_pInputOrderAction) {
        if (!(this_present_pInputOrderAction && that_present_pInputOrderAction))
          return false;
        if (!this.pInputOrderAction.equals(that.pInputOrderAction))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqOrderAction_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPInputOrderAction()).compareTo(other.isSetPInputOrderAction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPInputOrderAction()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pInputOrderAction, other.pInputOrderAction);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqOrderAction_args(");
      boolean first = true;

      sb.append("pInputOrderAction:");
      if (this.pInputOrderAction == null) {
        sb.append("null");
      } else {
        sb.append(this.pInputOrderAction);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pInputOrderAction != null) {
        pInputOrderAction.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqOrderAction_argsStandardSchemeFactory implements SchemeFactory {
      public reqOrderAction_argsStandardScheme getScheme() {
        return new reqOrderAction_argsStandardScheme();
      }
    }

    private static class reqOrderAction_argsStandardScheme extends StandardScheme<reqOrderAction_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqOrderAction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_INPUT_ORDER_ACTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pInputOrderAction = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderActionField();
                struct.pInputOrderAction.read(iprot);
                struct.setPInputOrderActionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqOrderAction_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pInputOrderAction != null) {
          oprot.writeFieldBegin(P_INPUT_ORDER_ACTION_FIELD_DESC);
          struct.pInputOrderAction.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqOrderAction_argsTupleSchemeFactory implements SchemeFactory {
      public reqOrderAction_argsTupleScheme getScheme() {
        return new reqOrderAction_argsTupleScheme();
      }
    }

    private static class reqOrderAction_argsTupleScheme extends TupleScheme<reqOrderAction_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqOrderAction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPInputOrderAction()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPInputOrderAction()) {
          struct.pInputOrderAction.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqOrderAction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pInputOrderAction = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputOrderActionField();
          struct.pInputOrderAction.read(iprot);
          struct.setPInputOrderActionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqOrderAction_result implements org.apache.thrift.TBase<reqOrderAction_result, reqOrderAction_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqOrderAction_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqOrderAction_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqOrderAction_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqOrderAction_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqOrderAction_result.class, metaDataMap);
    }

    public reqOrderAction_result() {
    }

    public reqOrderAction_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqOrderAction_result(reqOrderAction_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqOrderAction_result deepCopy() {
      return new reqOrderAction_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqOrderAction_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqOrderAction_result)
        return this.equals((reqOrderAction_result)that);
      return false;
    }

    public boolean equals(reqOrderAction_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqOrderAction_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqOrderAction_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqOrderAction_resultStandardSchemeFactory implements SchemeFactory {
      public reqOrderAction_resultStandardScheme getScheme() {
        return new reqOrderAction_resultStandardScheme();
      }
    }

    private static class reqOrderAction_resultStandardScheme extends StandardScheme<reqOrderAction_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqOrderAction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqOrderAction_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqOrderAction_resultTupleSchemeFactory implements SchemeFactory {
      public reqOrderAction_resultTupleScheme getScheme() {
        return new reqOrderAction_resultTupleScheme();
      }
    }

    private static class reqOrderAction_resultTupleScheme extends TupleScheme<reqOrderAction_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqOrderAction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqOrderAction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQueryMaxOrderVolume_args implements org.apache.thrift.TBase<reqQueryMaxOrderVolume_args, reqQueryMaxOrderVolume_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQueryMaxOrderVolume_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQueryMaxOrderVolume_args");

    private static final org.apache.thrift.protocol.TField P_QUERY_MAX_ORDER_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("pQueryMaxOrderVolume", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQueryMaxOrderVolume_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQueryMaxOrderVolume_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryMaxOrderVolumeField pQueryMaxOrderVolume; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QUERY_MAX_ORDER_VOLUME((short)1, "pQueryMaxOrderVolume"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QUERY_MAX_ORDER_VOLUME
            return P_QUERY_MAX_ORDER_VOLUME;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QUERY_MAX_ORDER_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("pQueryMaxOrderVolume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryMaxOrderVolumeField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQueryMaxOrderVolume_args.class, metaDataMap);
    }

    public reqQueryMaxOrderVolume_args() {
    }

    public reqQueryMaxOrderVolume_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryMaxOrderVolumeField pQueryMaxOrderVolume,
      int nRequestID)
    {
      this();
      this.pQueryMaxOrderVolume = pQueryMaxOrderVolume;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQueryMaxOrderVolume_args(reqQueryMaxOrderVolume_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQueryMaxOrderVolume()) {
        this.pQueryMaxOrderVolume = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryMaxOrderVolumeField(other.pQueryMaxOrderVolume);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQueryMaxOrderVolume_args deepCopy() {
      return new reqQueryMaxOrderVolume_args(this);
    }

    @Override
    public void clear() {
      this.pQueryMaxOrderVolume = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryMaxOrderVolumeField getPQueryMaxOrderVolume() {
      return this.pQueryMaxOrderVolume;
    }

    public reqQueryMaxOrderVolume_args setPQueryMaxOrderVolume(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryMaxOrderVolumeField pQueryMaxOrderVolume) {
      this.pQueryMaxOrderVolume = pQueryMaxOrderVolume;
      return this;
    }

    public void unsetPQueryMaxOrderVolume() {
      this.pQueryMaxOrderVolume = null;
    }

    /** Returns true if field pQueryMaxOrderVolume is set (has been assigned a value) and false otherwise */
    public boolean isSetPQueryMaxOrderVolume() {
      return this.pQueryMaxOrderVolume != null;
    }

    public void setPQueryMaxOrderVolumeIsSet(boolean value) {
      if (!value) {
        this.pQueryMaxOrderVolume = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQueryMaxOrderVolume_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QUERY_MAX_ORDER_VOLUME:
        if (value == null) {
          unsetPQueryMaxOrderVolume();
        } else {
          setPQueryMaxOrderVolume((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryMaxOrderVolumeField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QUERY_MAX_ORDER_VOLUME:
        return getPQueryMaxOrderVolume();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QUERY_MAX_ORDER_VOLUME:
        return isSetPQueryMaxOrderVolume();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQueryMaxOrderVolume_args)
        return this.equals((reqQueryMaxOrderVolume_args)that);
      return false;
    }

    public boolean equals(reqQueryMaxOrderVolume_args that) {
      if (that == null)
        return false;

      boolean this_present_pQueryMaxOrderVolume = true && this.isSetPQueryMaxOrderVolume();
      boolean that_present_pQueryMaxOrderVolume = true && that.isSetPQueryMaxOrderVolume();
      if (this_present_pQueryMaxOrderVolume || that_present_pQueryMaxOrderVolume) {
        if (!(this_present_pQueryMaxOrderVolume && that_present_pQueryMaxOrderVolume))
          return false;
        if (!this.pQueryMaxOrderVolume.equals(that.pQueryMaxOrderVolume))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQueryMaxOrderVolume_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQueryMaxOrderVolume()).compareTo(other.isSetPQueryMaxOrderVolume());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQueryMaxOrderVolume()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQueryMaxOrderVolume, other.pQueryMaxOrderVolume);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQueryMaxOrderVolume_args(");
      boolean first = true;

      sb.append("pQueryMaxOrderVolume:");
      if (this.pQueryMaxOrderVolume == null) {
        sb.append("null");
      } else {
        sb.append(this.pQueryMaxOrderVolume);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQueryMaxOrderVolume != null) {
        pQueryMaxOrderVolume.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQueryMaxOrderVolume_argsStandardSchemeFactory implements SchemeFactory {
      public reqQueryMaxOrderVolume_argsStandardScheme getScheme() {
        return new reqQueryMaxOrderVolume_argsStandardScheme();
      }
    }

    private static class reqQueryMaxOrderVolume_argsStandardScheme extends StandardScheme<reqQueryMaxOrderVolume_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQueryMaxOrderVolume_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QUERY_MAX_ORDER_VOLUME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQueryMaxOrderVolume = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryMaxOrderVolumeField();
                struct.pQueryMaxOrderVolume.read(iprot);
                struct.setPQueryMaxOrderVolumeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQueryMaxOrderVolume_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQueryMaxOrderVolume != null) {
          oprot.writeFieldBegin(P_QUERY_MAX_ORDER_VOLUME_FIELD_DESC);
          struct.pQueryMaxOrderVolume.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQueryMaxOrderVolume_argsTupleSchemeFactory implements SchemeFactory {
      public reqQueryMaxOrderVolume_argsTupleScheme getScheme() {
        return new reqQueryMaxOrderVolume_argsTupleScheme();
      }
    }

    private static class reqQueryMaxOrderVolume_argsTupleScheme extends TupleScheme<reqQueryMaxOrderVolume_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQueryMaxOrderVolume_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQueryMaxOrderVolume()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQueryMaxOrderVolume()) {
          struct.pQueryMaxOrderVolume.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQueryMaxOrderVolume_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQueryMaxOrderVolume = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQueryMaxOrderVolumeField();
          struct.pQueryMaxOrderVolume.read(iprot);
          struct.setPQueryMaxOrderVolumeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQueryMaxOrderVolume_result implements org.apache.thrift.TBase<reqQueryMaxOrderVolume_result, reqQueryMaxOrderVolume_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQueryMaxOrderVolume_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQueryMaxOrderVolume_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQueryMaxOrderVolume_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQueryMaxOrderVolume_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQueryMaxOrderVolume_result.class, metaDataMap);
    }

    public reqQueryMaxOrderVolume_result() {
    }

    public reqQueryMaxOrderVolume_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQueryMaxOrderVolume_result(reqQueryMaxOrderVolume_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQueryMaxOrderVolume_result deepCopy() {
      return new reqQueryMaxOrderVolume_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQueryMaxOrderVolume_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQueryMaxOrderVolume_result)
        return this.equals((reqQueryMaxOrderVolume_result)that);
      return false;
    }

    public boolean equals(reqQueryMaxOrderVolume_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQueryMaxOrderVolume_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQueryMaxOrderVolume_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQueryMaxOrderVolume_resultStandardSchemeFactory implements SchemeFactory {
      public reqQueryMaxOrderVolume_resultStandardScheme getScheme() {
        return new reqQueryMaxOrderVolume_resultStandardScheme();
      }
    }

    private static class reqQueryMaxOrderVolume_resultStandardScheme extends StandardScheme<reqQueryMaxOrderVolume_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQueryMaxOrderVolume_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQueryMaxOrderVolume_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQueryMaxOrderVolume_resultTupleSchemeFactory implements SchemeFactory {
      public reqQueryMaxOrderVolume_resultTupleScheme getScheme() {
        return new reqQueryMaxOrderVolume_resultTupleScheme();
      }
    }

    private static class reqQueryMaxOrderVolume_resultTupleScheme extends TupleScheme<reqQueryMaxOrderVolume_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQueryMaxOrderVolume_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQueryMaxOrderVolume_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqSettlementInfoConfirm_args implements org.apache.thrift.TBase<reqSettlementInfoConfirm_args, reqSettlementInfoConfirm_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqSettlementInfoConfirm_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqSettlementInfoConfirm_args");

    private static final org.apache.thrift.protocol.TField P_SETTLEMENT_INFO_CONFIRM_FIELD_DESC = new org.apache.thrift.protocol.TField("pSettlementInfoConfirm", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqSettlementInfoConfirm_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqSettlementInfoConfirm_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcSettlementInfoConfirmField pSettlementInfoConfirm; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_SETTLEMENT_INFO_CONFIRM((short)1, "pSettlementInfoConfirm"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_SETTLEMENT_INFO_CONFIRM
            return P_SETTLEMENT_INFO_CONFIRM;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_SETTLEMENT_INFO_CONFIRM, new org.apache.thrift.meta_data.FieldMetaData("pSettlementInfoConfirm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcSettlementInfoConfirmField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqSettlementInfoConfirm_args.class, metaDataMap);
    }

    public reqSettlementInfoConfirm_args() {
    }

    public reqSettlementInfoConfirm_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcSettlementInfoConfirmField pSettlementInfoConfirm,
      int nRequestID)
    {
      this();
      this.pSettlementInfoConfirm = pSettlementInfoConfirm;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqSettlementInfoConfirm_args(reqSettlementInfoConfirm_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPSettlementInfoConfirm()) {
        this.pSettlementInfoConfirm = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcSettlementInfoConfirmField(other.pSettlementInfoConfirm);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqSettlementInfoConfirm_args deepCopy() {
      return new reqSettlementInfoConfirm_args(this);
    }

    @Override
    public void clear() {
      this.pSettlementInfoConfirm = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcSettlementInfoConfirmField getPSettlementInfoConfirm() {
      return this.pSettlementInfoConfirm;
    }

    public reqSettlementInfoConfirm_args setPSettlementInfoConfirm(cn.kkworld.futuresservice.cmsTrade.CThostFtdcSettlementInfoConfirmField pSettlementInfoConfirm) {
      this.pSettlementInfoConfirm = pSettlementInfoConfirm;
      return this;
    }

    public void unsetPSettlementInfoConfirm() {
      this.pSettlementInfoConfirm = null;
    }

    /** Returns true if field pSettlementInfoConfirm is set (has been assigned a value) and false otherwise */
    public boolean isSetPSettlementInfoConfirm() {
      return this.pSettlementInfoConfirm != null;
    }

    public void setPSettlementInfoConfirmIsSet(boolean value) {
      if (!value) {
        this.pSettlementInfoConfirm = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqSettlementInfoConfirm_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_SETTLEMENT_INFO_CONFIRM:
        if (value == null) {
          unsetPSettlementInfoConfirm();
        } else {
          setPSettlementInfoConfirm((cn.kkworld.futuresservice.cmsTrade.CThostFtdcSettlementInfoConfirmField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_SETTLEMENT_INFO_CONFIRM:
        return getPSettlementInfoConfirm();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_SETTLEMENT_INFO_CONFIRM:
        return isSetPSettlementInfoConfirm();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqSettlementInfoConfirm_args)
        return this.equals((reqSettlementInfoConfirm_args)that);
      return false;
    }

    public boolean equals(reqSettlementInfoConfirm_args that) {
      if (that == null)
        return false;

      boolean this_present_pSettlementInfoConfirm = true && this.isSetPSettlementInfoConfirm();
      boolean that_present_pSettlementInfoConfirm = true && that.isSetPSettlementInfoConfirm();
      if (this_present_pSettlementInfoConfirm || that_present_pSettlementInfoConfirm) {
        if (!(this_present_pSettlementInfoConfirm && that_present_pSettlementInfoConfirm))
          return false;
        if (!this.pSettlementInfoConfirm.equals(that.pSettlementInfoConfirm))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqSettlementInfoConfirm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPSettlementInfoConfirm()).compareTo(other.isSetPSettlementInfoConfirm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPSettlementInfoConfirm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pSettlementInfoConfirm, other.pSettlementInfoConfirm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqSettlementInfoConfirm_args(");
      boolean first = true;

      sb.append("pSettlementInfoConfirm:");
      if (this.pSettlementInfoConfirm == null) {
        sb.append("null");
      } else {
        sb.append(this.pSettlementInfoConfirm);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pSettlementInfoConfirm != null) {
        pSettlementInfoConfirm.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqSettlementInfoConfirm_argsStandardSchemeFactory implements SchemeFactory {
      public reqSettlementInfoConfirm_argsStandardScheme getScheme() {
        return new reqSettlementInfoConfirm_argsStandardScheme();
      }
    }

    private static class reqSettlementInfoConfirm_argsStandardScheme extends StandardScheme<reqSettlementInfoConfirm_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqSettlementInfoConfirm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_SETTLEMENT_INFO_CONFIRM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pSettlementInfoConfirm = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcSettlementInfoConfirmField();
                struct.pSettlementInfoConfirm.read(iprot);
                struct.setPSettlementInfoConfirmIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqSettlementInfoConfirm_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pSettlementInfoConfirm != null) {
          oprot.writeFieldBegin(P_SETTLEMENT_INFO_CONFIRM_FIELD_DESC);
          struct.pSettlementInfoConfirm.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqSettlementInfoConfirm_argsTupleSchemeFactory implements SchemeFactory {
      public reqSettlementInfoConfirm_argsTupleScheme getScheme() {
        return new reqSettlementInfoConfirm_argsTupleScheme();
      }
    }

    private static class reqSettlementInfoConfirm_argsTupleScheme extends TupleScheme<reqSettlementInfoConfirm_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqSettlementInfoConfirm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPSettlementInfoConfirm()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPSettlementInfoConfirm()) {
          struct.pSettlementInfoConfirm.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqSettlementInfoConfirm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pSettlementInfoConfirm = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcSettlementInfoConfirmField();
          struct.pSettlementInfoConfirm.read(iprot);
          struct.setPSettlementInfoConfirmIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqSettlementInfoConfirm_result implements org.apache.thrift.TBase<reqSettlementInfoConfirm_result, reqSettlementInfoConfirm_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqSettlementInfoConfirm_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqSettlementInfoConfirm_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqSettlementInfoConfirm_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqSettlementInfoConfirm_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqSettlementInfoConfirm_result.class, metaDataMap);
    }

    public reqSettlementInfoConfirm_result() {
    }

    public reqSettlementInfoConfirm_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqSettlementInfoConfirm_result(reqSettlementInfoConfirm_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqSettlementInfoConfirm_result deepCopy() {
      return new reqSettlementInfoConfirm_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqSettlementInfoConfirm_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqSettlementInfoConfirm_result)
        return this.equals((reqSettlementInfoConfirm_result)that);
      return false;
    }

    public boolean equals(reqSettlementInfoConfirm_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqSettlementInfoConfirm_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqSettlementInfoConfirm_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqSettlementInfoConfirm_resultStandardSchemeFactory implements SchemeFactory {
      public reqSettlementInfoConfirm_resultStandardScheme getScheme() {
        return new reqSettlementInfoConfirm_resultStandardScheme();
      }
    }

    private static class reqSettlementInfoConfirm_resultStandardScheme extends StandardScheme<reqSettlementInfoConfirm_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqSettlementInfoConfirm_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqSettlementInfoConfirm_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqSettlementInfoConfirm_resultTupleSchemeFactory implements SchemeFactory {
      public reqSettlementInfoConfirm_resultTupleScheme getScheme() {
        return new reqSettlementInfoConfirm_resultTupleScheme();
      }
    }

    private static class reqSettlementInfoConfirm_resultTupleScheme extends TupleScheme<reqSettlementInfoConfirm_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqSettlementInfoConfirm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqSettlementInfoConfirm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqRemoveParkedOrder_args implements org.apache.thrift.TBase<reqRemoveParkedOrder_args, reqRemoveParkedOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqRemoveParkedOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqRemoveParkedOrder_args");

    private static final org.apache.thrift.protocol.TField P_REMOVE_PARKED_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("pRemoveParkedOrder", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqRemoveParkedOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqRemoveParkedOrder_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderField pRemoveParkedOrder; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_REMOVE_PARKED_ORDER((short)1, "pRemoveParkedOrder"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_REMOVE_PARKED_ORDER
            return P_REMOVE_PARKED_ORDER;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_REMOVE_PARKED_ORDER, new org.apache.thrift.meta_data.FieldMetaData("pRemoveParkedOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqRemoveParkedOrder_args.class, metaDataMap);
    }

    public reqRemoveParkedOrder_args() {
    }

    public reqRemoveParkedOrder_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderField pRemoveParkedOrder,
      int nRequestID)
    {
      this();
      this.pRemoveParkedOrder = pRemoveParkedOrder;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqRemoveParkedOrder_args(reqRemoveParkedOrder_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPRemoveParkedOrder()) {
        this.pRemoveParkedOrder = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderField(other.pRemoveParkedOrder);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqRemoveParkedOrder_args deepCopy() {
      return new reqRemoveParkedOrder_args(this);
    }

    @Override
    public void clear() {
      this.pRemoveParkedOrder = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderField getPRemoveParkedOrder() {
      return this.pRemoveParkedOrder;
    }

    public reqRemoveParkedOrder_args setPRemoveParkedOrder(cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderField pRemoveParkedOrder) {
      this.pRemoveParkedOrder = pRemoveParkedOrder;
      return this;
    }

    public void unsetPRemoveParkedOrder() {
      this.pRemoveParkedOrder = null;
    }

    /** Returns true if field pRemoveParkedOrder is set (has been assigned a value) and false otherwise */
    public boolean isSetPRemoveParkedOrder() {
      return this.pRemoveParkedOrder != null;
    }

    public void setPRemoveParkedOrderIsSet(boolean value) {
      if (!value) {
        this.pRemoveParkedOrder = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqRemoveParkedOrder_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_REMOVE_PARKED_ORDER:
        if (value == null) {
          unsetPRemoveParkedOrder();
        } else {
          setPRemoveParkedOrder((cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_REMOVE_PARKED_ORDER:
        return getPRemoveParkedOrder();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_REMOVE_PARKED_ORDER:
        return isSetPRemoveParkedOrder();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqRemoveParkedOrder_args)
        return this.equals((reqRemoveParkedOrder_args)that);
      return false;
    }

    public boolean equals(reqRemoveParkedOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_pRemoveParkedOrder = true && this.isSetPRemoveParkedOrder();
      boolean that_present_pRemoveParkedOrder = true && that.isSetPRemoveParkedOrder();
      if (this_present_pRemoveParkedOrder || that_present_pRemoveParkedOrder) {
        if (!(this_present_pRemoveParkedOrder && that_present_pRemoveParkedOrder))
          return false;
        if (!this.pRemoveParkedOrder.equals(that.pRemoveParkedOrder))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqRemoveParkedOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPRemoveParkedOrder()).compareTo(other.isSetPRemoveParkedOrder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPRemoveParkedOrder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pRemoveParkedOrder, other.pRemoveParkedOrder);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqRemoveParkedOrder_args(");
      boolean first = true;

      sb.append("pRemoveParkedOrder:");
      if (this.pRemoveParkedOrder == null) {
        sb.append("null");
      } else {
        sb.append(this.pRemoveParkedOrder);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pRemoveParkedOrder != null) {
        pRemoveParkedOrder.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqRemoveParkedOrder_argsStandardSchemeFactory implements SchemeFactory {
      public reqRemoveParkedOrder_argsStandardScheme getScheme() {
        return new reqRemoveParkedOrder_argsStandardScheme();
      }
    }

    private static class reqRemoveParkedOrder_argsStandardScheme extends StandardScheme<reqRemoveParkedOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqRemoveParkedOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_REMOVE_PARKED_ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pRemoveParkedOrder = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderField();
                struct.pRemoveParkedOrder.read(iprot);
                struct.setPRemoveParkedOrderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqRemoveParkedOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pRemoveParkedOrder != null) {
          oprot.writeFieldBegin(P_REMOVE_PARKED_ORDER_FIELD_DESC);
          struct.pRemoveParkedOrder.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqRemoveParkedOrder_argsTupleSchemeFactory implements SchemeFactory {
      public reqRemoveParkedOrder_argsTupleScheme getScheme() {
        return new reqRemoveParkedOrder_argsTupleScheme();
      }
    }

    private static class reqRemoveParkedOrder_argsTupleScheme extends TupleScheme<reqRemoveParkedOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqRemoveParkedOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPRemoveParkedOrder()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPRemoveParkedOrder()) {
          struct.pRemoveParkedOrder.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqRemoveParkedOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pRemoveParkedOrder = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderField();
          struct.pRemoveParkedOrder.read(iprot);
          struct.setPRemoveParkedOrderIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqRemoveParkedOrder_result implements org.apache.thrift.TBase<reqRemoveParkedOrder_result, reqRemoveParkedOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqRemoveParkedOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqRemoveParkedOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqRemoveParkedOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqRemoveParkedOrder_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqRemoveParkedOrder_result.class, metaDataMap);
    }

    public reqRemoveParkedOrder_result() {
    }

    public reqRemoveParkedOrder_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqRemoveParkedOrder_result(reqRemoveParkedOrder_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqRemoveParkedOrder_result deepCopy() {
      return new reqRemoveParkedOrder_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqRemoveParkedOrder_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqRemoveParkedOrder_result)
        return this.equals((reqRemoveParkedOrder_result)that);
      return false;
    }

    public boolean equals(reqRemoveParkedOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqRemoveParkedOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqRemoveParkedOrder_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqRemoveParkedOrder_resultStandardSchemeFactory implements SchemeFactory {
      public reqRemoveParkedOrder_resultStandardScheme getScheme() {
        return new reqRemoveParkedOrder_resultStandardScheme();
      }
    }

    private static class reqRemoveParkedOrder_resultStandardScheme extends StandardScheme<reqRemoveParkedOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqRemoveParkedOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqRemoveParkedOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqRemoveParkedOrder_resultTupleSchemeFactory implements SchemeFactory {
      public reqRemoveParkedOrder_resultTupleScheme getScheme() {
        return new reqRemoveParkedOrder_resultTupleScheme();
      }
    }

    private static class reqRemoveParkedOrder_resultTupleScheme extends TupleScheme<reqRemoveParkedOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqRemoveParkedOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqRemoveParkedOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqRemoveParkedOrderAction_args implements org.apache.thrift.TBase<reqRemoveParkedOrderAction_args, reqRemoveParkedOrderAction_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqRemoveParkedOrderAction_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqRemoveParkedOrderAction_args");

    private static final org.apache.thrift.protocol.TField P_REMOVE_PARKED_ORDER_ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("pRemoveParkedOrderAction", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqRemoveParkedOrderAction_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqRemoveParkedOrderAction_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderActionField pRemoveParkedOrderAction; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_REMOVE_PARKED_ORDER_ACTION((short)1, "pRemoveParkedOrderAction"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_REMOVE_PARKED_ORDER_ACTION
            return P_REMOVE_PARKED_ORDER_ACTION;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_REMOVE_PARKED_ORDER_ACTION, new org.apache.thrift.meta_data.FieldMetaData("pRemoveParkedOrderAction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderActionField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqRemoveParkedOrderAction_args.class, metaDataMap);
    }

    public reqRemoveParkedOrderAction_args() {
    }

    public reqRemoveParkedOrderAction_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderActionField pRemoveParkedOrderAction,
      int nRequestID)
    {
      this();
      this.pRemoveParkedOrderAction = pRemoveParkedOrderAction;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqRemoveParkedOrderAction_args(reqRemoveParkedOrderAction_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPRemoveParkedOrderAction()) {
        this.pRemoveParkedOrderAction = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderActionField(other.pRemoveParkedOrderAction);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqRemoveParkedOrderAction_args deepCopy() {
      return new reqRemoveParkedOrderAction_args(this);
    }

    @Override
    public void clear() {
      this.pRemoveParkedOrderAction = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderActionField getPRemoveParkedOrderAction() {
      return this.pRemoveParkedOrderAction;
    }

    public reqRemoveParkedOrderAction_args setPRemoveParkedOrderAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderActionField pRemoveParkedOrderAction) {
      this.pRemoveParkedOrderAction = pRemoveParkedOrderAction;
      return this;
    }

    public void unsetPRemoveParkedOrderAction() {
      this.pRemoveParkedOrderAction = null;
    }

    /** Returns true if field pRemoveParkedOrderAction is set (has been assigned a value) and false otherwise */
    public boolean isSetPRemoveParkedOrderAction() {
      return this.pRemoveParkedOrderAction != null;
    }

    public void setPRemoveParkedOrderActionIsSet(boolean value) {
      if (!value) {
        this.pRemoveParkedOrderAction = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqRemoveParkedOrderAction_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_REMOVE_PARKED_ORDER_ACTION:
        if (value == null) {
          unsetPRemoveParkedOrderAction();
        } else {
          setPRemoveParkedOrderAction((cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderActionField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_REMOVE_PARKED_ORDER_ACTION:
        return getPRemoveParkedOrderAction();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_REMOVE_PARKED_ORDER_ACTION:
        return isSetPRemoveParkedOrderAction();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqRemoveParkedOrderAction_args)
        return this.equals((reqRemoveParkedOrderAction_args)that);
      return false;
    }

    public boolean equals(reqRemoveParkedOrderAction_args that) {
      if (that == null)
        return false;

      boolean this_present_pRemoveParkedOrderAction = true && this.isSetPRemoveParkedOrderAction();
      boolean that_present_pRemoveParkedOrderAction = true && that.isSetPRemoveParkedOrderAction();
      if (this_present_pRemoveParkedOrderAction || that_present_pRemoveParkedOrderAction) {
        if (!(this_present_pRemoveParkedOrderAction && that_present_pRemoveParkedOrderAction))
          return false;
        if (!this.pRemoveParkedOrderAction.equals(that.pRemoveParkedOrderAction))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqRemoveParkedOrderAction_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPRemoveParkedOrderAction()).compareTo(other.isSetPRemoveParkedOrderAction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPRemoveParkedOrderAction()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pRemoveParkedOrderAction, other.pRemoveParkedOrderAction);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqRemoveParkedOrderAction_args(");
      boolean first = true;

      sb.append("pRemoveParkedOrderAction:");
      if (this.pRemoveParkedOrderAction == null) {
        sb.append("null");
      } else {
        sb.append(this.pRemoveParkedOrderAction);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pRemoveParkedOrderAction != null) {
        pRemoveParkedOrderAction.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqRemoveParkedOrderAction_argsStandardSchemeFactory implements SchemeFactory {
      public reqRemoveParkedOrderAction_argsStandardScheme getScheme() {
        return new reqRemoveParkedOrderAction_argsStandardScheme();
      }
    }

    private static class reqRemoveParkedOrderAction_argsStandardScheme extends StandardScheme<reqRemoveParkedOrderAction_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqRemoveParkedOrderAction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_REMOVE_PARKED_ORDER_ACTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pRemoveParkedOrderAction = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderActionField();
                struct.pRemoveParkedOrderAction.read(iprot);
                struct.setPRemoveParkedOrderActionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqRemoveParkedOrderAction_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pRemoveParkedOrderAction != null) {
          oprot.writeFieldBegin(P_REMOVE_PARKED_ORDER_ACTION_FIELD_DESC);
          struct.pRemoveParkedOrderAction.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqRemoveParkedOrderAction_argsTupleSchemeFactory implements SchemeFactory {
      public reqRemoveParkedOrderAction_argsTupleScheme getScheme() {
        return new reqRemoveParkedOrderAction_argsTupleScheme();
      }
    }

    private static class reqRemoveParkedOrderAction_argsTupleScheme extends TupleScheme<reqRemoveParkedOrderAction_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqRemoveParkedOrderAction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPRemoveParkedOrderAction()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPRemoveParkedOrderAction()) {
          struct.pRemoveParkedOrderAction.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqRemoveParkedOrderAction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pRemoveParkedOrderAction = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcRemoveParkedOrderActionField();
          struct.pRemoveParkedOrderAction.read(iprot);
          struct.setPRemoveParkedOrderActionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqRemoveParkedOrderAction_result implements org.apache.thrift.TBase<reqRemoveParkedOrderAction_result, reqRemoveParkedOrderAction_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqRemoveParkedOrderAction_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqRemoveParkedOrderAction_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqRemoveParkedOrderAction_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqRemoveParkedOrderAction_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqRemoveParkedOrderAction_result.class, metaDataMap);
    }

    public reqRemoveParkedOrderAction_result() {
    }

    public reqRemoveParkedOrderAction_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqRemoveParkedOrderAction_result(reqRemoveParkedOrderAction_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqRemoveParkedOrderAction_result deepCopy() {
      return new reqRemoveParkedOrderAction_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqRemoveParkedOrderAction_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqRemoveParkedOrderAction_result)
        return this.equals((reqRemoveParkedOrderAction_result)that);
      return false;
    }

    public boolean equals(reqRemoveParkedOrderAction_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqRemoveParkedOrderAction_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqRemoveParkedOrderAction_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqRemoveParkedOrderAction_resultStandardSchemeFactory implements SchemeFactory {
      public reqRemoveParkedOrderAction_resultStandardScheme getScheme() {
        return new reqRemoveParkedOrderAction_resultStandardScheme();
      }
    }

    private static class reqRemoveParkedOrderAction_resultStandardScheme extends StandardScheme<reqRemoveParkedOrderAction_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqRemoveParkedOrderAction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqRemoveParkedOrderAction_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqRemoveParkedOrderAction_resultTupleSchemeFactory implements SchemeFactory {
      public reqRemoveParkedOrderAction_resultTupleScheme getScheme() {
        return new reqRemoveParkedOrderAction_resultTupleScheme();
      }
    }

    private static class reqRemoveParkedOrderAction_resultTupleScheme extends TupleScheme<reqRemoveParkedOrderAction_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqRemoveParkedOrderAction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqRemoveParkedOrderAction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqExecOrderInsert_args implements org.apache.thrift.TBase<reqExecOrderInsert_args, reqExecOrderInsert_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqExecOrderInsert_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqExecOrderInsert_args");

    private static final org.apache.thrift.protocol.TField P_INPUT_EXEC_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("pInputExecOrder", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqExecOrderInsert_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqExecOrderInsert_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderField pInputExecOrder; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_INPUT_EXEC_ORDER((short)1, "pInputExecOrder"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_INPUT_EXEC_ORDER
            return P_INPUT_EXEC_ORDER;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_INPUT_EXEC_ORDER, new org.apache.thrift.meta_data.FieldMetaData("pInputExecOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqExecOrderInsert_args.class, metaDataMap);
    }

    public reqExecOrderInsert_args() {
    }

    public reqExecOrderInsert_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderField pInputExecOrder,
      int nRequestID)
    {
      this();
      this.pInputExecOrder = pInputExecOrder;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqExecOrderInsert_args(reqExecOrderInsert_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPInputExecOrder()) {
        this.pInputExecOrder = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderField(other.pInputExecOrder);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqExecOrderInsert_args deepCopy() {
      return new reqExecOrderInsert_args(this);
    }

    @Override
    public void clear() {
      this.pInputExecOrder = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderField getPInputExecOrder() {
      return this.pInputExecOrder;
    }

    public reqExecOrderInsert_args setPInputExecOrder(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderField pInputExecOrder) {
      this.pInputExecOrder = pInputExecOrder;
      return this;
    }

    public void unsetPInputExecOrder() {
      this.pInputExecOrder = null;
    }

    /** Returns true if field pInputExecOrder is set (has been assigned a value) and false otherwise */
    public boolean isSetPInputExecOrder() {
      return this.pInputExecOrder != null;
    }

    public void setPInputExecOrderIsSet(boolean value) {
      if (!value) {
        this.pInputExecOrder = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqExecOrderInsert_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_INPUT_EXEC_ORDER:
        if (value == null) {
          unsetPInputExecOrder();
        } else {
          setPInputExecOrder((cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_INPUT_EXEC_ORDER:
        return getPInputExecOrder();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_INPUT_EXEC_ORDER:
        return isSetPInputExecOrder();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqExecOrderInsert_args)
        return this.equals((reqExecOrderInsert_args)that);
      return false;
    }

    public boolean equals(reqExecOrderInsert_args that) {
      if (that == null)
        return false;

      boolean this_present_pInputExecOrder = true && this.isSetPInputExecOrder();
      boolean that_present_pInputExecOrder = true && that.isSetPInputExecOrder();
      if (this_present_pInputExecOrder || that_present_pInputExecOrder) {
        if (!(this_present_pInputExecOrder && that_present_pInputExecOrder))
          return false;
        if (!this.pInputExecOrder.equals(that.pInputExecOrder))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqExecOrderInsert_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPInputExecOrder()).compareTo(other.isSetPInputExecOrder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPInputExecOrder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pInputExecOrder, other.pInputExecOrder);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqExecOrderInsert_args(");
      boolean first = true;

      sb.append("pInputExecOrder:");
      if (this.pInputExecOrder == null) {
        sb.append("null");
      } else {
        sb.append(this.pInputExecOrder);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pInputExecOrder != null) {
        pInputExecOrder.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqExecOrderInsert_argsStandardSchemeFactory implements SchemeFactory {
      public reqExecOrderInsert_argsStandardScheme getScheme() {
        return new reqExecOrderInsert_argsStandardScheme();
      }
    }

    private static class reqExecOrderInsert_argsStandardScheme extends StandardScheme<reqExecOrderInsert_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqExecOrderInsert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_INPUT_EXEC_ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pInputExecOrder = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderField();
                struct.pInputExecOrder.read(iprot);
                struct.setPInputExecOrderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqExecOrderInsert_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pInputExecOrder != null) {
          oprot.writeFieldBegin(P_INPUT_EXEC_ORDER_FIELD_DESC);
          struct.pInputExecOrder.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqExecOrderInsert_argsTupleSchemeFactory implements SchemeFactory {
      public reqExecOrderInsert_argsTupleScheme getScheme() {
        return new reqExecOrderInsert_argsTupleScheme();
      }
    }

    private static class reqExecOrderInsert_argsTupleScheme extends TupleScheme<reqExecOrderInsert_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqExecOrderInsert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPInputExecOrder()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPInputExecOrder()) {
          struct.pInputExecOrder.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqExecOrderInsert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pInputExecOrder = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderField();
          struct.pInputExecOrder.read(iprot);
          struct.setPInputExecOrderIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqExecOrderInsert_result implements org.apache.thrift.TBase<reqExecOrderInsert_result, reqExecOrderInsert_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqExecOrderInsert_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqExecOrderInsert_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqExecOrderInsert_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqExecOrderInsert_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqExecOrderInsert_result.class, metaDataMap);
    }

    public reqExecOrderInsert_result() {
    }

    public reqExecOrderInsert_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqExecOrderInsert_result(reqExecOrderInsert_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqExecOrderInsert_result deepCopy() {
      return new reqExecOrderInsert_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqExecOrderInsert_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqExecOrderInsert_result)
        return this.equals((reqExecOrderInsert_result)that);
      return false;
    }

    public boolean equals(reqExecOrderInsert_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqExecOrderInsert_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqExecOrderInsert_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqExecOrderInsert_resultStandardSchemeFactory implements SchemeFactory {
      public reqExecOrderInsert_resultStandardScheme getScheme() {
        return new reqExecOrderInsert_resultStandardScheme();
      }
    }

    private static class reqExecOrderInsert_resultStandardScheme extends StandardScheme<reqExecOrderInsert_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqExecOrderInsert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqExecOrderInsert_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqExecOrderInsert_resultTupleSchemeFactory implements SchemeFactory {
      public reqExecOrderInsert_resultTupleScheme getScheme() {
        return new reqExecOrderInsert_resultTupleScheme();
      }
    }

    private static class reqExecOrderInsert_resultTupleScheme extends TupleScheme<reqExecOrderInsert_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqExecOrderInsert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqExecOrderInsert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqExecOrderAction_args implements org.apache.thrift.TBase<reqExecOrderAction_args, reqExecOrderAction_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqExecOrderAction_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqExecOrderAction_args");

    private static final org.apache.thrift.protocol.TField P_INPUT_EXEC_ORDER_ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("pInputExecOrderAction", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqExecOrderAction_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqExecOrderAction_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderActionField pInputExecOrderAction; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_INPUT_EXEC_ORDER_ACTION((short)1, "pInputExecOrderAction"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_INPUT_EXEC_ORDER_ACTION
            return P_INPUT_EXEC_ORDER_ACTION;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_INPUT_EXEC_ORDER_ACTION, new org.apache.thrift.meta_data.FieldMetaData("pInputExecOrderAction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderActionField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqExecOrderAction_args.class, metaDataMap);
    }

    public reqExecOrderAction_args() {
    }

    public reqExecOrderAction_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderActionField pInputExecOrderAction,
      int nRequestID)
    {
      this();
      this.pInputExecOrderAction = pInputExecOrderAction;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqExecOrderAction_args(reqExecOrderAction_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPInputExecOrderAction()) {
        this.pInputExecOrderAction = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderActionField(other.pInputExecOrderAction);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqExecOrderAction_args deepCopy() {
      return new reqExecOrderAction_args(this);
    }

    @Override
    public void clear() {
      this.pInputExecOrderAction = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderActionField getPInputExecOrderAction() {
      return this.pInputExecOrderAction;
    }

    public reqExecOrderAction_args setPInputExecOrderAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderActionField pInputExecOrderAction) {
      this.pInputExecOrderAction = pInputExecOrderAction;
      return this;
    }

    public void unsetPInputExecOrderAction() {
      this.pInputExecOrderAction = null;
    }

    /** Returns true if field pInputExecOrderAction is set (has been assigned a value) and false otherwise */
    public boolean isSetPInputExecOrderAction() {
      return this.pInputExecOrderAction != null;
    }

    public void setPInputExecOrderActionIsSet(boolean value) {
      if (!value) {
        this.pInputExecOrderAction = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqExecOrderAction_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_INPUT_EXEC_ORDER_ACTION:
        if (value == null) {
          unsetPInputExecOrderAction();
        } else {
          setPInputExecOrderAction((cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderActionField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_INPUT_EXEC_ORDER_ACTION:
        return getPInputExecOrderAction();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_INPUT_EXEC_ORDER_ACTION:
        return isSetPInputExecOrderAction();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqExecOrderAction_args)
        return this.equals((reqExecOrderAction_args)that);
      return false;
    }

    public boolean equals(reqExecOrderAction_args that) {
      if (that == null)
        return false;

      boolean this_present_pInputExecOrderAction = true && this.isSetPInputExecOrderAction();
      boolean that_present_pInputExecOrderAction = true && that.isSetPInputExecOrderAction();
      if (this_present_pInputExecOrderAction || that_present_pInputExecOrderAction) {
        if (!(this_present_pInputExecOrderAction && that_present_pInputExecOrderAction))
          return false;
        if (!this.pInputExecOrderAction.equals(that.pInputExecOrderAction))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqExecOrderAction_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPInputExecOrderAction()).compareTo(other.isSetPInputExecOrderAction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPInputExecOrderAction()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pInputExecOrderAction, other.pInputExecOrderAction);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqExecOrderAction_args(");
      boolean first = true;

      sb.append("pInputExecOrderAction:");
      if (this.pInputExecOrderAction == null) {
        sb.append("null");
      } else {
        sb.append(this.pInputExecOrderAction);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pInputExecOrderAction != null) {
        pInputExecOrderAction.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqExecOrderAction_argsStandardSchemeFactory implements SchemeFactory {
      public reqExecOrderAction_argsStandardScheme getScheme() {
        return new reqExecOrderAction_argsStandardScheme();
      }
    }

    private static class reqExecOrderAction_argsStandardScheme extends StandardScheme<reqExecOrderAction_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqExecOrderAction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_INPUT_EXEC_ORDER_ACTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pInputExecOrderAction = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderActionField();
                struct.pInputExecOrderAction.read(iprot);
                struct.setPInputExecOrderActionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqExecOrderAction_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pInputExecOrderAction != null) {
          oprot.writeFieldBegin(P_INPUT_EXEC_ORDER_ACTION_FIELD_DESC);
          struct.pInputExecOrderAction.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqExecOrderAction_argsTupleSchemeFactory implements SchemeFactory {
      public reqExecOrderAction_argsTupleScheme getScheme() {
        return new reqExecOrderAction_argsTupleScheme();
      }
    }

    private static class reqExecOrderAction_argsTupleScheme extends TupleScheme<reqExecOrderAction_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqExecOrderAction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPInputExecOrderAction()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPInputExecOrderAction()) {
          struct.pInputExecOrderAction.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqExecOrderAction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pInputExecOrderAction = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputExecOrderActionField();
          struct.pInputExecOrderAction.read(iprot);
          struct.setPInputExecOrderActionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqExecOrderAction_result implements org.apache.thrift.TBase<reqExecOrderAction_result, reqExecOrderAction_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqExecOrderAction_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqExecOrderAction_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqExecOrderAction_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqExecOrderAction_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqExecOrderAction_result.class, metaDataMap);
    }

    public reqExecOrderAction_result() {
    }

    public reqExecOrderAction_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqExecOrderAction_result(reqExecOrderAction_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqExecOrderAction_result deepCopy() {
      return new reqExecOrderAction_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqExecOrderAction_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqExecOrderAction_result)
        return this.equals((reqExecOrderAction_result)that);
      return false;
    }

    public boolean equals(reqExecOrderAction_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqExecOrderAction_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqExecOrderAction_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqExecOrderAction_resultStandardSchemeFactory implements SchemeFactory {
      public reqExecOrderAction_resultStandardScheme getScheme() {
        return new reqExecOrderAction_resultStandardScheme();
      }
    }

    private static class reqExecOrderAction_resultStandardScheme extends StandardScheme<reqExecOrderAction_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqExecOrderAction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqExecOrderAction_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqExecOrderAction_resultTupleSchemeFactory implements SchemeFactory {
      public reqExecOrderAction_resultTupleScheme getScheme() {
        return new reqExecOrderAction_resultTupleScheme();
      }
    }

    private static class reqExecOrderAction_resultTupleScheme extends TupleScheme<reqExecOrderAction_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqExecOrderAction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqExecOrderAction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqForQuoteInsert_args implements org.apache.thrift.TBase<reqForQuoteInsert_args, reqForQuoteInsert_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqForQuoteInsert_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqForQuoteInsert_args");

    private static final org.apache.thrift.protocol.TField P_INPUT_FOR_QUOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("pInputForQuote", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqForQuoteInsert_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqForQuoteInsert_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputForQuoteField pInputForQuote; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_INPUT_FOR_QUOTE((short)1, "pInputForQuote"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_INPUT_FOR_QUOTE
            return P_INPUT_FOR_QUOTE;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_INPUT_FOR_QUOTE, new org.apache.thrift.meta_data.FieldMetaData("pInputForQuote", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputForQuoteField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqForQuoteInsert_args.class, metaDataMap);
    }

    public reqForQuoteInsert_args() {
    }

    public reqForQuoteInsert_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputForQuoteField pInputForQuote,
      int nRequestID)
    {
      this();
      this.pInputForQuote = pInputForQuote;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqForQuoteInsert_args(reqForQuoteInsert_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPInputForQuote()) {
        this.pInputForQuote = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputForQuoteField(other.pInputForQuote);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqForQuoteInsert_args deepCopy() {
      return new reqForQuoteInsert_args(this);
    }

    @Override
    public void clear() {
      this.pInputForQuote = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputForQuoteField getPInputForQuote() {
      return this.pInputForQuote;
    }

    public reqForQuoteInsert_args setPInputForQuote(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputForQuoteField pInputForQuote) {
      this.pInputForQuote = pInputForQuote;
      return this;
    }

    public void unsetPInputForQuote() {
      this.pInputForQuote = null;
    }

    /** Returns true if field pInputForQuote is set (has been assigned a value) and false otherwise */
    public boolean isSetPInputForQuote() {
      return this.pInputForQuote != null;
    }

    public void setPInputForQuoteIsSet(boolean value) {
      if (!value) {
        this.pInputForQuote = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqForQuoteInsert_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_INPUT_FOR_QUOTE:
        if (value == null) {
          unsetPInputForQuote();
        } else {
          setPInputForQuote((cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputForQuoteField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_INPUT_FOR_QUOTE:
        return getPInputForQuote();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_INPUT_FOR_QUOTE:
        return isSetPInputForQuote();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqForQuoteInsert_args)
        return this.equals((reqForQuoteInsert_args)that);
      return false;
    }

    public boolean equals(reqForQuoteInsert_args that) {
      if (that == null)
        return false;

      boolean this_present_pInputForQuote = true && this.isSetPInputForQuote();
      boolean that_present_pInputForQuote = true && that.isSetPInputForQuote();
      if (this_present_pInputForQuote || that_present_pInputForQuote) {
        if (!(this_present_pInputForQuote && that_present_pInputForQuote))
          return false;
        if (!this.pInputForQuote.equals(that.pInputForQuote))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqForQuoteInsert_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPInputForQuote()).compareTo(other.isSetPInputForQuote());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPInputForQuote()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pInputForQuote, other.pInputForQuote);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqForQuoteInsert_args(");
      boolean first = true;

      sb.append("pInputForQuote:");
      if (this.pInputForQuote == null) {
        sb.append("null");
      } else {
        sb.append(this.pInputForQuote);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pInputForQuote != null) {
        pInputForQuote.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqForQuoteInsert_argsStandardSchemeFactory implements SchemeFactory {
      public reqForQuoteInsert_argsStandardScheme getScheme() {
        return new reqForQuoteInsert_argsStandardScheme();
      }
    }

    private static class reqForQuoteInsert_argsStandardScheme extends StandardScheme<reqForQuoteInsert_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqForQuoteInsert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_INPUT_FOR_QUOTE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pInputForQuote = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputForQuoteField();
                struct.pInputForQuote.read(iprot);
                struct.setPInputForQuoteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqForQuoteInsert_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pInputForQuote != null) {
          oprot.writeFieldBegin(P_INPUT_FOR_QUOTE_FIELD_DESC);
          struct.pInputForQuote.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqForQuoteInsert_argsTupleSchemeFactory implements SchemeFactory {
      public reqForQuoteInsert_argsTupleScheme getScheme() {
        return new reqForQuoteInsert_argsTupleScheme();
      }
    }

    private static class reqForQuoteInsert_argsTupleScheme extends TupleScheme<reqForQuoteInsert_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqForQuoteInsert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPInputForQuote()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPInputForQuote()) {
          struct.pInputForQuote.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqForQuoteInsert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pInputForQuote = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputForQuoteField();
          struct.pInputForQuote.read(iprot);
          struct.setPInputForQuoteIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqForQuoteInsert_result implements org.apache.thrift.TBase<reqForQuoteInsert_result, reqForQuoteInsert_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqForQuoteInsert_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqForQuoteInsert_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqForQuoteInsert_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqForQuoteInsert_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqForQuoteInsert_result.class, metaDataMap);
    }

    public reqForQuoteInsert_result() {
    }

    public reqForQuoteInsert_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqForQuoteInsert_result(reqForQuoteInsert_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqForQuoteInsert_result deepCopy() {
      return new reqForQuoteInsert_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqForQuoteInsert_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqForQuoteInsert_result)
        return this.equals((reqForQuoteInsert_result)that);
      return false;
    }

    public boolean equals(reqForQuoteInsert_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqForQuoteInsert_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqForQuoteInsert_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqForQuoteInsert_resultStandardSchemeFactory implements SchemeFactory {
      public reqForQuoteInsert_resultStandardScheme getScheme() {
        return new reqForQuoteInsert_resultStandardScheme();
      }
    }

    private static class reqForQuoteInsert_resultStandardScheme extends StandardScheme<reqForQuoteInsert_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqForQuoteInsert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqForQuoteInsert_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqForQuoteInsert_resultTupleSchemeFactory implements SchemeFactory {
      public reqForQuoteInsert_resultTupleScheme getScheme() {
        return new reqForQuoteInsert_resultTupleScheme();
      }
    }

    private static class reqForQuoteInsert_resultTupleScheme extends TupleScheme<reqForQuoteInsert_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqForQuoteInsert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqForQuoteInsert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQuoteInsert_args implements org.apache.thrift.TBase<reqQuoteInsert_args, reqQuoteInsert_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQuoteInsert_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQuoteInsert_args");

    private static final org.apache.thrift.protocol.TField P_INPUT_QUOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("pInputQuote", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQuoteInsert_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQuoteInsert_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteField pInputQuote; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_INPUT_QUOTE((short)1, "pInputQuote"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_INPUT_QUOTE
            return P_INPUT_QUOTE;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_INPUT_QUOTE, new org.apache.thrift.meta_data.FieldMetaData("pInputQuote", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQuoteInsert_args.class, metaDataMap);
    }

    public reqQuoteInsert_args() {
    }

    public reqQuoteInsert_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteField pInputQuote,
      int nRequestID)
    {
      this();
      this.pInputQuote = pInputQuote;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQuoteInsert_args(reqQuoteInsert_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPInputQuote()) {
        this.pInputQuote = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteField(other.pInputQuote);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQuoteInsert_args deepCopy() {
      return new reqQuoteInsert_args(this);
    }

    @Override
    public void clear() {
      this.pInputQuote = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteField getPInputQuote() {
      return this.pInputQuote;
    }

    public reqQuoteInsert_args setPInputQuote(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteField pInputQuote) {
      this.pInputQuote = pInputQuote;
      return this;
    }

    public void unsetPInputQuote() {
      this.pInputQuote = null;
    }

    /** Returns true if field pInputQuote is set (has been assigned a value) and false otherwise */
    public boolean isSetPInputQuote() {
      return this.pInputQuote != null;
    }

    public void setPInputQuoteIsSet(boolean value) {
      if (!value) {
        this.pInputQuote = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQuoteInsert_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_INPUT_QUOTE:
        if (value == null) {
          unsetPInputQuote();
        } else {
          setPInputQuote((cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_INPUT_QUOTE:
        return getPInputQuote();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_INPUT_QUOTE:
        return isSetPInputQuote();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQuoteInsert_args)
        return this.equals((reqQuoteInsert_args)that);
      return false;
    }

    public boolean equals(reqQuoteInsert_args that) {
      if (that == null)
        return false;

      boolean this_present_pInputQuote = true && this.isSetPInputQuote();
      boolean that_present_pInputQuote = true && that.isSetPInputQuote();
      if (this_present_pInputQuote || that_present_pInputQuote) {
        if (!(this_present_pInputQuote && that_present_pInputQuote))
          return false;
        if (!this.pInputQuote.equals(that.pInputQuote))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQuoteInsert_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPInputQuote()).compareTo(other.isSetPInputQuote());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPInputQuote()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pInputQuote, other.pInputQuote);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQuoteInsert_args(");
      boolean first = true;

      sb.append("pInputQuote:");
      if (this.pInputQuote == null) {
        sb.append("null");
      } else {
        sb.append(this.pInputQuote);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pInputQuote != null) {
        pInputQuote.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQuoteInsert_argsStandardSchemeFactory implements SchemeFactory {
      public reqQuoteInsert_argsStandardScheme getScheme() {
        return new reqQuoteInsert_argsStandardScheme();
      }
    }

    private static class reqQuoteInsert_argsStandardScheme extends StandardScheme<reqQuoteInsert_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQuoteInsert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_INPUT_QUOTE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pInputQuote = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteField();
                struct.pInputQuote.read(iprot);
                struct.setPInputQuoteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQuoteInsert_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pInputQuote != null) {
          oprot.writeFieldBegin(P_INPUT_QUOTE_FIELD_DESC);
          struct.pInputQuote.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQuoteInsert_argsTupleSchemeFactory implements SchemeFactory {
      public reqQuoteInsert_argsTupleScheme getScheme() {
        return new reqQuoteInsert_argsTupleScheme();
      }
    }

    private static class reqQuoteInsert_argsTupleScheme extends TupleScheme<reqQuoteInsert_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQuoteInsert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPInputQuote()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPInputQuote()) {
          struct.pInputQuote.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQuoteInsert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pInputQuote = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteField();
          struct.pInputQuote.read(iprot);
          struct.setPInputQuoteIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQuoteInsert_result implements org.apache.thrift.TBase<reqQuoteInsert_result, reqQuoteInsert_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQuoteInsert_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQuoteInsert_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQuoteInsert_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQuoteInsert_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQuoteInsert_result.class, metaDataMap);
    }

    public reqQuoteInsert_result() {
    }

    public reqQuoteInsert_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQuoteInsert_result(reqQuoteInsert_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQuoteInsert_result deepCopy() {
      return new reqQuoteInsert_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQuoteInsert_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQuoteInsert_result)
        return this.equals((reqQuoteInsert_result)that);
      return false;
    }

    public boolean equals(reqQuoteInsert_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQuoteInsert_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQuoteInsert_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQuoteInsert_resultStandardSchemeFactory implements SchemeFactory {
      public reqQuoteInsert_resultStandardScheme getScheme() {
        return new reqQuoteInsert_resultStandardScheme();
      }
    }

    private static class reqQuoteInsert_resultStandardScheme extends StandardScheme<reqQuoteInsert_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQuoteInsert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQuoteInsert_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQuoteInsert_resultTupleSchemeFactory implements SchemeFactory {
      public reqQuoteInsert_resultTupleScheme getScheme() {
        return new reqQuoteInsert_resultTupleScheme();
      }
    }

    private static class reqQuoteInsert_resultTupleScheme extends TupleScheme<reqQuoteInsert_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQuoteInsert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQuoteInsert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQuoteAction_args implements org.apache.thrift.TBase<reqQuoteAction_args, reqQuoteAction_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQuoteAction_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQuoteAction_args");

    private static final org.apache.thrift.protocol.TField P_INPUT_QUOTE_ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("pInputQuoteAction", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQuoteAction_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQuoteAction_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteActionField pInputQuoteAction; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_INPUT_QUOTE_ACTION((short)1, "pInputQuoteAction"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_INPUT_QUOTE_ACTION
            return P_INPUT_QUOTE_ACTION;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_INPUT_QUOTE_ACTION, new org.apache.thrift.meta_data.FieldMetaData("pInputQuoteAction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteActionField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQuoteAction_args.class, metaDataMap);
    }

    public reqQuoteAction_args() {
    }

    public reqQuoteAction_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteActionField pInputQuoteAction,
      int nRequestID)
    {
      this();
      this.pInputQuoteAction = pInputQuoteAction;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQuoteAction_args(reqQuoteAction_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPInputQuoteAction()) {
        this.pInputQuoteAction = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteActionField(other.pInputQuoteAction);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQuoteAction_args deepCopy() {
      return new reqQuoteAction_args(this);
    }

    @Override
    public void clear() {
      this.pInputQuoteAction = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteActionField getPInputQuoteAction() {
      return this.pInputQuoteAction;
    }

    public reqQuoteAction_args setPInputQuoteAction(cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteActionField pInputQuoteAction) {
      this.pInputQuoteAction = pInputQuoteAction;
      return this;
    }

    public void unsetPInputQuoteAction() {
      this.pInputQuoteAction = null;
    }

    /** Returns true if field pInputQuoteAction is set (has been assigned a value) and false otherwise */
    public boolean isSetPInputQuoteAction() {
      return this.pInputQuoteAction != null;
    }

    public void setPInputQuoteActionIsSet(boolean value) {
      if (!value) {
        this.pInputQuoteAction = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQuoteAction_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_INPUT_QUOTE_ACTION:
        if (value == null) {
          unsetPInputQuoteAction();
        } else {
          setPInputQuoteAction((cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteActionField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_INPUT_QUOTE_ACTION:
        return getPInputQuoteAction();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_INPUT_QUOTE_ACTION:
        return isSetPInputQuoteAction();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQuoteAction_args)
        return this.equals((reqQuoteAction_args)that);
      return false;
    }

    public boolean equals(reqQuoteAction_args that) {
      if (that == null)
        return false;

      boolean this_present_pInputQuoteAction = true && this.isSetPInputQuoteAction();
      boolean that_present_pInputQuoteAction = true && that.isSetPInputQuoteAction();
      if (this_present_pInputQuoteAction || that_present_pInputQuoteAction) {
        if (!(this_present_pInputQuoteAction && that_present_pInputQuoteAction))
          return false;
        if (!this.pInputQuoteAction.equals(that.pInputQuoteAction))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQuoteAction_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPInputQuoteAction()).compareTo(other.isSetPInputQuoteAction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPInputQuoteAction()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pInputQuoteAction, other.pInputQuoteAction);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQuoteAction_args(");
      boolean first = true;

      sb.append("pInputQuoteAction:");
      if (this.pInputQuoteAction == null) {
        sb.append("null");
      } else {
        sb.append(this.pInputQuoteAction);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pInputQuoteAction != null) {
        pInputQuoteAction.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQuoteAction_argsStandardSchemeFactory implements SchemeFactory {
      public reqQuoteAction_argsStandardScheme getScheme() {
        return new reqQuoteAction_argsStandardScheme();
      }
    }

    private static class reqQuoteAction_argsStandardScheme extends StandardScheme<reqQuoteAction_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQuoteAction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_INPUT_QUOTE_ACTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pInputQuoteAction = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteActionField();
                struct.pInputQuoteAction.read(iprot);
                struct.setPInputQuoteActionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQuoteAction_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pInputQuoteAction != null) {
          oprot.writeFieldBegin(P_INPUT_QUOTE_ACTION_FIELD_DESC);
          struct.pInputQuoteAction.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQuoteAction_argsTupleSchemeFactory implements SchemeFactory {
      public reqQuoteAction_argsTupleScheme getScheme() {
        return new reqQuoteAction_argsTupleScheme();
      }
    }

    private static class reqQuoteAction_argsTupleScheme extends TupleScheme<reqQuoteAction_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQuoteAction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPInputQuoteAction()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPInputQuoteAction()) {
          struct.pInputQuoteAction.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQuoteAction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pInputQuoteAction = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcInputQuoteActionField();
          struct.pInputQuoteAction.read(iprot);
          struct.setPInputQuoteActionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQuoteAction_result implements org.apache.thrift.TBase<reqQuoteAction_result, reqQuoteAction_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQuoteAction_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQuoteAction_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQuoteAction_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQuoteAction_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQuoteAction_result.class, metaDataMap);
    }

    public reqQuoteAction_result() {
    }

    public reqQuoteAction_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQuoteAction_result(reqQuoteAction_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQuoteAction_result deepCopy() {
      return new reqQuoteAction_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQuoteAction_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQuoteAction_result)
        return this.equals((reqQuoteAction_result)that);
      return false;
    }

    public boolean equals(reqQuoteAction_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQuoteAction_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQuoteAction_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQuoteAction_resultStandardSchemeFactory implements SchemeFactory {
      public reqQuoteAction_resultStandardScheme getScheme() {
        return new reqQuoteAction_resultStandardScheme();
      }
    }

    private static class reqQuoteAction_resultStandardScheme extends StandardScheme<reqQuoteAction_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQuoteAction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQuoteAction_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQuoteAction_resultTupleSchemeFactory implements SchemeFactory {
      public reqQuoteAction_resultTupleScheme getScheme() {
        return new reqQuoteAction_resultTupleScheme();
      }
    }

    private static class reqQuoteAction_resultTupleScheme extends TupleScheme<reqQuoteAction_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQuoteAction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQuoteAction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryOrder_args implements org.apache.thrift.TBase<reqQryOrder_args, reqQryOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryOrder_args");

    private static final org.apache.thrift.protocol.TField P_QRY_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryOrder", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryOrder_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOrderField pQryOrder; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_ORDER((short)1, "pQryOrder"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_ORDER
            return P_QRY_ORDER;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_ORDER, new org.apache.thrift.meta_data.FieldMetaData("pQryOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOrderField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryOrder_args.class, metaDataMap);
    }

    public reqQryOrder_args() {
    }

    public reqQryOrder_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOrderField pQryOrder,
      int nRequestID)
    {
      this();
      this.pQryOrder = pQryOrder;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryOrder_args(reqQryOrder_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryOrder()) {
        this.pQryOrder = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOrderField(other.pQryOrder);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryOrder_args deepCopy() {
      return new reqQryOrder_args(this);
    }

    @Override
    public void clear() {
      this.pQryOrder = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOrderField getPQryOrder() {
      return this.pQryOrder;
    }

    public reqQryOrder_args setPQryOrder(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOrderField pQryOrder) {
      this.pQryOrder = pQryOrder;
      return this;
    }

    public void unsetPQryOrder() {
      this.pQryOrder = null;
    }

    /** Returns true if field pQryOrder is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryOrder() {
      return this.pQryOrder != null;
    }

    public void setPQryOrderIsSet(boolean value) {
      if (!value) {
        this.pQryOrder = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryOrder_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_ORDER:
        if (value == null) {
          unsetPQryOrder();
        } else {
          setPQryOrder((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOrderField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_ORDER:
        return getPQryOrder();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_ORDER:
        return isSetPQryOrder();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryOrder_args)
        return this.equals((reqQryOrder_args)that);
      return false;
    }

    public boolean equals(reqQryOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryOrder = true && this.isSetPQryOrder();
      boolean that_present_pQryOrder = true && that.isSetPQryOrder();
      if (this_present_pQryOrder || that_present_pQryOrder) {
        if (!(this_present_pQryOrder && that_present_pQryOrder))
          return false;
        if (!this.pQryOrder.equals(that.pQryOrder))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryOrder()).compareTo(other.isSetPQryOrder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryOrder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryOrder, other.pQryOrder);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryOrder_args(");
      boolean first = true;

      sb.append("pQryOrder:");
      if (this.pQryOrder == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryOrder);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryOrder != null) {
        pQryOrder.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryOrder_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryOrder_argsStandardScheme getScheme() {
        return new reqQryOrder_argsStandardScheme();
      }
    }

    private static class reqQryOrder_argsStandardScheme extends StandardScheme<reqQryOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryOrder = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOrderField();
                struct.pQryOrder.read(iprot);
                struct.setPQryOrderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryOrder != null) {
          oprot.writeFieldBegin(P_QRY_ORDER_FIELD_DESC);
          struct.pQryOrder.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryOrder_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryOrder_argsTupleScheme getScheme() {
        return new reqQryOrder_argsTupleScheme();
      }
    }

    private static class reqQryOrder_argsTupleScheme extends TupleScheme<reqQryOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryOrder()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryOrder()) {
          struct.pQryOrder.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryOrder = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryOrderField();
          struct.pQryOrder.read(iprot);
          struct.setPQryOrderIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryOrder_result implements org.apache.thrift.TBase<reqQryOrder_result, reqQryOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryOrder_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryOrder_result.class, metaDataMap);
    }

    public reqQryOrder_result() {
    }

    public reqQryOrder_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryOrder_result(reqQryOrder_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryOrder_result deepCopy() {
      return new reqQryOrder_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryOrder_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryOrder_result)
        return this.equals((reqQryOrder_result)that);
      return false;
    }

    public boolean equals(reqQryOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryOrder_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryOrder_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryOrder_resultStandardScheme getScheme() {
        return new reqQryOrder_resultStandardScheme();
      }
    }

    private static class reqQryOrder_resultStandardScheme extends StandardScheme<reqQryOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryOrder_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryOrder_resultTupleScheme getScheme() {
        return new reqQryOrder_resultTupleScheme();
      }
    }

    private static class reqQryOrder_resultTupleScheme extends TupleScheme<reqQryOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryTrade_args implements org.apache.thrift.TBase<reqQryTrade_args, reqQryTrade_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryTrade_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryTrade_args");

    private static final org.apache.thrift.protocol.TField P_QRY_TRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryTrade", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryTrade_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryTrade_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradeField pQryTrade; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_TRADE((short)1, "pQryTrade"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_TRADE
            return P_QRY_TRADE;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_TRADE, new org.apache.thrift.meta_data.FieldMetaData("pQryTrade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradeField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryTrade_args.class, metaDataMap);
    }

    public reqQryTrade_args() {
    }

    public reqQryTrade_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradeField pQryTrade,
      int nRequestID)
    {
      this();
      this.pQryTrade = pQryTrade;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryTrade_args(reqQryTrade_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryTrade()) {
        this.pQryTrade = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradeField(other.pQryTrade);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryTrade_args deepCopy() {
      return new reqQryTrade_args(this);
    }

    @Override
    public void clear() {
      this.pQryTrade = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradeField getPQryTrade() {
      return this.pQryTrade;
    }

    public reqQryTrade_args setPQryTrade(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradeField pQryTrade) {
      this.pQryTrade = pQryTrade;
      return this;
    }

    public void unsetPQryTrade() {
      this.pQryTrade = null;
    }

    /** Returns true if field pQryTrade is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryTrade() {
      return this.pQryTrade != null;
    }

    public void setPQryTradeIsSet(boolean value) {
      if (!value) {
        this.pQryTrade = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryTrade_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_TRADE:
        if (value == null) {
          unsetPQryTrade();
        } else {
          setPQryTrade((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradeField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_TRADE:
        return getPQryTrade();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_TRADE:
        return isSetPQryTrade();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryTrade_args)
        return this.equals((reqQryTrade_args)that);
      return false;
    }

    public boolean equals(reqQryTrade_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryTrade = true && this.isSetPQryTrade();
      boolean that_present_pQryTrade = true && that.isSetPQryTrade();
      if (this_present_pQryTrade || that_present_pQryTrade) {
        if (!(this_present_pQryTrade && that_present_pQryTrade))
          return false;
        if (!this.pQryTrade.equals(that.pQryTrade))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryTrade_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryTrade()).compareTo(other.isSetPQryTrade());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryTrade()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryTrade, other.pQryTrade);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryTrade_args(");
      boolean first = true;

      sb.append("pQryTrade:");
      if (this.pQryTrade == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryTrade);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryTrade != null) {
        pQryTrade.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryTrade_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryTrade_argsStandardScheme getScheme() {
        return new reqQryTrade_argsStandardScheme();
      }
    }

    private static class reqQryTrade_argsStandardScheme extends StandardScheme<reqQryTrade_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryTrade_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_TRADE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryTrade = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradeField();
                struct.pQryTrade.read(iprot);
                struct.setPQryTradeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryTrade_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryTrade != null) {
          oprot.writeFieldBegin(P_QRY_TRADE_FIELD_DESC);
          struct.pQryTrade.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryTrade_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryTrade_argsTupleScheme getScheme() {
        return new reqQryTrade_argsTupleScheme();
      }
    }

    private static class reqQryTrade_argsTupleScheme extends TupleScheme<reqQryTrade_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryTrade_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryTrade()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryTrade()) {
          struct.pQryTrade.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryTrade_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryTrade = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradeField();
          struct.pQryTrade.read(iprot);
          struct.setPQryTradeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryTrade_result implements org.apache.thrift.TBase<reqQryTrade_result, reqQryTrade_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryTrade_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryTrade_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryTrade_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryTrade_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryTrade_result.class, metaDataMap);
    }

    public reqQryTrade_result() {
    }

    public reqQryTrade_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryTrade_result(reqQryTrade_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryTrade_result deepCopy() {
      return new reqQryTrade_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryTrade_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryTrade_result)
        return this.equals((reqQryTrade_result)that);
      return false;
    }

    public boolean equals(reqQryTrade_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryTrade_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryTrade_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryTrade_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryTrade_resultStandardScheme getScheme() {
        return new reqQryTrade_resultStandardScheme();
      }
    }

    private static class reqQryTrade_resultStandardScheme extends StandardScheme<reqQryTrade_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryTrade_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryTrade_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryTrade_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryTrade_resultTupleScheme getScheme() {
        return new reqQryTrade_resultTupleScheme();
      }
    }

    private static class reqQryTrade_resultTupleScheme extends TupleScheme<reqQryTrade_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryTrade_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryTrade_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryInvestorPosition_args implements org.apache.thrift.TBase<reqQryInvestorPosition_args, reqQryInvestorPosition_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryInvestorPosition_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryInvestorPosition_args");

    private static final org.apache.thrift.protocol.TField P_QRY_INVESTOR_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryInvestorPosition", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryInvestorPosition_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryInvestorPosition_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionField pQryInvestorPosition; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_INVESTOR_POSITION((short)1, "pQryInvestorPosition"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_INVESTOR_POSITION
            return P_QRY_INVESTOR_POSITION;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_INVESTOR_POSITION, new org.apache.thrift.meta_data.FieldMetaData("pQryInvestorPosition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryInvestorPosition_args.class, metaDataMap);
    }

    public reqQryInvestorPosition_args() {
    }

    public reqQryInvestorPosition_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionField pQryInvestorPosition,
      int nRequestID)
    {
      this();
      this.pQryInvestorPosition = pQryInvestorPosition;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryInvestorPosition_args(reqQryInvestorPosition_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryInvestorPosition()) {
        this.pQryInvestorPosition = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionField(other.pQryInvestorPosition);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryInvestorPosition_args deepCopy() {
      return new reqQryInvestorPosition_args(this);
    }

    @Override
    public void clear() {
      this.pQryInvestorPosition = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionField getPQryInvestorPosition() {
      return this.pQryInvestorPosition;
    }

    public reqQryInvestorPosition_args setPQryInvestorPosition(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionField pQryInvestorPosition) {
      this.pQryInvestorPosition = pQryInvestorPosition;
      return this;
    }

    public void unsetPQryInvestorPosition() {
      this.pQryInvestorPosition = null;
    }

    /** Returns true if field pQryInvestorPosition is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryInvestorPosition() {
      return this.pQryInvestorPosition != null;
    }

    public void setPQryInvestorPositionIsSet(boolean value) {
      if (!value) {
        this.pQryInvestorPosition = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryInvestorPosition_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_INVESTOR_POSITION:
        if (value == null) {
          unsetPQryInvestorPosition();
        } else {
          setPQryInvestorPosition((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_INVESTOR_POSITION:
        return getPQryInvestorPosition();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_INVESTOR_POSITION:
        return isSetPQryInvestorPosition();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryInvestorPosition_args)
        return this.equals((reqQryInvestorPosition_args)that);
      return false;
    }

    public boolean equals(reqQryInvestorPosition_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryInvestorPosition = true && this.isSetPQryInvestorPosition();
      boolean that_present_pQryInvestorPosition = true && that.isSetPQryInvestorPosition();
      if (this_present_pQryInvestorPosition || that_present_pQryInvestorPosition) {
        if (!(this_present_pQryInvestorPosition && that_present_pQryInvestorPosition))
          return false;
        if (!this.pQryInvestorPosition.equals(that.pQryInvestorPosition))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryInvestorPosition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryInvestorPosition()).compareTo(other.isSetPQryInvestorPosition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryInvestorPosition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryInvestorPosition, other.pQryInvestorPosition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryInvestorPosition_args(");
      boolean first = true;

      sb.append("pQryInvestorPosition:");
      if (this.pQryInvestorPosition == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryInvestorPosition);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryInvestorPosition != null) {
        pQryInvestorPosition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryInvestorPosition_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryInvestorPosition_argsStandardScheme getScheme() {
        return new reqQryInvestorPosition_argsStandardScheme();
      }
    }

    private static class reqQryInvestorPosition_argsStandardScheme extends StandardScheme<reqQryInvestorPosition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryInvestorPosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_INVESTOR_POSITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryInvestorPosition = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionField();
                struct.pQryInvestorPosition.read(iprot);
                struct.setPQryInvestorPositionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryInvestorPosition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryInvestorPosition != null) {
          oprot.writeFieldBegin(P_QRY_INVESTOR_POSITION_FIELD_DESC);
          struct.pQryInvestorPosition.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryInvestorPosition_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryInvestorPosition_argsTupleScheme getScheme() {
        return new reqQryInvestorPosition_argsTupleScheme();
      }
    }

    private static class reqQryInvestorPosition_argsTupleScheme extends TupleScheme<reqQryInvestorPosition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryInvestorPosition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryInvestorPosition()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryInvestorPosition()) {
          struct.pQryInvestorPosition.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryInvestorPosition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryInvestorPosition = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionField();
          struct.pQryInvestorPosition.read(iprot);
          struct.setPQryInvestorPositionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryInvestorPosition_result implements org.apache.thrift.TBase<reqQryInvestorPosition_result, reqQryInvestorPosition_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryInvestorPosition_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryInvestorPosition_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryInvestorPosition_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryInvestorPosition_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryInvestorPosition_result.class, metaDataMap);
    }

    public reqQryInvestorPosition_result() {
    }

    public reqQryInvestorPosition_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryInvestorPosition_result(reqQryInvestorPosition_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryInvestorPosition_result deepCopy() {
      return new reqQryInvestorPosition_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryInvestorPosition_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryInvestorPosition_result)
        return this.equals((reqQryInvestorPosition_result)that);
      return false;
    }

    public boolean equals(reqQryInvestorPosition_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryInvestorPosition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryInvestorPosition_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryInvestorPosition_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryInvestorPosition_resultStandardScheme getScheme() {
        return new reqQryInvestorPosition_resultStandardScheme();
      }
    }

    private static class reqQryInvestorPosition_resultStandardScheme extends StandardScheme<reqQryInvestorPosition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryInvestorPosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryInvestorPosition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryInvestorPosition_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryInvestorPosition_resultTupleScheme getScheme() {
        return new reqQryInvestorPosition_resultTupleScheme();
      }
    }

    private static class reqQryInvestorPosition_resultTupleScheme extends TupleScheme<reqQryInvestorPosition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryInvestorPosition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryInvestorPosition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryTradingAccount_args implements org.apache.thrift.TBase<reqQryTradingAccount_args, reqQryTradingAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryTradingAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryTradingAccount_args");

    private static final org.apache.thrift.protocol.TField P_QRY_TRADING_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryTradingAccount", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryTradingAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryTradingAccount_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingAccountField pQryTradingAccount; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_TRADING_ACCOUNT((short)1, "pQryTradingAccount"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_TRADING_ACCOUNT
            return P_QRY_TRADING_ACCOUNT;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_TRADING_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("pQryTradingAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingAccountField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryTradingAccount_args.class, metaDataMap);
    }

    public reqQryTradingAccount_args() {
    }

    public reqQryTradingAccount_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingAccountField pQryTradingAccount,
      int nRequestID)
    {
      this();
      this.pQryTradingAccount = pQryTradingAccount;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryTradingAccount_args(reqQryTradingAccount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryTradingAccount()) {
        this.pQryTradingAccount = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingAccountField(other.pQryTradingAccount);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryTradingAccount_args deepCopy() {
      return new reqQryTradingAccount_args(this);
    }

    @Override
    public void clear() {
      this.pQryTradingAccount = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingAccountField getPQryTradingAccount() {
      return this.pQryTradingAccount;
    }

    public reqQryTradingAccount_args setPQryTradingAccount(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingAccountField pQryTradingAccount) {
      this.pQryTradingAccount = pQryTradingAccount;
      return this;
    }

    public void unsetPQryTradingAccount() {
      this.pQryTradingAccount = null;
    }

    /** Returns true if field pQryTradingAccount is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryTradingAccount() {
      return this.pQryTradingAccount != null;
    }

    public void setPQryTradingAccountIsSet(boolean value) {
      if (!value) {
        this.pQryTradingAccount = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryTradingAccount_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_TRADING_ACCOUNT:
        if (value == null) {
          unsetPQryTradingAccount();
        } else {
          setPQryTradingAccount((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingAccountField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_TRADING_ACCOUNT:
        return getPQryTradingAccount();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_TRADING_ACCOUNT:
        return isSetPQryTradingAccount();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryTradingAccount_args)
        return this.equals((reqQryTradingAccount_args)that);
      return false;
    }

    public boolean equals(reqQryTradingAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryTradingAccount = true && this.isSetPQryTradingAccount();
      boolean that_present_pQryTradingAccount = true && that.isSetPQryTradingAccount();
      if (this_present_pQryTradingAccount || that_present_pQryTradingAccount) {
        if (!(this_present_pQryTradingAccount && that_present_pQryTradingAccount))
          return false;
        if (!this.pQryTradingAccount.equals(that.pQryTradingAccount))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryTradingAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryTradingAccount()).compareTo(other.isSetPQryTradingAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryTradingAccount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryTradingAccount, other.pQryTradingAccount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryTradingAccount_args(");
      boolean first = true;

      sb.append("pQryTradingAccount:");
      if (this.pQryTradingAccount == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryTradingAccount);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryTradingAccount != null) {
        pQryTradingAccount.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryTradingAccount_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryTradingAccount_argsStandardScheme getScheme() {
        return new reqQryTradingAccount_argsStandardScheme();
      }
    }

    private static class reqQryTradingAccount_argsStandardScheme extends StandardScheme<reqQryTradingAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryTradingAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_TRADING_ACCOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryTradingAccount = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingAccountField();
                struct.pQryTradingAccount.read(iprot);
                struct.setPQryTradingAccountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryTradingAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryTradingAccount != null) {
          oprot.writeFieldBegin(P_QRY_TRADING_ACCOUNT_FIELD_DESC);
          struct.pQryTradingAccount.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryTradingAccount_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryTradingAccount_argsTupleScheme getScheme() {
        return new reqQryTradingAccount_argsTupleScheme();
      }
    }

    private static class reqQryTradingAccount_argsTupleScheme extends TupleScheme<reqQryTradingAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryTradingAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryTradingAccount()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryTradingAccount()) {
          struct.pQryTradingAccount.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryTradingAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryTradingAccount = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingAccountField();
          struct.pQryTradingAccount.read(iprot);
          struct.setPQryTradingAccountIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryTradingAccount_result implements org.apache.thrift.TBase<reqQryTradingAccount_result, reqQryTradingAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryTradingAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryTradingAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryTradingAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryTradingAccount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryTradingAccount_result.class, metaDataMap);
    }

    public reqQryTradingAccount_result() {
    }

    public reqQryTradingAccount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryTradingAccount_result(reqQryTradingAccount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryTradingAccount_result deepCopy() {
      return new reqQryTradingAccount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryTradingAccount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryTradingAccount_result)
        return this.equals((reqQryTradingAccount_result)that);
      return false;
    }

    public boolean equals(reqQryTradingAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryTradingAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryTradingAccount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryTradingAccount_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryTradingAccount_resultStandardScheme getScheme() {
        return new reqQryTradingAccount_resultStandardScheme();
      }
    }

    private static class reqQryTradingAccount_resultStandardScheme extends StandardScheme<reqQryTradingAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryTradingAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryTradingAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryTradingAccount_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryTradingAccount_resultTupleScheme getScheme() {
        return new reqQryTradingAccount_resultTupleScheme();
      }
    }

    private static class reqQryTradingAccount_resultTupleScheme extends TupleScheme<reqQryTradingAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryTradingAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryTradingAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryInvestor_args implements org.apache.thrift.TBase<reqQryInvestor_args, reqQryInvestor_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryInvestor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryInvestor_args");

    private static final org.apache.thrift.protocol.TField P_QRY_INVESTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryInvestor", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryInvestor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryInvestor_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorField pQryInvestor; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_INVESTOR((short)1, "pQryInvestor"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_INVESTOR
            return P_QRY_INVESTOR;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_INVESTOR, new org.apache.thrift.meta_data.FieldMetaData("pQryInvestor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryInvestor_args.class, metaDataMap);
    }

    public reqQryInvestor_args() {
    }

    public reqQryInvestor_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorField pQryInvestor,
      int nRequestID)
    {
      this();
      this.pQryInvestor = pQryInvestor;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryInvestor_args(reqQryInvestor_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryInvestor()) {
        this.pQryInvestor = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorField(other.pQryInvestor);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryInvestor_args deepCopy() {
      return new reqQryInvestor_args(this);
    }

    @Override
    public void clear() {
      this.pQryInvestor = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorField getPQryInvestor() {
      return this.pQryInvestor;
    }

    public reqQryInvestor_args setPQryInvestor(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorField pQryInvestor) {
      this.pQryInvestor = pQryInvestor;
      return this;
    }

    public void unsetPQryInvestor() {
      this.pQryInvestor = null;
    }

    /** Returns true if field pQryInvestor is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryInvestor() {
      return this.pQryInvestor != null;
    }

    public void setPQryInvestorIsSet(boolean value) {
      if (!value) {
        this.pQryInvestor = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryInvestor_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_INVESTOR:
        if (value == null) {
          unsetPQryInvestor();
        } else {
          setPQryInvestor((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_INVESTOR:
        return getPQryInvestor();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_INVESTOR:
        return isSetPQryInvestor();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryInvestor_args)
        return this.equals((reqQryInvestor_args)that);
      return false;
    }

    public boolean equals(reqQryInvestor_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryInvestor = true && this.isSetPQryInvestor();
      boolean that_present_pQryInvestor = true && that.isSetPQryInvestor();
      if (this_present_pQryInvestor || that_present_pQryInvestor) {
        if (!(this_present_pQryInvestor && that_present_pQryInvestor))
          return false;
        if (!this.pQryInvestor.equals(that.pQryInvestor))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryInvestor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryInvestor()).compareTo(other.isSetPQryInvestor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryInvestor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryInvestor, other.pQryInvestor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryInvestor_args(");
      boolean first = true;

      sb.append("pQryInvestor:");
      if (this.pQryInvestor == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryInvestor);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryInvestor != null) {
        pQryInvestor.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryInvestor_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryInvestor_argsStandardScheme getScheme() {
        return new reqQryInvestor_argsStandardScheme();
      }
    }

    private static class reqQryInvestor_argsStandardScheme extends StandardScheme<reqQryInvestor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryInvestor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_INVESTOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryInvestor = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorField();
                struct.pQryInvestor.read(iprot);
                struct.setPQryInvestorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryInvestor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryInvestor != null) {
          oprot.writeFieldBegin(P_QRY_INVESTOR_FIELD_DESC);
          struct.pQryInvestor.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryInvestor_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryInvestor_argsTupleScheme getScheme() {
        return new reqQryInvestor_argsTupleScheme();
      }
    }

    private static class reqQryInvestor_argsTupleScheme extends TupleScheme<reqQryInvestor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryInvestor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryInvestor()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryInvestor()) {
          struct.pQryInvestor.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryInvestor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryInvestor = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorField();
          struct.pQryInvestor.read(iprot);
          struct.setPQryInvestorIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryInvestor_result implements org.apache.thrift.TBase<reqQryInvestor_result, reqQryInvestor_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryInvestor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryInvestor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryInvestor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryInvestor_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryInvestor_result.class, metaDataMap);
    }

    public reqQryInvestor_result() {
    }

    public reqQryInvestor_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryInvestor_result(reqQryInvestor_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryInvestor_result deepCopy() {
      return new reqQryInvestor_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryInvestor_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryInvestor_result)
        return this.equals((reqQryInvestor_result)that);
      return false;
    }

    public boolean equals(reqQryInvestor_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryInvestor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryInvestor_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryInvestor_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryInvestor_resultStandardScheme getScheme() {
        return new reqQryInvestor_resultStandardScheme();
      }
    }

    private static class reqQryInvestor_resultStandardScheme extends StandardScheme<reqQryInvestor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryInvestor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryInvestor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryInvestor_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryInvestor_resultTupleScheme getScheme() {
        return new reqQryInvestor_resultTupleScheme();
      }
    }

    private static class reqQryInvestor_resultTupleScheme extends TupleScheme<reqQryInvestor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryInvestor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryInvestor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryTradingCode_args implements org.apache.thrift.TBase<reqQryTradingCode_args, reqQryTradingCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryTradingCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryTradingCode_args");

    private static final org.apache.thrift.protocol.TField P_QRY_TRADING_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryTradingCode", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryTradingCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryTradingCode_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingCodeField pQryTradingCode; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_TRADING_CODE((short)1, "pQryTradingCode"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_TRADING_CODE
            return P_QRY_TRADING_CODE;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_TRADING_CODE, new org.apache.thrift.meta_data.FieldMetaData("pQryTradingCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingCodeField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryTradingCode_args.class, metaDataMap);
    }

    public reqQryTradingCode_args() {
    }

    public reqQryTradingCode_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingCodeField pQryTradingCode,
      int nRequestID)
    {
      this();
      this.pQryTradingCode = pQryTradingCode;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryTradingCode_args(reqQryTradingCode_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryTradingCode()) {
        this.pQryTradingCode = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingCodeField(other.pQryTradingCode);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryTradingCode_args deepCopy() {
      return new reqQryTradingCode_args(this);
    }

    @Override
    public void clear() {
      this.pQryTradingCode = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingCodeField getPQryTradingCode() {
      return this.pQryTradingCode;
    }

    public reqQryTradingCode_args setPQryTradingCode(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingCodeField pQryTradingCode) {
      this.pQryTradingCode = pQryTradingCode;
      return this;
    }

    public void unsetPQryTradingCode() {
      this.pQryTradingCode = null;
    }

    /** Returns true if field pQryTradingCode is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryTradingCode() {
      return this.pQryTradingCode != null;
    }

    public void setPQryTradingCodeIsSet(boolean value) {
      if (!value) {
        this.pQryTradingCode = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryTradingCode_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_TRADING_CODE:
        if (value == null) {
          unsetPQryTradingCode();
        } else {
          setPQryTradingCode((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingCodeField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_TRADING_CODE:
        return getPQryTradingCode();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_TRADING_CODE:
        return isSetPQryTradingCode();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryTradingCode_args)
        return this.equals((reqQryTradingCode_args)that);
      return false;
    }

    public boolean equals(reqQryTradingCode_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryTradingCode = true && this.isSetPQryTradingCode();
      boolean that_present_pQryTradingCode = true && that.isSetPQryTradingCode();
      if (this_present_pQryTradingCode || that_present_pQryTradingCode) {
        if (!(this_present_pQryTradingCode && that_present_pQryTradingCode))
          return false;
        if (!this.pQryTradingCode.equals(that.pQryTradingCode))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryTradingCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryTradingCode()).compareTo(other.isSetPQryTradingCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryTradingCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryTradingCode, other.pQryTradingCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryTradingCode_args(");
      boolean first = true;

      sb.append("pQryTradingCode:");
      if (this.pQryTradingCode == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryTradingCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryTradingCode != null) {
        pQryTradingCode.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryTradingCode_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryTradingCode_argsStandardScheme getScheme() {
        return new reqQryTradingCode_argsStandardScheme();
      }
    }

    private static class reqQryTradingCode_argsStandardScheme extends StandardScheme<reqQryTradingCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryTradingCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_TRADING_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryTradingCode = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingCodeField();
                struct.pQryTradingCode.read(iprot);
                struct.setPQryTradingCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryTradingCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryTradingCode != null) {
          oprot.writeFieldBegin(P_QRY_TRADING_CODE_FIELD_DESC);
          struct.pQryTradingCode.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryTradingCode_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryTradingCode_argsTupleScheme getScheme() {
        return new reqQryTradingCode_argsTupleScheme();
      }
    }

    private static class reqQryTradingCode_argsTupleScheme extends TupleScheme<reqQryTradingCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryTradingCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryTradingCode()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryTradingCode()) {
          struct.pQryTradingCode.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryTradingCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryTradingCode = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTradingCodeField();
          struct.pQryTradingCode.read(iprot);
          struct.setPQryTradingCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryTradingCode_result implements org.apache.thrift.TBase<reqQryTradingCode_result, reqQryTradingCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryTradingCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryTradingCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryTradingCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryTradingCode_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryTradingCode_result.class, metaDataMap);
    }

    public reqQryTradingCode_result() {
    }

    public reqQryTradingCode_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryTradingCode_result(reqQryTradingCode_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryTradingCode_result deepCopy() {
      return new reqQryTradingCode_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryTradingCode_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryTradingCode_result)
        return this.equals((reqQryTradingCode_result)that);
      return false;
    }

    public boolean equals(reqQryTradingCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryTradingCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryTradingCode_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryTradingCode_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryTradingCode_resultStandardScheme getScheme() {
        return new reqQryTradingCode_resultStandardScheme();
      }
    }

    private static class reqQryTradingCode_resultStandardScheme extends StandardScheme<reqQryTradingCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryTradingCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryTradingCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryTradingCode_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryTradingCode_resultTupleScheme getScheme() {
        return new reqQryTradingCode_resultTupleScheme();
      }
    }

    private static class reqQryTradingCode_resultTupleScheme extends TupleScheme<reqQryTradingCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryTradingCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryTradingCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryInstrumentMarginRate_args implements org.apache.thrift.TBase<reqQryInstrumentMarginRate_args, reqQryInstrumentMarginRate_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryInstrumentMarginRate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryInstrumentMarginRate_args");

    private static final org.apache.thrift.protocol.TField P_QRY_INSTRUMENT_MARGIN_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryInstrumentMarginRate", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryInstrumentMarginRate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryInstrumentMarginRate_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentMarginRateField pQryInstrumentMarginRate; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_INSTRUMENT_MARGIN_RATE((short)1, "pQryInstrumentMarginRate"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_INSTRUMENT_MARGIN_RATE
            return P_QRY_INSTRUMENT_MARGIN_RATE;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_INSTRUMENT_MARGIN_RATE, new org.apache.thrift.meta_data.FieldMetaData("pQryInstrumentMarginRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentMarginRateField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryInstrumentMarginRate_args.class, metaDataMap);
    }

    public reqQryInstrumentMarginRate_args() {
    }

    public reqQryInstrumentMarginRate_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentMarginRateField pQryInstrumentMarginRate,
      int nRequestID)
    {
      this();
      this.pQryInstrumentMarginRate = pQryInstrumentMarginRate;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryInstrumentMarginRate_args(reqQryInstrumentMarginRate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryInstrumentMarginRate()) {
        this.pQryInstrumentMarginRate = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentMarginRateField(other.pQryInstrumentMarginRate);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryInstrumentMarginRate_args deepCopy() {
      return new reqQryInstrumentMarginRate_args(this);
    }

    @Override
    public void clear() {
      this.pQryInstrumentMarginRate = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentMarginRateField getPQryInstrumentMarginRate() {
      return this.pQryInstrumentMarginRate;
    }

    public reqQryInstrumentMarginRate_args setPQryInstrumentMarginRate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentMarginRateField pQryInstrumentMarginRate) {
      this.pQryInstrumentMarginRate = pQryInstrumentMarginRate;
      return this;
    }

    public void unsetPQryInstrumentMarginRate() {
      this.pQryInstrumentMarginRate = null;
    }

    /** Returns true if field pQryInstrumentMarginRate is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryInstrumentMarginRate() {
      return this.pQryInstrumentMarginRate != null;
    }

    public void setPQryInstrumentMarginRateIsSet(boolean value) {
      if (!value) {
        this.pQryInstrumentMarginRate = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryInstrumentMarginRate_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_INSTRUMENT_MARGIN_RATE:
        if (value == null) {
          unsetPQryInstrumentMarginRate();
        } else {
          setPQryInstrumentMarginRate((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentMarginRateField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_INSTRUMENT_MARGIN_RATE:
        return getPQryInstrumentMarginRate();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_INSTRUMENT_MARGIN_RATE:
        return isSetPQryInstrumentMarginRate();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryInstrumentMarginRate_args)
        return this.equals((reqQryInstrumentMarginRate_args)that);
      return false;
    }

    public boolean equals(reqQryInstrumentMarginRate_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryInstrumentMarginRate = true && this.isSetPQryInstrumentMarginRate();
      boolean that_present_pQryInstrumentMarginRate = true && that.isSetPQryInstrumentMarginRate();
      if (this_present_pQryInstrumentMarginRate || that_present_pQryInstrumentMarginRate) {
        if (!(this_present_pQryInstrumentMarginRate && that_present_pQryInstrumentMarginRate))
          return false;
        if (!this.pQryInstrumentMarginRate.equals(that.pQryInstrumentMarginRate))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryInstrumentMarginRate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryInstrumentMarginRate()).compareTo(other.isSetPQryInstrumentMarginRate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryInstrumentMarginRate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryInstrumentMarginRate, other.pQryInstrumentMarginRate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryInstrumentMarginRate_args(");
      boolean first = true;

      sb.append("pQryInstrumentMarginRate:");
      if (this.pQryInstrumentMarginRate == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryInstrumentMarginRate);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryInstrumentMarginRate != null) {
        pQryInstrumentMarginRate.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryInstrumentMarginRate_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryInstrumentMarginRate_argsStandardScheme getScheme() {
        return new reqQryInstrumentMarginRate_argsStandardScheme();
      }
    }

    private static class reqQryInstrumentMarginRate_argsStandardScheme extends StandardScheme<reqQryInstrumentMarginRate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryInstrumentMarginRate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_INSTRUMENT_MARGIN_RATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryInstrumentMarginRate = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentMarginRateField();
                struct.pQryInstrumentMarginRate.read(iprot);
                struct.setPQryInstrumentMarginRateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryInstrumentMarginRate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryInstrumentMarginRate != null) {
          oprot.writeFieldBegin(P_QRY_INSTRUMENT_MARGIN_RATE_FIELD_DESC);
          struct.pQryInstrumentMarginRate.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryInstrumentMarginRate_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryInstrumentMarginRate_argsTupleScheme getScheme() {
        return new reqQryInstrumentMarginRate_argsTupleScheme();
      }
    }

    private static class reqQryInstrumentMarginRate_argsTupleScheme extends TupleScheme<reqQryInstrumentMarginRate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryInstrumentMarginRate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryInstrumentMarginRate()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryInstrumentMarginRate()) {
          struct.pQryInstrumentMarginRate.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryInstrumentMarginRate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryInstrumentMarginRate = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentMarginRateField();
          struct.pQryInstrumentMarginRate.read(iprot);
          struct.setPQryInstrumentMarginRateIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryInstrumentMarginRate_result implements org.apache.thrift.TBase<reqQryInstrumentMarginRate_result, reqQryInstrumentMarginRate_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryInstrumentMarginRate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryInstrumentMarginRate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryInstrumentMarginRate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryInstrumentMarginRate_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryInstrumentMarginRate_result.class, metaDataMap);
    }

    public reqQryInstrumentMarginRate_result() {
    }

    public reqQryInstrumentMarginRate_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryInstrumentMarginRate_result(reqQryInstrumentMarginRate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryInstrumentMarginRate_result deepCopy() {
      return new reqQryInstrumentMarginRate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryInstrumentMarginRate_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryInstrumentMarginRate_result)
        return this.equals((reqQryInstrumentMarginRate_result)that);
      return false;
    }

    public boolean equals(reqQryInstrumentMarginRate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryInstrumentMarginRate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryInstrumentMarginRate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryInstrumentMarginRate_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryInstrumentMarginRate_resultStandardScheme getScheme() {
        return new reqQryInstrumentMarginRate_resultStandardScheme();
      }
    }

    private static class reqQryInstrumentMarginRate_resultStandardScheme extends StandardScheme<reqQryInstrumentMarginRate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryInstrumentMarginRate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryInstrumentMarginRate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryInstrumentMarginRate_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryInstrumentMarginRate_resultTupleScheme getScheme() {
        return new reqQryInstrumentMarginRate_resultTupleScheme();
      }
    }

    private static class reqQryInstrumentMarginRate_resultTupleScheme extends TupleScheme<reqQryInstrumentMarginRate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryInstrumentMarginRate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryInstrumentMarginRate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryInstrumentCommissionRate_args implements org.apache.thrift.TBase<reqQryInstrumentCommissionRate_args, reqQryInstrumentCommissionRate_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryInstrumentCommissionRate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryInstrumentCommissionRate_args");

    private static final org.apache.thrift.protocol.TField P_QRY_INSTRUMENT_COMMISSION_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryInstrumentCommissionRate", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryInstrumentCommissionRate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryInstrumentCommissionRate_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentCommissionRateField pQryInstrumentCommissionRate; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_INSTRUMENT_COMMISSION_RATE((short)1, "pQryInstrumentCommissionRate"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_INSTRUMENT_COMMISSION_RATE
            return P_QRY_INSTRUMENT_COMMISSION_RATE;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_INSTRUMENT_COMMISSION_RATE, new org.apache.thrift.meta_data.FieldMetaData("pQryInstrumentCommissionRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentCommissionRateField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryInstrumentCommissionRate_args.class, metaDataMap);
    }

    public reqQryInstrumentCommissionRate_args() {
    }

    public reqQryInstrumentCommissionRate_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentCommissionRateField pQryInstrumentCommissionRate,
      int nRequestID)
    {
      this();
      this.pQryInstrumentCommissionRate = pQryInstrumentCommissionRate;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryInstrumentCommissionRate_args(reqQryInstrumentCommissionRate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryInstrumentCommissionRate()) {
        this.pQryInstrumentCommissionRate = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentCommissionRateField(other.pQryInstrumentCommissionRate);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryInstrumentCommissionRate_args deepCopy() {
      return new reqQryInstrumentCommissionRate_args(this);
    }

    @Override
    public void clear() {
      this.pQryInstrumentCommissionRate = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentCommissionRateField getPQryInstrumentCommissionRate() {
      return this.pQryInstrumentCommissionRate;
    }

    public reqQryInstrumentCommissionRate_args setPQryInstrumentCommissionRate(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentCommissionRateField pQryInstrumentCommissionRate) {
      this.pQryInstrumentCommissionRate = pQryInstrumentCommissionRate;
      return this;
    }

    public void unsetPQryInstrumentCommissionRate() {
      this.pQryInstrumentCommissionRate = null;
    }

    /** Returns true if field pQryInstrumentCommissionRate is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryInstrumentCommissionRate() {
      return this.pQryInstrumentCommissionRate != null;
    }

    public void setPQryInstrumentCommissionRateIsSet(boolean value) {
      if (!value) {
        this.pQryInstrumentCommissionRate = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryInstrumentCommissionRate_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_INSTRUMENT_COMMISSION_RATE:
        if (value == null) {
          unsetPQryInstrumentCommissionRate();
        } else {
          setPQryInstrumentCommissionRate((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentCommissionRateField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_INSTRUMENT_COMMISSION_RATE:
        return getPQryInstrumentCommissionRate();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_INSTRUMENT_COMMISSION_RATE:
        return isSetPQryInstrumentCommissionRate();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryInstrumentCommissionRate_args)
        return this.equals((reqQryInstrumentCommissionRate_args)that);
      return false;
    }

    public boolean equals(reqQryInstrumentCommissionRate_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryInstrumentCommissionRate = true && this.isSetPQryInstrumentCommissionRate();
      boolean that_present_pQryInstrumentCommissionRate = true && that.isSetPQryInstrumentCommissionRate();
      if (this_present_pQryInstrumentCommissionRate || that_present_pQryInstrumentCommissionRate) {
        if (!(this_present_pQryInstrumentCommissionRate && that_present_pQryInstrumentCommissionRate))
          return false;
        if (!this.pQryInstrumentCommissionRate.equals(that.pQryInstrumentCommissionRate))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryInstrumentCommissionRate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryInstrumentCommissionRate()).compareTo(other.isSetPQryInstrumentCommissionRate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryInstrumentCommissionRate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryInstrumentCommissionRate, other.pQryInstrumentCommissionRate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryInstrumentCommissionRate_args(");
      boolean first = true;

      sb.append("pQryInstrumentCommissionRate:");
      if (this.pQryInstrumentCommissionRate == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryInstrumentCommissionRate);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryInstrumentCommissionRate != null) {
        pQryInstrumentCommissionRate.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryInstrumentCommissionRate_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryInstrumentCommissionRate_argsStandardScheme getScheme() {
        return new reqQryInstrumentCommissionRate_argsStandardScheme();
      }
    }

    private static class reqQryInstrumentCommissionRate_argsStandardScheme extends StandardScheme<reqQryInstrumentCommissionRate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryInstrumentCommissionRate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_INSTRUMENT_COMMISSION_RATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryInstrumentCommissionRate = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentCommissionRateField();
                struct.pQryInstrumentCommissionRate.read(iprot);
                struct.setPQryInstrumentCommissionRateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryInstrumentCommissionRate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryInstrumentCommissionRate != null) {
          oprot.writeFieldBegin(P_QRY_INSTRUMENT_COMMISSION_RATE_FIELD_DESC);
          struct.pQryInstrumentCommissionRate.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryInstrumentCommissionRate_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryInstrumentCommissionRate_argsTupleScheme getScheme() {
        return new reqQryInstrumentCommissionRate_argsTupleScheme();
      }
    }

    private static class reqQryInstrumentCommissionRate_argsTupleScheme extends TupleScheme<reqQryInstrumentCommissionRate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryInstrumentCommissionRate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryInstrumentCommissionRate()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryInstrumentCommissionRate()) {
          struct.pQryInstrumentCommissionRate.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryInstrumentCommissionRate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryInstrumentCommissionRate = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentCommissionRateField();
          struct.pQryInstrumentCommissionRate.read(iprot);
          struct.setPQryInstrumentCommissionRateIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryInstrumentCommissionRate_result implements org.apache.thrift.TBase<reqQryInstrumentCommissionRate_result, reqQryInstrumentCommissionRate_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryInstrumentCommissionRate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryInstrumentCommissionRate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryInstrumentCommissionRate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryInstrumentCommissionRate_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryInstrumentCommissionRate_result.class, metaDataMap);
    }

    public reqQryInstrumentCommissionRate_result() {
    }

    public reqQryInstrumentCommissionRate_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryInstrumentCommissionRate_result(reqQryInstrumentCommissionRate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryInstrumentCommissionRate_result deepCopy() {
      return new reqQryInstrumentCommissionRate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryInstrumentCommissionRate_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryInstrumentCommissionRate_result)
        return this.equals((reqQryInstrumentCommissionRate_result)that);
      return false;
    }

    public boolean equals(reqQryInstrumentCommissionRate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryInstrumentCommissionRate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryInstrumentCommissionRate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryInstrumentCommissionRate_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryInstrumentCommissionRate_resultStandardScheme getScheme() {
        return new reqQryInstrumentCommissionRate_resultStandardScheme();
      }
    }

    private static class reqQryInstrumentCommissionRate_resultStandardScheme extends StandardScheme<reqQryInstrumentCommissionRate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryInstrumentCommissionRate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryInstrumentCommissionRate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryInstrumentCommissionRate_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryInstrumentCommissionRate_resultTupleScheme getScheme() {
        return new reqQryInstrumentCommissionRate_resultTupleScheme();
      }
    }

    private static class reqQryInstrumentCommissionRate_resultTupleScheme extends TupleScheme<reqQryInstrumentCommissionRate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryInstrumentCommissionRate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryInstrumentCommissionRate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryExchange_args implements org.apache.thrift.TBase<reqQryExchange_args, reqQryExchange_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryExchange_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryExchange_args");

    private static final org.apache.thrift.protocol.TField P_QRY_EXCHANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryExchange", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryExchange_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryExchange_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeField pQryExchange; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_EXCHANGE((short)1, "pQryExchange"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_EXCHANGE
            return P_QRY_EXCHANGE;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_EXCHANGE, new org.apache.thrift.meta_data.FieldMetaData("pQryExchange", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryExchange_args.class, metaDataMap);
    }

    public reqQryExchange_args() {
    }

    public reqQryExchange_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeField pQryExchange,
      int nRequestID)
    {
      this();
      this.pQryExchange = pQryExchange;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryExchange_args(reqQryExchange_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryExchange()) {
        this.pQryExchange = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeField(other.pQryExchange);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryExchange_args deepCopy() {
      return new reqQryExchange_args(this);
    }

    @Override
    public void clear() {
      this.pQryExchange = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeField getPQryExchange() {
      return this.pQryExchange;
    }

    public reqQryExchange_args setPQryExchange(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeField pQryExchange) {
      this.pQryExchange = pQryExchange;
      return this;
    }

    public void unsetPQryExchange() {
      this.pQryExchange = null;
    }

    /** Returns true if field pQryExchange is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryExchange() {
      return this.pQryExchange != null;
    }

    public void setPQryExchangeIsSet(boolean value) {
      if (!value) {
        this.pQryExchange = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryExchange_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_EXCHANGE:
        if (value == null) {
          unsetPQryExchange();
        } else {
          setPQryExchange((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_EXCHANGE:
        return getPQryExchange();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_EXCHANGE:
        return isSetPQryExchange();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryExchange_args)
        return this.equals((reqQryExchange_args)that);
      return false;
    }

    public boolean equals(reqQryExchange_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryExchange = true && this.isSetPQryExchange();
      boolean that_present_pQryExchange = true && that.isSetPQryExchange();
      if (this_present_pQryExchange || that_present_pQryExchange) {
        if (!(this_present_pQryExchange && that_present_pQryExchange))
          return false;
        if (!this.pQryExchange.equals(that.pQryExchange))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryExchange_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryExchange()).compareTo(other.isSetPQryExchange());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryExchange()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryExchange, other.pQryExchange);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryExchange_args(");
      boolean first = true;

      sb.append("pQryExchange:");
      if (this.pQryExchange == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryExchange);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryExchange != null) {
        pQryExchange.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryExchange_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryExchange_argsStandardScheme getScheme() {
        return new reqQryExchange_argsStandardScheme();
      }
    }

    private static class reqQryExchange_argsStandardScheme extends StandardScheme<reqQryExchange_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryExchange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_EXCHANGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryExchange = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeField();
                struct.pQryExchange.read(iprot);
                struct.setPQryExchangeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryExchange_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryExchange != null) {
          oprot.writeFieldBegin(P_QRY_EXCHANGE_FIELD_DESC);
          struct.pQryExchange.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryExchange_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryExchange_argsTupleScheme getScheme() {
        return new reqQryExchange_argsTupleScheme();
      }
    }

    private static class reqQryExchange_argsTupleScheme extends TupleScheme<reqQryExchange_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryExchange_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryExchange()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryExchange()) {
          struct.pQryExchange.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryExchange_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryExchange = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryExchangeField();
          struct.pQryExchange.read(iprot);
          struct.setPQryExchangeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryExchange_result implements org.apache.thrift.TBase<reqQryExchange_result, reqQryExchange_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryExchange_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryExchange_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryExchange_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryExchange_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryExchange_result.class, metaDataMap);
    }

    public reqQryExchange_result() {
    }

    public reqQryExchange_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryExchange_result(reqQryExchange_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryExchange_result deepCopy() {
      return new reqQryExchange_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryExchange_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryExchange_result)
        return this.equals((reqQryExchange_result)that);
      return false;
    }

    public boolean equals(reqQryExchange_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryExchange_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryExchange_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryExchange_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryExchange_resultStandardScheme getScheme() {
        return new reqQryExchange_resultStandardScheme();
      }
    }

    private static class reqQryExchange_resultStandardScheme extends StandardScheme<reqQryExchange_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryExchange_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryExchange_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryExchange_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryExchange_resultTupleScheme getScheme() {
        return new reqQryExchange_resultTupleScheme();
      }
    }

    private static class reqQryExchange_resultTupleScheme extends TupleScheme<reqQryExchange_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryExchange_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryExchange_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryProduct_args implements org.apache.thrift.TBase<reqQryProduct_args, reqQryProduct_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryProduct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryProduct_args");

    private static final org.apache.thrift.protocol.TField P_QRY_PRODUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryProduct", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryProduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryProduct_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryProductField pQryProduct; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_PRODUCT((short)1, "pQryProduct"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_PRODUCT
            return P_QRY_PRODUCT;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_PRODUCT, new org.apache.thrift.meta_data.FieldMetaData("pQryProduct", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryProductField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryProduct_args.class, metaDataMap);
    }

    public reqQryProduct_args() {
    }

    public reqQryProduct_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryProductField pQryProduct,
      int nRequestID)
    {
      this();
      this.pQryProduct = pQryProduct;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryProduct_args(reqQryProduct_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryProduct()) {
        this.pQryProduct = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryProductField(other.pQryProduct);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryProduct_args deepCopy() {
      return new reqQryProduct_args(this);
    }

    @Override
    public void clear() {
      this.pQryProduct = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryProductField getPQryProduct() {
      return this.pQryProduct;
    }

    public reqQryProduct_args setPQryProduct(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryProductField pQryProduct) {
      this.pQryProduct = pQryProduct;
      return this;
    }

    public void unsetPQryProduct() {
      this.pQryProduct = null;
    }

    /** Returns true if field pQryProduct is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryProduct() {
      return this.pQryProduct != null;
    }

    public void setPQryProductIsSet(boolean value) {
      if (!value) {
        this.pQryProduct = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryProduct_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_PRODUCT:
        if (value == null) {
          unsetPQryProduct();
        } else {
          setPQryProduct((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryProductField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_PRODUCT:
        return getPQryProduct();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_PRODUCT:
        return isSetPQryProduct();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryProduct_args)
        return this.equals((reqQryProduct_args)that);
      return false;
    }

    public boolean equals(reqQryProduct_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryProduct = true && this.isSetPQryProduct();
      boolean that_present_pQryProduct = true && that.isSetPQryProduct();
      if (this_present_pQryProduct || that_present_pQryProduct) {
        if (!(this_present_pQryProduct && that_present_pQryProduct))
          return false;
        if (!this.pQryProduct.equals(that.pQryProduct))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryProduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryProduct()).compareTo(other.isSetPQryProduct());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryProduct()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryProduct, other.pQryProduct);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryProduct_args(");
      boolean first = true;

      sb.append("pQryProduct:");
      if (this.pQryProduct == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryProduct);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryProduct != null) {
        pQryProduct.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryProduct_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryProduct_argsStandardScheme getScheme() {
        return new reqQryProduct_argsStandardScheme();
      }
    }

    private static class reqQryProduct_argsStandardScheme extends StandardScheme<reqQryProduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryProduct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_PRODUCT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryProduct = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryProductField();
                struct.pQryProduct.read(iprot);
                struct.setPQryProductIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryProduct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryProduct != null) {
          oprot.writeFieldBegin(P_QRY_PRODUCT_FIELD_DESC);
          struct.pQryProduct.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryProduct_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryProduct_argsTupleScheme getScheme() {
        return new reqQryProduct_argsTupleScheme();
      }
    }

    private static class reqQryProduct_argsTupleScheme extends TupleScheme<reqQryProduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryProduct()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryProduct()) {
          struct.pQryProduct.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryProduct = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryProductField();
          struct.pQryProduct.read(iprot);
          struct.setPQryProductIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryProduct_result implements org.apache.thrift.TBase<reqQryProduct_result, reqQryProduct_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryProduct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryProduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryProduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryProduct_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryProduct_result.class, metaDataMap);
    }

    public reqQryProduct_result() {
    }

    public reqQryProduct_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryProduct_result(reqQryProduct_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryProduct_result deepCopy() {
      return new reqQryProduct_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryProduct_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryProduct_result)
        return this.equals((reqQryProduct_result)that);
      return false;
    }

    public boolean equals(reqQryProduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryProduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryProduct_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryProduct_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryProduct_resultStandardScheme getScheme() {
        return new reqQryProduct_resultStandardScheme();
      }
    }

    private static class reqQryProduct_resultStandardScheme extends StandardScheme<reqQryProduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryProduct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryProduct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryProduct_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryProduct_resultTupleScheme getScheme() {
        return new reqQryProduct_resultTupleScheme();
      }
    }

    private static class reqQryProduct_resultTupleScheme extends TupleScheme<reqQryProduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryInstrument_args implements org.apache.thrift.TBase<reqQryInstrument_args, reqQryInstrument_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryInstrument_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryInstrument_args");

    private static final org.apache.thrift.protocol.TField P_QRY_INSTRUMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryInstrument", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryInstrument_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryInstrument_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentField pQryInstrument; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_INSTRUMENT((short)1, "pQryInstrument"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_INSTRUMENT
            return P_QRY_INSTRUMENT;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_INSTRUMENT, new org.apache.thrift.meta_data.FieldMetaData("pQryInstrument", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryInstrument_args.class, metaDataMap);
    }

    public reqQryInstrument_args() {
    }

    public reqQryInstrument_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentField pQryInstrument,
      int nRequestID)
    {
      this();
      this.pQryInstrument = pQryInstrument;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryInstrument_args(reqQryInstrument_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryInstrument()) {
        this.pQryInstrument = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentField(other.pQryInstrument);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryInstrument_args deepCopy() {
      return new reqQryInstrument_args(this);
    }

    @Override
    public void clear() {
      this.pQryInstrument = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentField getPQryInstrument() {
      return this.pQryInstrument;
    }

    public reqQryInstrument_args setPQryInstrument(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentField pQryInstrument) {
      this.pQryInstrument = pQryInstrument;
      return this;
    }

    public void unsetPQryInstrument() {
      this.pQryInstrument = null;
    }

    /** Returns true if field pQryInstrument is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryInstrument() {
      return this.pQryInstrument != null;
    }

    public void setPQryInstrumentIsSet(boolean value) {
      if (!value) {
        this.pQryInstrument = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryInstrument_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_INSTRUMENT:
        if (value == null) {
          unsetPQryInstrument();
        } else {
          setPQryInstrument((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_INSTRUMENT:
        return getPQryInstrument();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_INSTRUMENT:
        return isSetPQryInstrument();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryInstrument_args)
        return this.equals((reqQryInstrument_args)that);
      return false;
    }

    public boolean equals(reqQryInstrument_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryInstrument = true && this.isSetPQryInstrument();
      boolean that_present_pQryInstrument = true && that.isSetPQryInstrument();
      if (this_present_pQryInstrument || that_present_pQryInstrument) {
        if (!(this_present_pQryInstrument && that_present_pQryInstrument))
          return false;
        if (!this.pQryInstrument.equals(that.pQryInstrument))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryInstrument_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryInstrument()).compareTo(other.isSetPQryInstrument());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryInstrument()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryInstrument, other.pQryInstrument);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryInstrument_args(");
      boolean first = true;

      sb.append("pQryInstrument:");
      if (this.pQryInstrument == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryInstrument);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryInstrument != null) {
        pQryInstrument.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryInstrument_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryInstrument_argsStandardScheme getScheme() {
        return new reqQryInstrument_argsStandardScheme();
      }
    }

    private static class reqQryInstrument_argsStandardScheme extends StandardScheme<reqQryInstrument_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryInstrument_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_INSTRUMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryInstrument = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentField();
                struct.pQryInstrument.read(iprot);
                struct.setPQryInstrumentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryInstrument_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryInstrument != null) {
          oprot.writeFieldBegin(P_QRY_INSTRUMENT_FIELD_DESC);
          struct.pQryInstrument.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryInstrument_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryInstrument_argsTupleScheme getScheme() {
        return new reqQryInstrument_argsTupleScheme();
      }
    }

    private static class reqQryInstrument_argsTupleScheme extends TupleScheme<reqQryInstrument_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryInstrument_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryInstrument()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryInstrument()) {
          struct.pQryInstrument.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryInstrument_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryInstrument = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInstrumentField();
          struct.pQryInstrument.read(iprot);
          struct.setPQryInstrumentIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryInstrument_result implements org.apache.thrift.TBase<reqQryInstrument_result, reqQryInstrument_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryInstrument_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryInstrument_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryInstrument_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryInstrument_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryInstrument_result.class, metaDataMap);
    }

    public reqQryInstrument_result() {
    }

    public reqQryInstrument_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryInstrument_result(reqQryInstrument_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryInstrument_result deepCopy() {
      return new reqQryInstrument_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryInstrument_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryInstrument_result)
        return this.equals((reqQryInstrument_result)that);
      return false;
    }

    public boolean equals(reqQryInstrument_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryInstrument_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryInstrument_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryInstrument_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryInstrument_resultStandardScheme getScheme() {
        return new reqQryInstrument_resultStandardScheme();
      }
    }

    private static class reqQryInstrument_resultStandardScheme extends StandardScheme<reqQryInstrument_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryInstrument_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryInstrument_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryInstrument_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryInstrument_resultTupleScheme getScheme() {
        return new reqQryInstrument_resultTupleScheme();
      }
    }

    private static class reqQryInstrument_resultTupleScheme extends TupleScheme<reqQryInstrument_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryInstrument_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryInstrument_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryDepthMarketData_args implements org.apache.thrift.TBase<reqQryDepthMarketData_args, reqQryDepthMarketData_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryDepthMarketData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryDepthMarketData_args");

    private static final org.apache.thrift.protocol.TField P_QRY_DEPTH_MARKET_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryDepthMarketData", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryDepthMarketData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryDepthMarketData_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryDepthMarketDataField pQryDepthMarketData; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_DEPTH_MARKET_DATA((short)1, "pQryDepthMarketData"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_DEPTH_MARKET_DATA
            return P_QRY_DEPTH_MARKET_DATA;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_DEPTH_MARKET_DATA, new org.apache.thrift.meta_data.FieldMetaData("pQryDepthMarketData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryDepthMarketDataField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryDepthMarketData_args.class, metaDataMap);
    }

    public reqQryDepthMarketData_args() {
    }

    public reqQryDepthMarketData_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryDepthMarketDataField pQryDepthMarketData,
      int nRequestID)
    {
      this();
      this.pQryDepthMarketData = pQryDepthMarketData;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryDepthMarketData_args(reqQryDepthMarketData_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryDepthMarketData()) {
        this.pQryDepthMarketData = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryDepthMarketDataField(other.pQryDepthMarketData);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryDepthMarketData_args deepCopy() {
      return new reqQryDepthMarketData_args(this);
    }

    @Override
    public void clear() {
      this.pQryDepthMarketData = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryDepthMarketDataField getPQryDepthMarketData() {
      return this.pQryDepthMarketData;
    }

    public reqQryDepthMarketData_args setPQryDepthMarketData(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryDepthMarketDataField pQryDepthMarketData) {
      this.pQryDepthMarketData = pQryDepthMarketData;
      return this;
    }

    public void unsetPQryDepthMarketData() {
      this.pQryDepthMarketData = null;
    }

    /** Returns true if field pQryDepthMarketData is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryDepthMarketData() {
      return this.pQryDepthMarketData != null;
    }

    public void setPQryDepthMarketDataIsSet(boolean value) {
      if (!value) {
        this.pQryDepthMarketData = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryDepthMarketData_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_DEPTH_MARKET_DATA:
        if (value == null) {
          unsetPQryDepthMarketData();
        } else {
          setPQryDepthMarketData((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryDepthMarketDataField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_DEPTH_MARKET_DATA:
        return getPQryDepthMarketData();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_DEPTH_MARKET_DATA:
        return isSetPQryDepthMarketData();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryDepthMarketData_args)
        return this.equals((reqQryDepthMarketData_args)that);
      return false;
    }

    public boolean equals(reqQryDepthMarketData_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryDepthMarketData = true && this.isSetPQryDepthMarketData();
      boolean that_present_pQryDepthMarketData = true && that.isSetPQryDepthMarketData();
      if (this_present_pQryDepthMarketData || that_present_pQryDepthMarketData) {
        if (!(this_present_pQryDepthMarketData && that_present_pQryDepthMarketData))
          return false;
        if (!this.pQryDepthMarketData.equals(that.pQryDepthMarketData))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryDepthMarketData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryDepthMarketData()).compareTo(other.isSetPQryDepthMarketData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryDepthMarketData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryDepthMarketData, other.pQryDepthMarketData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryDepthMarketData_args(");
      boolean first = true;

      sb.append("pQryDepthMarketData:");
      if (this.pQryDepthMarketData == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryDepthMarketData);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryDepthMarketData != null) {
        pQryDepthMarketData.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryDepthMarketData_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryDepthMarketData_argsStandardScheme getScheme() {
        return new reqQryDepthMarketData_argsStandardScheme();
      }
    }

    private static class reqQryDepthMarketData_argsStandardScheme extends StandardScheme<reqQryDepthMarketData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryDepthMarketData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_DEPTH_MARKET_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryDepthMarketData = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryDepthMarketDataField();
                struct.pQryDepthMarketData.read(iprot);
                struct.setPQryDepthMarketDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryDepthMarketData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryDepthMarketData != null) {
          oprot.writeFieldBegin(P_QRY_DEPTH_MARKET_DATA_FIELD_DESC);
          struct.pQryDepthMarketData.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryDepthMarketData_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryDepthMarketData_argsTupleScheme getScheme() {
        return new reqQryDepthMarketData_argsTupleScheme();
      }
    }

    private static class reqQryDepthMarketData_argsTupleScheme extends TupleScheme<reqQryDepthMarketData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryDepthMarketData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryDepthMarketData()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryDepthMarketData()) {
          struct.pQryDepthMarketData.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryDepthMarketData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryDepthMarketData = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryDepthMarketDataField();
          struct.pQryDepthMarketData.read(iprot);
          struct.setPQryDepthMarketDataIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryDepthMarketData_result implements org.apache.thrift.TBase<reqQryDepthMarketData_result, reqQryDepthMarketData_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryDepthMarketData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryDepthMarketData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryDepthMarketData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryDepthMarketData_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryDepthMarketData_result.class, metaDataMap);
    }

    public reqQryDepthMarketData_result() {
    }

    public reqQryDepthMarketData_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryDepthMarketData_result(reqQryDepthMarketData_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryDepthMarketData_result deepCopy() {
      return new reqQryDepthMarketData_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryDepthMarketData_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryDepthMarketData_result)
        return this.equals((reqQryDepthMarketData_result)that);
      return false;
    }

    public boolean equals(reqQryDepthMarketData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryDepthMarketData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryDepthMarketData_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryDepthMarketData_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryDepthMarketData_resultStandardScheme getScheme() {
        return new reqQryDepthMarketData_resultStandardScheme();
      }
    }

    private static class reqQryDepthMarketData_resultStandardScheme extends StandardScheme<reqQryDepthMarketData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryDepthMarketData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryDepthMarketData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryDepthMarketData_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryDepthMarketData_resultTupleScheme getScheme() {
        return new reqQryDepthMarketData_resultTupleScheme();
      }
    }

    private static class reqQryDepthMarketData_resultTupleScheme extends TupleScheme<reqQryDepthMarketData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryDepthMarketData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryDepthMarketData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQrySettlementInfo_args implements org.apache.thrift.TBase<reqQrySettlementInfo_args, reqQrySettlementInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQrySettlementInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQrySettlementInfo_args");

    private static final org.apache.thrift.protocol.TField P_QRY_SETTLEMENT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("pQrySettlementInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQrySettlementInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQrySettlementInfo_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoField pQrySettlementInfo; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_SETTLEMENT_INFO((short)1, "pQrySettlementInfo"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_SETTLEMENT_INFO
            return P_QRY_SETTLEMENT_INFO;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_SETTLEMENT_INFO, new org.apache.thrift.meta_data.FieldMetaData("pQrySettlementInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQrySettlementInfo_args.class, metaDataMap);
    }

    public reqQrySettlementInfo_args() {
    }

    public reqQrySettlementInfo_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoField pQrySettlementInfo,
      int nRequestID)
    {
      this();
      this.pQrySettlementInfo = pQrySettlementInfo;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQrySettlementInfo_args(reqQrySettlementInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQrySettlementInfo()) {
        this.pQrySettlementInfo = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoField(other.pQrySettlementInfo);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQrySettlementInfo_args deepCopy() {
      return new reqQrySettlementInfo_args(this);
    }

    @Override
    public void clear() {
      this.pQrySettlementInfo = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoField getPQrySettlementInfo() {
      return this.pQrySettlementInfo;
    }

    public reqQrySettlementInfo_args setPQrySettlementInfo(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoField pQrySettlementInfo) {
      this.pQrySettlementInfo = pQrySettlementInfo;
      return this;
    }

    public void unsetPQrySettlementInfo() {
      this.pQrySettlementInfo = null;
    }

    /** Returns true if field pQrySettlementInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetPQrySettlementInfo() {
      return this.pQrySettlementInfo != null;
    }

    public void setPQrySettlementInfoIsSet(boolean value) {
      if (!value) {
        this.pQrySettlementInfo = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQrySettlementInfo_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_SETTLEMENT_INFO:
        if (value == null) {
          unsetPQrySettlementInfo();
        } else {
          setPQrySettlementInfo((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_SETTLEMENT_INFO:
        return getPQrySettlementInfo();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_SETTLEMENT_INFO:
        return isSetPQrySettlementInfo();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQrySettlementInfo_args)
        return this.equals((reqQrySettlementInfo_args)that);
      return false;
    }

    public boolean equals(reqQrySettlementInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_pQrySettlementInfo = true && this.isSetPQrySettlementInfo();
      boolean that_present_pQrySettlementInfo = true && that.isSetPQrySettlementInfo();
      if (this_present_pQrySettlementInfo || that_present_pQrySettlementInfo) {
        if (!(this_present_pQrySettlementInfo && that_present_pQrySettlementInfo))
          return false;
        if (!this.pQrySettlementInfo.equals(that.pQrySettlementInfo))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQrySettlementInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQrySettlementInfo()).compareTo(other.isSetPQrySettlementInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQrySettlementInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQrySettlementInfo, other.pQrySettlementInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQrySettlementInfo_args(");
      boolean first = true;

      sb.append("pQrySettlementInfo:");
      if (this.pQrySettlementInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.pQrySettlementInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQrySettlementInfo != null) {
        pQrySettlementInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQrySettlementInfo_argsStandardSchemeFactory implements SchemeFactory {
      public reqQrySettlementInfo_argsStandardScheme getScheme() {
        return new reqQrySettlementInfo_argsStandardScheme();
      }
    }

    private static class reqQrySettlementInfo_argsStandardScheme extends StandardScheme<reqQrySettlementInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQrySettlementInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_SETTLEMENT_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQrySettlementInfo = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoField();
                struct.pQrySettlementInfo.read(iprot);
                struct.setPQrySettlementInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQrySettlementInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQrySettlementInfo != null) {
          oprot.writeFieldBegin(P_QRY_SETTLEMENT_INFO_FIELD_DESC);
          struct.pQrySettlementInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQrySettlementInfo_argsTupleSchemeFactory implements SchemeFactory {
      public reqQrySettlementInfo_argsTupleScheme getScheme() {
        return new reqQrySettlementInfo_argsTupleScheme();
      }
    }

    private static class reqQrySettlementInfo_argsTupleScheme extends TupleScheme<reqQrySettlementInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQrySettlementInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQrySettlementInfo()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQrySettlementInfo()) {
          struct.pQrySettlementInfo.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQrySettlementInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQrySettlementInfo = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQrySettlementInfoField();
          struct.pQrySettlementInfo.read(iprot);
          struct.setPQrySettlementInfoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQrySettlementInfo_result implements org.apache.thrift.TBase<reqQrySettlementInfo_result, reqQrySettlementInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQrySettlementInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQrySettlementInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQrySettlementInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQrySettlementInfo_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQrySettlementInfo_result.class, metaDataMap);
    }

    public reqQrySettlementInfo_result() {
    }

    public reqQrySettlementInfo_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQrySettlementInfo_result(reqQrySettlementInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQrySettlementInfo_result deepCopy() {
      return new reqQrySettlementInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQrySettlementInfo_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQrySettlementInfo_result)
        return this.equals((reqQrySettlementInfo_result)that);
      return false;
    }

    public boolean equals(reqQrySettlementInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQrySettlementInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQrySettlementInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQrySettlementInfo_resultStandardSchemeFactory implements SchemeFactory {
      public reqQrySettlementInfo_resultStandardScheme getScheme() {
        return new reqQrySettlementInfo_resultStandardScheme();
      }
    }

    private static class reqQrySettlementInfo_resultStandardScheme extends StandardScheme<reqQrySettlementInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQrySettlementInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQrySettlementInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQrySettlementInfo_resultTupleSchemeFactory implements SchemeFactory {
      public reqQrySettlementInfo_resultTupleScheme getScheme() {
        return new reqQrySettlementInfo_resultTupleScheme();
      }
    }

    private static class reqQrySettlementInfo_resultTupleScheme extends TupleScheme<reqQrySettlementInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQrySettlementInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQrySettlementInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryTransferBank_args implements org.apache.thrift.TBase<reqQryTransferBank_args, reqQryTransferBank_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryTransferBank_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryTransferBank_args");

    private static final org.apache.thrift.protocol.TField P_QRY_TRANSFER_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryTransferBank", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryTransferBank_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryTransferBank_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferBankField pQryTransferBank; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_TRANSFER_BANK((short)1, "pQryTransferBank"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_TRANSFER_BANK
            return P_QRY_TRANSFER_BANK;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_TRANSFER_BANK, new org.apache.thrift.meta_data.FieldMetaData("pQryTransferBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferBankField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryTransferBank_args.class, metaDataMap);
    }

    public reqQryTransferBank_args() {
    }

    public reqQryTransferBank_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferBankField pQryTransferBank,
      int nRequestID)
    {
      this();
      this.pQryTransferBank = pQryTransferBank;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryTransferBank_args(reqQryTransferBank_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryTransferBank()) {
        this.pQryTransferBank = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferBankField(other.pQryTransferBank);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryTransferBank_args deepCopy() {
      return new reqQryTransferBank_args(this);
    }

    @Override
    public void clear() {
      this.pQryTransferBank = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferBankField getPQryTransferBank() {
      return this.pQryTransferBank;
    }

    public reqQryTransferBank_args setPQryTransferBank(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferBankField pQryTransferBank) {
      this.pQryTransferBank = pQryTransferBank;
      return this;
    }

    public void unsetPQryTransferBank() {
      this.pQryTransferBank = null;
    }

    /** Returns true if field pQryTransferBank is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryTransferBank() {
      return this.pQryTransferBank != null;
    }

    public void setPQryTransferBankIsSet(boolean value) {
      if (!value) {
        this.pQryTransferBank = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryTransferBank_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_TRANSFER_BANK:
        if (value == null) {
          unsetPQryTransferBank();
        } else {
          setPQryTransferBank((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferBankField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_TRANSFER_BANK:
        return getPQryTransferBank();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_TRANSFER_BANK:
        return isSetPQryTransferBank();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryTransferBank_args)
        return this.equals((reqQryTransferBank_args)that);
      return false;
    }

    public boolean equals(reqQryTransferBank_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryTransferBank = true && this.isSetPQryTransferBank();
      boolean that_present_pQryTransferBank = true && that.isSetPQryTransferBank();
      if (this_present_pQryTransferBank || that_present_pQryTransferBank) {
        if (!(this_present_pQryTransferBank && that_present_pQryTransferBank))
          return false;
        if (!this.pQryTransferBank.equals(that.pQryTransferBank))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryTransferBank_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryTransferBank()).compareTo(other.isSetPQryTransferBank());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryTransferBank()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryTransferBank, other.pQryTransferBank);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryTransferBank_args(");
      boolean first = true;

      sb.append("pQryTransferBank:");
      if (this.pQryTransferBank == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryTransferBank);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryTransferBank != null) {
        pQryTransferBank.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryTransferBank_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryTransferBank_argsStandardScheme getScheme() {
        return new reqQryTransferBank_argsStandardScheme();
      }
    }

    private static class reqQryTransferBank_argsStandardScheme extends StandardScheme<reqQryTransferBank_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryTransferBank_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_TRANSFER_BANK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryTransferBank = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferBankField();
                struct.pQryTransferBank.read(iprot);
                struct.setPQryTransferBankIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryTransferBank_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryTransferBank != null) {
          oprot.writeFieldBegin(P_QRY_TRANSFER_BANK_FIELD_DESC);
          struct.pQryTransferBank.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryTransferBank_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryTransferBank_argsTupleScheme getScheme() {
        return new reqQryTransferBank_argsTupleScheme();
      }
    }

    private static class reqQryTransferBank_argsTupleScheme extends TupleScheme<reqQryTransferBank_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryTransferBank_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryTransferBank()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryTransferBank()) {
          struct.pQryTransferBank.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryTransferBank_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryTransferBank = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryTransferBankField();
          struct.pQryTransferBank.read(iprot);
          struct.setPQryTransferBankIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryTransferBank_result implements org.apache.thrift.TBase<reqQryTransferBank_result, reqQryTransferBank_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryTransferBank_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryTransferBank_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryTransferBank_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryTransferBank_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryTransferBank_result.class, metaDataMap);
    }

    public reqQryTransferBank_result() {
    }

    public reqQryTransferBank_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryTransferBank_result(reqQryTransferBank_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryTransferBank_result deepCopy() {
      return new reqQryTransferBank_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryTransferBank_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryTransferBank_result)
        return this.equals((reqQryTransferBank_result)that);
      return false;
    }

    public boolean equals(reqQryTransferBank_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryTransferBank_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryTransferBank_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryTransferBank_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryTransferBank_resultStandardScheme getScheme() {
        return new reqQryTransferBank_resultStandardScheme();
      }
    }

    private static class reqQryTransferBank_resultStandardScheme extends StandardScheme<reqQryTransferBank_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryTransferBank_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryTransferBank_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryTransferBank_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryTransferBank_resultTupleScheme getScheme() {
        return new reqQryTransferBank_resultTupleScheme();
      }
    }

    private static class reqQryTransferBank_resultTupleScheme extends TupleScheme<reqQryTransferBank_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryTransferBank_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryTransferBank_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqQryInvestorPositionDetail_args implements org.apache.thrift.TBase<reqQryInvestorPositionDetail_args, reqQryInvestorPositionDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryInvestorPositionDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryInvestorPositionDetail_args");

    private static final org.apache.thrift.protocol.TField P_QRY_INVESTOR_POSITION_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("pQryInvestorPositionDetail", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nRequestID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryInvestorPositionDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryInvestorPositionDetail_argsTupleSchemeFactory());
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionDetailField pQryInvestorPositionDetail; // required
    public int nRequestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_QRY_INVESTOR_POSITION_DETAIL((short)1, "pQryInvestorPositionDetail"),
      N_REQUEST_ID((short)2, "nRequestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_QRY_INVESTOR_POSITION_DETAIL
            return P_QRY_INVESTOR_POSITION_DETAIL;
          case 2: // N_REQUEST_ID
            return N_REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NREQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_QRY_INVESTOR_POSITION_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("pQryInvestorPositionDetail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionDetailField.class)));
      tmpMap.put(_Fields.N_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("nRequestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryInvestorPositionDetail_args.class, metaDataMap);
    }

    public reqQryInvestorPositionDetail_args() {
    }

    public reqQryInvestorPositionDetail_args(
      cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionDetailField pQryInvestorPositionDetail,
      int nRequestID)
    {
      this();
      this.pQryInvestorPositionDetail = pQryInvestorPositionDetail;
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryInvestorPositionDetail_args(reqQryInvestorPositionDetail_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPQryInvestorPositionDetail()) {
        this.pQryInvestorPositionDetail = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionDetailField(other.pQryInvestorPositionDetail);
      }
      this.nRequestID = other.nRequestID;
    }

    public reqQryInvestorPositionDetail_args deepCopy() {
      return new reqQryInvestorPositionDetail_args(this);
    }

    @Override
    public void clear() {
      this.pQryInvestorPositionDetail = null;
      setNRequestIDIsSet(false);
      this.nRequestID = 0;
    }

    public cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionDetailField getPQryInvestorPositionDetail() {
      return this.pQryInvestorPositionDetail;
    }

    public reqQryInvestorPositionDetail_args setPQryInvestorPositionDetail(cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionDetailField pQryInvestorPositionDetail) {
      this.pQryInvestorPositionDetail = pQryInvestorPositionDetail;
      return this;
    }

    public void unsetPQryInvestorPositionDetail() {
      this.pQryInvestorPositionDetail = null;
    }

    /** Returns true if field pQryInvestorPositionDetail is set (has been assigned a value) and false otherwise */
    public boolean isSetPQryInvestorPositionDetail() {
      return this.pQryInvestorPositionDetail != null;
    }

    public void setPQryInvestorPositionDetailIsSet(boolean value) {
      if (!value) {
        this.pQryInvestorPositionDetail = null;
      }
    }

    public int getNRequestID() {
      return this.nRequestID;
    }

    public reqQryInvestorPositionDetail_args setNRequestID(int nRequestID) {
      this.nRequestID = nRequestID;
      setNRequestIDIsSet(true);
      return this;
    }

    public void unsetNRequestID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    /** Returns true if field nRequestID is set (has been assigned a value) and false otherwise */
    public boolean isSetNRequestID() {
      return EncodingUtils.testBit(__isset_bitfield, __NREQUESTID_ISSET_ID);
    }

    public void setNRequestIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NREQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_QRY_INVESTOR_POSITION_DETAIL:
        if (value == null) {
          unsetPQryInvestorPositionDetail();
        } else {
          setPQryInvestorPositionDetail((cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionDetailField)value);
        }
        break;

      case N_REQUEST_ID:
        if (value == null) {
          unsetNRequestID();
        } else {
          setNRequestID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_QRY_INVESTOR_POSITION_DETAIL:
        return getPQryInvestorPositionDetail();

      case N_REQUEST_ID:
        return Integer.valueOf(getNRequestID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_QRY_INVESTOR_POSITION_DETAIL:
        return isSetPQryInvestorPositionDetail();
      case N_REQUEST_ID:
        return isSetNRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryInvestorPositionDetail_args)
        return this.equals((reqQryInvestorPositionDetail_args)that);
      return false;
    }

    public boolean equals(reqQryInvestorPositionDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_pQryInvestorPositionDetail = true && this.isSetPQryInvestorPositionDetail();
      boolean that_present_pQryInvestorPositionDetail = true && that.isSetPQryInvestorPositionDetail();
      if (this_present_pQryInvestorPositionDetail || that_present_pQryInvestorPositionDetail) {
        if (!(this_present_pQryInvestorPositionDetail && that_present_pQryInvestorPositionDetail))
          return false;
        if (!this.pQryInvestorPositionDetail.equals(that.pQryInvestorPositionDetail))
          return false;
      }

      boolean this_present_nRequestID = true;
      boolean that_present_nRequestID = true;
      if (this_present_nRequestID || that_present_nRequestID) {
        if (!(this_present_nRequestID && that_present_nRequestID))
          return false;
        if (this.nRequestID != that.nRequestID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryInvestorPositionDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPQryInvestorPositionDetail()).compareTo(other.isSetPQryInvestorPositionDetail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPQryInvestorPositionDetail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pQryInvestorPositionDetail, other.pQryInvestorPositionDetail);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNRequestID()).compareTo(other.isSetNRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nRequestID, other.nRequestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryInvestorPositionDetail_args(");
      boolean first = true;

      sb.append("pQryInvestorPositionDetail:");
      if (this.pQryInvestorPositionDetail == null) {
        sb.append("null");
      } else {
        sb.append(this.pQryInvestorPositionDetail);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nRequestID:");
      sb.append(this.nRequestID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pQryInvestorPositionDetail != null) {
        pQryInvestorPositionDetail.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryInvestorPositionDetail_argsStandardSchemeFactory implements SchemeFactory {
      public reqQryInvestorPositionDetail_argsStandardScheme getScheme() {
        return new reqQryInvestorPositionDetail_argsStandardScheme();
      }
    }

    private static class reqQryInvestorPositionDetail_argsStandardScheme extends StandardScheme<reqQryInvestorPositionDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryInvestorPositionDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_QRY_INVESTOR_POSITION_DETAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pQryInvestorPositionDetail = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionDetailField();
                struct.pQryInvestorPositionDetail.read(iprot);
                struct.setPQryInvestorPositionDetailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nRequestID = iprot.readI32();
                struct.setNRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryInvestorPositionDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pQryInvestorPositionDetail != null) {
          oprot.writeFieldBegin(P_QRY_INVESTOR_POSITION_DETAIL_FIELD_DESC);
          struct.pQryInvestorPositionDetail.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.nRequestID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryInvestorPositionDetail_argsTupleSchemeFactory implements SchemeFactory {
      public reqQryInvestorPositionDetail_argsTupleScheme getScheme() {
        return new reqQryInvestorPositionDetail_argsTupleScheme();
      }
    }

    private static class reqQryInvestorPositionDetail_argsTupleScheme extends TupleScheme<reqQryInvestorPositionDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryInvestorPositionDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPQryInvestorPositionDetail()) {
          optionals.set(0);
        }
        if (struct.isSetNRequestID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPQryInvestorPositionDetail()) {
          struct.pQryInvestorPositionDetail.write(oprot);
        }
        if (struct.isSetNRequestID()) {
          oprot.writeI32(struct.nRequestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryInvestorPositionDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pQryInvestorPositionDetail = new cn.kkworld.futuresservice.cmsTrade.CThostFtdcQryInvestorPositionDetailField();
          struct.pQryInvestorPositionDetail.read(iprot);
          struct.setPQryInvestorPositionDetailIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nRequestID = iprot.readI32();
          struct.setNRequestIDIsSet(true);
        }
      }
    }

  }

  public static class reqQryInvestorPositionDetail_result implements org.apache.thrift.TBase<reqQryInvestorPositionDetail_result, reqQryInvestorPositionDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqQryInvestorPositionDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqQryInvestorPositionDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqQryInvestorPositionDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqQryInvestorPositionDetail_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqQryInvestorPositionDetail_result.class, metaDataMap);
    }

    public reqQryInvestorPositionDetail_result() {
    }

    public reqQryInvestorPositionDetail_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqQryInvestorPositionDetail_result(reqQryInvestorPositionDetail_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reqQryInvestorPositionDetail_result deepCopy() {
      return new reqQryInvestorPositionDetail_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reqQryInvestorPositionDetail_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqQryInvestorPositionDetail_result)
        return this.equals((reqQryInvestorPositionDetail_result)that);
      return false;
    }

    public boolean equals(reqQryInvestorPositionDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqQryInvestorPositionDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqQryInvestorPositionDetail_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqQryInvestorPositionDetail_resultStandardSchemeFactory implements SchemeFactory {
      public reqQryInvestorPositionDetail_resultStandardScheme getScheme() {
        return new reqQryInvestorPositionDetail_resultStandardScheme();
      }
    }

    private static class reqQryInvestorPositionDetail_resultStandardScheme extends StandardScheme<reqQryInvestorPositionDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqQryInvestorPositionDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqQryInvestorPositionDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqQryInvestorPositionDetail_resultTupleSchemeFactory implements SchemeFactory {
      public reqQryInvestorPositionDetail_resultTupleScheme getScheme() {
        return new reqQryInvestorPositionDetail_resultTupleScheme();
      }
    }

    private static class reqQryInvestorPositionDetail_resultTupleScheme extends TupleScheme<reqQryInvestorPositionDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqQryInvestorPositionDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqQryInvestorPositionDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
