/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcMarketDataAsk45Field implements org.apache.thrift.TBase<CThostFtdcMarketDataAsk45Field, CThostFtdcMarketDataAsk45Field._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcMarketDataAsk45Field> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcMarketDataAsk45Field");

  private static final org.apache.thrift.protocol.TField ASK_PRICE4_FIELD_DESC = new org.apache.thrift.protocol.TField("askPrice4", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField ASK_VOLUME4_FIELD_DESC = new org.apache.thrift.protocol.TField("askVolume4", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ASK_PRICE5_FIELD_DESC = new org.apache.thrift.protocol.TField("askPrice5", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField ASK_VOLUME5_FIELD_DESC = new org.apache.thrift.protocol.TField("askVolume5", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcMarketDataAsk45FieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcMarketDataAsk45FieldTupleSchemeFactory());
  }

  public double askPrice4; // required
  public int askVolume4; // required
  public double askPrice5; // required
  public int askVolume5; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ASK_PRICE4((short)1, "askPrice4"),
    ASK_VOLUME4((short)2, "askVolume4"),
    ASK_PRICE5((short)3, "askPrice5"),
    ASK_VOLUME5((short)4, "askVolume5");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ASK_PRICE4
          return ASK_PRICE4;
        case 2: // ASK_VOLUME4
          return ASK_VOLUME4;
        case 3: // ASK_PRICE5
          return ASK_PRICE5;
        case 4: // ASK_VOLUME5
          return ASK_VOLUME5;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ASKPRICE4_ISSET_ID = 0;
  private static final int __ASKVOLUME4_ISSET_ID = 1;
  private static final int __ASKPRICE5_ISSET_ID = 2;
  private static final int __ASKVOLUME5_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ASK_PRICE4, new org.apache.thrift.meta_data.FieldMetaData("askPrice4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.ASK_VOLUME4, new org.apache.thrift.meta_data.FieldMetaData("askVolume4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcVolumeType")));
    tmpMap.put(_Fields.ASK_PRICE5, new org.apache.thrift.meta_data.FieldMetaData("askPrice5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.ASK_VOLUME5, new org.apache.thrift.meta_data.FieldMetaData("askVolume5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcVolumeType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcMarketDataAsk45Field.class, metaDataMap);
  }

  public CThostFtdcMarketDataAsk45Field() {
  }

  public CThostFtdcMarketDataAsk45Field(
    double askPrice4,
    int askVolume4,
    double askPrice5,
    int askVolume5)
  {
    this();
    this.askPrice4 = askPrice4;
    setAskPrice4IsSet(true);
    this.askVolume4 = askVolume4;
    setAskVolume4IsSet(true);
    this.askPrice5 = askPrice5;
    setAskPrice5IsSet(true);
    this.askVolume5 = askVolume5;
    setAskVolume5IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcMarketDataAsk45Field(CThostFtdcMarketDataAsk45Field other) {
    __isset_bitfield = other.__isset_bitfield;
    this.askPrice4 = other.askPrice4;
    this.askVolume4 = other.askVolume4;
    this.askPrice5 = other.askPrice5;
    this.askVolume5 = other.askVolume5;
  }

  public CThostFtdcMarketDataAsk45Field deepCopy() {
    return new CThostFtdcMarketDataAsk45Field(this);
  }

  @Override
  public void clear() {
    setAskPrice4IsSet(false);
    this.askPrice4 = 0.0;
    setAskVolume4IsSet(false);
    this.askVolume4 = 0;
    setAskPrice5IsSet(false);
    this.askPrice5 = 0.0;
    setAskVolume5IsSet(false);
    this.askVolume5 = 0;
  }

  public double getAskPrice4() {
    return this.askPrice4;
  }

  public CThostFtdcMarketDataAsk45Field setAskPrice4(double askPrice4) {
    this.askPrice4 = askPrice4;
    setAskPrice4IsSet(true);
    return this;
  }

  public void unsetAskPrice4() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASKPRICE4_ISSET_ID);
  }

  /** Returns true if field askPrice4 is set (has been assigned a value) and false otherwise */
  public boolean isSetAskPrice4() {
    return EncodingUtils.testBit(__isset_bitfield, __ASKPRICE4_ISSET_ID);
  }

  public void setAskPrice4IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASKPRICE4_ISSET_ID, value);
  }

  public int getAskVolume4() {
    return this.askVolume4;
  }

  public CThostFtdcMarketDataAsk45Field setAskVolume4(int askVolume4) {
    this.askVolume4 = askVolume4;
    setAskVolume4IsSet(true);
    return this;
  }

  public void unsetAskVolume4() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASKVOLUME4_ISSET_ID);
  }

  /** Returns true if field askVolume4 is set (has been assigned a value) and false otherwise */
  public boolean isSetAskVolume4() {
    return EncodingUtils.testBit(__isset_bitfield, __ASKVOLUME4_ISSET_ID);
  }

  public void setAskVolume4IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASKVOLUME4_ISSET_ID, value);
  }

  public double getAskPrice5() {
    return this.askPrice5;
  }

  public CThostFtdcMarketDataAsk45Field setAskPrice5(double askPrice5) {
    this.askPrice5 = askPrice5;
    setAskPrice5IsSet(true);
    return this;
  }

  public void unsetAskPrice5() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASKPRICE5_ISSET_ID);
  }

  /** Returns true if field askPrice5 is set (has been assigned a value) and false otherwise */
  public boolean isSetAskPrice5() {
    return EncodingUtils.testBit(__isset_bitfield, __ASKPRICE5_ISSET_ID);
  }

  public void setAskPrice5IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASKPRICE5_ISSET_ID, value);
  }

  public int getAskVolume5() {
    return this.askVolume5;
  }

  public CThostFtdcMarketDataAsk45Field setAskVolume5(int askVolume5) {
    this.askVolume5 = askVolume5;
    setAskVolume5IsSet(true);
    return this;
  }

  public void unsetAskVolume5() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASKVOLUME5_ISSET_ID);
  }

  /** Returns true if field askVolume5 is set (has been assigned a value) and false otherwise */
  public boolean isSetAskVolume5() {
    return EncodingUtils.testBit(__isset_bitfield, __ASKVOLUME5_ISSET_ID);
  }

  public void setAskVolume5IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASKVOLUME5_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ASK_PRICE4:
      if (value == null) {
        unsetAskPrice4();
      } else {
        setAskPrice4((Double)value);
      }
      break;

    case ASK_VOLUME4:
      if (value == null) {
        unsetAskVolume4();
      } else {
        setAskVolume4((Integer)value);
      }
      break;

    case ASK_PRICE5:
      if (value == null) {
        unsetAskPrice5();
      } else {
        setAskPrice5((Double)value);
      }
      break;

    case ASK_VOLUME5:
      if (value == null) {
        unsetAskVolume5();
      } else {
        setAskVolume5((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ASK_PRICE4:
      return Double.valueOf(getAskPrice4());

    case ASK_VOLUME4:
      return Integer.valueOf(getAskVolume4());

    case ASK_PRICE5:
      return Double.valueOf(getAskPrice5());

    case ASK_VOLUME5:
      return Integer.valueOf(getAskVolume5());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ASK_PRICE4:
      return isSetAskPrice4();
    case ASK_VOLUME4:
      return isSetAskVolume4();
    case ASK_PRICE5:
      return isSetAskPrice5();
    case ASK_VOLUME5:
      return isSetAskVolume5();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcMarketDataAsk45Field)
      return this.equals((CThostFtdcMarketDataAsk45Field)that);
    return false;
  }

  public boolean equals(CThostFtdcMarketDataAsk45Field that) {
    if (that == null)
      return false;

    boolean this_present_askPrice4 = true;
    boolean that_present_askPrice4 = true;
    if (this_present_askPrice4 || that_present_askPrice4) {
      if (!(this_present_askPrice4 && that_present_askPrice4))
        return false;
      if (this.askPrice4 != that.askPrice4)
        return false;
    }

    boolean this_present_askVolume4 = true;
    boolean that_present_askVolume4 = true;
    if (this_present_askVolume4 || that_present_askVolume4) {
      if (!(this_present_askVolume4 && that_present_askVolume4))
        return false;
      if (this.askVolume4 != that.askVolume4)
        return false;
    }

    boolean this_present_askPrice5 = true;
    boolean that_present_askPrice5 = true;
    if (this_present_askPrice5 || that_present_askPrice5) {
      if (!(this_present_askPrice5 && that_present_askPrice5))
        return false;
      if (this.askPrice5 != that.askPrice5)
        return false;
    }

    boolean this_present_askVolume5 = true;
    boolean that_present_askVolume5 = true;
    if (this_present_askVolume5 || that_present_askVolume5) {
      if (!(this_present_askVolume5 && that_present_askVolume5))
        return false;
      if (this.askVolume5 != that.askVolume5)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcMarketDataAsk45Field other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAskPrice4()).compareTo(other.isSetAskPrice4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAskPrice4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.askPrice4, other.askPrice4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAskVolume4()).compareTo(other.isSetAskVolume4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAskVolume4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.askVolume4, other.askVolume4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAskPrice5()).compareTo(other.isSetAskPrice5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAskPrice5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.askPrice5, other.askPrice5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAskVolume5()).compareTo(other.isSetAskVolume5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAskVolume5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.askVolume5, other.askVolume5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcMarketDataAsk45Field(");
    boolean first = true;

    sb.append("askPrice4:");
    sb.append(this.askPrice4);
    first = false;
    if (!first) sb.append(", ");
    sb.append("askVolume4:");
    sb.append(this.askVolume4);
    first = false;
    if (!first) sb.append(", ");
    sb.append("askPrice5:");
    sb.append(this.askPrice5);
    first = false;
    if (!first) sb.append(", ");
    sb.append("askVolume5:");
    sb.append(this.askVolume5);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcMarketDataAsk45FieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcMarketDataAsk45FieldStandardScheme getScheme() {
      return new CThostFtdcMarketDataAsk45FieldStandardScheme();
    }
  }

  private static class CThostFtdcMarketDataAsk45FieldStandardScheme extends StandardScheme<CThostFtdcMarketDataAsk45Field> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcMarketDataAsk45Field struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ASK_PRICE4
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.askPrice4 = iprot.readDouble();
              struct.setAskPrice4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ASK_VOLUME4
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.askVolume4 = iprot.readI32();
              struct.setAskVolume4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ASK_PRICE5
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.askPrice5 = iprot.readDouble();
              struct.setAskPrice5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ASK_VOLUME5
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.askVolume5 = iprot.readI32();
              struct.setAskVolume5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcMarketDataAsk45Field struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ASK_PRICE4_FIELD_DESC);
      oprot.writeDouble(struct.askPrice4);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ASK_VOLUME4_FIELD_DESC);
      oprot.writeI32(struct.askVolume4);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ASK_PRICE5_FIELD_DESC);
      oprot.writeDouble(struct.askPrice5);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ASK_VOLUME5_FIELD_DESC);
      oprot.writeI32(struct.askVolume5);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcMarketDataAsk45FieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcMarketDataAsk45FieldTupleScheme getScheme() {
      return new CThostFtdcMarketDataAsk45FieldTupleScheme();
    }
  }

  private static class CThostFtdcMarketDataAsk45FieldTupleScheme extends TupleScheme<CThostFtdcMarketDataAsk45Field> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcMarketDataAsk45Field struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAskPrice4()) {
        optionals.set(0);
      }
      if (struct.isSetAskVolume4()) {
        optionals.set(1);
      }
      if (struct.isSetAskPrice5()) {
        optionals.set(2);
      }
      if (struct.isSetAskVolume5()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetAskPrice4()) {
        oprot.writeDouble(struct.askPrice4);
      }
      if (struct.isSetAskVolume4()) {
        oprot.writeI32(struct.askVolume4);
      }
      if (struct.isSetAskPrice5()) {
        oprot.writeDouble(struct.askPrice5);
      }
      if (struct.isSetAskVolume5()) {
        oprot.writeI32(struct.askVolume5);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcMarketDataAsk45Field struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.askPrice4 = iprot.readDouble();
        struct.setAskPrice4IsSet(true);
      }
      if (incoming.get(1)) {
        struct.askVolume4 = iprot.readI32();
        struct.setAskVolume4IsSet(true);
      }
      if (incoming.get(2)) {
        struct.askPrice5 = iprot.readDouble();
        struct.setAskPrice5IsSet(true);
      }
      if (incoming.get(3)) {
        struct.askVolume5 = iprot.readI32();
        struct.setAskVolume5IsSet(true);
      }
    }
  }

}

