/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcBrokerUserRightAssignField implements org.apache.thrift.TBase<CThostFtdcBrokerUserRightAssignField, CThostFtdcBrokerUserRightAssignField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcBrokerUserRightAssignField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcBrokerUserRightAssignField");

  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField Y_RIDENTITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("yRIdentityID", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField YRADEABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("yradeable", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcBrokerUserRightAssignFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcBrokerUserRightAssignFieldTupleSchemeFactory());
  }

  public String brokerID; // required
  public int yRIdentityID; // required
  public int yradeable; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BROKER_ID((short)1, "brokerID"),
    Y_RIDENTITY_ID((short)2, "yRIdentityID"),
    YRADEABLE((short)3, "yradeable");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BROKER_ID
          return BROKER_ID;
        case 2: // Y_RIDENTITY_ID
          return Y_RIDENTITY_ID;
        case 3: // YRADEABLE
          return YRADEABLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __YRIDENTITYID_ISSET_ID = 0;
  private static final int __YRADEABLE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.Y_RIDENTITY_ID, new org.apache.thrift.meta_data.FieldMetaData("yRIdentityID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcDRIdentityIDType")));
    tmpMap.put(_Fields.YRADEABLE, new org.apache.thrift.meta_data.FieldMetaData("yradeable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcBoolType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcBrokerUserRightAssignField.class, metaDataMap);
  }

  public CThostFtdcBrokerUserRightAssignField() {
  }

  public CThostFtdcBrokerUserRightAssignField(
    String brokerID,
    int yRIdentityID,
    int yradeable)
  {
    this();
    this.brokerID = brokerID;
    this.yRIdentityID = yRIdentityID;
    setYRIdentityIDIsSet(true);
    this.yradeable = yradeable;
    setYradeableIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcBrokerUserRightAssignField(CThostFtdcBrokerUserRightAssignField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    this.yRIdentityID = other.yRIdentityID;
    this.yradeable = other.yradeable;
  }

  public CThostFtdcBrokerUserRightAssignField deepCopy() {
    return new CThostFtdcBrokerUserRightAssignField(this);
  }

  @Override
  public void clear() {
    this.brokerID = null;
    setYRIdentityIDIsSet(false);
    this.yRIdentityID = 0;
    setYradeableIsSet(false);
    this.yradeable = 0;
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcBrokerUserRightAssignField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public int getYRIdentityID() {
    return this.yRIdentityID;
  }

  public CThostFtdcBrokerUserRightAssignField setYRIdentityID(int yRIdentityID) {
    this.yRIdentityID = yRIdentityID;
    setYRIdentityIDIsSet(true);
    return this;
  }

  public void unsetYRIdentityID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YRIDENTITYID_ISSET_ID);
  }

  /** Returns true if field yRIdentityID is set (has been assigned a value) and false otherwise */
  public boolean isSetYRIdentityID() {
    return EncodingUtils.testBit(__isset_bitfield, __YRIDENTITYID_ISSET_ID);
  }

  public void setYRIdentityIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YRIDENTITYID_ISSET_ID, value);
  }

  public int getYradeable() {
    return this.yradeable;
  }

  public CThostFtdcBrokerUserRightAssignField setYradeable(int yradeable) {
    this.yradeable = yradeable;
    setYradeableIsSet(true);
    return this;
  }

  public void unsetYradeable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YRADEABLE_ISSET_ID);
  }

  /** Returns true if field yradeable is set (has been assigned a value) and false otherwise */
  public boolean isSetYradeable() {
    return EncodingUtils.testBit(__isset_bitfield, __YRADEABLE_ISSET_ID);
  }

  public void setYradeableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YRADEABLE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case Y_RIDENTITY_ID:
      if (value == null) {
        unsetYRIdentityID();
      } else {
        setYRIdentityID((Integer)value);
      }
      break;

    case YRADEABLE:
      if (value == null) {
        unsetYradeable();
      } else {
        setYradeable((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BROKER_ID:
      return getBrokerID();

    case Y_RIDENTITY_ID:
      return Integer.valueOf(getYRIdentityID());

    case YRADEABLE:
      return Integer.valueOf(getYradeable());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BROKER_ID:
      return isSetBrokerID();
    case Y_RIDENTITY_ID:
      return isSetYRIdentityID();
    case YRADEABLE:
      return isSetYradeable();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcBrokerUserRightAssignField)
      return this.equals((CThostFtdcBrokerUserRightAssignField)that);
    return false;
  }

  public boolean equals(CThostFtdcBrokerUserRightAssignField that) {
    if (that == null)
      return false;

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_yRIdentityID = true;
    boolean that_present_yRIdentityID = true;
    if (this_present_yRIdentityID || that_present_yRIdentityID) {
      if (!(this_present_yRIdentityID && that_present_yRIdentityID))
        return false;
      if (this.yRIdentityID != that.yRIdentityID)
        return false;
    }

    boolean this_present_yradeable = true;
    boolean that_present_yradeable = true;
    if (this_present_yradeable || that_present_yradeable) {
      if (!(this_present_yradeable && that_present_yradeable))
        return false;
      if (this.yradeable != that.yradeable)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcBrokerUserRightAssignField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYRIdentityID()).compareTo(other.isSetYRIdentityID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYRIdentityID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yRIdentityID, other.yRIdentityID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYradeable()).compareTo(other.isSetYradeable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYradeable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yradeable, other.yradeable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcBrokerUserRightAssignField(");
    boolean first = true;

    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("yRIdentityID:");
    sb.append(this.yRIdentityID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("yradeable:");
    sb.append(this.yradeable);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcBrokerUserRightAssignFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcBrokerUserRightAssignFieldStandardScheme getScheme() {
      return new CThostFtdcBrokerUserRightAssignFieldStandardScheme();
    }
  }

  private static class CThostFtdcBrokerUserRightAssignFieldStandardScheme extends StandardScheme<CThostFtdcBrokerUserRightAssignField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcBrokerUserRightAssignField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // Y_RIDENTITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.yRIdentityID = iprot.readI32();
              struct.setYRIdentityIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // YRADEABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.yradeable = iprot.readI32();
              struct.setYradeableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcBrokerUserRightAssignField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(Y_RIDENTITY_ID_FIELD_DESC);
      oprot.writeI32(struct.yRIdentityID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(YRADEABLE_FIELD_DESC);
      oprot.writeI32(struct.yradeable);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcBrokerUserRightAssignFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcBrokerUserRightAssignFieldTupleScheme getScheme() {
      return new CThostFtdcBrokerUserRightAssignFieldTupleScheme();
    }
  }

  private static class CThostFtdcBrokerUserRightAssignFieldTupleScheme extends TupleScheme<CThostFtdcBrokerUserRightAssignField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcBrokerUserRightAssignField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBrokerID()) {
        optionals.set(0);
      }
      if (struct.isSetYRIdentityID()) {
        optionals.set(1);
      }
      if (struct.isSetYradeable()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetYRIdentityID()) {
        oprot.writeI32(struct.yRIdentityID);
      }
      if (struct.isSetYradeable()) {
        oprot.writeI32(struct.yradeable);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcBrokerUserRightAssignField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.yRIdentityID = iprot.readI32();
        struct.setYRIdentityIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.yradeable = iprot.readI32();
        struct.setYradeableIsSet(true);
      }
    }
  }

}

