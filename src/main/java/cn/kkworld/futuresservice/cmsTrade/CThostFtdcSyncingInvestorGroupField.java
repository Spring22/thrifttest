/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcSyncingInvestorGroupField implements org.apache.thrift.TBase<CThostFtdcSyncingInvestorGroupField, CThostFtdcSyncingInvestorGroupField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcSyncingInvestorGroupField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcSyncingInvestorGroupField");

  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INVESTOR_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("investorGroupID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INVESTOR_GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("investorGroupName", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcSyncingInvestorGroupFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcSyncingInvestorGroupFieldTupleSchemeFactory());
  }

  public String brokerID; // required
  public String investorGroupID; // required
  public String investorGroupName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BROKER_ID((short)1, "brokerID"),
    INVESTOR_GROUP_ID((short)2, "investorGroupID"),
    INVESTOR_GROUP_NAME((short)3, "investorGroupName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BROKER_ID
          return BROKER_ID;
        case 2: // INVESTOR_GROUP_ID
          return INVESTOR_GROUP_ID;
        case 3: // INVESTOR_GROUP_NAME
          return INVESTOR_GROUP_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.INVESTOR_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("investorGroupID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInvestorIDType")));
    tmpMap.put(_Fields.INVESTOR_GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("investorGroupName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInvestorGroupNameType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcSyncingInvestorGroupField.class, metaDataMap);
  }

  public CThostFtdcSyncingInvestorGroupField() {
  }

  public CThostFtdcSyncingInvestorGroupField(
    String brokerID,
    String investorGroupID,
    String investorGroupName)
  {
    this();
    this.brokerID = brokerID;
    this.investorGroupID = investorGroupID;
    this.investorGroupName = investorGroupName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcSyncingInvestorGroupField(CThostFtdcSyncingInvestorGroupField other) {
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetInvestorGroupID()) {
      this.investorGroupID = other.investorGroupID;
    }
    if (other.isSetInvestorGroupName()) {
      this.investorGroupName = other.investorGroupName;
    }
  }

  public CThostFtdcSyncingInvestorGroupField deepCopy() {
    return new CThostFtdcSyncingInvestorGroupField(this);
  }

  @Override
  public void clear() {
    this.brokerID = null;
    this.investorGroupID = null;
    this.investorGroupName = null;
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcSyncingInvestorGroupField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getInvestorGroupID() {
    return this.investorGroupID;
  }

  public CThostFtdcSyncingInvestorGroupField setInvestorGroupID(String investorGroupID) {
    this.investorGroupID = investorGroupID;
    return this;
  }

  public void unsetInvestorGroupID() {
    this.investorGroupID = null;
  }

  /** Returns true if field investorGroupID is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorGroupID() {
    return this.investorGroupID != null;
  }

  public void setInvestorGroupIDIsSet(boolean value) {
    if (!value) {
      this.investorGroupID = null;
    }
  }

  public String getInvestorGroupName() {
    return this.investorGroupName;
  }

  public CThostFtdcSyncingInvestorGroupField setInvestorGroupName(String investorGroupName) {
    this.investorGroupName = investorGroupName;
    return this;
  }

  public void unsetInvestorGroupName() {
    this.investorGroupName = null;
  }

  /** Returns true if field investorGroupName is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorGroupName() {
    return this.investorGroupName != null;
  }

  public void setInvestorGroupNameIsSet(boolean value) {
    if (!value) {
      this.investorGroupName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case INVESTOR_GROUP_ID:
      if (value == null) {
        unsetInvestorGroupID();
      } else {
        setInvestorGroupID((String)value);
      }
      break;

    case INVESTOR_GROUP_NAME:
      if (value == null) {
        unsetInvestorGroupName();
      } else {
        setInvestorGroupName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BROKER_ID:
      return getBrokerID();

    case INVESTOR_GROUP_ID:
      return getInvestorGroupID();

    case INVESTOR_GROUP_NAME:
      return getInvestorGroupName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BROKER_ID:
      return isSetBrokerID();
    case INVESTOR_GROUP_ID:
      return isSetInvestorGroupID();
    case INVESTOR_GROUP_NAME:
      return isSetInvestorGroupName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcSyncingInvestorGroupField)
      return this.equals((CThostFtdcSyncingInvestorGroupField)that);
    return false;
  }

  public boolean equals(CThostFtdcSyncingInvestorGroupField that) {
    if (that == null)
      return false;

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_investorGroupID = true && this.isSetInvestorGroupID();
    boolean that_present_investorGroupID = true && that.isSetInvestorGroupID();
    if (this_present_investorGroupID || that_present_investorGroupID) {
      if (!(this_present_investorGroupID && that_present_investorGroupID))
        return false;
      if (!this.investorGroupID.equals(that.investorGroupID))
        return false;
    }

    boolean this_present_investorGroupName = true && this.isSetInvestorGroupName();
    boolean that_present_investorGroupName = true && that.isSetInvestorGroupName();
    if (this_present_investorGroupName || that_present_investorGroupName) {
      if (!(this_present_investorGroupName && that_present_investorGroupName))
        return false;
      if (!this.investorGroupName.equals(that.investorGroupName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcSyncingInvestorGroupField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestorGroupID()).compareTo(other.isSetInvestorGroupID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorGroupID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorGroupID, other.investorGroupID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestorGroupName()).compareTo(other.isSetInvestorGroupName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorGroupName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorGroupName, other.investorGroupName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcSyncingInvestorGroupField(");
    boolean first = true;

    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("investorGroupID:");
    if (this.investorGroupID == null) {
      sb.append("null");
    } else {
      sb.append(this.investorGroupID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("investorGroupName:");
    if (this.investorGroupName == null) {
      sb.append("null");
    } else {
      sb.append(this.investorGroupName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcSyncingInvestorGroupFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcSyncingInvestorGroupFieldStandardScheme getScheme() {
      return new CThostFtdcSyncingInvestorGroupFieldStandardScheme();
    }
  }

  private static class CThostFtdcSyncingInvestorGroupFieldStandardScheme extends StandardScheme<CThostFtdcSyncingInvestorGroupField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcSyncingInvestorGroupField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INVESTOR_GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorGroupID = iprot.readString();
              struct.setInvestorGroupIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INVESTOR_GROUP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorGroupName = iprot.readString();
              struct.setInvestorGroupNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcSyncingInvestorGroupField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.investorGroupID != null) {
        oprot.writeFieldBegin(INVESTOR_GROUP_ID_FIELD_DESC);
        oprot.writeString(struct.investorGroupID);
        oprot.writeFieldEnd();
      }
      if (struct.investorGroupName != null) {
        oprot.writeFieldBegin(INVESTOR_GROUP_NAME_FIELD_DESC);
        oprot.writeString(struct.investorGroupName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcSyncingInvestorGroupFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcSyncingInvestorGroupFieldTupleScheme getScheme() {
      return new CThostFtdcSyncingInvestorGroupFieldTupleScheme();
    }
  }

  private static class CThostFtdcSyncingInvestorGroupFieldTupleScheme extends TupleScheme<CThostFtdcSyncingInvestorGroupField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcSyncingInvestorGroupField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBrokerID()) {
        optionals.set(0);
      }
      if (struct.isSetInvestorGroupID()) {
        optionals.set(1);
      }
      if (struct.isSetInvestorGroupName()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetInvestorGroupID()) {
        oprot.writeString(struct.investorGroupID);
      }
      if (struct.isSetInvestorGroupName()) {
        oprot.writeString(struct.investorGroupName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcSyncingInvestorGroupField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.investorGroupID = iprot.readString();
        struct.setInvestorGroupIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.investorGroupName = iprot.readString();
        struct.setInvestorGroupNameIsSet(true);
      }
    }
  }

}

