/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcOptionInstrTradeCostField implements org.apache.thrift.TBase<CThostFtdcOptionInstrTradeCostField, CThostFtdcOptionInstrTradeCostField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcOptionInstrTradeCostField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcOptionInstrTradeCostField");

  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INVESTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("investorID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INSTRUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instrumentID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField HEDGE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("hedgeFlag", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FIXED_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("fixedMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField MINI_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("miniMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField ROYALTY_FIELD_DESC = new org.apache.thrift.protocol.TField("royalty", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField EXCH_FIXED_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("exchFixedMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField EXCH_MINI_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("exchMiniMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcOptionInstrTradeCostFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcOptionInstrTradeCostFieldTupleSchemeFactory());
  }

  public String brokerID; // required
  public String investorID; // required
  public String instrumentID; // required
  public String hedgeFlag; // required
  public double fixedMargin; // required
  public double miniMargin; // required
  public double royalty; // required
  public double exchFixedMargin; // required
  public double exchMiniMargin; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BROKER_ID((short)1, "brokerID"),
    INVESTOR_ID((short)2, "investorID"),
    INSTRUMENT_ID((short)3, "instrumentID"),
    HEDGE_FLAG((short)4, "hedgeFlag"),
    FIXED_MARGIN((short)5, "fixedMargin"),
    MINI_MARGIN((short)6, "miniMargin"),
    ROYALTY((short)7, "royalty"),
    EXCH_FIXED_MARGIN((short)8, "exchFixedMargin"),
    EXCH_MINI_MARGIN((short)9, "exchMiniMargin");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BROKER_ID
          return BROKER_ID;
        case 2: // INVESTOR_ID
          return INVESTOR_ID;
        case 3: // INSTRUMENT_ID
          return INSTRUMENT_ID;
        case 4: // HEDGE_FLAG
          return HEDGE_FLAG;
        case 5: // FIXED_MARGIN
          return FIXED_MARGIN;
        case 6: // MINI_MARGIN
          return MINI_MARGIN;
        case 7: // ROYALTY
          return ROYALTY;
        case 8: // EXCH_FIXED_MARGIN
          return EXCH_FIXED_MARGIN;
        case 9: // EXCH_MINI_MARGIN
          return EXCH_MINI_MARGIN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FIXEDMARGIN_ISSET_ID = 0;
  private static final int __MINIMARGIN_ISSET_ID = 1;
  private static final int __ROYALTY_ISSET_ID = 2;
  private static final int __EXCHFIXEDMARGIN_ISSET_ID = 3;
  private static final int __EXCHMINIMARGIN_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.INVESTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("investorID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInvestorIDType")));
    tmpMap.put(_Fields.INSTRUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("instrumentID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInstrumentIDType")));
    tmpMap.put(_Fields.HEDGE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("hedgeFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcHedgeFlagType")));
    tmpMap.put(_Fields.FIXED_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("fixedMargin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.MINI_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("miniMargin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.ROYALTY, new org.apache.thrift.meta_data.FieldMetaData("royalty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.EXCH_FIXED_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("exchFixedMargin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.EXCH_MINI_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("exchMiniMargin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcOptionInstrTradeCostField.class, metaDataMap);
  }

  public CThostFtdcOptionInstrTradeCostField() {
  }

  public CThostFtdcOptionInstrTradeCostField(
    String brokerID,
    String investorID,
    String instrumentID,
    String hedgeFlag,
    double fixedMargin,
    double miniMargin,
    double royalty,
    double exchFixedMargin,
    double exchMiniMargin)
  {
    this();
    this.brokerID = brokerID;
    this.investorID = investorID;
    this.instrumentID = instrumentID;
    this.hedgeFlag = hedgeFlag;
    this.fixedMargin = fixedMargin;
    setFixedMarginIsSet(true);
    this.miniMargin = miniMargin;
    setMiniMarginIsSet(true);
    this.royalty = royalty;
    setRoyaltyIsSet(true);
    this.exchFixedMargin = exchFixedMargin;
    setExchFixedMarginIsSet(true);
    this.exchMiniMargin = exchMiniMargin;
    setExchMiniMarginIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcOptionInstrTradeCostField(CThostFtdcOptionInstrTradeCostField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetInvestorID()) {
      this.investorID = other.investorID;
    }
    if (other.isSetInstrumentID()) {
      this.instrumentID = other.instrumentID;
    }
    if (other.isSetHedgeFlag()) {
      this.hedgeFlag = other.hedgeFlag;
    }
    this.fixedMargin = other.fixedMargin;
    this.miniMargin = other.miniMargin;
    this.royalty = other.royalty;
    this.exchFixedMargin = other.exchFixedMargin;
    this.exchMiniMargin = other.exchMiniMargin;
  }

  public CThostFtdcOptionInstrTradeCostField deepCopy() {
    return new CThostFtdcOptionInstrTradeCostField(this);
  }

  @Override
  public void clear() {
    this.brokerID = null;
    this.investorID = null;
    this.instrumentID = null;
    this.hedgeFlag = null;
    setFixedMarginIsSet(false);
    this.fixedMargin = 0.0;
    setMiniMarginIsSet(false);
    this.miniMargin = 0.0;
    setRoyaltyIsSet(false);
    this.royalty = 0.0;
    setExchFixedMarginIsSet(false);
    this.exchFixedMargin = 0.0;
    setExchMiniMarginIsSet(false);
    this.exchMiniMargin = 0.0;
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcOptionInstrTradeCostField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getInvestorID() {
    return this.investorID;
  }

  public CThostFtdcOptionInstrTradeCostField setInvestorID(String investorID) {
    this.investorID = investorID;
    return this;
  }

  public void unsetInvestorID() {
    this.investorID = null;
  }

  /** Returns true if field investorID is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorID() {
    return this.investorID != null;
  }

  public void setInvestorIDIsSet(boolean value) {
    if (!value) {
      this.investorID = null;
    }
  }

  public String getInstrumentID() {
    return this.instrumentID;
  }

  public CThostFtdcOptionInstrTradeCostField setInstrumentID(String instrumentID) {
    this.instrumentID = instrumentID;
    return this;
  }

  public void unsetInstrumentID() {
    this.instrumentID = null;
  }

  /** Returns true if field instrumentID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstrumentID() {
    return this.instrumentID != null;
  }

  public void setInstrumentIDIsSet(boolean value) {
    if (!value) {
      this.instrumentID = null;
    }
  }

  public String getHedgeFlag() {
    return this.hedgeFlag;
  }

  public CThostFtdcOptionInstrTradeCostField setHedgeFlag(String hedgeFlag) {
    this.hedgeFlag = hedgeFlag;
    return this;
  }

  public void unsetHedgeFlag() {
    this.hedgeFlag = null;
  }

  /** Returns true if field hedgeFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetHedgeFlag() {
    return this.hedgeFlag != null;
  }

  public void setHedgeFlagIsSet(boolean value) {
    if (!value) {
      this.hedgeFlag = null;
    }
  }

  public double getFixedMargin() {
    return this.fixedMargin;
  }

  public CThostFtdcOptionInstrTradeCostField setFixedMargin(double fixedMargin) {
    this.fixedMargin = fixedMargin;
    setFixedMarginIsSet(true);
    return this;
  }

  public void unsetFixedMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIXEDMARGIN_ISSET_ID);
  }

  /** Returns true if field fixedMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetFixedMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __FIXEDMARGIN_ISSET_ID);
  }

  public void setFixedMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIXEDMARGIN_ISSET_ID, value);
  }

  public double getMiniMargin() {
    return this.miniMargin;
  }

  public CThostFtdcOptionInstrTradeCostField setMiniMargin(double miniMargin) {
    this.miniMargin = miniMargin;
    setMiniMarginIsSet(true);
    return this;
  }

  public void unsetMiniMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINIMARGIN_ISSET_ID);
  }

  /** Returns true if field miniMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetMiniMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __MINIMARGIN_ISSET_ID);
  }

  public void setMiniMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINIMARGIN_ISSET_ID, value);
  }

  public double getRoyalty() {
    return this.royalty;
  }

  public CThostFtdcOptionInstrTradeCostField setRoyalty(double royalty) {
    this.royalty = royalty;
    setRoyaltyIsSet(true);
    return this;
  }

  public void unsetRoyalty() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROYALTY_ISSET_ID);
  }

  /** Returns true if field royalty is set (has been assigned a value) and false otherwise */
  public boolean isSetRoyalty() {
    return EncodingUtils.testBit(__isset_bitfield, __ROYALTY_ISSET_ID);
  }

  public void setRoyaltyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROYALTY_ISSET_ID, value);
  }

  public double getExchFixedMargin() {
    return this.exchFixedMargin;
  }

  public CThostFtdcOptionInstrTradeCostField setExchFixedMargin(double exchFixedMargin) {
    this.exchFixedMargin = exchFixedMargin;
    setExchFixedMarginIsSet(true);
    return this;
  }

  public void unsetExchFixedMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXCHFIXEDMARGIN_ISSET_ID);
  }

  /** Returns true if field exchFixedMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetExchFixedMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __EXCHFIXEDMARGIN_ISSET_ID);
  }

  public void setExchFixedMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXCHFIXEDMARGIN_ISSET_ID, value);
  }

  public double getExchMiniMargin() {
    return this.exchMiniMargin;
  }

  public CThostFtdcOptionInstrTradeCostField setExchMiniMargin(double exchMiniMargin) {
    this.exchMiniMargin = exchMiniMargin;
    setExchMiniMarginIsSet(true);
    return this;
  }

  public void unsetExchMiniMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXCHMINIMARGIN_ISSET_ID);
  }

  /** Returns true if field exchMiniMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetExchMiniMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __EXCHMINIMARGIN_ISSET_ID);
  }

  public void setExchMiniMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXCHMINIMARGIN_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case INVESTOR_ID:
      if (value == null) {
        unsetInvestorID();
      } else {
        setInvestorID((String)value);
      }
      break;

    case INSTRUMENT_ID:
      if (value == null) {
        unsetInstrumentID();
      } else {
        setInstrumentID((String)value);
      }
      break;

    case HEDGE_FLAG:
      if (value == null) {
        unsetHedgeFlag();
      } else {
        setHedgeFlag((String)value);
      }
      break;

    case FIXED_MARGIN:
      if (value == null) {
        unsetFixedMargin();
      } else {
        setFixedMargin((Double)value);
      }
      break;

    case MINI_MARGIN:
      if (value == null) {
        unsetMiniMargin();
      } else {
        setMiniMargin((Double)value);
      }
      break;

    case ROYALTY:
      if (value == null) {
        unsetRoyalty();
      } else {
        setRoyalty((Double)value);
      }
      break;

    case EXCH_FIXED_MARGIN:
      if (value == null) {
        unsetExchFixedMargin();
      } else {
        setExchFixedMargin((Double)value);
      }
      break;

    case EXCH_MINI_MARGIN:
      if (value == null) {
        unsetExchMiniMargin();
      } else {
        setExchMiniMargin((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BROKER_ID:
      return getBrokerID();

    case INVESTOR_ID:
      return getInvestorID();

    case INSTRUMENT_ID:
      return getInstrumentID();

    case HEDGE_FLAG:
      return getHedgeFlag();

    case FIXED_MARGIN:
      return Double.valueOf(getFixedMargin());

    case MINI_MARGIN:
      return Double.valueOf(getMiniMargin());

    case ROYALTY:
      return Double.valueOf(getRoyalty());

    case EXCH_FIXED_MARGIN:
      return Double.valueOf(getExchFixedMargin());

    case EXCH_MINI_MARGIN:
      return Double.valueOf(getExchMiniMargin());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BROKER_ID:
      return isSetBrokerID();
    case INVESTOR_ID:
      return isSetInvestorID();
    case INSTRUMENT_ID:
      return isSetInstrumentID();
    case HEDGE_FLAG:
      return isSetHedgeFlag();
    case FIXED_MARGIN:
      return isSetFixedMargin();
    case MINI_MARGIN:
      return isSetMiniMargin();
    case ROYALTY:
      return isSetRoyalty();
    case EXCH_FIXED_MARGIN:
      return isSetExchFixedMargin();
    case EXCH_MINI_MARGIN:
      return isSetExchMiniMargin();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcOptionInstrTradeCostField)
      return this.equals((CThostFtdcOptionInstrTradeCostField)that);
    return false;
  }

  public boolean equals(CThostFtdcOptionInstrTradeCostField that) {
    if (that == null)
      return false;

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_investorID = true && this.isSetInvestorID();
    boolean that_present_investorID = true && that.isSetInvestorID();
    if (this_present_investorID || that_present_investorID) {
      if (!(this_present_investorID && that_present_investorID))
        return false;
      if (!this.investorID.equals(that.investorID))
        return false;
    }

    boolean this_present_instrumentID = true && this.isSetInstrumentID();
    boolean that_present_instrumentID = true && that.isSetInstrumentID();
    if (this_present_instrumentID || that_present_instrumentID) {
      if (!(this_present_instrumentID && that_present_instrumentID))
        return false;
      if (!this.instrumentID.equals(that.instrumentID))
        return false;
    }

    boolean this_present_hedgeFlag = true && this.isSetHedgeFlag();
    boolean that_present_hedgeFlag = true && that.isSetHedgeFlag();
    if (this_present_hedgeFlag || that_present_hedgeFlag) {
      if (!(this_present_hedgeFlag && that_present_hedgeFlag))
        return false;
      if (!this.hedgeFlag.equals(that.hedgeFlag))
        return false;
    }

    boolean this_present_fixedMargin = true;
    boolean that_present_fixedMargin = true;
    if (this_present_fixedMargin || that_present_fixedMargin) {
      if (!(this_present_fixedMargin && that_present_fixedMargin))
        return false;
      if (this.fixedMargin != that.fixedMargin)
        return false;
    }

    boolean this_present_miniMargin = true;
    boolean that_present_miniMargin = true;
    if (this_present_miniMargin || that_present_miniMargin) {
      if (!(this_present_miniMargin && that_present_miniMargin))
        return false;
      if (this.miniMargin != that.miniMargin)
        return false;
    }

    boolean this_present_royalty = true;
    boolean that_present_royalty = true;
    if (this_present_royalty || that_present_royalty) {
      if (!(this_present_royalty && that_present_royalty))
        return false;
      if (this.royalty != that.royalty)
        return false;
    }

    boolean this_present_exchFixedMargin = true;
    boolean that_present_exchFixedMargin = true;
    if (this_present_exchFixedMargin || that_present_exchFixedMargin) {
      if (!(this_present_exchFixedMargin && that_present_exchFixedMargin))
        return false;
      if (this.exchFixedMargin != that.exchFixedMargin)
        return false;
    }

    boolean this_present_exchMiniMargin = true;
    boolean that_present_exchMiniMargin = true;
    if (this_present_exchMiniMargin || that_present_exchMiniMargin) {
      if (!(this_present_exchMiniMargin && that_present_exchMiniMargin))
        return false;
      if (this.exchMiniMargin != that.exchMiniMargin)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcOptionInstrTradeCostField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestorID()).compareTo(other.isSetInvestorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorID, other.investorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstrumentID()).compareTo(other.isSetInstrumentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstrumentID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instrumentID, other.instrumentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHedgeFlag()).compareTo(other.isSetHedgeFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHedgeFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hedgeFlag, other.hedgeFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFixedMargin()).compareTo(other.isSetFixedMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFixedMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fixedMargin, other.fixedMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMiniMargin()).compareTo(other.isSetMiniMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMiniMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.miniMargin, other.miniMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoyalty()).compareTo(other.isSetRoyalty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoyalty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.royalty, other.royalty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchFixedMargin()).compareTo(other.isSetExchFixedMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchFixedMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchFixedMargin, other.exchFixedMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchMiniMargin()).compareTo(other.isSetExchMiniMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchMiniMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchMiniMargin, other.exchMiniMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcOptionInstrTradeCostField(");
    boolean first = true;

    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("investorID:");
    if (this.investorID == null) {
      sb.append("null");
    } else {
      sb.append(this.investorID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("instrumentID:");
    if (this.instrumentID == null) {
      sb.append("null");
    } else {
      sb.append(this.instrumentID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hedgeFlag:");
    if (this.hedgeFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.hedgeFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fixedMargin:");
    sb.append(this.fixedMargin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("miniMargin:");
    sb.append(this.miniMargin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("royalty:");
    sb.append(this.royalty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchFixedMargin:");
    sb.append(this.exchFixedMargin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchMiniMargin:");
    sb.append(this.exchMiniMargin);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcOptionInstrTradeCostFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcOptionInstrTradeCostFieldStandardScheme getScheme() {
      return new CThostFtdcOptionInstrTradeCostFieldStandardScheme();
    }
  }

  private static class CThostFtdcOptionInstrTradeCostFieldStandardScheme extends StandardScheme<CThostFtdcOptionInstrTradeCostField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcOptionInstrTradeCostField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INVESTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorID = iprot.readString();
              struct.setInvestorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INSTRUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instrumentID = iprot.readString();
              struct.setInstrumentIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HEDGE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hedgeFlag = iprot.readString();
              struct.setHedgeFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FIXED_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fixedMargin = iprot.readDouble();
              struct.setFixedMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MINI_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.miniMargin = iprot.readDouble();
              struct.setMiniMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ROYALTY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.royalty = iprot.readDouble();
              struct.setRoyaltyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXCH_FIXED_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.exchFixedMargin = iprot.readDouble();
              struct.setExchFixedMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXCH_MINI_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.exchMiniMargin = iprot.readDouble();
              struct.setExchMiniMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcOptionInstrTradeCostField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.investorID != null) {
        oprot.writeFieldBegin(INVESTOR_ID_FIELD_DESC);
        oprot.writeString(struct.investorID);
        oprot.writeFieldEnd();
      }
      if (struct.instrumentID != null) {
        oprot.writeFieldBegin(INSTRUMENT_ID_FIELD_DESC);
        oprot.writeString(struct.instrumentID);
        oprot.writeFieldEnd();
      }
      if (struct.hedgeFlag != null) {
        oprot.writeFieldBegin(HEDGE_FLAG_FIELD_DESC);
        oprot.writeString(struct.hedgeFlag);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FIXED_MARGIN_FIELD_DESC);
      oprot.writeDouble(struct.fixedMargin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MINI_MARGIN_FIELD_DESC);
      oprot.writeDouble(struct.miniMargin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROYALTY_FIELD_DESC);
      oprot.writeDouble(struct.royalty);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXCH_FIXED_MARGIN_FIELD_DESC);
      oprot.writeDouble(struct.exchFixedMargin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXCH_MINI_MARGIN_FIELD_DESC);
      oprot.writeDouble(struct.exchMiniMargin);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcOptionInstrTradeCostFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcOptionInstrTradeCostFieldTupleScheme getScheme() {
      return new CThostFtdcOptionInstrTradeCostFieldTupleScheme();
    }
  }

  private static class CThostFtdcOptionInstrTradeCostFieldTupleScheme extends TupleScheme<CThostFtdcOptionInstrTradeCostField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcOptionInstrTradeCostField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBrokerID()) {
        optionals.set(0);
      }
      if (struct.isSetInvestorID()) {
        optionals.set(1);
      }
      if (struct.isSetInstrumentID()) {
        optionals.set(2);
      }
      if (struct.isSetHedgeFlag()) {
        optionals.set(3);
      }
      if (struct.isSetFixedMargin()) {
        optionals.set(4);
      }
      if (struct.isSetMiniMargin()) {
        optionals.set(5);
      }
      if (struct.isSetRoyalty()) {
        optionals.set(6);
      }
      if (struct.isSetExchFixedMargin()) {
        optionals.set(7);
      }
      if (struct.isSetExchMiniMargin()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetInvestorID()) {
        oprot.writeString(struct.investorID);
      }
      if (struct.isSetInstrumentID()) {
        oprot.writeString(struct.instrumentID);
      }
      if (struct.isSetHedgeFlag()) {
        oprot.writeString(struct.hedgeFlag);
      }
      if (struct.isSetFixedMargin()) {
        oprot.writeDouble(struct.fixedMargin);
      }
      if (struct.isSetMiniMargin()) {
        oprot.writeDouble(struct.miniMargin);
      }
      if (struct.isSetRoyalty()) {
        oprot.writeDouble(struct.royalty);
      }
      if (struct.isSetExchFixedMargin()) {
        oprot.writeDouble(struct.exchFixedMargin);
      }
      if (struct.isSetExchMiniMargin()) {
        oprot.writeDouble(struct.exchMiniMargin);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcOptionInstrTradeCostField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.investorID = iprot.readString();
        struct.setInvestorIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.instrumentID = iprot.readString();
        struct.setInstrumentIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.hedgeFlag = iprot.readString();
        struct.setHedgeFlagIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fixedMargin = iprot.readDouble();
        struct.setFixedMarginIsSet(true);
      }
      if (incoming.get(5)) {
        struct.miniMargin = iprot.readDouble();
        struct.setMiniMarginIsSet(true);
      }
      if (incoming.get(6)) {
        struct.royalty = iprot.readDouble();
        struct.setRoyaltyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.exchFixedMargin = iprot.readDouble();
        struct.setExchFixedMarginIsSet(true);
      }
      if (incoming.get(8)) {
        struct.exchMiniMargin = iprot.readDouble();
        struct.setExchMiniMarginIsSet(true);
      }
    }
  }

}

