/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcBrokerWithdrawAlgorithmField implements org.apache.thrift.TBase<CThostFtdcBrokerWithdrawAlgorithmField, CThostFtdcBrokerWithdrawAlgorithmField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcBrokerWithdrawAlgorithmField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcBrokerWithdrawAlgorithmField");

  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField WITHDRAW_ALGORITHM_FIELD_DESC = new org.apache.thrift.protocol.TField("withdrawAlgorithm", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USING_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("usingRatio", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField INCLUDE_CLOSE_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("includeCloseProfit", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ALL_WITHOUT_TRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("allWithoutTrade", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField AVAIL_INCLUDE_CLOSE_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("availIncludeCloseProfit", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField IS_BROKER_USER_EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("isBrokerUserEvent", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CURRENCY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("currencyID", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField FUND_MORTGAGE_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("fundMortgageRatio", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField BALANCE_ALGORITHM_FIELD_DESC = new org.apache.thrift.protocol.TField("balanceAlgorithm", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcBrokerWithdrawAlgorithmFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcBrokerWithdrawAlgorithmFieldTupleSchemeFactory());
  }

  public String brokerID; // required
  public String withdrawAlgorithm; // required
  public double usingRatio; // required
  public String includeCloseProfit; // required
  public String allWithoutTrade; // required
  public String availIncludeCloseProfit; // required
  public int isBrokerUserEvent; // required
  public String currencyID; // required
  public double fundMortgageRatio; // required
  public String balanceAlgorithm; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BROKER_ID((short)1, "brokerID"),
    WITHDRAW_ALGORITHM((short)2, "withdrawAlgorithm"),
    USING_RATIO((short)3, "usingRatio"),
    INCLUDE_CLOSE_PROFIT((short)4, "includeCloseProfit"),
    ALL_WITHOUT_TRADE((short)5, "allWithoutTrade"),
    AVAIL_INCLUDE_CLOSE_PROFIT((short)6, "availIncludeCloseProfit"),
    IS_BROKER_USER_EVENT((short)7, "isBrokerUserEvent"),
    CURRENCY_ID((short)8, "currencyID"),
    FUND_MORTGAGE_RATIO((short)9, "fundMortgageRatio"),
    BALANCE_ALGORITHM((short)10, "balanceAlgorithm");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BROKER_ID
          return BROKER_ID;
        case 2: // WITHDRAW_ALGORITHM
          return WITHDRAW_ALGORITHM;
        case 3: // USING_RATIO
          return USING_RATIO;
        case 4: // INCLUDE_CLOSE_PROFIT
          return INCLUDE_CLOSE_PROFIT;
        case 5: // ALL_WITHOUT_TRADE
          return ALL_WITHOUT_TRADE;
        case 6: // AVAIL_INCLUDE_CLOSE_PROFIT
          return AVAIL_INCLUDE_CLOSE_PROFIT;
        case 7: // IS_BROKER_USER_EVENT
          return IS_BROKER_USER_EVENT;
        case 8: // CURRENCY_ID
          return CURRENCY_ID;
        case 9: // FUND_MORTGAGE_RATIO
          return FUND_MORTGAGE_RATIO;
        case 10: // BALANCE_ALGORITHM
          return BALANCE_ALGORITHM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USINGRATIO_ISSET_ID = 0;
  private static final int __ISBROKERUSEREVENT_ISSET_ID = 1;
  private static final int __FUNDMORTGAGERATIO_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.WITHDRAW_ALGORITHM, new org.apache.thrift.meta_data.FieldMetaData("withdrawAlgorithm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcAlgorithmType")));
    tmpMap.put(_Fields.USING_RATIO, new org.apache.thrift.meta_data.FieldMetaData("usingRatio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcRatioType")));
    tmpMap.put(_Fields.INCLUDE_CLOSE_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("includeCloseProfit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcIncludeCloseProfitType")));
    tmpMap.put(_Fields.ALL_WITHOUT_TRADE, new org.apache.thrift.meta_data.FieldMetaData("allWithoutTrade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcAllWithoutTradeType")));
    tmpMap.put(_Fields.AVAIL_INCLUDE_CLOSE_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("availIncludeCloseProfit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcIncludeCloseProfitType")));
    tmpMap.put(_Fields.IS_BROKER_USER_EVENT, new org.apache.thrift.meta_data.FieldMetaData("isBrokerUserEvent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcBoolType")));
    tmpMap.put(_Fields.CURRENCY_ID, new org.apache.thrift.meta_data.FieldMetaData("currencyID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcCurrencyIDType")));
    tmpMap.put(_Fields.FUND_MORTGAGE_RATIO, new org.apache.thrift.meta_data.FieldMetaData("fundMortgageRatio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcRatioType")));
    tmpMap.put(_Fields.BALANCE_ALGORITHM, new org.apache.thrift.meta_data.FieldMetaData("balanceAlgorithm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBalanceAlgorithmType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcBrokerWithdrawAlgorithmField.class, metaDataMap);
  }

  public CThostFtdcBrokerWithdrawAlgorithmField() {
  }

  public CThostFtdcBrokerWithdrawAlgorithmField(
    String brokerID,
    String withdrawAlgorithm,
    double usingRatio,
    String includeCloseProfit,
    String allWithoutTrade,
    String availIncludeCloseProfit,
    int isBrokerUserEvent,
    String currencyID,
    double fundMortgageRatio,
    String balanceAlgorithm)
  {
    this();
    this.brokerID = brokerID;
    this.withdrawAlgorithm = withdrawAlgorithm;
    this.usingRatio = usingRatio;
    setUsingRatioIsSet(true);
    this.includeCloseProfit = includeCloseProfit;
    this.allWithoutTrade = allWithoutTrade;
    this.availIncludeCloseProfit = availIncludeCloseProfit;
    this.isBrokerUserEvent = isBrokerUserEvent;
    setIsBrokerUserEventIsSet(true);
    this.currencyID = currencyID;
    this.fundMortgageRatio = fundMortgageRatio;
    setFundMortgageRatioIsSet(true);
    this.balanceAlgorithm = balanceAlgorithm;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcBrokerWithdrawAlgorithmField(CThostFtdcBrokerWithdrawAlgorithmField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetWithdrawAlgorithm()) {
      this.withdrawAlgorithm = other.withdrawAlgorithm;
    }
    this.usingRatio = other.usingRatio;
    if (other.isSetIncludeCloseProfit()) {
      this.includeCloseProfit = other.includeCloseProfit;
    }
    if (other.isSetAllWithoutTrade()) {
      this.allWithoutTrade = other.allWithoutTrade;
    }
    if (other.isSetAvailIncludeCloseProfit()) {
      this.availIncludeCloseProfit = other.availIncludeCloseProfit;
    }
    this.isBrokerUserEvent = other.isBrokerUserEvent;
    if (other.isSetCurrencyID()) {
      this.currencyID = other.currencyID;
    }
    this.fundMortgageRatio = other.fundMortgageRatio;
    if (other.isSetBalanceAlgorithm()) {
      this.balanceAlgorithm = other.balanceAlgorithm;
    }
  }

  public CThostFtdcBrokerWithdrawAlgorithmField deepCopy() {
    return new CThostFtdcBrokerWithdrawAlgorithmField(this);
  }

  @Override
  public void clear() {
    this.brokerID = null;
    this.withdrawAlgorithm = null;
    setUsingRatioIsSet(false);
    this.usingRatio = 0.0;
    this.includeCloseProfit = null;
    this.allWithoutTrade = null;
    this.availIncludeCloseProfit = null;
    setIsBrokerUserEventIsSet(false);
    this.isBrokerUserEvent = 0;
    this.currencyID = null;
    setFundMortgageRatioIsSet(false);
    this.fundMortgageRatio = 0.0;
    this.balanceAlgorithm = null;
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcBrokerWithdrawAlgorithmField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getWithdrawAlgorithm() {
    return this.withdrawAlgorithm;
  }

  public CThostFtdcBrokerWithdrawAlgorithmField setWithdrawAlgorithm(String withdrawAlgorithm) {
    this.withdrawAlgorithm = withdrawAlgorithm;
    return this;
  }

  public void unsetWithdrawAlgorithm() {
    this.withdrawAlgorithm = null;
  }

  /** Returns true if field withdrawAlgorithm is set (has been assigned a value) and false otherwise */
  public boolean isSetWithdrawAlgorithm() {
    return this.withdrawAlgorithm != null;
  }

  public void setWithdrawAlgorithmIsSet(boolean value) {
    if (!value) {
      this.withdrawAlgorithm = null;
    }
  }

  public double getUsingRatio() {
    return this.usingRatio;
  }

  public CThostFtdcBrokerWithdrawAlgorithmField setUsingRatio(double usingRatio) {
    this.usingRatio = usingRatio;
    setUsingRatioIsSet(true);
    return this;
  }

  public void unsetUsingRatio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USINGRATIO_ISSET_ID);
  }

  /** Returns true if field usingRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetUsingRatio() {
    return EncodingUtils.testBit(__isset_bitfield, __USINGRATIO_ISSET_ID);
  }

  public void setUsingRatioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USINGRATIO_ISSET_ID, value);
  }

  public String getIncludeCloseProfit() {
    return this.includeCloseProfit;
  }

  public CThostFtdcBrokerWithdrawAlgorithmField setIncludeCloseProfit(String includeCloseProfit) {
    this.includeCloseProfit = includeCloseProfit;
    return this;
  }

  public void unsetIncludeCloseProfit() {
    this.includeCloseProfit = null;
  }

  /** Returns true if field includeCloseProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeCloseProfit() {
    return this.includeCloseProfit != null;
  }

  public void setIncludeCloseProfitIsSet(boolean value) {
    if (!value) {
      this.includeCloseProfit = null;
    }
  }

  public String getAllWithoutTrade() {
    return this.allWithoutTrade;
  }

  public CThostFtdcBrokerWithdrawAlgorithmField setAllWithoutTrade(String allWithoutTrade) {
    this.allWithoutTrade = allWithoutTrade;
    return this;
  }

  public void unsetAllWithoutTrade() {
    this.allWithoutTrade = null;
  }

  /** Returns true if field allWithoutTrade is set (has been assigned a value) and false otherwise */
  public boolean isSetAllWithoutTrade() {
    return this.allWithoutTrade != null;
  }

  public void setAllWithoutTradeIsSet(boolean value) {
    if (!value) {
      this.allWithoutTrade = null;
    }
  }

  public String getAvailIncludeCloseProfit() {
    return this.availIncludeCloseProfit;
  }

  public CThostFtdcBrokerWithdrawAlgorithmField setAvailIncludeCloseProfit(String availIncludeCloseProfit) {
    this.availIncludeCloseProfit = availIncludeCloseProfit;
    return this;
  }

  public void unsetAvailIncludeCloseProfit() {
    this.availIncludeCloseProfit = null;
  }

  /** Returns true if field availIncludeCloseProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailIncludeCloseProfit() {
    return this.availIncludeCloseProfit != null;
  }

  public void setAvailIncludeCloseProfitIsSet(boolean value) {
    if (!value) {
      this.availIncludeCloseProfit = null;
    }
  }

  public int getIsBrokerUserEvent() {
    return this.isBrokerUserEvent;
  }

  public CThostFtdcBrokerWithdrawAlgorithmField setIsBrokerUserEvent(int isBrokerUserEvent) {
    this.isBrokerUserEvent = isBrokerUserEvent;
    setIsBrokerUserEventIsSet(true);
    return this;
  }

  public void unsetIsBrokerUserEvent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISBROKERUSEREVENT_ISSET_ID);
  }

  /** Returns true if field isBrokerUserEvent is set (has been assigned a value) and false otherwise */
  public boolean isSetIsBrokerUserEvent() {
    return EncodingUtils.testBit(__isset_bitfield, __ISBROKERUSEREVENT_ISSET_ID);
  }

  public void setIsBrokerUserEventIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISBROKERUSEREVENT_ISSET_ID, value);
  }

  public String getCurrencyID() {
    return this.currencyID;
  }

  public CThostFtdcBrokerWithdrawAlgorithmField setCurrencyID(String currencyID) {
    this.currencyID = currencyID;
    return this;
  }

  public void unsetCurrencyID() {
    this.currencyID = null;
  }

  /** Returns true if field currencyID is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencyID() {
    return this.currencyID != null;
  }

  public void setCurrencyIDIsSet(boolean value) {
    if (!value) {
      this.currencyID = null;
    }
  }

  public double getFundMortgageRatio() {
    return this.fundMortgageRatio;
  }

  public CThostFtdcBrokerWithdrawAlgorithmField setFundMortgageRatio(double fundMortgageRatio) {
    this.fundMortgageRatio = fundMortgageRatio;
    setFundMortgageRatioIsSet(true);
    return this;
  }

  public void unsetFundMortgageRatio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FUNDMORTGAGERATIO_ISSET_ID);
  }

  /** Returns true if field fundMortgageRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetFundMortgageRatio() {
    return EncodingUtils.testBit(__isset_bitfield, __FUNDMORTGAGERATIO_ISSET_ID);
  }

  public void setFundMortgageRatioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FUNDMORTGAGERATIO_ISSET_ID, value);
  }

  public String getBalanceAlgorithm() {
    return this.balanceAlgorithm;
  }

  public CThostFtdcBrokerWithdrawAlgorithmField setBalanceAlgorithm(String balanceAlgorithm) {
    this.balanceAlgorithm = balanceAlgorithm;
    return this;
  }

  public void unsetBalanceAlgorithm() {
    this.balanceAlgorithm = null;
  }

  /** Returns true if field balanceAlgorithm is set (has been assigned a value) and false otherwise */
  public boolean isSetBalanceAlgorithm() {
    return this.balanceAlgorithm != null;
  }

  public void setBalanceAlgorithmIsSet(boolean value) {
    if (!value) {
      this.balanceAlgorithm = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case WITHDRAW_ALGORITHM:
      if (value == null) {
        unsetWithdrawAlgorithm();
      } else {
        setWithdrawAlgorithm((String)value);
      }
      break;

    case USING_RATIO:
      if (value == null) {
        unsetUsingRatio();
      } else {
        setUsingRatio((Double)value);
      }
      break;

    case INCLUDE_CLOSE_PROFIT:
      if (value == null) {
        unsetIncludeCloseProfit();
      } else {
        setIncludeCloseProfit((String)value);
      }
      break;

    case ALL_WITHOUT_TRADE:
      if (value == null) {
        unsetAllWithoutTrade();
      } else {
        setAllWithoutTrade((String)value);
      }
      break;

    case AVAIL_INCLUDE_CLOSE_PROFIT:
      if (value == null) {
        unsetAvailIncludeCloseProfit();
      } else {
        setAvailIncludeCloseProfit((String)value);
      }
      break;

    case IS_BROKER_USER_EVENT:
      if (value == null) {
        unsetIsBrokerUserEvent();
      } else {
        setIsBrokerUserEvent((Integer)value);
      }
      break;

    case CURRENCY_ID:
      if (value == null) {
        unsetCurrencyID();
      } else {
        setCurrencyID((String)value);
      }
      break;

    case FUND_MORTGAGE_RATIO:
      if (value == null) {
        unsetFundMortgageRatio();
      } else {
        setFundMortgageRatio((Double)value);
      }
      break;

    case BALANCE_ALGORITHM:
      if (value == null) {
        unsetBalanceAlgorithm();
      } else {
        setBalanceAlgorithm((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BROKER_ID:
      return getBrokerID();

    case WITHDRAW_ALGORITHM:
      return getWithdrawAlgorithm();

    case USING_RATIO:
      return Double.valueOf(getUsingRatio());

    case INCLUDE_CLOSE_PROFIT:
      return getIncludeCloseProfit();

    case ALL_WITHOUT_TRADE:
      return getAllWithoutTrade();

    case AVAIL_INCLUDE_CLOSE_PROFIT:
      return getAvailIncludeCloseProfit();

    case IS_BROKER_USER_EVENT:
      return Integer.valueOf(getIsBrokerUserEvent());

    case CURRENCY_ID:
      return getCurrencyID();

    case FUND_MORTGAGE_RATIO:
      return Double.valueOf(getFundMortgageRatio());

    case BALANCE_ALGORITHM:
      return getBalanceAlgorithm();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BROKER_ID:
      return isSetBrokerID();
    case WITHDRAW_ALGORITHM:
      return isSetWithdrawAlgorithm();
    case USING_RATIO:
      return isSetUsingRatio();
    case INCLUDE_CLOSE_PROFIT:
      return isSetIncludeCloseProfit();
    case ALL_WITHOUT_TRADE:
      return isSetAllWithoutTrade();
    case AVAIL_INCLUDE_CLOSE_PROFIT:
      return isSetAvailIncludeCloseProfit();
    case IS_BROKER_USER_EVENT:
      return isSetIsBrokerUserEvent();
    case CURRENCY_ID:
      return isSetCurrencyID();
    case FUND_MORTGAGE_RATIO:
      return isSetFundMortgageRatio();
    case BALANCE_ALGORITHM:
      return isSetBalanceAlgorithm();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcBrokerWithdrawAlgorithmField)
      return this.equals((CThostFtdcBrokerWithdrawAlgorithmField)that);
    return false;
  }

  public boolean equals(CThostFtdcBrokerWithdrawAlgorithmField that) {
    if (that == null)
      return false;

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_withdrawAlgorithm = true && this.isSetWithdrawAlgorithm();
    boolean that_present_withdrawAlgorithm = true && that.isSetWithdrawAlgorithm();
    if (this_present_withdrawAlgorithm || that_present_withdrawAlgorithm) {
      if (!(this_present_withdrawAlgorithm && that_present_withdrawAlgorithm))
        return false;
      if (!this.withdrawAlgorithm.equals(that.withdrawAlgorithm))
        return false;
    }

    boolean this_present_usingRatio = true;
    boolean that_present_usingRatio = true;
    if (this_present_usingRatio || that_present_usingRatio) {
      if (!(this_present_usingRatio && that_present_usingRatio))
        return false;
      if (this.usingRatio != that.usingRatio)
        return false;
    }

    boolean this_present_includeCloseProfit = true && this.isSetIncludeCloseProfit();
    boolean that_present_includeCloseProfit = true && that.isSetIncludeCloseProfit();
    if (this_present_includeCloseProfit || that_present_includeCloseProfit) {
      if (!(this_present_includeCloseProfit && that_present_includeCloseProfit))
        return false;
      if (!this.includeCloseProfit.equals(that.includeCloseProfit))
        return false;
    }

    boolean this_present_allWithoutTrade = true && this.isSetAllWithoutTrade();
    boolean that_present_allWithoutTrade = true && that.isSetAllWithoutTrade();
    if (this_present_allWithoutTrade || that_present_allWithoutTrade) {
      if (!(this_present_allWithoutTrade && that_present_allWithoutTrade))
        return false;
      if (!this.allWithoutTrade.equals(that.allWithoutTrade))
        return false;
    }

    boolean this_present_availIncludeCloseProfit = true && this.isSetAvailIncludeCloseProfit();
    boolean that_present_availIncludeCloseProfit = true && that.isSetAvailIncludeCloseProfit();
    if (this_present_availIncludeCloseProfit || that_present_availIncludeCloseProfit) {
      if (!(this_present_availIncludeCloseProfit && that_present_availIncludeCloseProfit))
        return false;
      if (!this.availIncludeCloseProfit.equals(that.availIncludeCloseProfit))
        return false;
    }

    boolean this_present_isBrokerUserEvent = true;
    boolean that_present_isBrokerUserEvent = true;
    if (this_present_isBrokerUserEvent || that_present_isBrokerUserEvent) {
      if (!(this_present_isBrokerUserEvent && that_present_isBrokerUserEvent))
        return false;
      if (this.isBrokerUserEvent != that.isBrokerUserEvent)
        return false;
    }

    boolean this_present_currencyID = true && this.isSetCurrencyID();
    boolean that_present_currencyID = true && that.isSetCurrencyID();
    if (this_present_currencyID || that_present_currencyID) {
      if (!(this_present_currencyID && that_present_currencyID))
        return false;
      if (!this.currencyID.equals(that.currencyID))
        return false;
    }

    boolean this_present_fundMortgageRatio = true;
    boolean that_present_fundMortgageRatio = true;
    if (this_present_fundMortgageRatio || that_present_fundMortgageRatio) {
      if (!(this_present_fundMortgageRatio && that_present_fundMortgageRatio))
        return false;
      if (this.fundMortgageRatio != that.fundMortgageRatio)
        return false;
    }

    boolean this_present_balanceAlgorithm = true && this.isSetBalanceAlgorithm();
    boolean that_present_balanceAlgorithm = true && that.isSetBalanceAlgorithm();
    if (this_present_balanceAlgorithm || that_present_balanceAlgorithm) {
      if (!(this_present_balanceAlgorithm && that_present_balanceAlgorithm))
        return false;
      if (!this.balanceAlgorithm.equals(that.balanceAlgorithm))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcBrokerWithdrawAlgorithmField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWithdrawAlgorithm()).compareTo(other.isSetWithdrawAlgorithm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWithdrawAlgorithm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withdrawAlgorithm, other.withdrawAlgorithm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsingRatio()).compareTo(other.isSetUsingRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsingRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usingRatio, other.usingRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeCloseProfit()).compareTo(other.isSetIncludeCloseProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeCloseProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeCloseProfit, other.includeCloseProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllWithoutTrade()).compareTo(other.isSetAllWithoutTrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllWithoutTrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allWithoutTrade, other.allWithoutTrade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvailIncludeCloseProfit()).compareTo(other.isSetAvailIncludeCloseProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailIncludeCloseProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availIncludeCloseProfit, other.availIncludeCloseProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsBrokerUserEvent()).compareTo(other.isSetIsBrokerUserEvent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsBrokerUserEvent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isBrokerUserEvent, other.isBrokerUserEvent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrencyID()).compareTo(other.isSetCurrencyID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencyID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currencyID, other.currencyID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFundMortgageRatio()).compareTo(other.isSetFundMortgageRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFundMortgageRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fundMortgageRatio, other.fundMortgageRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBalanceAlgorithm()).compareTo(other.isSetBalanceAlgorithm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalanceAlgorithm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balanceAlgorithm, other.balanceAlgorithm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcBrokerWithdrawAlgorithmField(");
    boolean first = true;

    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("withdrawAlgorithm:");
    if (this.withdrawAlgorithm == null) {
      sb.append("null");
    } else {
      sb.append(this.withdrawAlgorithm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("usingRatio:");
    sb.append(this.usingRatio);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeCloseProfit:");
    if (this.includeCloseProfit == null) {
      sb.append("null");
    } else {
      sb.append(this.includeCloseProfit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("allWithoutTrade:");
    if (this.allWithoutTrade == null) {
      sb.append("null");
    } else {
      sb.append(this.allWithoutTrade);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("availIncludeCloseProfit:");
    if (this.availIncludeCloseProfit == null) {
      sb.append("null");
    } else {
      sb.append(this.availIncludeCloseProfit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isBrokerUserEvent:");
    sb.append(this.isBrokerUserEvent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currencyID:");
    if (this.currencyID == null) {
      sb.append("null");
    } else {
      sb.append(this.currencyID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fundMortgageRatio:");
    sb.append(this.fundMortgageRatio);
    first = false;
    if (!first) sb.append(", ");
    sb.append("balanceAlgorithm:");
    if (this.balanceAlgorithm == null) {
      sb.append("null");
    } else {
      sb.append(this.balanceAlgorithm);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcBrokerWithdrawAlgorithmFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcBrokerWithdrawAlgorithmFieldStandardScheme getScheme() {
      return new CThostFtdcBrokerWithdrawAlgorithmFieldStandardScheme();
    }
  }

  private static class CThostFtdcBrokerWithdrawAlgorithmFieldStandardScheme extends StandardScheme<CThostFtdcBrokerWithdrawAlgorithmField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcBrokerWithdrawAlgorithmField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WITHDRAW_ALGORITHM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.withdrawAlgorithm = iprot.readString();
              struct.setWithdrawAlgorithmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USING_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.usingRatio = iprot.readDouble();
              struct.setUsingRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INCLUDE_CLOSE_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.includeCloseProfit = iprot.readString();
              struct.setIncludeCloseProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ALL_WITHOUT_TRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.allWithoutTrade = iprot.readString();
              struct.setAllWithoutTradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AVAIL_INCLUDE_CLOSE_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.availIncludeCloseProfit = iprot.readString();
              struct.setAvailIncludeCloseProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_BROKER_USER_EVENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isBrokerUserEvent = iprot.readI32();
              struct.setIsBrokerUserEventIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CURRENCY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currencyID = iprot.readString();
              struct.setCurrencyIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FUND_MORTGAGE_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fundMortgageRatio = iprot.readDouble();
              struct.setFundMortgageRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BALANCE_ALGORITHM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.balanceAlgorithm = iprot.readString();
              struct.setBalanceAlgorithmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcBrokerWithdrawAlgorithmField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.withdrawAlgorithm != null) {
        oprot.writeFieldBegin(WITHDRAW_ALGORITHM_FIELD_DESC);
        oprot.writeString(struct.withdrawAlgorithm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USING_RATIO_FIELD_DESC);
      oprot.writeDouble(struct.usingRatio);
      oprot.writeFieldEnd();
      if (struct.includeCloseProfit != null) {
        oprot.writeFieldBegin(INCLUDE_CLOSE_PROFIT_FIELD_DESC);
        oprot.writeString(struct.includeCloseProfit);
        oprot.writeFieldEnd();
      }
      if (struct.allWithoutTrade != null) {
        oprot.writeFieldBegin(ALL_WITHOUT_TRADE_FIELD_DESC);
        oprot.writeString(struct.allWithoutTrade);
        oprot.writeFieldEnd();
      }
      if (struct.availIncludeCloseProfit != null) {
        oprot.writeFieldBegin(AVAIL_INCLUDE_CLOSE_PROFIT_FIELD_DESC);
        oprot.writeString(struct.availIncludeCloseProfit);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_BROKER_USER_EVENT_FIELD_DESC);
      oprot.writeI32(struct.isBrokerUserEvent);
      oprot.writeFieldEnd();
      if (struct.currencyID != null) {
        oprot.writeFieldBegin(CURRENCY_ID_FIELD_DESC);
        oprot.writeString(struct.currencyID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FUND_MORTGAGE_RATIO_FIELD_DESC);
      oprot.writeDouble(struct.fundMortgageRatio);
      oprot.writeFieldEnd();
      if (struct.balanceAlgorithm != null) {
        oprot.writeFieldBegin(BALANCE_ALGORITHM_FIELD_DESC);
        oprot.writeString(struct.balanceAlgorithm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcBrokerWithdrawAlgorithmFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcBrokerWithdrawAlgorithmFieldTupleScheme getScheme() {
      return new CThostFtdcBrokerWithdrawAlgorithmFieldTupleScheme();
    }
  }

  private static class CThostFtdcBrokerWithdrawAlgorithmFieldTupleScheme extends TupleScheme<CThostFtdcBrokerWithdrawAlgorithmField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcBrokerWithdrawAlgorithmField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBrokerID()) {
        optionals.set(0);
      }
      if (struct.isSetWithdrawAlgorithm()) {
        optionals.set(1);
      }
      if (struct.isSetUsingRatio()) {
        optionals.set(2);
      }
      if (struct.isSetIncludeCloseProfit()) {
        optionals.set(3);
      }
      if (struct.isSetAllWithoutTrade()) {
        optionals.set(4);
      }
      if (struct.isSetAvailIncludeCloseProfit()) {
        optionals.set(5);
      }
      if (struct.isSetIsBrokerUserEvent()) {
        optionals.set(6);
      }
      if (struct.isSetCurrencyID()) {
        optionals.set(7);
      }
      if (struct.isSetFundMortgageRatio()) {
        optionals.set(8);
      }
      if (struct.isSetBalanceAlgorithm()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetWithdrawAlgorithm()) {
        oprot.writeString(struct.withdrawAlgorithm);
      }
      if (struct.isSetUsingRatio()) {
        oprot.writeDouble(struct.usingRatio);
      }
      if (struct.isSetIncludeCloseProfit()) {
        oprot.writeString(struct.includeCloseProfit);
      }
      if (struct.isSetAllWithoutTrade()) {
        oprot.writeString(struct.allWithoutTrade);
      }
      if (struct.isSetAvailIncludeCloseProfit()) {
        oprot.writeString(struct.availIncludeCloseProfit);
      }
      if (struct.isSetIsBrokerUserEvent()) {
        oprot.writeI32(struct.isBrokerUserEvent);
      }
      if (struct.isSetCurrencyID()) {
        oprot.writeString(struct.currencyID);
      }
      if (struct.isSetFundMortgageRatio()) {
        oprot.writeDouble(struct.fundMortgageRatio);
      }
      if (struct.isSetBalanceAlgorithm()) {
        oprot.writeString(struct.balanceAlgorithm);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcBrokerWithdrawAlgorithmField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.withdrawAlgorithm = iprot.readString();
        struct.setWithdrawAlgorithmIsSet(true);
      }
      if (incoming.get(2)) {
        struct.usingRatio = iprot.readDouble();
        struct.setUsingRatioIsSet(true);
      }
      if (incoming.get(3)) {
        struct.includeCloseProfit = iprot.readString();
        struct.setIncludeCloseProfitIsSet(true);
      }
      if (incoming.get(4)) {
        struct.allWithoutTrade = iprot.readString();
        struct.setAllWithoutTradeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.availIncludeCloseProfit = iprot.readString();
        struct.setAvailIncludeCloseProfitIsSet(true);
      }
      if (incoming.get(6)) {
        struct.isBrokerUserEvent = iprot.readI32();
        struct.setIsBrokerUserEventIsSet(true);
      }
      if (incoming.get(7)) {
        struct.currencyID = iprot.readString();
        struct.setCurrencyIDIsSet(true);
      }
      if (incoming.get(8)) {
        struct.fundMortgageRatio = iprot.readDouble();
        struct.setFundMortgageRatioIsSet(true);
      }
      if (incoming.get(9)) {
        struct.balanceAlgorithm = iprot.readString();
        struct.setBalanceAlgorithmIsSet(true);
      }
    }
  }

}

