/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcInstrumentStatusField implements org.apache.thrift.TBase<CThostFtdcInstrumentStatusField, CThostFtdcInstrumentStatusField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcInstrumentStatusField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcInstrumentStatusField");

  private static final org.apache.thrift.protocol.TField EXCHANGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EXCHANGE_INST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeInstID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SETTLEMENT_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("settlementGroupID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField INSTRUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instrumentID", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField INSTRUMENT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("instrumentStatus", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TRADING_SEGMENT_SN_FIELD_DESC = new org.apache.thrift.protocol.TField("tradingSegmentSN", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ENTER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("enterTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ENTER_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("enterReason", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcInstrumentStatusFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcInstrumentStatusFieldTupleSchemeFactory());
  }

  public String exchangeID; // required
  public String exchangeInstID; // required
  public String settlementGroupID; // required
  public String instrumentID; // required
  public String instrumentStatus; // required
  public int tradingSegmentSN; // required
  public String enterTime; // required
  public String enterReason; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXCHANGE_ID((short)1, "exchangeID"),
    EXCHANGE_INST_ID((short)2, "exchangeInstID"),
    SETTLEMENT_GROUP_ID((short)3, "settlementGroupID"),
    INSTRUMENT_ID((short)4, "instrumentID"),
    INSTRUMENT_STATUS((short)5, "instrumentStatus"),
    TRADING_SEGMENT_SN((short)6, "tradingSegmentSN"),
    ENTER_TIME((short)7, "enterTime"),
    ENTER_REASON((short)8, "enterReason");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXCHANGE_ID
          return EXCHANGE_ID;
        case 2: // EXCHANGE_INST_ID
          return EXCHANGE_INST_ID;
        case 3: // SETTLEMENT_GROUP_ID
          return SETTLEMENT_GROUP_ID;
        case 4: // INSTRUMENT_ID
          return INSTRUMENT_ID;
        case 5: // INSTRUMENT_STATUS
          return INSTRUMENT_STATUS;
        case 6: // TRADING_SEGMENT_SN
          return TRADING_SEGMENT_SN;
        case 7: // ENTER_TIME
          return ENTER_TIME;
        case 8: // ENTER_REASON
          return ENTER_REASON;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TRADINGSEGMENTSN_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXCHANGE_ID, new org.apache.thrift.meta_data.FieldMetaData("exchangeID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcExchangeIDType")));
    tmpMap.put(_Fields.EXCHANGE_INST_ID, new org.apache.thrift.meta_data.FieldMetaData("exchangeInstID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcExchangeInstIDType")));
    tmpMap.put(_Fields.SETTLEMENT_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("settlementGroupID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcSettlementGroupIDType")));
    tmpMap.put(_Fields.INSTRUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("instrumentID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInstrumentIDType")));
    tmpMap.put(_Fields.INSTRUMENT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("instrumentStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInstrumentStatusType")));
    tmpMap.put(_Fields.TRADING_SEGMENT_SN, new org.apache.thrift.meta_data.FieldMetaData("tradingSegmentSN", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcTradingSegmentSNType")));
    tmpMap.put(_Fields.ENTER_TIME, new org.apache.thrift.meta_data.FieldMetaData("enterTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeType")));
    tmpMap.put(_Fields.ENTER_REASON, new org.apache.thrift.meta_data.FieldMetaData("enterReason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInstStatusEnterReasonType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcInstrumentStatusField.class, metaDataMap);
  }

  public CThostFtdcInstrumentStatusField() {
  }

  public CThostFtdcInstrumentStatusField(
    String exchangeID,
    String exchangeInstID,
    String settlementGroupID,
    String instrumentID,
    String instrumentStatus,
    int tradingSegmentSN,
    String enterTime,
    String enterReason)
  {
    this();
    this.exchangeID = exchangeID;
    this.exchangeInstID = exchangeInstID;
    this.settlementGroupID = settlementGroupID;
    this.instrumentID = instrumentID;
    this.instrumentStatus = instrumentStatus;
    this.tradingSegmentSN = tradingSegmentSN;
    setTradingSegmentSNIsSet(true);
    this.enterTime = enterTime;
    this.enterReason = enterReason;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcInstrumentStatusField(CThostFtdcInstrumentStatusField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetExchangeID()) {
      this.exchangeID = other.exchangeID;
    }
    if (other.isSetExchangeInstID()) {
      this.exchangeInstID = other.exchangeInstID;
    }
    if (other.isSetSettlementGroupID()) {
      this.settlementGroupID = other.settlementGroupID;
    }
    if (other.isSetInstrumentID()) {
      this.instrumentID = other.instrumentID;
    }
    if (other.isSetInstrumentStatus()) {
      this.instrumentStatus = other.instrumentStatus;
    }
    this.tradingSegmentSN = other.tradingSegmentSN;
    if (other.isSetEnterTime()) {
      this.enterTime = other.enterTime;
    }
    if (other.isSetEnterReason()) {
      this.enterReason = other.enterReason;
    }
  }

  public CThostFtdcInstrumentStatusField deepCopy() {
    return new CThostFtdcInstrumentStatusField(this);
  }

  @Override
  public void clear() {
    this.exchangeID = null;
    this.exchangeInstID = null;
    this.settlementGroupID = null;
    this.instrumentID = null;
    this.instrumentStatus = null;
    setTradingSegmentSNIsSet(false);
    this.tradingSegmentSN = 0;
    this.enterTime = null;
    this.enterReason = null;
  }

  public String getExchangeID() {
    return this.exchangeID;
  }

  public CThostFtdcInstrumentStatusField setExchangeID(String exchangeID) {
    this.exchangeID = exchangeID;
    return this;
  }

  public void unsetExchangeID() {
    this.exchangeID = null;
  }

  /** Returns true if field exchangeID is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeID() {
    return this.exchangeID != null;
  }

  public void setExchangeIDIsSet(boolean value) {
    if (!value) {
      this.exchangeID = null;
    }
  }

  public String getExchangeInstID() {
    return this.exchangeInstID;
  }

  public CThostFtdcInstrumentStatusField setExchangeInstID(String exchangeInstID) {
    this.exchangeInstID = exchangeInstID;
    return this;
  }

  public void unsetExchangeInstID() {
    this.exchangeInstID = null;
  }

  /** Returns true if field exchangeInstID is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeInstID() {
    return this.exchangeInstID != null;
  }

  public void setExchangeInstIDIsSet(boolean value) {
    if (!value) {
      this.exchangeInstID = null;
    }
  }

  public String getSettlementGroupID() {
    return this.settlementGroupID;
  }

  public CThostFtdcInstrumentStatusField setSettlementGroupID(String settlementGroupID) {
    this.settlementGroupID = settlementGroupID;
    return this;
  }

  public void unsetSettlementGroupID() {
    this.settlementGroupID = null;
  }

  /** Returns true if field settlementGroupID is set (has been assigned a value) and false otherwise */
  public boolean isSetSettlementGroupID() {
    return this.settlementGroupID != null;
  }

  public void setSettlementGroupIDIsSet(boolean value) {
    if (!value) {
      this.settlementGroupID = null;
    }
  }

  public String getInstrumentID() {
    return this.instrumentID;
  }

  public CThostFtdcInstrumentStatusField setInstrumentID(String instrumentID) {
    this.instrumentID = instrumentID;
    return this;
  }

  public void unsetInstrumentID() {
    this.instrumentID = null;
  }

  /** Returns true if field instrumentID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstrumentID() {
    return this.instrumentID != null;
  }

  public void setInstrumentIDIsSet(boolean value) {
    if (!value) {
      this.instrumentID = null;
    }
  }

  public String getInstrumentStatus() {
    return this.instrumentStatus;
  }

  public CThostFtdcInstrumentStatusField setInstrumentStatus(String instrumentStatus) {
    this.instrumentStatus = instrumentStatus;
    return this;
  }

  public void unsetInstrumentStatus() {
    this.instrumentStatus = null;
  }

  /** Returns true if field instrumentStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetInstrumentStatus() {
    return this.instrumentStatus != null;
  }

  public void setInstrumentStatusIsSet(boolean value) {
    if (!value) {
      this.instrumentStatus = null;
    }
  }

  public int getTradingSegmentSN() {
    return this.tradingSegmentSN;
  }

  public CThostFtdcInstrumentStatusField setTradingSegmentSN(int tradingSegmentSN) {
    this.tradingSegmentSN = tradingSegmentSN;
    setTradingSegmentSNIsSet(true);
    return this;
  }

  public void unsetTradingSegmentSN() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADINGSEGMENTSN_ISSET_ID);
  }

  /** Returns true if field tradingSegmentSN is set (has been assigned a value) and false otherwise */
  public boolean isSetTradingSegmentSN() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADINGSEGMENTSN_ISSET_ID);
  }

  public void setTradingSegmentSNIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADINGSEGMENTSN_ISSET_ID, value);
  }

  public String getEnterTime() {
    return this.enterTime;
  }

  public CThostFtdcInstrumentStatusField setEnterTime(String enterTime) {
    this.enterTime = enterTime;
    return this;
  }

  public void unsetEnterTime() {
    this.enterTime = null;
  }

  /** Returns true if field enterTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEnterTime() {
    return this.enterTime != null;
  }

  public void setEnterTimeIsSet(boolean value) {
    if (!value) {
      this.enterTime = null;
    }
  }

  public String getEnterReason() {
    return this.enterReason;
  }

  public CThostFtdcInstrumentStatusField setEnterReason(String enterReason) {
    this.enterReason = enterReason;
    return this;
  }

  public void unsetEnterReason() {
    this.enterReason = null;
  }

  /** Returns true if field enterReason is set (has been assigned a value) and false otherwise */
  public boolean isSetEnterReason() {
    return this.enterReason != null;
  }

  public void setEnterReasonIsSet(boolean value) {
    if (!value) {
      this.enterReason = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXCHANGE_ID:
      if (value == null) {
        unsetExchangeID();
      } else {
        setExchangeID((String)value);
      }
      break;

    case EXCHANGE_INST_ID:
      if (value == null) {
        unsetExchangeInstID();
      } else {
        setExchangeInstID((String)value);
      }
      break;

    case SETTLEMENT_GROUP_ID:
      if (value == null) {
        unsetSettlementGroupID();
      } else {
        setSettlementGroupID((String)value);
      }
      break;

    case INSTRUMENT_ID:
      if (value == null) {
        unsetInstrumentID();
      } else {
        setInstrumentID((String)value);
      }
      break;

    case INSTRUMENT_STATUS:
      if (value == null) {
        unsetInstrumentStatus();
      } else {
        setInstrumentStatus((String)value);
      }
      break;

    case TRADING_SEGMENT_SN:
      if (value == null) {
        unsetTradingSegmentSN();
      } else {
        setTradingSegmentSN((Integer)value);
      }
      break;

    case ENTER_TIME:
      if (value == null) {
        unsetEnterTime();
      } else {
        setEnterTime((String)value);
      }
      break;

    case ENTER_REASON:
      if (value == null) {
        unsetEnterReason();
      } else {
        setEnterReason((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXCHANGE_ID:
      return getExchangeID();

    case EXCHANGE_INST_ID:
      return getExchangeInstID();

    case SETTLEMENT_GROUP_ID:
      return getSettlementGroupID();

    case INSTRUMENT_ID:
      return getInstrumentID();

    case INSTRUMENT_STATUS:
      return getInstrumentStatus();

    case TRADING_SEGMENT_SN:
      return Integer.valueOf(getTradingSegmentSN());

    case ENTER_TIME:
      return getEnterTime();

    case ENTER_REASON:
      return getEnterReason();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXCHANGE_ID:
      return isSetExchangeID();
    case EXCHANGE_INST_ID:
      return isSetExchangeInstID();
    case SETTLEMENT_GROUP_ID:
      return isSetSettlementGroupID();
    case INSTRUMENT_ID:
      return isSetInstrumentID();
    case INSTRUMENT_STATUS:
      return isSetInstrumentStatus();
    case TRADING_SEGMENT_SN:
      return isSetTradingSegmentSN();
    case ENTER_TIME:
      return isSetEnterTime();
    case ENTER_REASON:
      return isSetEnterReason();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcInstrumentStatusField)
      return this.equals((CThostFtdcInstrumentStatusField)that);
    return false;
  }

  public boolean equals(CThostFtdcInstrumentStatusField that) {
    if (that == null)
      return false;

    boolean this_present_exchangeID = true && this.isSetExchangeID();
    boolean that_present_exchangeID = true && that.isSetExchangeID();
    if (this_present_exchangeID || that_present_exchangeID) {
      if (!(this_present_exchangeID && that_present_exchangeID))
        return false;
      if (!this.exchangeID.equals(that.exchangeID))
        return false;
    }

    boolean this_present_exchangeInstID = true && this.isSetExchangeInstID();
    boolean that_present_exchangeInstID = true && that.isSetExchangeInstID();
    if (this_present_exchangeInstID || that_present_exchangeInstID) {
      if (!(this_present_exchangeInstID && that_present_exchangeInstID))
        return false;
      if (!this.exchangeInstID.equals(that.exchangeInstID))
        return false;
    }

    boolean this_present_settlementGroupID = true && this.isSetSettlementGroupID();
    boolean that_present_settlementGroupID = true && that.isSetSettlementGroupID();
    if (this_present_settlementGroupID || that_present_settlementGroupID) {
      if (!(this_present_settlementGroupID && that_present_settlementGroupID))
        return false;
      if (!this.settlementGroupID.equals(that.settlementGroupID))
        return false;
    }

    boolean this_present_instrumentID = true && this.isSetInstrumentID();
    boolean that_present_instrumentID = true && that.isSetInstrumentID();
    if (this_present_instrumentID || that_present_instrumentID) {
      if (!(this_present_instrumentID && that_present_instrumentID))
        return false;
      if (!this.instrumentID.equals(that.instrumentID))
        return false;
    }

    boolean this_present_instrumentStatus = true && this.isSetInstrumentStatus();
    boolean that_present_instrumentStatus = true && that.isSetInstrumentStatus();
    if (this_present_instrumentStatus || that_present_instrumentStatus) {
      if (!(this_present_instrumentStatus && that_present_instrumentStatus))
        return false;
      if (!this.instrumentStatus.equals(that.instrumentStatus))
        return false;
    }

    boolean this_present_tradingSegmentSN = true;
    boolean that_present_tradingSegmentSN = true;
    if (this_present_tradingSegmentSN || that_present_tradingSegmentSN) {
      if (!(this_present_tradingSegmentSN && that_present_tradingSegmentSN))
        return false;
      if (this.tradingSegmentSN != that.tradingSegmentSN)
        return false;
    }

    boolean this_present_enterTime = true && this.isSetEnterTime();
    boolean that_present_enterTime = true && that.isSetEnterTime();
    if (this_present_enterTime || that_present_enterTime) {
      if (!(this_present_enterTime && that_present_enterTime))
        return false;
      if (!this.enterTime.equals(that.enterTime))
        return false;
    }

    boolean this_present_enterReason = true && this.isSetEnterReason();
    boolean that_present_enterReason = true && that.isSetEnterReason();
    if (this_present_enterReason || that_present_enterReason) {
      if (!(this_present_enterReason && that_present_enterReason))
        return false;
      if (!this.enterReason.equals(that.enterReason))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcInstrumentStatusField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExchangeID()).compareTo(other.isSetExchangeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeID, other.exchangeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeInstID()).compareTo(other.isSetExchangeInstID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeInstID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeInstID, other.exchangeInstID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettlementGroupID()).compareTo(other.isSetSettlementGroupID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettlementGroupID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settlementGroupID, other.settlementGroupID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstrumentID()).compareTo(other.isSetInstrumentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstrumentID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instrumentID, other.instrumentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstrumentStatus()).compareTo(other.isSetInstrumentStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstrumentStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instrumentStatus, other.instrumentStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradingSegmentSN()).compareTo(other.isSetTradingSegmentSN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradingSegmentSN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradingSegmentSN, other.tradingSegmentSN);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnterTime()).compareTo(other.isSetEnterTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnterTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enterTime, other.enterTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnterReason()).compareTo(other.isSetEnterReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnterReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enterReason, other.enterReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcInstrumentStatusField(");
    boolean first = true;

    sb.append("exchangeID:");
    if (this.exchangeID == null) {
      sb.append("null");
    } else {
      sb.append(this.exchangeID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchangeInstID:");
    if (this.exchangeInstID == null) {
      sb.append("null");
    } else {
      sb.append(this.exchangeInstID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settlementGroupID:");
    if (this.settlementGroupID == null) {
      sb.append("null");
    } else {
      sb.append(this.settlementGroupID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("instrumentID:");
    if (this.instrumentID == null) {
      sb.append("null");
    } else {
      sb.append(this.instrumentID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("instrumentStatus:");
    if (this.instrumentStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.instrumentStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradingSegmentSN:");
    sb.append(this.tradingSegmentSN);
    first = false;
    if (!first) sb.append(", ");
    sb.append("enterTime:");
    if (this.enterTime == null) {
      sb.append("null");
    } else {
      sb.append(this.enterTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("enterReason:");
    if (this.enterReason == null) {
      sb.append("null");
    } else {
      sb.append(this.enterReason);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcInstrumentStatusFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcInstrumentStatusFieldStandardScheme getScheme() {
      return new CThostFtdcInstrumentStatusFieldStandardScheme();
    }
  }

  private static class CThostFtdcInstrumentStatusFieldStandardScheme extends StandardScheme<CThostFtdcInstrumentStatusField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcInstrumentStatusField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXCHANGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeID = iprot.readString();
              struct.setExchangeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXCHANGE_INST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeInstID = iprot.readString();
              struct.setExchangeInstIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SETTLEMENT_GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settlementGroupID = iprot.readString();
              struct.setSettlementGroupIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INSTRUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instrumentID = iprot.readString();
              struct.setInstrumentIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INSTRUMENT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instrumentStatus = iprot.readString();
              struct.setInstrumentStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRADING_SEGMENT_SN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tradingSegmentSN = iprot.readI32();
              struct.setTradingSegmentSNIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ENTER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.enterTime = iprot.readString();
              struct.setEnterTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ENTER_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.enterReason = iprot.readString();
              struct.setEnterReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcInstrumentStatusField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.exchangeID != null) {
        oprot.writeFieldBegin(EXCHANGE_ID_FIELD_DESC);
        oprot.writeString(struct.exchangeID);
        oprot.writeFieldEnd();
      }
      if (struct.exchangeInstID != null) {
        oprot.writeFieldBegin(EXCHANGE_INST_ID_FIELD_DESC);
        oprot.writeString(struct.exchangeInstID);
        oprot.writeFieldEnd();
      }
      if (struct.settlementGroupID != null) {
        oprot.writeFieldBegin(SETTLEMENT_GROUP_ID_FIELD_DESC);
        oprot.writeString(struct.settlementGroupID);
        oprot.writeFieldEnd();
      }
      if (struct.instrumentID != null) {
        oprot.writeFieldBegin(INSTRUMENT_ID_FIELD_DESC);
        oprot.writeString(struct.instrumentID);
        oprot.writeFieldEnd();
      }
      if (struct.instrumentStatus != null) {
        oprot.writeFieldBegin(INSTRUMENT_STATUS_FIELD_DESC);
        oprot.writeString(struct.instrumentStatus);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TRADING_SEGMENT_SN_FIELD_DESC);
      oprot.writeI32(struct.tradingSegmentSN);
      oprot.writeFieldEnd();
      if (struct.enterTime != null) {
        oprot.writeFieldBegin(ENTER_TIME_FIELD_DESC);
        oprot.writeString(struct.enterTime);
        oprot.writeFieldEnd();
      }
      if (struct.enterReason != null) {
        oprot.writeFieldBegin(ENTER_REASON_FIELD_DESC);
        oprot.writeString(struct.enterReason);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcInstrumentStatusFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcInstrumentStatusFieldTupleScheme getScheme() {
      return new CThostFtdcInstrumentStatusFieldTupleScheme();
    }
  }

  private static class CThostFtdcInstrumentStatusFieldTupleScheme extends TupleScheme<CThostFtdcInstrumentStatusField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcInstrumentStatusField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetExchangeID()) {
        optionals.set(0);
      }
      if (struct.isSetExchangeInstID()) {
        optionals.set(1);
      }
      if (struct.isSetSettlementGroupID()) {
        optionals.set(2);
      }
      if (struct.isSetInstrumentID()) {
        optionals.set(3);
      }
      if (struct.isSetInstrumentStatus()) {
        optionals.set(4);
      }
      if (struct.isSetTradingSegmentSN()) {
        optionals.set(5);
      }
      if (struct.isSetEnterTime()) {
        optionals.set(6);
      }
      if (struct.isSetEnterReason()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetExchangeID()) {
        oprot.writeString(struct.exchangeID);
      }
      if (struct.isSetExchangeInstID()) {
        oprot.writeString(struct.exchangeInstID);
      }
      if (struct.isSetSettlementGroupID()) {
        oprot.writeString(struct.settlementGroupID);
      }
      if (struct.isSetInstrumentID()) {
        oprot.writeString(struct.instrumentID);
      }
      if (struct.isSetInstrumentStatus()) {
        oprot.writeString(struct.instrumentStatus);
      }
      if (struct.isSetTradingSegmentSN()) {
        oprot.writeI32(struct.tradingSegmentSN);
      }
      if (struct.isSetEnterTime()) {
        oprot.writeString(struct.enterTime);
      }
      if (struct.isSetEnterReason()) {
        oprot.writeString(struct.enterReason);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcInstrumentStatusField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.exchangeID = iprot.readString();
        struct.setExchangeIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.exchangeInstID = iprot.readString();
        struct.setExchangeInstIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.settlementGroupID = iprot.readString();
        struct.setSettlementGroupIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.instrumentID = iprot.readString();
        struct.setInstrumentIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.instrumentStatus = iprot.readString();
        struct.setInstrumentStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.tradingSegmentSN = iprot.readI32();
        struct.setTradingSegmentSNIsSet(true);
      }
      if (incoming.get(6)) {
        struct.enterTime = iprot.readString();
        struct.setEnterTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.enterReason = iprot.readString();
        struct.setEnterReasonIsSet(true);
      }
    }
  }

}

