/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcTransferHeaderField implements org.apache.thrift.TBase<CThostFtdcTransferHeaderField, CThostFtdcTransferHeaderField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcTransferHeaderField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcTransferHeaderField");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TRADE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TRADE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeDate", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TRADE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TRADE_SERIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeSerial", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FUTURE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("futureID", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField BANK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankID", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BANK_BRCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankBrchID", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField OPER_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("operNo", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceID", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField RECORD_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("recordNum", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestID", org.apache.thrift.protocol.TType.I32, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcTransferHeaderFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcTransferHeaderFieldTupleSchemeFactory());
  }

  public String version; // required
  public String tradeCode; // required
  public String tradeDate; // required
  public String tradeTime; // required
  public String tradeSerial; // required
  public String futureID; // required
  public String bankID; // required
  public String bankBrchID; // required
  public String operNo; // required
  public String deviceID; // required
  public String recordNum; // required
  public int sessionID; // required
  public int requestID; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VERSION((short)1, "version"),
    TRADE_CODE((short)2, "tradeCode"),
    TRADE_DATE((short)3, "tradeDate"),
    TRADE_TIME((short)4, "tradeTime"),
    TRADE_SERIAL((short)5, "tradeSerial"),
    FUTURE_ID((short)6, "futureID"),
    BANK_ID((short)7, "bankID"),
    BANK_BRCH_ID((short)8, "bankBrchID"),
    OPER_NO((short)9, "operNo"),
    DEVICE_ID((short)10, "deviceID"),
    RECORD_NUM((short)11, "recordNum"),
    SESSION_ID((short)12, "sessionID"),
    REQUEST_ID((short)13, "requestID");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // TRADE_CODE
          return TRADE_CODE;
        case 3: // TRADE_DATE
          return TRADE_DATE;
        case 4: // TRADE_TIME
          return TRADE_TIME;
        case 5: // TRADE_SERIAL
          return TRADE_SERIAL;
        case 6: // FUTURE_ID
          return FUTURE_ID;
        case 7: // BANK_ID
          return BANK_ID;
        case 8: // BANK_BRCH_ID
          return BANK_BRCH_ID;
        case 9: // OPER_NO
          return OPER_NO;
        case 10: // DEVICE_ID
          return DEVICE_ID;
        case 11: // RECORD_NUM
          return RECORD_NUM;
        case 12: // SESSION_ID
          return SESSION_ID;
        case 13: // REQUEST_ID
          return REQUEST_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SESSIONID_ISSET_ID = 0;
  private static final int __REQUESTID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcVersionType")));
    tmpMap.put(_Fields.TRADE_CODE, new org.apache.thrift.meta_data.FieldMetaData("tradeCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeCodeType")));
    tmpMap.put(_Fields.TRADE_DATE, new org.apache.thrift.meta_data.FieldMetaData("tradeDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeDateType")));
    tmpMap.put(_Fields.TRADE_TIME, new org.apache.thrift.meta_data.FieldMetaData("tradeTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeTimeType")));
    tmpMap.put(_Fields.TRADE_SERIAL, new org.apache.thrift.meta_data.FieldMetaData("tradeSerial", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeSerialType")));
    tmpMap.put(_Fields.FUTURE_ID, new org.apache.thrift.meta_data.FieldMetaData("futureID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcFutureIDType")));
    tmpMap.put(_Fields.BANK_ID, new org.apache.thrift.meta_data.FieldMetaData("bankID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankIDType")));
    tmpMap.put(_Fields.BANK_BRCH_ID, new org.apache.thrift.meta_data.FieldMetaData("bankBrchID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankBrchIDType")));
    tmpMap.put(_Fields.OPER_NO, new org.apache.thrift.meta_data.FieldMetaData("operNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOperNoType")));
    tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDeviceIDType")));
    tmpMap.put(_Fields.RECORD_NUM, new org.apache.thrift.meta_data.FieldMetaData("recordNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcRecordNumType")));
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcSessionIDType")));
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcRequestIDType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcTransferHeaderField.class, metaDataMap);
  }

  public CThostFtdcTransferHeaderField() {
  }

  public CThostFtdcTransferHeaderField(
    String version,
    String tradeCode,
    String tradeDate,
    String tradeTime,
    String tradeSerial,
    String futureID,
    String bankID,
    String bankBrchID,
    String operNo,
    String deviceID,
    String recordNum,
    int sessionID,
    int requestID)
  {
    this();
    this.version = version;
    this.tradeCode = tradeCode;
    this.tradeDate = tradeDate;
    this.tradeTime = tradeTime;
    this.tradeSerial = tradeSerial;
    this.futureID = futureID;
    this.bankID = bankID;
    this.bankBrchID = bankBrchID;
    this.operNo = operNo;
    this.deviceID = deviceID;
    this.recordNum = recordNum;
    this.sessionID = sessionID;
    setSessionIDIsSet(true);
    this.requestID = requestID;
    setRequestIDIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcTransferHeaderField(CThostFtdcTransferHeaderField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetTradeCode()) {
      this.tradeCode = other.tradeCode;
    }
    if (other.isSetTradeDate()) {
      this.tradeDate = other.tradeDate;
    }
    if (other.isSetTradeTime()) {
      this.tradeTime = other.tradeTime;
    }
    if (other.isSetTradeSerial()) {
      this.tradeSerial = other.tradeSerial;
    }
    if (other.isSetFutureID()) {
      this.futureID = other.futureID;
    }
    if (other.isSetBankID()) {
      this.bankID = other.bankID;
    }
    if (other.isSetBankBrchID()) {
      this.bankBrchID = other.bankBrchID;
    }
    if (other.isSetOperNo()) {
      this.operNo = other.operNo;
    }
    if (other.isSetDeviceID()) {
      this.deviceID = other.deviceID;
    }
    if (other.isSetRecordNum()) {
      this.recordNum = other.recordNum;
    }
    this.sessionID = other.sessionID;
    this.requestID = other.requestID;
  }

  public CThostFtdcTransferHeaderField deepCopy() {
    return new CThostFtdcTransferHeaderField(this);
  }

  @Override
  public void clear() {
    this.version = null;
    this.tradeCode = null;
    this.tradeDate = null;
    this.tradeTime = null;
    this.tradeSerial = null;
    this.futureID = null;
    this.bankID = null;
    this.bankBrchID = null;
    this.operNo = null;
    this.deviceID = null;
    this.recordNum = null;
    setSessionIDIsSet(false);
    this.sessionID = 0;
    setRequestIDIsSet(false);
    this.requestID = 0;
  }

  public String getVersion() {
    return this.version;
  }

  public CThostFtdcTransferHeaderField setVersion(String version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public String getTradeCode() {
    return this.tradeCode;
  }

  public CThostFtdcTransferHeaderField setTradeCode(String tradeCode) {
    this.tradeCode = tradeCode;
    return this;
  }

  public void unsetTradeCode() {
    this.tradeCode = null;
  }

  /** Returns true if field tradeCode is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeCode() {
    return this.tradeCode != null;
  }

  public void setTradeCodeIsSet(boolean value) {
    if (!value) {
      this.tradeCode = null;
    }
  }

  public String getTradeDate() {
    return this.tradeDate;
  }

  public CThostFtdcTransferHeaderField setTradeDate(String tradeDate) {
    this.tradeDate = tradeDate;
    return this;
  }

  public void unsetTradeDate() {
    this.tradeDate = null;
  }

  /** Returns true if field tradeDate is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeDate() {
    return this.tradeDate != null;
  }

  public void setTradeDateIsSet(boolean value) {
    if (!value) {
      this.tradeDate = null;
    }
  }

  public String getTradeTime() {
    return this.tradeTime;
  }

  public CThostFtdcTransferHeaderField setTradeTime(String tradeTime) {
    this.tradeTime = tradeTime;
    return this;
  }

  public void unsetTradeTime() {
    this.tradeTime = null;
  }

  /** Returns true if field tradeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeTime() {
    return this.tradeTime != null;
  }

  public void setTradeTimeIsSet(boolean value) {
    if (!value) {
      this.tradeTime = null;
    }
  }

  public String getTradeSerial() {
    return this.tradeSerial;
  }

  public CThostFtdcTransferHeaderField setTradeSerial(String tradeSerial) {
    this.tradeSerial = tradeSerial;
    return this;
  }

  public void unsetTradeSerial() {
    this.tradeSerial = null;
  }

  /** Returns true if field tradeSerial is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeSerial() {
    return this.tradeSerial != null;
  }

  public void setTradeSerialIsSet(boolean value) {
    if (!value) {
      this.tradeSerial = null;
    }
  }

  public String getFutureID() {
    return this.futureID;
  }

  public CThostFtdcTransferHeaderField setFutureID(String futureID) {
    this.futureID = futureID;
    return this;
  }

  public void unsetFutureID() {
    this.futureID = null;
  }

  /** Returns true if field futureID is set (has been assigned a value) and false otherwise */
  public boolean isSetFutureID() {
    return this.futureID != null;
  }

  public void setFutureIDIsSet(boolean value) {
    if (!value) {
      this.futureID = null;
    }
  }

  public String getBankID() {
    return this.bankID;
  }

  public CThostFtdcTransferHeaderField setBankID(String bankID) {
    this.bankID = bankID;
    return this;
  }

  public void unsetBankID() {
    this.bankID = null;
  }

  /** Returns true if field bankID is set (has been assigned a value) and false otherwise */
  public boolean isSetBankID() {
    return this.bankID != null;
  }

  public void setBankIDIsSet(boolean value) {
    if (!value) {
      this.bankID = null;
    }
  }

  public String getBankBrchID() {
    return this.bankBrchID;
  }

  public CThostFtdcTransferHeaderField setBankBrchID(String bankBrchID) {
    this.bankBrchID = bankBrchID;
    return this;
  }

  public void unsetBankBrchID() {
    this.bankBrchID = null;
  }

  /** Returns true if field bankBrchID is set (has been assigned a value) and false otherwise */
  public boolean isSetBankBrchID() {
    return this.bankBrchID != null;
  }

  public void setBankBrchIDIsSet(boolean value) {
    if (!value) {
      this.bankBrchID = null;
    }
  }

  public String getOperNo() {
    return this.operNo;
  }

  public CThostFtdcTransferHeaderField setOperNo(String operNo) {
    this.operNo = operNo;
    return this;
  }

  public void unsetOperNo() {
    this.operNo = null;
  }

  /** Returns true if field operNo is set (has been assigned a value) and false otherwise */
  public boolean isSetOperNo() {
    return this.operNo != null;
  }

  public void setOperNoIsSet(boolean value) {
    if (!value) {
      this.operNo = null;
    }
  }

  public String getDeviceID() {
    return this.deviceID;
  }

  public CThostFtdcTransferHeaderField setDeviceID(String deviceID) {
    this.deviceID = deviceID;
    return this;
  }

  public void unsetDeviceID() {
    this.deviceID = null;
  }

  /** Returns true if field deviceID is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceID() {
    return this.deviceID != null;
  }

  public void setDeviceIDIsSet(boolean value) {
    if (!value) {
      this.deviceID = null;
    }
  }

  public String getRecordNum() {
    return this.recordNum;
  }

  public CThostFtdcTransferHeaderField setRecordNum(String recordNum) {
    this.recordNum = recordNum;
    return this;
  }

  public void unsetRecordNum() {
    this.recordNum = null;
  }

  /** Returns true if field recordNum is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordNum() {
    return this.recordNum != null;
  }

  public void setRecordNumIsSet(boolean value) {
    if (!value) {
      this.recordNum = null;
    }
  }

  public int getSessionID() {
    return this.sessionID;
  }

  public CThostFtdcTransferHeaderField setSessionID(int sessionID) {
    this.sessionID = sessionID;
    setSessionIDIsSet(true);
    return this;
  }

  public void unsetSessionID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionID() {
    return EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  public void setSessionIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
  }

  public int getRequestID() {
    return this.requestID;
  }

  public CThostFtdcTransferHeaderField setRequestID(int requestID) {
    this.requestID = requestID;
    setRequestIDIsSet(true);
    return this;
  }

  public void unsetRequestID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  /** Returns true if field requestID is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestID() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  public void setRequestIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((String)value);
      }
      break;

    case TRADE_CODE:
      if (value == null) {
        unsetTradeCode();
      } else {
        setTradeCode((String)value);
      }
      break;

    case TRADE_DATE:
      if (value == null) {
        unsetTradeDate();
      } else {
        setTradeDate((String)value);
      }
      break;

    case TRADE_TIME:
      if (value == null) {
        unsetTradeTime();
      } else {
        setTradeTime((String)value);
      }
      break;

    case TRADE_SERIAL:
      if (value == null) {
        unsetTradeSerial();
      } else {
        setTradeSerial((String)value);
      }
      break;

    case FUTURE_ID:
      if (value == null) {
        unsetFutureID();
      } else {
        setFutureID((String)value);
      }
      break;

    case BANK_ID:
      if (value == null) {
        unsetBankID();
      } else {
        setBankID((String)value);
      }
      break;

    case BANK_BRCH_ID:
      if (value == null) {
        unsetBankBrchID();
      } else {
        setBankBrchID((String)value);
      }
      break;

    case OPER_NO:
      if (value == null) {
        unsetOperNo();
      } else {
        setOperNo((String)value);
      }
      break;

    case DEVICE_ID:
      if (value == null) {
        unsetDeviceID();
      } else {
        setDeviceID((String)value);
      }
      break;

    case RECORD_NUM:
      if (value == null) {
        unsetRecordNum();
      } else {
        setRecordNum((String)value);
      }
      break;

    case SESSION_ID:
      if (value == null) {
        unsetSessionID();
      } else {
        setSessionID((Integer)value);
      }
      break;

    case REQUEST_ID:
      if (value == null) {
        unsetRequestID();
      } else {
        setRequestID((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return getVersion();

    case TRADE_CODE:
      return getTradeCode();

    case TRADE_DATE:
      return getTradeDate();

    case TRADE_TIME:
      return getTradeTime();

    case TRADE_SERIAL:
      return getTradeSerial();

    case FUTURE_ID:
      return getFutureID();

    case BANK_ID:
      return getBankID();

    case BANK_BRCH_ID:
      return getBankBrchID();

    case OPER_NO:
      return getOperNo();

    case DEVICE_ID:
      return getDeviceID();

    case RECORD_NUM:
      return getRecordNum();

    case SESSION_ID:
      return Integer.valueOf(getSessionID());

    case REQUEST_ID:
      return Integer.valueOf(getRequestID());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case TRADE_CODE:
      return isSetTradeCode();
    case TRADE_DATE:
      return isSetTradeDate();
    case TRADE_TIME:
      return isSetTradeTime();
    case TRADE_SERIAL:
      return isSetTradeSerial();
    case FUTURE_ID:
      return isSetFutureID();
    case BANK_ID:
      return isSetBankID();
    case BANK_BRCH_ID:
      return isSetBankBrchID();
    case OPER_NO:
      return isSetOperNo();
    case DEVICE_ID:
      return isSetDeviceID();
    case RECORD_NUM:
      return isSetRecordNum();
    case SESSION_ID:
      return isSetSessionID();
    case REQUEST_ID:
      return isSetRequestID();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcTransferHeaderField)
      return this.equals((CThostFtdcTransferHeaderField)that);
    return false;
  }

  public boolean equals(CThostFtdcTransferHeaderField that) {
    if (that == null)
      return false;

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_tradeCode = true && this.isSetTradeCode();
    boolean that_present_tradeCode = true && that.isSetTradeCode();
    if (this_present_tradeCode || that_present_tradeCode) {
      if (!(this_present_tradeCode && that_present_tradeCode))
        return false;
      if (!this.tradeCode.equals(that.tradeCode))
        return false;
    }

    boolean this_present_tradeDate = true && this.isSetTradeDate();
    boolean that_present_tradeDate = true && that.isSetTradeDate();
    if (this_present_tradeDate || that_present_tradeDate) {
      if (!(this_present_tradeDate && that_present_tradeDate))
        return false;
      if (!this.tradeDate.equals(that.tradeDate))
        return false;
    }

    boolean this_present_tradeTime = true && this.isSetTradeTime();
    boolean that_present_tradeTime = true && that.isSetTradeTime();
    if (this_present_tradeTime || that_present_tradeTime) {
      if (!(this_present_tradeTime && that_present_tradeTime))
        return false;
      if (!this.tradeTime.equals(that.tradeTime))
        return false;
    }

    boolean this_present_tradeSerial = true && this.isSetTradeSerial();
    boolean that_present_tradeSerial = true && that.isSetTradeSerial();
    if (this_present_tradeSerial || that_present_tradeSerial) {
      if (!(this_present_tradeSerial && that_present_tradeSerial))
        return false;
      if (!this.tradeSerial.equals(that.tradeSerial))
        return false;
    }

    boolean this_present_futureID = true && this.isSetFutureID();
    boolean that_present_futureID = true && that.isSetFutureID();
    if (this_present_futureID || that_present_futureID) {
      if (!(this_present_futureID && that_present_futureID))
        return false;
      if (!this.futureID.equals(that.futureID))
        return false;
    }

    boolean this_present_bankID = true && this.isSetBankID();
    boolean that_present_bankID = true && that.isSetBankID();
    if (this_present_bankID || that_present_bankID) {
      if (!(this_present_bankID && that_present_bankID))
        return false;
      if (!this.bankID.equals(that.bankID))
        return false;
    }

    boolean this_present_bankBrchID = true && this.isSetBankBrchID();
    boolean that_present_bankBrchID = true && that.isSetBankBrchID();
    if (this_present_bankBrchID || that_present_bankBrchID) {
      if (!(this_present_bankBrchID && that_present_bankBrchID))
        return false;
      if (!this.bankBrchID.equals(that.bankBrchID))
        return false;
    }

    boolean this_present_operNo = true && this.isSetOperNo();
    boolean that_present_operNo = true && that.isSetOperNo();
    if (this_present_operNo || that_present_operNo) {
      if (!(this_present_operNo && that_present_operNo))
        return false;
      if (!this.operNo.equals(that.operNo))
        return false;
    }

    boolean this_present_deviceID = true && this.isSetDeviceID();
    boolean that_present_deviceID = true && that.isSetDeviceID();
    if (this_present_deviceID || that_present_deviceID) {
      if (!(this_present_deviceID && that_present_deviceID))
        return false;
      if (!this.deviceID.equals(that.deviceID))
        return false;
    }

    boolean this_present_recordNum = true && this.isSetRecordNum();
    boolean that_present_recordNum = true && that.isSetRecordNum();
    if (this_present_recordNum || that_present_recordNum) {
      if (!(this_present_recordNum && that_present_recordNum))
        return false;
      if (!this.recordNum.equals(that.recordNum))
        return false;
    }

    boolean this_present_sessionID = true;
    boolean that_present_sessionID = true;
    if (this_present_sessionID || that_present_sessionID) {
      if (!(this_present_sessionID && that_present_sessionID))
        return false;
      if (this.sessionID != that.sessionID)
        return false;
    }

    boolean this_present_requestID = true;
    boolean that_present_requestID = true;
    if (this_present_requestID || that_present_requestID) {
      if (!(this_present_requestID && that_present_requestID))
        return false;
      if (this.requestID != that.requestID)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcTransferHeaderField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeCode()).compareTo(other.isSetTradeCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeCode, other.tradeCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeDate()).compareTo(other.isSetTradeDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeDate, other.tradeDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeTime()).compareTo(other.isSetTradeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeTime, other.tradeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeSerial()).compareTo(other.isSetTradeSerial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeSerial()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeSerial, other.tradeSerial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFutureID()).compareTo(other.isSetFutureID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFutureID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.futureID, other.futureID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankID()).compareTo(other.isSetBankID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankID, other.bankID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankBrchID()).compareTo(other.isSetBankBrchID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankBrchID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankBrchID, other.bankBrchID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperNo()).compareTo(other.isSetOperNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operNo, other.operNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceID()).compareTo(other.isSetDeviceID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceID, other.deviceID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordNum()).compareTo(other.isSetRecordNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordNum, other.recordNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestID()).compareTo(other.isSetRequestID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestID, other.requestID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcTransferHeaderField(");
    boolean first = true;

    sb.append("version:");
    if (this.version == null) {
      sb.append("null");
    } else {
      sb.append(this.version);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeCode:");
    if (this.tradeCode == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeDate:");
    if (this.tradeDate == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeTime:");
    if (this.tradeTime == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeSerial:");
    if (this.tradeSerial == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeSerial);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("futureID:");
    if (this.futureID == null) {
      sb.append("null");
    } else {
      sb.append(this.futureID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankID:");
    if (this.bankID == null) {
      sb.append("null");
    } else {
      sb.append(this.bankID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankBrchID:");
    if (this.bankBrchID == null) {
      sb.append("null");
    } else {
      sb.append(this.bankBrchID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operNo:");
    if (this.operNo == null) {
      sb.append("null");
    } else {
      sb.append(this.operNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceID:");
    if (this.deviceID == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordNum:");
    if (this.recordNum == null) {
      sb.append("null");
    } else {
      sb.append(this.recordNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sessionID:");
    sb.append(this.sessionID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestID:");
    sb.append(this.requestID);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcTransferHeaderFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcTransferHeaderFieldStandardScheme getScheme() {
      return new CThostFtdcTransferHeaderFieldStandardScheme();
    }
  }

  private static class CThostFtdcTransferHeaderFieldStandardScheme extends StandardScheme<CThostFtdcTransferHeaderField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcTransferHeaderField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRADE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeCode = iprot.readString();
              struct.setTradeCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRADE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeDate = iprot.readString();
              struct.setTradeDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TRADE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeTime = iprot.readString();
              struct.setTradeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TRADE_SERIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeSerial = iprot.readString();
              struct.setTradeSerialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FUTURE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.futureID = iprot.readString();
              struct.setFutureIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BANK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankID = iprot.readString();
              struct.setBankIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BANK_BRCH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankBrchID = iprot.readString();
              struct.setBankBrchIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OPER_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operNo = iprot.readString();
              struct.setOperNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DEVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceID = iprot.readString();
              struct.setDeviceIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // RECORD_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recordNum = iprot.readString();
              struct.setRecordNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sessionID = iprot.readI32();
              struct.setSessionIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestID = iprot.readI32();
              struct.setRequestIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcTransferHeaderField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.version != null) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeString(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.tradeCode != null) {
        oprot.writeFieldBegin(TRADE_CODE_FIELD_DESC);
        oprot.writeString(struct.tradeCode);
        oprot.writeFieldEnd();
      }
      if (struct.tradeDate != null) {
        oprot.writeFieldBegin(TRADE_DATE_FIELD_DESC);
        oprot.writeString(struct.tradeDate);
        oprot.writeFieldEnd();
      }
      if (struct.tradeTime != null) {
        oprot.writeFieldBegin(TRADE_TIME_FIELD_DESC);
        oprot.writeString(struct.tradeTime);
        oprot.writeFieldEnd();
      }
      if (struct.tradeSerial != null) {
        oprot.writeFieldBegin(TRADE_SERIAL_FIELD_DESC);
        oprot.writeString(struct.tradeSerial);
        oprot.writeFieldEnd();
      }
      if (struct.futureID != null) {
        oprot.writeFieldBegin(FUTURE_ID_FIELD_DESC);
        oprot.writeString(struct.futureID);
        oprot.writeFieldEnd();
      }
      if (struct.bankID != null) {
        oprot.writeFieldBegin(BANK_ID_FIELD_DESC);
        oprot.writeString(struct.bankID);
        oprot.writeFieldEnd();
      }
      if (struct.bankBrchID != null) {
        oprot.writeFieldBegin(BANK_BRCH_ID_FIELD_DESC);
        oprot.writeString(struct.bankBrchID);
        oprot.writeFieldEnd();
      }
      if (struct.operNo != null) {
        oprot.writeFieldBegin(OPER_NO_FIELD_DESC);
        oprot.writeString(struct.operNo);
        oprot.writeFieldEnd();
      }
      if (struct.deviceID != null) {
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeString(struct.deviceID);
        oprot.writeFieldEnd();
      }
      if (struct.recordNum != null) {
        oprot.writeFieldBegin(RECORD_NUM_FIELD_DESC);
        oprot.writeString(struct.recordNum);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeI32(struct.sessionID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
      oprot.writeI32(struct.requestID);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcTransferHeaderFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcTransferHeaderFieldTupleScheme getScheme() {
      return new CThostFtdcTransferHeaderFieldTupleScheme();
    }
  }

  private static class CThostFtdcTransferHeaderFieldTupleScheme extends TupleScheme<CThostFtdcTransferHeaderField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcTransferHeaderField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVersion()) {
        optionals.set(0);
      }
      if (struct.isSetTradeCode()) {
        optionals.set(1);
      }
      if (struct.isSetTradeDate()) {
        optionals.set(2);
      }
      if (struct.isSetTradeTime()) {
        optionals.set(3);
      }
      if (struct.isSetTradeSerial()) {
        optionals.set(4);
      }
      if (struct.isSetFutureID()) {
        optionals.set(5);
      }
      if (struct.isSetBankID()) {
        optionals.set(6);
      }
      if (struct.isSetBankBrchID()) {
        optionals.set(7);
      }
      if (struct.isSetOperNo()) {
        optionals.set(8);
      }
      if (struct.isSetDeviceID()) {
        optionals.set(9);
      }
      if (struct.isSetRecordNum()) {
        optionals.set(10);
      }
      if (struct.isSetSessionID()) {
        optionals.set(11);
      }
      if (struct.isSetRequestID()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetVersion()) {
        oprot.writeString(struct.version);
      }
      if (struct.isSetTradeCode()) {
        oprot.writeString(struct.tradeCode);
      }
      if (struct.isSetTradeDate()) {
        oprot.writeString(struct.tradeDate);
      }
      if (struct.isSetTradeTime()) {
        oprot.writeString(struct.tradeTime);
      }
      if (struct.isSetTradeSerial()) {
        oprot.writeString(struct.tradeSerial);
      }
      if (struct.isSetFutureID()) {
        oprot.writeString(struct.futureID);
      }
      if (struct.isSetBankID()) {
        oprot.writeString(struct.bankID);
      }
      if (struct.isSetBankBrchID()) {
        oprot.writeString(struct.bankBrchID);
      }
      if (struct.isSetOperNo()) {
        oprot.writeString(struct.operNo);
      }
      if (struct.isSetDeviceID()) {
        oprot.writeString(struct.deviceID);
      }
      if (struct.isSetRecordNum()) {
        oprot.writeString(struct.recordNum);
      }
      if (struct.isSetSessionID()) {
        oprot.writeI32(struct.sessionID);
      }
      if (struct.isSetRequestID()) {
        oprot.writeI32(struct.requestID);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcTransferHeaderField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.version = iprot.readString();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tradeCode = iprot.readString();
        struct.setTradeCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tradeDate = iprot.readString();
        struct.setTradeDateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.tradeTime = iprot.readString();
        struct.setTradeTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.tradeSerial = iprot.readString();
        struct.setTradeSerialIsSet(true);
      }
      if (incoming.get(5)) {
        struct.futureID = iprot.readString();
        struct.setFutureIDIsSet(true);
      }
      if (incoming.get(6)) {
        struct.bankID = iprot.readString();
        struct.setBankIDIsSet(true);
      }
      if (incoming.get(7)) {
        struct.bankBrchID = iprot.readString();
        struct.setBankBrchIDIsSet(true);
      }
      if (incoming.get(8)) {
        struct.operNo = iprot.readString();
        struct.setOperNoIsSet(true);
      }
      if (incoming.get(9)) {
        struct.deviceID = iprot.readString();
        struct.setDeviceIDIsSet(true);
      }
      if (incoming.get(10)) {
        struct.recordNum = iprot.readString();
        struct.setRecordNumIsSet(true);
      }
      if (incoming.get(11)) {
        struct.sessionID = iprot.readI32();
        struct.setSessionIDIsSet(true);
      }
      if (incoming.get(12)) {
        struct.requestID = iprot.readI32();
        struct.setRequestIDIsSet(true);
      }
    }
  }

}

