/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcMarketDataBestPriceField implements org.apache.thrift.TBase<CThostFtdcMarketDataBestPriceField, CThostFtdcMarketDataBestPriceField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcMarketDataBestPriceField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcMarketDataBestPriceField");

  private static final org.apache.thrift.protocol.TField BID_PRICE1_FIELD_DESC = new org.apache.thrift.protocol.TField("bidPrice1", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField BID_VOLUME1_FIELD_DESC = new org.apache.thrift.protocol.TField("bidVolume1", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ASK_PRICE1_FIELD_DESC = new org.apache.thrift.protocol.TField("askPrice1", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField ASK_VOLUME1_FIELD_DESC = new org.apache.thrift.protocol.TField("askVolume1", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcMarketDataBestPriceFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcMarketDataBestPriceFieldTupleSchemeFactory());
  }

  public double bidPrice1; // required
  public int bidVolume1; // required
  public double askPrice1; // required
  public int askVolume1; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BID_PRICE1((short)1, "bidPrice1"),
    BID_VOLUME1((short)2, "bidVolume1"),
    ASK_PRICE1((short)3, "askPrice1"),
    ASK_VOLUME1((short)4, "askVolume1");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BID_PRICE1
          return BID_PRICE1;
        case 2: // BID_VOLUME1
          return BID_VOLUME1;
        case 3: // ASK_PRICE1
          return ASK_PRICE1;
        case 4: // ASK_VOLUME1
          return ASK_VOLUME1;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BIDPRICE1_ISSET_ID = 0;
  private static final int __BIDVOLUME1_ISSET_ID = 1;
  private static final int __ASKPRICE1_ISSET_ID = 2;
  private static final int __ASKVOLUME1_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BID_PRICE1, new org.apache.thrift.meta_data.FieldMetaData("bidPrice1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.BID_VOLUME1, new org.apache.thrift.meta_data.FieldMetaData("bidVolume1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcVolumeType")));
    tmpMap.put(_Fields.ASK_PRICE1, new org.apache.thrift.meta_data.FieldMetaData("askPrice1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcPriceType")));
    tmpMap.put(_Fields.ASK_VOLUME1, new org.apache.thrift.meta_data.FieldMetaData("askVolume1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcVolumeType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcMarketDataBestPriceField.class, metaDataMap);
  }

  public CThostFtdcMarketDataBestPriceField() {
  }

  public CThostFtdcMarketDataBestPriceField(
    double bidPrice1,
    int bidVolume1,
    double askPrice1,
    int askVolume1)
  {
    this();
    this.bidPrice1 = bidPrice1;
    setBidPrice1IsSet(true);
    this.bidVolume1 = bidVolume1;
    setBidVolume1IsSet(true);
    this.askPrice1 = askPrice1;
    setAskPrice1IsSet(true);
    this.askVolume1 = askVolume1;
    setAskVolume1IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcMarketDataBestPriceField(CThostFtdcMarketDataBestPriceField other) {
    __isset_bitfield = other.__isset_bitfield;
    this.bidPrice1 = other.bidPrice1;
    this.bidVolume1 = other.bidVolume1;
    this.askPrice1 = other.askPrice1;
    this.askVolume1 = other.askVolume1;
  }

  public CThostFtdcMarketDataBestPriceField deepCopy() {
    return new CThostFtdcMarketDataBestPriceField(this);
  }

  @Override
  public void clear() {
    setBidPrice1IsSet(false);
    this.bidPrice1 = 0.0;
    setBidVolume1IsSet(false);
    this.bidVolume1 = 0;
    setAskPrice1IsSet(false);
    this.askPrice1 = 0.0;
    setAskVolume1IsSet(false);
    this.askVolume1 = 0;
  }

  public double getBidPrice1() {
    return this.bidPrice1;
  }

  public CThostFtdcMarketDataBestPriceField setBidPrice1(double bidPrice1) {
    this.bidPrice1 = bidPrice1;
    setBidPrice1IsSet(true);
    return this;
  }

  public void unsetBidPrice1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIDPRICE1_ISSET_ID);
  }

  /** Returns true if field bidPrice1 is set (has been assigned a value) and false otherwise */
  public boolean isSetBidPrice1() {
    return EncodingUtils.testBit(__isset_bitfield, __BIDPRICE1_ISSET_ID);
  }

  public void setBidPrice1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIDPRICE1_ISSET_ID, value);
  }

  public int getBidVolume1() {
    return this.bidVolume1;
  }

  public CThostFtdcMarketDataBestPriceField setBidVolume1(int bidVolume1) {
    this.bidVolume1 = bidVolume1;
    setBidVolume1IsSet(true);
    return this;
  }

  public void unsetBidVolume1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIDVOLUME1_ISSET_ID);
  }

  /** Returns true if field bidVolume1 is set (has been assigned a value) and false otherwise */
  public boolean isSetBidVolume1() {
    return EncodingUtils.testBit(__isset_bitfield, __BIDVOLUME1_ISSET_ID);
  }

  public void setBidVolume1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIDVOLUME1_ISSET_ID, value);
  }

  public double getAskPrice1() {
    return this.askPrice1;
  }

  public CThostFtdcMarketDataBestPriceField setAskPrice1(double askPrice1) {
    this.askPrice1 = askPrice1;
    setAskPrice1IsSet(true);
    return this;
  }

  public void unsetAskPrice1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASKPRICE1_ISSET_ID);
  }

  /** Returns true if field askPrice1 is set (has been assigned a value) and false otherwise */
  public boolean isSetAskPrice1() {
    return EncodingUtils.testBit(__isset_bitfield, __ASKPRICE1_ISSET_ID);
  }

  public void setAskPrice1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASKPRICE1_ISSET_ID, value);
  }

  public int getAskVolume1() {
    return this.askVolume1;
  }

  public CThostFtdcMarketDataBestPriceField setAskVolume1(int askVolume1) {
    this.askVolume1 = askVolume1;
    setAskVolume1IsSet(true);
    return this;
  }

  public void unsetAskVolume1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASKVOLUME1_ISSET_ID);
  }

  /** Returns true if field askVolume1 is set (has been assigned a value) and false otherwise */
  public boolean isSetAskVolume1() {
    return EncodingUtils.testBit(__isset_bitfield, __ASKVOLUME1_ISSET_ID);
  }

  public void setAskVolume1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASKVOLUME1_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BID_PRICE1:
      if (value == null) {
        unsetBidPrice1();
      } else {
        setBidPrice1((Double)value);
      }
      break;

    case BID_VOLUME1:
      if (value == null) {
        unsetBidVolume1();
      } else {
        setBidVolume1((Integer)value);
      }
      break;

    case ASK_PRICE1:
      if (value == null) {
        unsetAskPrice1();
      } else {
        setAskPrice1((Double)value);
      }
      break;

    case ASK_VOLUME1:
      if (value == null) {
        unsetAskVolume1();
      } else {
        setAskVolume1((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BID_PRICE1:
      return Double.valueOf(getBidPrice1());

    case BID_VOLUME1:
      return Integer.valueOf(getBidVolume1());

    case ASK_PRICE1:
      return Double.valueOf(getAskPrice1());

    case ASK_VOLUME1:
      return Integer.valueOf(getAskVolume1());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BID_PRICE1:
      return isSetBidPrice1();
    case BID_VOLUME1:
      return isSetBidVolume1();
    case ASK_PRICE1:
      return isSetAskPrice1();
    case ASK_VOLUME1:
      return isSetAskVolume1();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcMarketDataBestPriceField)
      return this.equals((CThostFtdcMarketDataBestPriceField)that);
    return false;
  }

  public boolean equals(CThostFtdcMarketDataBestPriceField that) {
    if (that == null)
      return false;

    boolean this_present_bidPrice1 = true;
    boolean that_present_bidPrice1 = true;
    if (this_present_bidPrice1 || that_present_bidPrice1) {
      if (!(this_present_bidPrice1 && that_present_bidPrice1))
        return false;
      if (this.bidPrice1 != that.bidPrice1)
        return false;
    }

    boolean this_present_bidVolume1 = true;
    boolean that_present_bidVolume1 = true;
    if (this_present_bidVolume1 || that_present_bidVolume1) {
      if (!(this_present_bidVolume1 && that_present_bidVolume1))
        return false;
      if (this.bidVolume1 != that.bidVolume1)
        return false;
    }

    boolean this_present_askPrice1 = true;
    boolean that_present_askPrice1 = true;
    if (this_present_askPrice1 || that_present_askPrice1) {
      if (!(this_present_askPrice1 && that_present_askPrice1))
        return false;
      if (this.askPrice1 != that.askPrice1)
        return false;
    }

    boolean this_present_askVolume1 = true;
    boolean that_present_askVolume1 = true;
    if (this_present_askVolume1 || that_present_askVolume1) {
      if (!(this_present_askVolume1 && that_present_askVolume1))
        return false;
      if (this.askVolume1 != that.askVolume1)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcMarketDataBestPriceField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBidPrice1()).compareTo(other.isSetBidPrice1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidPrice1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidPrice1, other.bidPrice1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidVolume1()).compareTo(other.isSetBidVolume1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidVolume1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidVolume1, other.bidVolume1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAskPrice1()).compareTo(other.isSetAskPrice1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAskPrice1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.askPrice1, other.askPrice1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAskVolume1()).compareTo(other.isSetAskVolume1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAskVolume1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.askVolume1, other.askVolume1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcMarketDataBestPriceField(");
    boolean first = true;

    sb.append("bidPrice1:");
    sb.append(this.bidPrice1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bidVolume1:");
    sb.append(this.bidVolume1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("askPrice1:");
    sb.append(this.askPrice1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("askVolume1:");
    sb.append(this.askVolume1);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcMarketDataBestPriceFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcMarketDataBestPriceFieldStandardScheme getScheme() {
      return new CThostFtdcMarketDataBestPriceFieldStandardScheme();
    }
  }

  private static class CThostFtdcMarketDataBestPriceFieldStandardScheme extends StandardScheme<CThostFtdcMarketDataBestPriceField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcMarketDataBestPriceField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BID_PRICE1
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bidPrice1 = iprot.readDouble();
              struct.setBidPrice1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BID_VOLUME1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bidVolume1 = iprot.readI32();
              struct.setBidVolume1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ASK_PRICE1
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.askPrice1 = iprot.readDouble();
              struct.setAskPrice1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ASK_VOLUME1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.askVolume1 = iprot.readI32();
              struct.setAskVolume1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcMarketDataBestPriceField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BID_PRICE1_FIELD_DESC);
      oprot.writeDouble(struct.bidPrice1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BID_VOLUME1_FIELD_DESC);
      oprot.writeI32(struct.bidVolume1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ASK_PRICE1_FIELD_DESC);
      oprot.writeDouble(struct.askPrice1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ASK_VOLUME1_FIELD_DESC);
      oprot.writeI32(struct.askVolume1);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcMarketDataBestPriceFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcMarketDataBestPriceFieldTupleScheme getScheme() {
      return new CThostFtdcMarketDataBestPriceFieldTupleScheme();
    }
  }

  private static class CThostFtdcMarketDataBestPriceFieldTupleScheme extends TupleScheme<CThostFtdcMarketDataBestPriceField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcMarketDataBestPriceField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBidPrice1()) {
        optionals.set(0);
      }
      if (struct.isSetBidVolume1()) {
        optionals.set(1);
      }
      if (struct.isSetAskPrice1()) {
        optionals.set(2);
      }
      if (struct.isSetAskVolume1()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetBidPrice1()) {
        oprot.writeDouble(struct.bidPrice1);
      }
      if (struct.isSetBidVolume1()) {
        oprot.writeI32(struct.bidVolume1);
      }
      if (struct.isSetAskPrice1()) {
        oprot.writeDouble(struct.askPrice1);
      }
      if (struct.isSetAskVolume1()) {
        oprot.writeI32(struct.askVolume1);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcMarketDataBestPriceField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.bidPrice1 = iprot.readDouble();
        struct.setBidPrice1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.bidVolume1 = iprot.readI32();
        struct.setBidVolume1IsSet(true);
      }
      if (incoming.get(2)) {
        struct.askPrice1 = iprot.readDouble();
        struct.setAskPrice1IsSet(true);
      }
      if (incoming.get(3)) {
        struct.askVolume1 = iprot.readI32();
        struct.setAskVolume1IsSet(true);
      }
    }
  }

}

