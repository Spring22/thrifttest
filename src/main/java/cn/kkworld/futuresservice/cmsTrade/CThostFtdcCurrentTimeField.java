/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcCurrentTimeField implements org.apache.thrift.TBase<CThostFtdcCurrentTimeField, CThostFtdcCurrentTimeField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcCurrentTimeField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcCurrentTimeField");

  private static final org.apache.thrift.protocol.TField CURR_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("currDate", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CURR_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("currTime", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CURR_MILLISEC_FIELD_DESC = new org.apache.thrift.protocol.TField("currMillisec", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ACTION_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("actionDay", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcCurrentTimeFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcCurrentTimeFieldTupleSchemeFactory());
  }

  public String currDate; // required
  public String currTime; // required
  public int currMillisec; // required
  public String actionDay; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CURR_DATE((short)1, "currDate"),
    CURR_TIME((short)2, "currTime"),
    CURR_MILLISEC((short)3, "currMillisec"),
    ACTION_DAY((short)4, "actionDay");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CURR_DATE
          return CURR_DATE;
        case 2: // CURR_TIME
          return CURR_TIME;
        case 3: // CURR_MILLISEC
          return CURR_MILLISEC;
        case 4: // ACTION_DAY
          return ACTION_DAY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CURRMILLISEC_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CURR_DATE, new org.apache.thrift.meta_data.FieldMetaData("currDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    tmpMap.put(_Fields.CURR_TIME, new org.apache.thrift.meta_data.FieldMetaData("currTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeType")));
    tmpMap.put(_Fields.CURR_MILLISEC, new org.apache.thrift.meta_data.FieldMetaData("currMillisec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcMillisecType")));
    tmpMap.put(_Fields.ACTION_DAY, new org.apache.thrift.meta_data.FieldMetaData("actionDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcCurrentTimeField.class, metaDataMap);
  }

  public CThostFtdcCurrentTimeField() {
  }

  public CThostFtdcCurrentTimeField(
    String currDate,
    String currTime,
    int currMillisec,
    String actionDay)
  {
    this();
    this.currDate = currDate;
    this.currTime = currTime;
    this.currMillisec = currMillisec;
    setCurrMillisecIsSet(true);
    this.actionDay = actionDay;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcCurrentTimeField(CThostFtdcCurrentTimeField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCurrDate()) {
      this.currDate = other.currDate;
    }
    if (other.isSetCurrTime()) {
      this.currTime = other.currTime;
    }
    this.currMillisec = other.currMillisec;
    if (other.isSetActionDay()) {
      this.actionDay = other.actionDay;
    }
  }

  public CThostFtdcCurrentTimeField deepCopy() {
    return new CThostFtdcCurrentTimeField(this);
  }

  @Override
  public void clear() {
    this.currDate = null;
    this.currTime = null;
    setCurrMillisecIsSet(false);
    this.currMillisec = 0;
    this.actionDay = null;
  }

  public String getCurrDate() {
    return this.currDate;
  }

  public CThostFtdcCurrentTimeField setCurrDate(String currDate) {
    this.currDate = currDate;
    return this;
  }

  public void unsetCurrDate() {
    this.currDate = null;
  }

  /** Returns true if field currDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrDate() {
    return this.currDate != null;
  }

  public void setCurrDateIsSet(boolean value) {
    if (!value) {
      this.currDate = null;
    }
  }

  public String getCurrTime() {
    return this.currTime;
  }

  public CThostFtdcCurrentTimeField setCurrTime(String currTime) {
    this.currTime = currTime;
    return this;
  }

  public void unsetCurrTime() {
    this.currTime = null;
  }

  /** Returns true if field currTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrTime() {
    return this.currTime != null;
  }

  public void setCurrTimeIsSet(boolean value) {
    if (!value) {
      this.currTime = null;
    }
  }

  public int getCurrMillisec() {
    return this.currMillisec;
  }

  public CThostFtdcCurrentTimeField setCurrMillisec(int currMillisec) {
    this.currMillisec = currMillisec;
    setCurrMillisecIsSet(true);
    return this;
  }

  public void unsetCurrMillisec() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRMILLISEC_ISSET_ID);
  }

  /** Returns true if field currMillisec is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrMillisec() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRMILLISEC_ISSET_ID);
  }

  public void setCurrMillisecIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRMILLISEC_ISSET_ID, value);
  }

  public String getActionDay() {
    return this.actionDay;
  }

  public CThostFtdcCurrentTimeField setActionDay(String actionDay) {
    this.actionDay = actionDay;
    return this;
  }

  public void unsetActionDay() {
    this.actionDay = null;
  }

  /** Returns true if field actionDay is set (has been assigned a value) and false otherwise */
  public boolean isSetActionDay() {
    return this.actionDay != null;
  }

  public void setActionDayIsSet(boolean value) {
    if (!value) {
      this.actionDay = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CURR_DATE:
      if (value == null) {
        unsetCurrDate();
      } else {
        setCurrDate((String)value);
      }
      break;

    case CURR_TIME:
      if (value == null) {
        unsetCurrTime();
      } else {
        setCurrTime((String)value);
      }
      break;

    case CURR_MILLISEC:
      if (value == null) {
        unsetCurrMillisec();
      } else {
        setCurrMillisec((Integer)value);
      }
      break;

    case ACTION_DAY:
      if (value == null) {
        unsetActionDay();
      } else {
        setActionDay((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CURR_DATE:
      return getCurrDate();

    case CURR_TIME:
      return getCurrTime();

    case CURR_MILLISEC:
      return Integer.valueOf(getCurrMillisec());

    case ACTION_DAY:
      return getActionDay();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CURR_DATE:
      return isSetCurrDate();
    case CURR_TIME:
      return isSetCurrTime();
    case CURR_MILLISEC:
      return isSetCurrMillisec();
    case ACTION_DAY:
      return isSetActionDay();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcCurrentTimeField)
      return this.equals((CThostFtdcCurrentTimeField)that);
    return false;
  }

  public boolean equals(CThostFtdcCurrentTimeField that) {
    if (that == null)
      return false;

    boolean this_present_currDate = true && this.isSetCurrDate();
    boolean that_present_currDate = true && that.isSetCurrDate();
    if (this_present_currDate || that_present_currDate) {
      if (!(this_present_currDate && that_present_currDate))
        return false;
      if (!this.currDate.equals(that.currDate))
        return false;
    }

    boolean this_present_currTime = true && this.isSetCurrTime();
    boolean that_present_currTime = true && that.isSetCurrTime();
    if (this_present_currTime || that_present_currTime) {
      if (!(this_present_currTime && that_present_currTime))
        return false;
      if (!this.currTime.equals(that.currTime))
        return false;
    }

    boolean this_present_currMillisec = true;
    boolean that_present_currMillisec = true;
    if (this_present_currMillisec || that_present_currMillisec) {
      if (!(this_present_currMillisec && that_present_currMillisec))
        return false;
      if (this.currMillisec != that.currMillisec)
        return false;
    }

    boolean this_present_actionDay = true && this.isSetActionDay();
    boolean that_present_actionDay = true && that.isSetActionDay();
    if (this_present_actionDay || that_present_actionDay) {
      if (!(this_present_actionDay && that_present_actionDay))
        return false;
      if (!this.actionDay.equals(that.actionDay))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcCurrentTimeField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCurrDate()).compareTo(other.isSetCurrDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currDate, other.currDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrTime()).compareTo(other.isSetCurrTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currTime, other.currTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrMillisec()).compareTo(other.isSetCurrMillisec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrMillisec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currMillisec, other.currMillisec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionDay()).compareTo(other.isSetActionDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionDay, other.actionDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcCurrentTimeField(");
    boolean first = true;

    sb.append("currDate:");
    if (this.currDate == null) {
      sb.append("null");
    } else {
      sb.append(this.currDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currTime:");
    if (this.currTime == null) {
      sb.append("null");
    } else {
      sb.append(this.currTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currMillisec:");
    sb.append(this.currMillisec);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actionDay:");
    if (this.actionDay == null) {
      sb.append("null");
    } else {
      sb.append(this.actionDay);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcCurrentTimeFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcCurrentTimeFieldStandardScheme getScheme() {
      return new CThostFtdcCurrentTimeFieldStandardScheme();
    }
  }

  private static class CThostFtdcCurrentTimeFieldStandardScheme extends StandardScheme<CThostFtdcCurrentTimeField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcCurrentTimeField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CURR_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currDate = iprot.readString();
              struct.setCurrDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CURR_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currTime = iprot.readString();
              struct.setCurrTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CURR_MILLISEC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.currMillisec = iprot.readI32();
              struct.setCurrMillisecIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACTION_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actionDay = iprot.readString();
              struct.setActionDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcCurrentTimeField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.currDate != null) {
        oprot.writeFieldBegin(CURR_DATE_FIELD_DESC);
        oprot.writeString(struct.currDate);
        oprot.writeFieldEnd();
      }
      if (struct.currTime != null) {
        oprot.writeFieldBegin(CURR_TIME_FIELD_DESC);
        oprot.writeString(struct.currTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CURR_MILLISEC_FIELD_DESC);
      oprot.writeI32(struct.currMillisec);
      oprot.writeFieldEnd();
      if (struct.actionDay != null) {
        oprot.writeFieldBegin(ACTION_DAY_FIELD_DESC);
        oprot.writeString(struct.actionDay);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcCurrentTimeFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcCurrentTimeFieldTupleScheme getScheme() {
      return new CThostFtdcCurrentTimeFieldTupleScheme();
    }
  }

  private static class CThostFtdcCurrentTimeFieldTupleScheme extends TupleScheme<CThostFtdcCurrentTimeField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcCurrentTimeField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCurrDate()) {
        optionals.set(0);
      }
      if (struct.isSetCurrTime()) {
        optionals.set(1);
      }
      if (struct.isSetCurrMillisec()) {
        optionals.set(2);
      }
      if (struct.isSetActionDay()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCurrDate()) {
        oprot.writeString(struct.currDate);
      }
      if (struct.isSetCurrTime()) {
        oprot.writeString(struct.currTime);
      }
      if (struct.isSetCurrMillisec()) {
        oprot.writeI32(struct.currMillisec);
      }
      if (struct.isSetActionDay()) {
        oprot.writeString(struct.actionDay);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcCurrentTimeField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.currDate = iprot.readString();
        struct.setCurrDateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.currTime = iprot.readString();
        struct.setCurrTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.currMillisec = iprot.readI32();
        struct.setCurrMillisecIsSet(true);
      }
      if (incoming.get(3)) {
        struct.actionDay = iprot.readString();
        struct.setActionDayIsSet(true);
      }
    }
  }

}

