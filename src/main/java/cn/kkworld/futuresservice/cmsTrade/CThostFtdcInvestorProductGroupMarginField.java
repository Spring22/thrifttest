/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcInvestorProductGroupMarginField implements org.apache.thrift.TBase<CThostFtdcInvestorProductGroupMarginField, CThostFtdcInvestorProductGroupMarginField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcInvestorProductGroupMarginField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcInvestorProductGroupMarginField");

  private static final org.apache.thrift.protocol.TField PRODUCT_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productGroupID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INVESTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("investorID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TRADING_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("tradingDay", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SETTLEMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("settlementID", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField FROZEN_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("frozenMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField LONG_FROZEN_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("longFrozenMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField SHORT_FROZEN_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("shortFrozenMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField USE_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("useMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField LONG_USE_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("longUseMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField SHORT_USE_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("shortUseMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField EXCH_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("exchMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField LONG_EXCH_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("longExchMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField SHORT_EXCH_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("shortExchMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField CLOSE_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("closeProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField FROZEN_COMMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("frozenCommission", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField COMMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("commission", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField FROZEN_CASH_FIELD_DESC = new org.apache.thrift.protocol.TField("frozenCash", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField CASH_IN_FIELD_DESC = new org.apache.thrift.protocol.TField("cashIn", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField POSITION_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("positionProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField OFFSET_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("offsetAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField LONG_OFFSET_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("longOffsetAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField SHORT_OFFSET_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("shortOffsetAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField EXCH_OFFSET_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("exchOffsetAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField LONG_EXCH_OFFSET_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("longExchOffsetAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)25);
  private static final org.apache.thrift.protocol.TField SHORT_EXCH_OFFSET_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("shortExchOffsetAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)26);
  private static final org.apache.thrift.protocol.TField HEDGE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("hedgeFlag", org.apache.thrift.protocol.TType.STRING, (short)27);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcInvestorProductGroupMarginFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcInvestorProductGroupMarginFieldTupleSchemeFactory());
  }

  public String productGroupID; // required
  public String brokerID; // required
  public String investorID; // required
  public String tradingDay; // required
  public int settlementID; // required
  public double frozenMargin; // required
  public double longFrozenMargin; // required
  public double shortFrozenMargin; // required
  public double useMargin; // required
  public double longUseMargin; // required
  public double shortUseMargin; // required
  public double exchMargin; // required
  public double longExchMargin; // required
  public double shortExchMargin; // required
  public double closeProfit; // required
  public double frozenCommission; // required
  public double commission; // required
  public double frozenCash; // required
  public double cashIn; // required
  public double positionProfit; // required
  public double offsetAmount; // required
  public double longOffsetAmount; // required
  public double shortOffsetAmount; // required
  public double exchOffsetAmount; // required
  public double longExchOffsetAmount; // required
  public double shortExchOffsetAmount; // required
  public String hedgeFlag; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRODUCT_GROUP_ID((short)1, "productGroupID"),
    BROKER_ID((short)2, "brokerID"),
    INVESTOR_ID((short)3, "investorID"),
    TRADING_DAY((short)4, "tradingDay"),
    SETTLEMENT_ID((short)5, "settlementID"),
    FROZEN_MARGIN((short)6, "frozenMargin"),
    LONG_FROZEN_MARGIN((short)7, "longFrozenMargin"),
    SHORT_FROZEN_MARGIN((short)8, "shortFrozenMargin"),
    USE_MARGIN((short)9, "useMargin"),
    LONG_USE_MARGIN((short)10, "longUseMargin"),
    SHORT_USE_MARGIN((short)11, "shortUseMargin"),
    EXCH_MARGIN((short)12, "exchMargin"),
    LONG_EXCH_MARGIN((short)13, "longExchMargin"),
    SHORT_EXCH_MARGIN((short)14, "shortExchMargin"),
    CLOSE_PROFIT((short)15, "closeProfit"),
    FROZEN_COMMISSION((short)16, "frozenCommission"),
    COMMISSION((short)17, "commission"),
    FROZEN_CASH((short)18, "frozenCash"),
    CASH_IN((short)19, "cashIn"),
    POSITION_PROFIT((short)20, "positionProfit"),
    OFFSET_AMOUNT((short)21, "offsetAmount"),
    LONG_OFFSET_AMOUNT((short)22, "longOffsetAmount"),
    SHORT_OFFSET_AMOUNT((short)23, "shortOffsetAmount"),
    EXCH_OFFSET_AMOUNT((short)24, "exchOffsetAmount"),
    LONG_EXCH_OFFSET_AMOUNT((short)25, "longExchOffsetAmount"),
    SHORT_EXCH_OFFSET_AMOUNT((short)26, "shortExchOffsetAmount"),
    HEDGE_FLAG((short)27, "hedgeFlag");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT_GROUP_ID
          return PRODUCT_GROUP_ID;
        case 2: // BROKER_ID
          return BROKER_ID;
        case 3: // INVESTOR_ID
          return INVESTOR_ID;
        case 4: // TRADING_DAY
          return TRADING_DAY;
        case 5: // SETTLEMENT_ID
          return SETTLEMENT_ID;
        case 6: // FROZEN_MARGIN
          return FROZEN_MARGIN;
        case 7: // LONG_FROZEN_MARGIN
          return LONG_FROZEN_MARGIN;
        case 8: // SHORT_FROZEN_MARGIN
          return SHORT_FROZEN_MARGIN;
        case 9: // USE_MARGIN
          return USE_MARGIN;
        case 10: // LONG_USE_MARGIN
          return LONG_USE_MARGIN;
        case 11: // SHORT_USE_MARGIN
          return SHORT_USE_MARGIN;
        case 12: // EXCH_MARGIN
          return EXCH_MARGIN;
        case 13: // LONG_EXCH_MARGIN
          return LONG_EXCH_MARGIN;
        case 14: // SHORT_EXCH_MARGIN
          return SHORT_EXCH_MARGIN;
        case 15: // CLOSE_PROFIT
          return CLOSE_PROFIT;
        case 16: // FROZEN_COMMISSION
          return FROZEN_COMMISSION;
        case 17: // COMMISSION
          return COMMISSION;
        case 18: // FROZEN_CASH
          return FROZEN_CASH;
        case 19: // CASH_IN
          return CASH_IN;
        case 20: // POSITION_PROFIT
          return POSITION_PROFIT;
        case 21: // OFFSET_AMOUNT
          return OFFSET_AMOUNT;
        case 22: // LONG_OFFSET_AMOUNT
          return LONG_OFFSET_AMOUNT;
        case 23: // SHORT_OFFSET_AMOUNT
          return SHORT_OFFSET_AMOUNT;
        case 24: // EXCH_OFFSET_AMOUNT
          return EXCH_OFFSET_AMOUNT;
        case 25: // LONG_EXCH_OFFSET_AMOUNT
          return LONG_EXCH_OFFSET_AMOUNT;
        case 26: // SHORT_EXCH_OFFSET_AMOUNT
          return SHORT_EXCH_OFFSET_AMOUNT;
        case 27: // HEDGE_FLAG
          return HEDGE_FLAG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SETTLEMENTID_ISSET_ID = 0;
  private static final int __FROZENMARGIN_ISSET_ID = 1;
  private static final int __LONGFROZENMARGIN_ISSET_ID = 2;
  private static final int __SHORTFROZENMARGIN_ISSET_ID = 3;
  private static final int __USEMARGIN_ISSET_ID = 4;
  private static final int __LONGUSEMARGIN_ISSET_ID = 5;
  private static final int __SHORTUSEMARGIN_ISSET_ID = 6;
  private static final int __EXCHMARGIN_ISSET_ID = 7;
  private static final int __LONGEXCHMARGIN_ISSET_ID = 8;
  private static final int __SHORTEXCHMARGIN_ISSET_ID = 9;
  private static final int __CLOSEPROFIT_ISSET_ID = 10;
  private static final int __FROZENCOMMISSION_ISSET_ID = 11;
  private static final int __COMMISSION_ISSET_ID = 12;
  private static final int __FROZENCASH_ISSET_ID = 13;
  private static final int __CASHIN_ISSET_ID = 14;
  private static final int __POSITIONPROFIT_ISSET_ID = 15;
  private static final int __OFFSETAMOUNT_ISSET_ID = 16;
  private static final int __LONGOFFSETAMOUNT_ISSET_ID = 17;
  private static final int __SHORTOFFSETAMOUNT_ISSET_ID = 18;
  private static final int __EXCHOFFSETAMOUNT_ISSET_ID = 19;
  private static final int __LONGEXCHOFFSETAMOUNT_ISSET_ID = 20;
  private static final int __SHORTEXCHOFFSETAMOUNT_ISSET_ID = 21;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("productGroupID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInstrumentIDType")));
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.INVESTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("investorID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInvestorIDType")));
    tmpMap.put(_Fields.TRADING_DAY, new org.apache.thrift.meta_data.FieldMetaData("tradingDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    tmpMap.put(_Fields.SETTLEMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("settlementID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcSettlementIDType")));
    tmpMap.put(_Fields.FROZEN_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("frozenMargin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.LONG_FROZEN_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("longFrozenMargin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.SHORT_FROZEN_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("shortFrozenMargin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.USE_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("useMargin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.LONG_USE_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("longUseMargin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.SHORT_USE_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("shortUseMargin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.EXCH_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("exchMargin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.LONG_EXCH_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("longExchMargin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.SHORT_EXCH_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("shortExchMargin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.CLOSE_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("closeProfit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.FROZEN_COMMISSION, new org.apache.thrift.meta_data.FieldMetaData("frozenCommission", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.COMMISSION, new org.apache.thrift.meta_data.FieldMetaData("commission", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.FROZEN_CASH, new org.apache.thrift.meta_data.FieldMetaData("frozenCash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.CASH_IN, new org.apache.thrift.meta_data.FieldMetaData("cashIn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.POSITION_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("positionProfit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.OFFSET_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("offsetAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.LONG_OFFSET_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("longOffsetAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.SHORT_OFFSET_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("shortOffsetAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.EXCH_OFFSET_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("exchOffsetAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.LONG_EXCH_OFFSET_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("longExchOffsetAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.SHORT_EXCH_OFFSET_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("shortExchOffsetAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.HEDGE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("hedgeFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcHedgeFlagType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcInvestorProductGroupMarginField.class, metaDataMap);
  }

  public CThostFtdcInvestorProductGroupMarginField() {
  }

  public CThostFtdcInvestorProductGroupMarginField(
    String productGroupID,
    String brokerID,
    String investorID,
    String tradingDay,
    int settlementID,
    double frozenMargin,
    double longFrozenMargin,
    double shortFrozenMargin,
    double useMargin,
    double longUseMargin,
    double shortUseMargin,
    double exchMargin,
    double longExchMargin,
    double shortExchMargin,
    double closeProfit,
    double frozenCommission,
    double commission,
    double frozenCash,
    double cashIn,
    double positionProfit,
    double offsetAmount,
    double longOffsetAmount,
    double shortOffsetAmount,
    double exchOffsetAmount,
    double longExchOffsetAmount,
    double shortExchOffsetAmount,
    String hedgeFlag)
  {
    this();
    this.productGroupID = productGroupID;
    this.brokerID = brokerID;
    this.investorID = investorID;
    this.tradingDay = tradingDay;
    this.settlementID = settlementID;
    setSettlementIDIsSet(true);
    this.frozenMargin = frozenMargin;
    setFrozenMarginIsSet(true);
    this.longFrozenMargin = longFrozenMargin;
    setLongFrozenMarginIsSet(true);
    this.shortFrozenMargin = shortFrozenMargin;
    setShortFrozenMarginIsSet(true);
    this.useMargin = useMargin;
    setUseMarginIsSet(true);
    this.longUseMargin = longUseMargin;
    setLongUseMarginIsSet(true);
    this.shortUseMargin = shortUseMargin;
    setShortUseMarginIsSet(true);
    this.exchMargin = exchMargin;
    setExchMarginIsSet(true);
    this.longExchMargin = longExchMargin;
    setLongExchMarginIsSet(true);
    this.shortExchMargin = shortExchMargin;
    setShortExchMarginIsSet(true);
    this.closeProfit = closeProfit;
    setCloseProfitIsSet(true);
    this.frozenCommission = frozenCommission;
    setFrozenCommissionIsSet(true);
    this.commission = commission;
    setCommissionIsSet(true);
    this.frozenCash = frozenCash;
    setFrozenCashIsSet(true);
    this.cashIn = cashIn;
    setCashInIsSet(true);
    this.positionProfit = positionProfit;
    setPositionProfitIsSet(true);
    this.offsetAmount = offsetAmount;
    setOffsetAmountIsSet(true);
    this.longOffsetAmount = longOffsetAmount;
    setLongOffsetAmountIsSet(true);
    this.shortOffsetAmount = shortOffsetAmount;
    setShortOffsetAmountIsSet(true);
    this.exchOffsetAmount = exchOffsetAmount;
    setExchOffsetAmountIsSet(true);
    this.longExchOffsetAmount = longExchOffsetAmount;
    setLongExchOffsetAmountIsSet(true);
    this.shortExchOffsetAmount = shortExchOffsetAmount;
    setShortExchOffsetAmountIsSet(true);
    this.hedgeFlag = hedgeFlag;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcInvestorProductGroupMarginField(CThostFtdcInvestorProductGroupMarginField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProductGroupID()) {
      this.productGroupID = other.productGroupID;
    }
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetInvestorID()) {
      this.investorID = other.investorID;
    }
    if (other.isSetTradingDay()) {
      this.tradingDay = other.tradingDay;
    }
    this.settlementID = other.settlementID;
    this.frozenMargin = other.frozenMargin;
    this.longFrozenMargin = other.longFrozenMargin;
    this.shortFrozenMargin = other.shortFrozenMargin;
    this.useMargin = other.useMargin;
    this.longUseMargin = other.longUseMargin;
    this.shortUseMargin = other.shortUseMargin;
    this.exchMargin = other.exchMargin;
    this.longExchMargin = other.longExchMargin;
    this.shortExchMargin = other.shortExchMargin;
    this.closeProfit = other.closeProfit;
    this.frozenCommission = other.frozenCommission;
    this.commission = other.commission;
    this.frozenCash = other.frozenCash;
    this.cashIn = other.cashIn;
    this.positionProfit = other.positionProfit;
    this.offsetAmount = other.offsetAmount;
    this.longOffsetAmount = other.longOffsetAmount;
    this.shortOffsetAmount = other.shortOffsetAmount;
    this.exchOffsetAmount = other.exchOffsetAmount;
    this.longExchOffsetAmount = other.longExchOffsetAmount;
    this.shortExchOffsetAmount = other.shortExchOffsetAmount;
    if (other.isSetHedgeFlag()) {
      this.hedgeFlag = other.hedgeFlag;
    }
  }

  public CThostFtdcInvestorProductGroupMarginField deepCopy() {
    return new CThostFtdcInvestorProductGroupMarginField(this);
  }

  @Override
  public void clear() {
    this.productGroupID = null;
    this.brokerID = null;
    this.investorID = null;
    this.tradingDay = null;
    setSettlementIDIsSet(false);
    this.settlementID = 0;
    setFrozenMarginIsSet(false);
    this.frozenMargin = 0.0;
    setLongFrozenMarginIsSet(false);
    this.longFrozenMargin = 0.0;
    setShortFrozenMarginIsSet(false);
    this.shortFrozenMargin = 0.0;
    setUseMarginIsSet(false);
    this.useMargin = 0.0;
    setLongUseMarginIsSet(false);
    this.longUseMargin = 0.0;
    setShortUseMarginIsSet(false);
    this.shortUseMargin = 0.0;
    setExchMarginIsSet(false);
    this.exchMargin = 0.0;
    setLongExchMarginIsSet(false);
    this.longExchMargin = 0.0;
    setShortExchMarginIsSet(false);
    this.shortExchMargin = 0.0;
    setCloseProfitIsSet(false);
    this.closeProfit = 0.0;
    setFrozenCommissionIsSet(false);
    this.frozenCommission = 0.0;
    setCommissionIsSet(false);
    this.commission = 0.0;
    setFrozenCashIsSet(false);
    this.frozenCash = 0.0;
    setCashInIsSet(false);
    this.cashIn = 0.0;
    setPositionProfitIsSet(false);
    this.positionProfit = 0.0;
    setOffsetAmountIsSet(false);
    this.offsetAmount = 0.0;
    setLongOffsetAmountIsSet(false);
    this.longOffsetAmount = 0.0;
    setShortOffsetAmountIsSet(false);
    this.shortOffsetAmount = 0.0;
    setExchOffsetAmountIsSet(false);
    this.exchOffsetAmount = 0.0;
    setLongExchOffsetAmountIsSet(false);
    this.longExchOffsetAmount = 0.0;
    setShortExchOffsetAmountIsSet(false);
    this.shortExchOffsetAmount = 0.0;
    this.hedgeFlag = null;
  }

  public String getProductGroupID() {
    return this.productGroupID;
  }

  public CThostFtdcInvestorProductGroupMarginField setProductGroupID(String productGroupID) {
    this.productGroupID = productGroupID;
    return this;
  }

  public void unsetProductGroupID() {
    this.productGroupID = null;
  }

  /** Returns true if field productGroupID is set (has been assigned a value) and false otherwise */
  public boolean isSetProductGroupID() {
    return this.productGroupID != null;
  }

  public void setProductGroupIDIsSet(boolean value) {
    if (!value) {
      this.productGroupID = null;
    }
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcInvestorProductGroupMarginField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getInvestorID() {
    return this.investorID;
  }

  public CThostFtdcInvestorProductGroupMarginField setInvestorID(String investorID) {
    this.investorID = investorID;
    return this;
  }

  public void unsetInvestorID() {
    this.investorID = null;
  }

  /** Returns true if field investorID is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorID() {
    return this.investorID != null;
  }

  public void setInvestorIDIsSet(boolean value) {
    if (!value) {
      this.investorID = null;
    }
  }

  public String getTradingDay() {
    return this.tradingDay;
  }

  public CThostFtdcInvestorProductGroupMarginField setTradingDay(String tradingDay) {
    this.tradingDay = tradingDay;
    return this;
  }

  public void unsetTradingDay() {
    this.tradingDay = null;
  }

  /** Returns true if field tradingDay is set (has been assigned a value) and false otherwise */
  public boolean isSetTradingDay() {
    return this.tradingDay != null;
  }

  public void setTradingDayIsSet(boolean value) {
    if (!value) {
      this.tradingDay = null;
    }
  }

  public int getSettlementID() {
    return this.settlementID;
  }

  public CThostFtdcInvestorProductGroupMarginField setSettlementID(int settlementID) {
    this.settlementID = settlementID;
    setSettlementIDIsSet(true);
    return this;
  }

  public void unsetSettlementID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID);
  }

  /** Returns true if field settlementID is set (has been assigned a value) and false otherwise */
  public boolean isSetSettlementID() {
    return EncodingUtils.testBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID);
  }

  public void setSettlementIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID, value);
  }

  public double getFrozenMargin() {
    return this.frozenMargin;
  }

  public CThostFtdcInvestorProductGroupMarginField setFrozenMargin(double frozenMargin) {
    this.frozenMargin = frozenMargin;
    setFrozenMarginIsSet(true);
    return this;
  }

  public void unsetFrozenMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROZENMARGIN_ISSET_ID);
  }

  /** Returns true if field frozenMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozenMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __FROZENMARGIN_ISSET_ID);
  }

  public void setFrozenMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROZENMARGIN_ISSET_ID, value);
  }

  public double getLongFrozenMargin() {
    return this.longFrozenMargin;
  }

  public CThostFtdcInvestorProductGroupMarginField setLongFrozenMargin(double longFrozenMargin) {
    this.longFrozenMargin = longFrozenMargin;
    setLongFrozenMarginIsSet(true);
    return this;
  }

  public void unsetLongFrozenMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGFROZENMARGIN_ISSET_ID);
  }

  /** Returns true if field longFrozenMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetLongFrozenMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGFROZENMARGIN_ISSET_ID);
  }

  public void setLongFrozenMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGFROZENMARGIN_ISSET_ID, value);
  }

  public double getShortFrozenMargin() {
    return this.shortFrozenMargin;
  }

  public CThostFtdcInvestorProductGroupMarginField setShortFrozenMargin(double shortFrozenMargin) {
    this.shortFrozenMargin = shortFrozenMargin;
    setShortFrozenMarginIsSet(true);
    return this;
  }

  public void unsetShortFrozenMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHORTFROZENMARGIN_ISSET_ID);
  }

  /** Returns true if field shortFrozenMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetShortFrozenMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __SHORTFROZENMARGIN_ISSET_ID);
  }

  public void setShortFrozenMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHORTFROZENMARGIN_ISSET_ID, value);
  }

  public double getUseMargin() {
    return this.useMargin;
  }

  public CThostFtdcInvestorProductGroupMarginField setUseMargin(double useMargin) {
    this.useMargin = useMargin;
    setUseMarginIsSet(true);
    return this;
  }

  public void unsetUseMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEMARGIN_ISSET_ID);
  }

  /** Returns true if field useMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetUseMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __USEMARGIN_ISSET_ID);
  }

  public void setUseMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEMARGIN_ISSET_ID, value);
  }

  public double getLongUseMargin() {
    return this.longUseMargin;
  }

  public CThostFtdcInvestorProductGroupMarginField setLongUseMargin(double longUseMargin) {
    this.longUseMargin = longUseMargin;
    setLongUseMarginIsSet(true);
    return this;
  }

  public void unsetLongUseMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGUSEMARGIN_ISSET_ID);
  }

  /** Returns true if field longUseMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetLongUseMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGUSEMARGIN_ISSET_ID);
  }

  public void setLongUseMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGUSEMARGIN_ISSET_ID, value);
  }

  public double getShortUseMargin() {
    return this.shortUseMargin;
  }

  public CThostFtdcInvestorProductGroupMarginField setShortUseMargin(double shortUseMargin) {
    this.shortUseMargin = shortUseMargin;
    setShortUseMarginIsSet(true);
    return this;
  }

  public void unsetShortUseMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHORTUSEMARGIN_ISSET_ID);
  }

  /** Returns true if field shortUseMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetShortUseMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __SHORTUSEMARGIN_ISSET_ID);
  }

  public void setShortUseMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHORTUSEMARGIN_ISSET_ID, value);
  }

  public double getExchMargin() {
    return this.exchMargin;
  }

  public CThostFtdcInvestorProductGroupMarginField setExchMargin(double exchMargin) {
    this.exchMargin = exchMargin;
    setExchMarginIsSet(true);
    return this;
  }

  public void unsetExchMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXCHMARGIN_ISSET_ID);
  }

  /** Returns true if field exchMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetExchMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __EXCHMARGIN_ISSET_ID);
  }

  public void setExchMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXCHMARGIN_ISSET_ID, value);
  }

  public double getLongExchMargin() {
    return this.longExchMargin;
  }

  public CThostFtdcInvestorProductGroupMarginField setLongExchMargin(double longExchMargin) {
    this.longExchMargin = longExchMargin;
    setLongExchMarginIsSet(true);
    return this;
  }

  public void unsetLongExchMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGEXCHMARGIN_ISSET_ID);
  }

  /** Returns true if field longExchMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetLongExchMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGEXCHMARGIN_ISSET_ID);
  }

  public void setLongExchMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGEXCHMARGIN_ISSET_ID, value);
  }

  public double getShortExchMargin() {
    return this.shortExchMargin;
  }

  public CThostFtdcInvestorProductGroupMarginField setShortExchMargin(double shortExchMargin) {
    this.shortExchMargin = shortExchMargin;
    setShortExchMarginIsSet(true);
    return this;
  }

  public void unsetShortExchMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHORTEXCHMARGIN_ISSET_ID);
  }

  /** Returns true if field shortExchMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetShortExchMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __SHORTEXCHMARGIN_ISSET_ID);
  }

  public void setShortExchMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHORTEXCHMARGIN_ISSET_ID, value);
  }

  public double getCloseProfit() {
    return this.closeProfit;
  }

  public CThostFtdcInvestorProductGroupMarginField setCloseProfit(double closeProfit) {
    this.closeProfit = closeProfit;
    setCloseProfitIsSet(true);
    return this;
  }

  public void unsetCloseProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID);
  }

  /** Returns true if field closeProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID);
  }

  public void setCloseProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID, value);
  }

  public double getFrozenCommission() {
    return this.frozenCommission;
  }

  public CThostFtdcInvestorProductGroupMarginField setFrozenCommission(double frozenCommission) {
    this.frozenCommission = frozenCommission;
    setFrozenCommissionIsSet(true);
    return this;
  }

  public void unsetFrozenCommission() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROZENCOMMISSION_ISSET_ID);
  }

  /** Returns true if field frozenCommission is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozenCommission() {
    return EncodingUtils.testBit(__isset_bitfield, __FROZENCOMMISSION_ISSET_ID);
  }

  public void setFrozenCommissionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROZENCOMMISSION_ISSET_ID, value);
  }

  public double getCommission() {
    return this.commission;
  }

  public CThostFtdcInvestorProductGroupMarginField setCommission(double commission) {
    this.commission = commission;
    setCommissionIsSet(true);
    return this;
  }

  public void unsetCommission() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMISSION_ISSET_ID);
  }

  /** Returns true if field commission is set (has been assigned a value) and false otherwise */
  public boolean isSetCommission() {
    return EncodingUtils.testBit(__isset_bitfield, __COMMISSION_ISSET_ID);
  }

  public void setCommissionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMISSION_ISSET_ID, value);
  }

  public double getFrozenCash() {
    return this.frozenCash;
  }

  public CThostFtdcInvestorProductGroupMarginField setFrozenCash(double frozenCash) {
    this.frozenCash = frozenCash;
    setFrozenCashIsSet(true);
    return this;
  }

  public void unsetFrozenCash() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROZENCASH_ISSET_ID);
  }

  /** Returns true if field frozenCash is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozenCash() {
    return EncodingUtils.testBit(__isset_bitfield, __FROZENCASH_ISSET_ID);
  }

  public void setFrozenCashIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROZENCASH_ISSET_ID, value);
  }

  public double getCashIn() {
    return this.cashIn;
  }

  public CThostFtdcInvestorProductGroupMarginField setCashIn(double cashIn) {
    this.cashIn = cashIn;
    setCashInIsSet(true);
    return this;
  }

  public void unsetCashIn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CASHIN_ISSET_ID);
  }

  /** Returns true if field cashIn is set (has been assigned a value) and false otherwise */
  public boolean isSetCashIn() {
    return EncodingUtils.testBit(__isset_bitfield, __CASHIN_ISSET_ID);
  }

  public void setCashInIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CASHIN_ISSET_ID, value);
  }

  public double getPositionProfit() {
    return this.positionProfit;
  }

  public CThostFtdcInvestorProductGroupMarginField setPositionProfit(double positionProfit) {
    this.positionProfit = positionProfit;
    setPositionProfitIsSet(true);
    return this;
  }

  public void unsetPositionProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID);
  }

  /** Returns true if field positionProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID);
  }

  public void setPositionProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID, value);
  }

  public double getOffsetAmount() {
    return this.offsetAmount;
  }

  public CThostFtdcInvestorProductGroupMarginField setOffsetAmount(double offsetAmount) {
    this.offsetAmount = offsetAmount;
    setOffsetAmountIsSet(true);
    return this;
  }

  public void unsetOffsetAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSETAMOUNT_ISSET_ID);
  }

  /** Returns true if field offsetAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetOffsetAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __OFFSETAMOUNT_ISSET_ID);
  }

  public void setOffsetAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSETAMOUNT_ISSET_ID, value);
  }

  public double getLongOffsetAmount() {
    return this.longOffsetAmount;
  }

  public CThostFtdcInvestorProductGroupMarginField setLongOffsetAmount(double longOffsetAmount) {
    this.longOffsetAmount = longOffsetAmount;
    setLongOffsetAmountIsSet(true);
    return this;
  }

  public void unsetLongOffsetAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGOFFSETAMOUNT_ISSET_ID);
  }

  /** Returns true if field longOffsetAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetLongOffsetAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGOFFSETAMOUNT_ISSET_ID);
  }

  public void setLongOffsetAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGOFFSETAMOUNT_ISSET_ID, value);
  }

  public double getShortOffsetAmount() {
    return this.shortOffsetAmount;
  }

  public CThostFtdcInvestorProductGroupMarginField setShortOffsetAmount(double shortOffsetAmount) {
    this.shortOffsetAmount = shortOffsetAmount;
    setShortOffsetAmountIsSet(true);
    return this;
  }

  public void unsetShortOffsetAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHORTOFFSETAMOUNT_ISSET_ID);
  }

  /** Returns true if field shortOffsetAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetShortOffsetAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __SHORTOFFSETAMOUNT_ISSET_ID);
  }

  public void setShortOffsetAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHORTOFFSETAMOUNT_ISSET_ID, value);
  }

  public double getExchOffsetAmount() {
    return this.exchOffsetAmount;
  }

  public CThostFtdcInvestorProductGroupMarginField setExchOffsetAmount(double exchOffsetAmount) {
    this.exchOffsetAmount = exchOffsetAmount;
    setExchOffsetAmountIsSet(true);
    return this;
  }

  public void unsetExchOffsetAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXCHOFFSETAMOUNT_ISSET_ID);
  }

  /** Returns true if field exchOffsetAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetExchOffsetAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __EXCHOFFSETAMOUNT_ISSET_ID);
  }

  public void setExchOffsetAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXCHOFFSETAMOUNT_ISSET_ID, value);
  }

  public double getLongExchOffsetAmount() {
    return this.longExchOffsetAmount;
  }

  public CThostFtdcInvestorProductGroupMarginField setLongExchOffsetAmount(double longExchOffsetAmount) {
    this.longExchOffsetAmount = longExchOffsetAmount;
    setLongExchOffsetAmountIsSet(true);
    return this;
  }

  public void unsetLongExchOffsetAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGEXCHOFFSETAMOUNT_ISSET_ID);
  }

  /** Returns true if field longExchOffsetAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetLongExchOffsetAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGEXCHOFFSETAMOUNT_ISSET_ID);
  }

  public void setLongExchOffsetAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGEXCHOFFSETAMOUNT_ISSET_ID, value);
  }

  public double getShortExchOffsetAmount() {
    return this.shortExchOffsetAmount;
  }

  public CThostFtdcInvestorProductGroupMarginField setShortExchOffsetAmount(double shortExchOffsetAmount) {
    this.shortExchOffsetAmount = shortExchOffsetAmount;
    setShortExchOffsetAmountIsSet(true);
    return this;
  }

  public void unsetShortExchOffsetAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHORTEXCHOFFSETAMOUNT_ISSET_ID);
  }

  /** Returns true if field shortExchOffsetAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetShortExchOffsetAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __SHORTEXCHOFFSETAMOUNT_ISSET_ID);
  }

  public void setShortExchOffsetAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHORTEXCHOFFSETAMOUNT_ISSET_ID, value);
  }

  public String getHedgeFlag() {
    return this.hedgeFlag;
  }

  public CThostFtdcInvestorProductGroupMarginField setHedgeFlag(String hedgeFlag) {
    this.hedgeFlag = hedgeFlag;
    return this;
  }

  public void unsetHedgeFlag() {
    this.hedgeFlag = null;
  }

  /** Returns true if field hedgeFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetHedgeFlag() {
    return this.hedgeFlag != null;
  }

  public void setHedgeFlagIsSet(boolean value) {
    if (!value) {
      this.hedgeFlag = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCT_GROUP_ID:
      if (value == null) {
        unsetProductGroupID();
      } else {
        setProductGroupID((String)value);
      }
      break;

    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case INVESTOR_ID:
      if (value == null) {
        unsetInvestorID();
      } else {
        setInvestorID((String)value);
      }
      break;

    case TRADING_DAY:
      if (value == null) {
        unsetTradingDay();
      } else {
        setTradingDay((String)value);
      }
      break;

    case SETTLEMENT_ID:
      if (value == null) {
        unsetSettlementID();
      } else {
        setSettlementID((Integer)value);
      }
      break;

    case FROZEN_MARGIN:
      if (value == null) {
        unsetFrozenMargin();
      } else {
        setFrozenMargin((Double)value);
      }
      break;

    case LONG_FROZEN_MARGIN:
      if (value == null) {
        unsetLongFrozenMargin();
      } else {
        setLongFrozenMargin((Double)value);
      }
      break;

    case SHORT_FROZEN_MARGIN:
      if (value == null) {
        unsetShortFrozenMargin();
      } else {
        setShortFrozenMargin((Double)value);
      }
      break;

    case USE_MARGIN:
      if (value == null) {
        unsetUseMargin();
      } else {
        setUseMargin((Double)value);
      }
      break;

    case LONG_USE_MARGIN:
      if (value == null) {
        unsetLongUseMargin();
      } else {
        setLongUseMargin((Double)value);
      }
      break;

    case SHORT_USE_MARGIN:
      if (value == null) {
        unsetShortUseMargin();
      } else {
        setShortUseMargin((Double)value);
      }
      break;

    case EXCH_MARGIN:
      if (value == null) {
        unsetExchMargin();
      } else {
        setExchMargin((Double)value);
      }
      break;

    case LONG_EXCH_MARGIN:
      if (value == null) {
        unsetLongExchMargin();
      } else {
        setLongExchMargin((Double)value);
      }
      break;

    case SHORT_EXCH_MARGIN:
      if (value == null) {
        unsetShortExchMargin();
      } else {
        setShortExchMargin((Double)value);
      }
      break;

    case CLOSE_PROFIT:
      if (value == null) {
        unsetCloseProfit();
      } else {
        setCloseProfit((Double)value);
      }
      break;

    case FROZEN_COMMISSION:
      if (value == null) {
        unsetFrozenCommission();
      } else {
        setFrozenCommission((Double)value);
      }
      break;

    case COMMISSION:
      if (value == null) {
        unsetCommission();
      } else {
        setCommission((Double)value);
      }
      break;

    case FROZEN_CASH:
      if (value == null) {
        unsetFrozenCash();
      } else {
        setFrozenCash((Double)value);
      }
      break;

    case CASH_IN:
      if (value == null) {
        unsetCashIn();
      } else {
        setCashIn((Double)value);
      }
      break;

    case POSITION_PROFIT:
      if (value == null) {
        unsetPositionProfit();
      } else {
        setPositionProfit((Double)value);
      }
      break;

    case OFFSET_AMOUNT:
      if (value == null) {
        unsetOffsetAmount();
      } else {
        setOffsetAmount((Double)value);
      }
      break;

    case LONG_OFFSET_AMOUNT:
      if (value == null) {
        unsetLongOffsetAmount();
      } else {
        setLongOffsetAmount((Double)value);
      }
      break;

    case SHORT_OFFSET_AMOUNT:
      if (value == null) {
        unsetShortOffsetAmount();
      } else {
        setShortOffsetAmount((Double)value);
      }
      break;

    case EXCH_OFFSET_AMOUNT:
      if (value == null) {
        unsetExchOffsetAmount();
      } else {
        setExchOffsetAmount((Double)value);
      }
      break;

    case LONG_EXCH_OFFSET_AMOUNT:
      if (value == null) {
        unsetLongExchOffsetAmount();
      } else {
        setLongExchOffsetAmount((Double)value);
      }
      break;

    case SHORT_EXCH_OFFSET_AMOUNT:
      if (value == null) {
        unsetShortExchOffsetAmount();
      } else {
        setShortExchOffsetAmount((Double)value);
      }
      break;

    case HEDGE_FLAG:
      if (value == null) {
        unsetHedgeFlag();
      } else {
        setHedgeFlag((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT_GROUP_ID:
      return getProductGroupID();

    case BROKER_ID:
      return getBrokerID();

    case INVESTOR_ID:
      return getInvestorID();

    case TRADING_DAY:
      return getTradingDay();

    case SETTLEMENT_ID:
      return Integer.valueOf(getSettlementID());

    case FROZEN_MARGIN:
      return Double.valueOf(getFrozenMargin());

    case LONG_FROZEN_MARGIN:
      return Double.valueOf(getLongFrozenMargin());

    case SHORT_FROZEN_MARGIN:
      return Double.valueOf(getShortFrozenMargin());

    case USE_MARGIN:
      return Double.valueOf(getUseMargin());

    case LONG_USE_MARGIN:
      return Double.valueOf(getLongUseMargin());

    case SHORT_USE_MARGIN:
      return Double.valueOf(getShortUseMargin());

    case EXCH_MARGIN:
      return Double.valueOf(getExchMargin());

    case LONG_EXCH_MARGIN:
      return Double.valueOf(getLongExchMargin());

    case SHORT_EXCH_MARGIN:
      return Double.valueOf(getShortExchMargin());

    case CLOSE_PROFIT:
      return Double.valueOf(getCloseProfit());

    case FROZEN_COMMISSION:
      return Double.valueOf(getFrozenCommission());

    case COMMISSION:
      return Double.valueOf(getCommission());

    case FROZEN_CASH:
      return Double.valueOf(getFrozenCash());

    case CASH_IN:
      return Double.valueOf(getCashIn());

    case POSITION_PROFIT:
      return Double.valueOf(getPositionProfit());

    case OFFSET_AMOUNT:
      return Double.valueOf(getOffsetAmount());

    case LONG_OFFSET_AMOUNT:
      return Double.valueOf(getLongOffsetAmount());

    case SHORT_OFFSET_AMOUNT:
      return Double.valueOf(getShortOffsetAmount());

    case EXCH_OFFSET_AMOUNT:
      return Double.valueOf(getExchOffsetAmount());

    case LONG_EXCH_OFFSET_AMOUNT:
      return Double.valueOf(getLongExchOffsetAmount());

    case SHORT_EXCH_OFFSET_AMOUNT:
      return Double.valueOf(getShortExchOffsetAmount());

    case HEDGE_FLAG:
      return getHedgeFlag();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT_GROUP_ID:
      return isSetProductGroupID();
    case BROKER_ID:
      return isSetBrokerID();
    case INVESTOR_ID:
      return isSetInvestorID();
    case TRADING_DAY:
      return isSetTradingDay();
    case SETTLEMENT_ID:
      return isSetSettlementID();
    case FROZEN_MARGIN:
      return isSetFrozenMargin();
    case LONG_FROZEN_MARGIN:
      return isSetLongFrozenMargin();
    case SHORT_FROZEN_MARGIN:
      return isSetShortFrozenMargin();
    case USE_MARGIN:
      return isSetUseMargin();
    case LONG_USE_MARGIN:
      return isSetLongUseMargin();
    case SHORT_USE_MARGIN:
      return isSetShortUseMargin();
    case EXCH_MARGIN:
      return isSetExchMargin();
    case LONG_EXCH_MARGIN:
      return isSetLongExchMargin();
    case SHORT_EXCH_MARGIN:
      return isSetShortExchMargin();
    case CLOSE_PROFIT:
      return isSetCloseProfit();
    case FROZEN_COMMISSION:
      return isSetFrozenCommission();
    case COMMISSION:
      return isSetCommission();
    case FROZEN_CASH:
      return isSetFrozenCash();
    case CASH_IN:
      return isSetCashIn();
    case POSITION_PROFIT:
      return isSetPositionProfit();
    case OFFSET_AMOUNT:
      return isSetOffsetAmount();
    case LONG_OFFSET_AMOUNT:
      return isSetLongOffsetAmount();
    case SHORT_OFFSET_AMOUNT:
      return isSetShortOffsetAmount();
    case EXCH_OFFSET_AMOUNT:
      return isSetExchOffsetAmount();
    case LONG_EXCH_OFFSET_AMOUNT:
      return isSetLongExchOffsetAmount();
    case SHORT_EXCH_OFFSET_AMOUNT:
      return isSetShortExchOffsetAmount();
    case HEDGE_FLAG:
      return isSetHedgeFlag();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcInvestorProductGroupMarginField)
      return this.equals((CThostFtdcInvestorProductGroupMarginField)that);
    return false;
  }

  public boolean equals(CThostFtdcInvestorProductGroupMarginField that) {
    if (that == null)
      return false;

    boolean this_present_productGroupID = true && this.isSetProductGroupID();
    boolean that_present_productGroupID = true && that.isSetProductGroupID();
    if (this_present_productGroupID || that_present_productGroupID) {
      if (!(this_present_productGroupID && that_present_productGroupID))
        return false;
      if (!this.productGroupID.equals(that.productGroupID))
        return false;
    }

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_investorID = true && this.isSetInvestorID();
    boolean that_present_investorID = true && that.isSetInvestorID();
    if (this_present_investorID || that_present_investorID) {
      if (!(this_present_investorID && that_present_investorID))
        return false;
      if (!this.investorID.equals(that.investorID))
        return false;
    }

    boolean this_present_tradingDay = true && this.isSetTradingDay();
    boolean that_present_tradingDay = true && that.isSetTradingDay();
    if (this_present_tradingDay || that_present_tradingDay) {
      if (!(this_present_tradingDay && that_present_tradingDay))
        return false;
      if (!this.tradingDay.equals(that.tradingDay))
        return false;
    }

    boolean this_present_settlementID = true;
    boolean that_present_settlementID = true;
    if (this_present_settlementID || that_present_settlementID) {
      if (!(this_present_settlementID && that_present_settlementID))
        return false;
      if (this.settlementID != that.settlementID)
        return false;
    }

    boolean this_present_frozenMargin = true;
    boolean that_present_frozenMargin = true;
    if (this_present_frozenMargin || that_present_frozenMargin) {
      if (!(this_present_frozenMargin && that_present_frozenMargin))
        return false;
      if (this.frozenMargin != that.frozenMargin)
        return false;
    }

    boolean this_present_longFrozenMargin = true;
    boolean that_present_longFrozenMargin = true;
    if (this_present_longFrozenMargin || that_present_longFrozenMargin) {
      if (!(this_present_longFrozenMargin && that_present_longFrozenMargin))
        return false;
      if (this.longFrozenMargin != that.longFrozenMargin)
        return false;
    }

    boolean this_present_shortFrozenMargin = true;
    boolean that_present_shortFrozenMargin = true;
    if (this_present_shortFrozenMargin || that_present_shortFrozenMargin) {
      if (!(this_present_shortFrozenMargin && that_present_shortFrozenMargin))
        return false;
      if (this.shortFrozenMargin != that.shortFrozenMargin)
        return false;
    }

    boolean this_present_useMargin = true;
    boolean that_present_useMargin = true;
    if (this_present_useMargin || that_present_useMargin) {
      if (!(this_present_useMargin && that_present_useMargin))
        return false;
      if (this.useMargin != that.useMargin)
        return false;
    }

    boolean this_present_longUseMargin = true;
    boolean that_present_longUseMargin = true;
    if (this_present_longUseMargin || that_present_longUseMargin) {
      if (!(this_present_longUseMargin && that_present_longUseMargin))
        return false;
      if (this.longUseMargin != that.longUseMargin)
        return false;
    }

    boolean this_present_shortUseMargin = true;
    boolean that_present_shortUseMargin = true;
    if (this_present_shortUseMargin || that_present_shortUseMargin) {
      if (!(this_present_shortUseMargin && that_present_shortUseMargin))
        return false;
      if (this.shortUseMargin != that.shortUseMargin)
        return false;
    }

    boolean this_present_exchMargin = true;
    boolean that_present_exchMargin = true;
    if (this_present_exchMargin || that_present_exchMargin) {
      if (!(this_present_exchMargin && that_present_exchMargin))
        return false;
      if (this.exchMargin != that.exchMargin)
        return false;
    }

    boolean this_present_longExchMargin = true;
    boolean that_present_longExchMargin = true;
    if (this_present_longExchMargin || that_present_longExchMargin) {
      if (!(this_present_longExchMargin && that_present_longExchMargin))
        return false;
      if (this.longExchMargin != that.longExchMargin)
        return false;
    }

    boolean this_present_shortExchMargin = true;
    boolean that_present_shortExchMargin = true;
    if (this_present_shortExchMargin || that_present_shortExchMargin) {
      if (!(this_present_shortExchMargin && that_present_shortExchMargin))
        return false;
      if (this.shortExchMargin != that.shortExchMargin)
        return false;
    }

    boolean this_present_closeProfit = true;
    boolean that_present_closeProfit = true;
    if (this_present_closeProfit || that_present_closeProfit) {
      if (!(this_present_closeProfit && that_present_closeProfit))
        return false;
      if (this.closeProfit != that.closeProfit)
        return false;
    }

    boolean this_present_frozenCommission = true;
    boolean that_present_frozenCommission = true;
    if (this_present_frozenCommission || that_present_frozenCommission) {
      if (!(this_present_frozenCommission && that_present_frozenCommission))
        return false;
      if (this.frozenCommission != that.frozenCommission)
        return false;
    }

    boolean this_present_commission = true;
    boolean that_present_commission = true;
    if (this_present_commission || that_present_commission) {
      if (!(this_present_commission && that_present_commission))
        return false;
      if (this.commission != that.commission)
        return false;
    }

    boolean this_present_frozenCash = true;
    boolean that_present_frozenCash = true;
    if (this_present_frozenCash || that_present_frozenCash) {
      if (!(this_present_frozenCash && that_present_frozenCash))
        return false;
      if (this.frozenCash != that.frozenCash)
        return false;
    }

    boolean this_present_cashIn = true;
    boolean that_present_cashIn = true;
    if (this_present_cashIn || that_present_cashIn) {
      if (!(this_present_cashIn && that_present_cashIn))
        return false;
      if (this.cashIn != that.cashIn)
        return false;
    }

    boolean this_present_positionProfit = true;
    boolean that_present_positionProfit = true;
    if (this_present_positionProfit || that_present_positionProfit) {
      if (!(this_present_positionProfit && that_present_positionProfit))
        return false;
      if (this.positionProfit != that.positionProfit)
        return false;
    }

    boolean this_present_offsetAmount = true;
    boolean that_present_offsetAmount = true;
    if (this_present_offsetAmount || that_present_offsetAmount) {
      if (!(this_present_offsetAmount && that_present_offsetAmount))
        return false;
      if (this.offsetAmount != that.offsetAmount)
        return false;
    }

    boolean this_present_longOffsetAmount = true;
    boolean that_present_longOffsetAmount = true;
    if (this_present_longOffsetAmount || that_present_longOffsetAmount) {
      if (!(this_present_longOffsetAmount && that_present_longOffsetAmount))
        return false;
      if (this.longOffsetAmount != that.longOffsetAmount)
        return false;
    }

    boolean this_present_shortOffsetAmount = true;
    boolean that_present_shortOffsetAmount = true;
    if (this_present_shortOffsetAmount || that_present_shortOffsetAmount) {
      if (!(this_present_shortOffsetAmount && that_present_shortOffsetAmount))
        return false;
      if (this.shortOffsetAmount != that.shortOffsetAmount)
        return false;
    }

    boolean this_present_exchOffsetAmount = true;
    boolean that_present_exchOffsetAmount = true;
    if (this_present_exchOffsetAmount || that_present_exchOffsetAmount) {
      if (!(this_present_exchOffsetAmount && that_present_exchOffsetAmount))
        return false;
      if (this.exchOffsetAmount != that.exchOffsetAmount)
        return false;
    }

    boolean this_present_longExchOffsetAmount = true;
    boolean that_present_longExchOffsetAmount = true;
    if (this_present_longExchOffsetAmount || that_present_longExchOffsetAmount) {
      if (!(this_present_longExchOffsetAmount && that_present_longExchOffsetAmount))
        return false;
      if (this.longExchOffsetAmount != that.longExchOffsetAmount)
        return false;
    }

    boolean this_present_shortExchOffsetAmount = true;
    boolean that_present_shortExchOffsetAmount = true;
    if (this_present_shortExchOffsetAmount || that_present_shortExchOffsetAmount) {
      if (!(this_present_shortExchOffsetAmount && that_present_shortExchOffsetAmount))
        return false;
      if (this.shortExchOffsetAmount != that.shortExchOffsetAmount)
        return false;
    }

    boolean this_present_hedgeFlag = true && this.isSetHedgeFlag();
    boolean that_present_hedgeFlag = true && that.isSetHedgeFlag();
    if (this_present_hedgeFlag || that_present_hedgeFlag) {
      if (!(this_present_hedgeFlag && that_present_hedgeFlag))
        return false;
      if (!this.hedgeFlag.equals(that.hedgeFlag))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcInvestorProductGroupMarginField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProductGroupID()).compareTo(other.isSetProductGroupID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductGroupID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productGroupID, other.productGroupID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestorID()).compareTo(other.isSetInvestorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorID, other.investorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradingDay()).compareTo(other.isSetTradingDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradingDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradingDay, other.tradingDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettlementID()).compareTo(other.isSetSettlementID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettlementID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settlementID, other.settlementID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozenMargin()).compareTo(other.isSetFrozenMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozenMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozenMargin, other.frozenMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongFrozenMargin()).compareTo(other.isSetLongFrozenMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongFrozenMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longFrozenMargin, other.longFrozenMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortFrozenMargin()).compareTo(other.isSetShortFrozenMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortFrozenMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortFrozenMargin, other.shortFrozenMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseMargin()).compareTo(other.isSetUseMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useMargin, other.useMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongUseMargin()).compareTo(other.isSetLongUseMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongUseMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longUseMargin, other.longUseMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortUseMargin()).compareTo(other.isSetShortUseMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortUseMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortUseMargin, other.shortUseMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchMargin()).compareTo(other.isSetExchMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchMargin, other.exchMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongExchMargin()).compareTo(other.isSetLongExchMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongExchMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longExchMargin, other.longExchMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortExchMargin()).compareTo(other.isSetShortExchMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortExchMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortExchMargin, other.shortExchMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseProfit()).compareTo(other.isSetCloseProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeProfit, other.closeProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozenCommission()).compareTo(other.isSetFrozenCommission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozenCommission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozenCommission, other.frozenCommission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommission()).compareTo(other.isSetCommission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commission, other.commission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozenCash()).compareTo(other.isSetFrozenCash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozenCash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozenCash, other.frozenCash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashIn()).compareTo(other.isSetCashIn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashIn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashIn, other.cashIn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionProfit()).compareTo(other.isSetPositionProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionProfit, other.positionProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffsetAmount()).compareTo(other.isSetOffsetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffsetAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offsetAmount, other.offsetAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongOffsetAmount()).compareTo(other.isSetLongOffsetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongOffsetAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longOffsetAmount, other.longOffsetAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortOffsetAmount()).compareTo(other.isSetShortOffsetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortOffsetAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortOffsetAmount, other.shortOffsetAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchOffsetAmount()).compareTo(other.isSetExchOffsetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchOffsetAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchOffsetAmount, other.exchOffsetAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongExchOffsetAmount()).compareTo(other.isSetLongExchOffsetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongExchOffsetAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longExchOffsetAmount, other.longExchOffsetAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortExchOffsetAmount()).compareTo(other.isSetShortExchOffsetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortExchOffsetAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortExchOffsetAmount, other.shortExchOffsetAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHedgeFlag()).compareTo(other.isSetHedgeFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHedgeFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hedgeFlag, other.hedgeFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcInvestorProductGroupMarginField(");
    boolean first = true;

    sb.append("productGroupID:");
    if (this.productGroupID == null) {
      sb.append("null");
    } else {
      sb.append(this.productGroupID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("investorID:");
    if (this.investorID == null) {
      sb.append("null");
    } else {
      sb.append(this.investorID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradingDay:");
    if (this.tradingDay == null) {
      sb.append("null");
    } else {
      sb.append(this.tradingDay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settlementID:");
    sb.append(this.settlementID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("frozenMargin:");
    sb.append(this.frozenMargin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("longFrozenMargin:");
    sb.append(this.longFrozenMargin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shortFrozenMargin:");
    sb.append(this.shortFrozenMargin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("useMargin:");
    sb.append(this.useMargin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("longUseMargin:");
    sb.append(this.longUseMargin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shortUseMargin:");
    sb.append(this.shortUseMargin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchMargin:");
    sb.append(this.exchMargin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("longExchMargin:");
    sb.append(this.longExchMargin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shortExchMargin:");
    sb.append(this.shortExchMargin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("closeProfit:");
    sb.append(this.closeProfit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("frozenCommission:");
    sb.append(this.frozenCommission);
    first = false;
    if (!first) sb.append(", ");
    sb.append("commission:");
    sb.append(this.commission);
    first = false;
    if (!first) sb.append(", ");
    sb.append("frozenCash:");
    sb.append(this.frozenCash);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cashIn:");
    sb.append(this.cashIn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("positionProfit:");
    sb.append(this.positionProfit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("offsetAmount:");
    sb.append(this.offsetAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("longOffsetAmount:");
    sb.append(this.longOffsetAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shortOffsetAmount:");
    sb.append(this.shortOffsetAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchOffsetAmount:");
    sb.append(this.exchOffsetAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("longExchOffsetAmount:");
    sb.append(this.longExchOffsetAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shortExchOffsetAmount:");
    sb.append(this.shortExchOffsetAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hedgeFlag:");
    if (this.hedgeFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.hedgeFlag);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcInvestorProductGroupMarginFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcInvestorProductGroupMarginFieldStandardScheme getScheme() {
      return new CThostFtdcInvestorProductGroupMarginFieldStandardScheme();
    }
  }

  private static class CThostFtdcInvestorProductGroupMarginFieldStandardScheme extends StandardScheme<CThostFtdcInvestorProductGroupMarginField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcInvestorProductGroupMarginField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRODUCT_GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productGroupID = iprot.readString();
              struct.setProductGroupIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INVESTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorID = iprot.readString();
              struct.setInvestorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TRADING_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradingDay = iprot.readString();
              struct.setTradingDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SETTLEMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.settlementID = iprot.readI32();
              struct.setSettlementIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FROZEN_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.frozenMargin = iprot.readDouble();
              struct.setFrozenMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LONG_FROZEN_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.longFrozenMargin = iprot.readDouble();
              struct.setLongFrozenMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SHORT_FROZEN_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shortFrozenMargin = iprot.readDouble();
              struct.setShortFrozenMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // USE_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.useMargin = iprot.readDouble();
              struct.setUseMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LONG_USE_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.longUseMargin = iprot.readDouble();
              struct.setLongUseMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SHORT_USE_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shortUseMargin = iprot.readDouble();
              struct.setShortUseMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // EXCH_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.exchMargin = iprot.readDouble();
              struct.setExchMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LONG_EXCH_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.longExchMargin = iprot.readDouble();
              struct.setLongExchMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SHORT_EXCH_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shortExchMargin = iprot.readDouble();
              struct.setShortExchMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CLOSE_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.closeProfit = iprot.readDouble();
              struct.setCloseProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // FROZEN_COMMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.frozenCommission = iprot.readDouble();
              struct.setFrozenCommissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // COMMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.commission = iprot.readDouble();
              struct.setCommissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // FROZEN_CASH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.frozenCash = iprot.readDouble();
              struct.setFrozenCashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CASH_IN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cashIn = iprot.readDouble();
              struct.setCashInIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // POSITION_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.positionProfit = iprot.readDouble();
              struct.setPositionProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // OFFSET_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.offsetAmount = iprot.readDouble();
              struct.setOffsetAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // LONG_OFFSET_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.longOffsetAmount = iprot.readDouble();
              struct.setLongOffsetAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SHORT_OFFSET_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shortOffsetAmount = iprot.readDouble();
              struct.setShortOffsetAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // EXCH_OFFSET_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.exchOffsetAmount = iprot.readDouble();
              struct.setExchOffsetAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // LONG_EXCH_OFFSET_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.longExchOffsetAmount = iprot.readDouble();
              struct.setLongExchOffsetAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // SHORT_EXCH_OFFSET_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shortExchOffsetAmount = iprot.readDouble();
              struct.setShortExchOffsetAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // HEDGE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hedgeFlag = iprot.readString();
              struct.setHedgeFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcInvestorProductGroupMarginField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.productGroupID != null) {
        oprot.writeFieldBegin(PRODUCT_GROUP_ID_FIELD_DESC);
        oprot.writeString(struct.productGroupID);
        oprot.writeFieldEnd();
      }
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.investorID != null) {
        oprot.writeFieldBegin(INVESTOR_ID_FIELD_DESC);
        oprot.writeString(struct.investorID);
        oprot.writeFieldEnd();
      }
      if (struct.tradingDay != null) {
        oprot.writeFieldBegin(TRADING_DAY_FIELD_DESC);
        oprot.writeString(struct.tradingDay);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SETTLEMENT_ID_FIELD_DESC);
      oprot.writeI32(struct.settlementID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FROZEN_MARGIN_FIELD_DESC);
      oprot.writeDouble(struct.frozenMargin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONG_FROZEN_MARGIN_FIELD_DESC);
      oprot.writeDouble(struct.longFrozenMargin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHORT_FROZEN_MARGIN_FIELD_DESC);
      oprot.writeDouble(struct.shortFrozenMargin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USE_MARGIN_FIELD_DESC);
      oprot.writeDouble(struct.useMargin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONG_USE_MARGIN_FIELD_DESC);
      oprot.writeDouble(struct.longUseMargin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHORT_USE_MARGIN_FIELD_DESC);
      oprot.writeDouble(struct.shortUseMargin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXCH_MARGIN_FIELD_DESC);
      oprot.writeDouble(struct.exchMargin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONG_EXCH_MARGIN_FIELD_DESC);
      oprot.writeDouble(struct.longExchMargin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHORT_EXCH_MARGIN_FIELD_DESC);
      oprot.writeDouble(struct.shortExchMargin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CLOSE_PROFIT_FIELD_DESC);
      oprot.writeDouble(struct.closeProfit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FROZEN_COMMISSION_FIELD_DESC);
      oprot.writeDouble(struct.frozenCommission);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMMISSION_FIELD_DESC);
      oprot.writeDouble(struct.commission);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FROZEN_CASH_FIELD_DESC);
      oprot.writeDouble(struct.frozenCash);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CASH_IN_FIELD_DESC);
      oprot.writeDouble(struct.cashIn);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POSITION_PROFIT_FIELD_DESC);
      oprot.writeDouble(struct.positionProfit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OFFSET_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.offsetAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONG_OFFSET_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.longOffsetAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHORT_OFFSET_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.shortOffsetAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXCH_OFFSET_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.exchOffsetAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONG_EXCH_OFFSET_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.longExchOffsetAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHORT_EXCH_OFFSET_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.shortExchOffsetAmount);
      oprot.writeFieldEnd();
      if (struct.hedgeFlag != null) {
        oprot.writeFieldBegin(HEDGE_FLAG_FIELD_DESC);
        oprot.writeString(struct.hedgeFlag);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcInvestorProductGroupMarginFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcInvestorProductGroupMarginFieldTupleScheme getScheme() {
      return new CThostFtdcInvestorProductGroupMarginFieldTupleScheme();
    }
  }

  private static class CThostFtdcInvestorProductGroupMarginFieldTupleScheme extends TupleScheme<CThostFtdcInvestorProductGroupMarginField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcInvestorProductGroupMarginField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProductGroupID()) {
        optionals.set(0);
      }
      if (struct.isSetBrokerID()) {
        optionals.set(1);
      }
      if (struct.isSetInvestorID()) {
        optionals.set(2);
      }
      if (struct.isSetTradingDay()) {
        optionals.set(3);
      }
      if (struct.isSetSettlementID()) {
        optionals.set(4);
      }
      if (struct.isSetFrozenMargin()) {
        optionals.set(5);
      }
      if (struct.isSetLongFrozenMargin()) {
        optionals.set(6);
      }
      if (struct.isSetShortFrozenMargin()) {
        optionals.set(7);
      }
      if (struct.isSetUseMargin()) {
        optionals.set(8);
      }
      if (struct.isSetLongUseMargin()) {
        optionals.set(9);
      }
      if (struct.isSetShortUseMargin()) {
        optionals.set(10);
      }
      if (struct.isSetExchMargin()) {
        optionals.set(11);
      }
      if (struct.isSetLongExchMargin()) {
        optionals.set(12);
      }
      if (struct.isSetShortExchMargin()) {
        optionals.set(13);
      }
      if (struct.isSetCloseProfit()) {
        optionals.set(14);
      }
      if (struct.isSetFrozenCommission()) {
        optionals.set(15);
      }
      if (struct.isSetCommission()) {
        optionals.set(16);
      }
      if (struct.isSetFrozenCash()) {
        optionals.set(17);
      }
      if (struct.isSetCashIn()) {
        optionals.set(18);
      }
      if (struct.isSetPositionProfit()) {
        optionals.set(19);
      }
      if (struct.isSetOffsetAmount()) {
        optionals.set(20);
      }
      if (struct.isSetLongOffsetAmount()) {
        optionals.set(21);
      }
      if (struct.isSetShortOffsetAmount()) {
        optionals.set(22);
      }
      if (struct.isSetExchOffsetAmount()) {
        optionals.set(23);
      }
      if (struct.isSetLongExchOffsetAmount()) {
        optionals.set(24);
      }
      if (struct.isSetShortExchOffsetAmount()) {
        optionals.set(25);
      }
      if (struct.isSetHedgeFlag()) {
        optionals.set(26);
      }
      oprot.writeBitSet(optionals, 27);
      if (struct.isSetProductGroupID()) {
        oprot.writeString(struct.productGroupID);
      }
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetInvestorID()) {
        oprot.writeString(struct.investorID);
      }
      if (struct.isSetTradingDay()) {
        oprot.writeString(struct.tradingDay);
      }
      if (struct.isSetSettlementID()) {
        oprot.writeI32(struct.settlementID);
      }
      if (struct.isSetFrozenMargin()) {
        oprot.writeDouble(struct.frozenMargin);
      }
      if (struct.isSetLongFrozenMargin()) {
        oprot.writeDouble(struct.longFrozenMargin);
      }
      if (struct.isSetShortFrozenMargin()) {
        oprot.writeDouble(struct.shortFrozenMargin);
      }
      if (struct.isSetUseMargin()) {
        oprot.writeDouble(struct.useMargin);
      }
      if (struct.isSetLongUseMargin()) {
        oprot.writeDouble(struct.longUseMargin);
      }
      if (struct.isSetShortUseMargin()) {
        oprot.writeDouble(struct.shortUseMargin);
      }
      if (struct.isSetExchMargin()) {
        oprot.writeDouble(struct.exchMargin);
      }
      if (struct.isSetLongExchMargin()) {
        oprot.writeDouble(struct.longExchMargin);
      }
      if (struct.isSetShortExchMargin()) {
        oprot.writeDouble(struct.shortExchMargin);
      }
      if (struct.isSetCloseProfit()) {
        oprot.writeDouble(struct.closeProfit);
      }
      if (struct.isSetFrozenCommission()) {
        oprot.writeDouble(struct.frozenCommission);
      }
      if (struct.isSetCommission()) {
        oprot.writeDouble(struct.commission);
      }
      if (struct.isSetFrozenCash()) {
        oprot.writeDouble(struct.frozenCash);
      }
      if (struct.isSetCashIn()) {
        oprot.writeDouble(struct.cashIn);
      }
      if (struct.isSetPositionProfit()) {
        oprot.writeDouble(struct.positionProfit);
      }
      if (struct.isSetOffsetAmount()) {
        oprot.writeDouble(struct.offsetAmount);
      }
      if (struct.isSetLongOffsetAmount()) {
        oprot.writeDouble(struct.longOffsetAmount);
      }
      if (struct.isSetShortOffsetAmount()) {
        oprot.writeDouble(struct.shortOffsetAmount);
      }
      if (struct.isSetExchOffsetAmount()) {
        oprot.writeDouble(struct.exchOffsetAmount);
      }
      if (struct.isSetLongExchOffsetAmount()) {
        oprot.writeDouble(struct.longExchOffsetAmount);
      }
      if (struct.isSetShortExchOffsetAmount()) {
        oprot.writeDouble(struct.shortExchOffsetAmount);
      }
      if (struct.isSetHedgeFlag()) {
        oprot.writeString(struct.hedgeFlag);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcInvestorProductGroupMarginField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(27);
      if (incoming.get(0)) {
        struct.productGroupID = iprot.readString();
        struct.setProductGroupIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.investorID = iprot.readString();
        struct.setInvestorIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.tradingDay = iprot.readString();
        struct.setTradingDayIsSet(true);
      }
      if (incoming.get(4)) {
        struct.settlementID = iprot.readI32();
        struct.setSettlementIDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.frozenMargin = iprot.readDouble();
        struct.setFrozenMarginIsSet(true);
      }
      if (incoming.get(6)) {
        struct.longFrozenMargin = iprot.readDouble();
        struct.setLongFrozenMarginIsSet(true);
      }
      if (incoming.get(7)) {
        struct.shortFrozenMargin = iprot.readDouble();
        struct.setShortFrozenMarginIsSet(true);
      }
      if (incoming.get(8)) {
        struct.useMargin = iprot.readDouble();
        struct.setUseMarginIsSet(true);
      }
      if (incoming.get(9)) {
        struct.longUseMargin = iprot.readDouble();
        struct.setLongUseMarginIsSet(true);
      }
      if (incoming.get(10)) {
        struct.shortUseMargin = iprot.readDouble();
        struct.setShortUseMarginIsSet(true);
      }
      if (incoming.get(11)) {
        struct.exchMargin = iprot.readDouble();
        struct.setExchMarginIsSet(true);
      }
      if (incoming.get(12)) {
        struct.longExchMargin = iprot.readDouble();
        struct.setLongExchMarginIsSet(true);
      }
      if (incoming.get(13)) {
        struct.shortExchMargin = iprot.readDouble();
        struct.setShortExchMarginIsSet(true);
      }
      if (incoming.get(14)) {
        struct.closeProfit = iprot.readDouble();
        struct.setCloseProfitIsSet(true);
      }
      if (incoming.get(15)) {
        struct.frozenCommission = iprot.readDouble();
        struct.setFrozenCommissionIsSet(true);
      }
      if (incoming.get(16)) {
        struct.commission = iprot.readDouble();
        struct.setCommissionIsSet(true);
      }
      if (incoming.get(17)) {
        struct.frozenCash = iprot.readDouble();
        struct.setFrozenCashIsSet(true);
      }
      if (incoming.get(18)) {
        struct.cashIn = iprot.readDouble();
        struct.setCashInIsSet(true);
      }
      if (incoming.get(19)) {
        struct.positionProfit = iprot.readDouble();
        struct.setPositionProfitIsSet(true);
      }
      if (incoming.get(20)) {
        struct.offsetAmount = iprot.readDouble();
        struct.setOffsetAmountIsSet(true);
      }
      if (incoming.get(21)) {
        struct.longOffsetAmount = iprot.readDouble();
        struct.setLongOffsetAmountIsSet(true);
      }
      if (incoming.get(22)) {
        struct.shortOffsetAmount = iprot.readDouble();
        struct.setShortOffsetAmountIsSet(true);
      }
      if (incoming.get(23)) {
        struct.exchOffsetAmount = iprot.readDouble();
        struct.setExchOffsetAmountIsSet(true);
      }
      if (incoming.get(24)) {
        struct.longExchOffsetAmount = iprot.readDouble();
        struct.setLongExchOffsetAmountIsSet(true);
      }
      if (incoming.get(25)) {
        struct.shortExchOffsetAmount = iprot.readDouble();
        struct.setShortExchOffsetAmountIsSet(true);
      }
      if (incoming.get(26)) {
        struct.hedgeFlag = iprot.readString();
        struct.setHedgeFlagIsSet(true);
      }
    }
  }

}

