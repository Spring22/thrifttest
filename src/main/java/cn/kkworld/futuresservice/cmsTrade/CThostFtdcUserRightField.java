/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcUserRightField implements org.apache.thrift.TBase<CThostFtdcUserRightField, CThostFtdcUserRightField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcUserRightField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcUserRightField");

  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USER_RIGHT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userRightType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IS_FORBIDDEN_FIELD_DESC = new org.apache.thrift.protocol.TField("isForbidden", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcUserRightFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcUserRightFieldTupleSchemeFactory());
  }

  public String brokerID; // required
  public String userID; // required
  public String userRightType; // required
  public int isForbidden; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BROKER_ID((short)1, "brokerID"),
    USER_ID((short)2, "userID"),
    USER_RIGHT_TYPE((short)3, "userRightType"),
    IS_FORBIDDEN((short)4, "isForbidden");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BROKER_ID
          return BROKER_ID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // USER_RIGHT_TYPE
          return USER_RIGHT_TYPE;
        case 4: // IS_FORBIDDEN
          return IS_FORBIDDEN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISFORBIDDEN_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcUserIDType")));
    tmpMap.put(_Fields.USER_RIGHT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userRightType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcUserRightTypeType")));
    tmpMap.put(_Fields.IS_FORBIDDEN, new org.apache.thrift.meta_data.FieldMetaData("isForbidden", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcBoolType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcUserRightField.class, metaDataMap);
  }

  public CThostFtdcUserRightField() {
  }

  public CThostFtdcUserRightField(
    String brokerID,
    String userID,
    String userRightType,
    int isForbidden)
  {
    this();
    this.brokerID = brokerID;
    this.userID = userID;
    this.userRightType = userRightType;
    this.isForbidden = isForbidden;
    setIsForbiddenIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcUserRightField(CThostFtdcUserRightField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetUserID()) {
      this.userID = other.userID;
    }
    if (other.isSetUserRightType()) {
      this.userRightType = other.userRightType;
    }
    this.isForbidden = other.isForbidden;
  }

  public CThostFtdcUserRightField deepCopy() {
    return new CThostFtdcUserRightField(this);
  }

  @Override
  public void clear() {
    this.brokerID = null;
    this.userID = null;
    this.userRightType = null;
    setIsForbiddenIsSet(false);
    this.isForbidden = 0;
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcUserRightField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getUserID() {
    return this.userID;
  }

  public CThostFtdcUserRightField setUserID(String userID) {
    this.userID = userID;
    return this;
  }

  public void unsetUserID() {
    this.userID = null;
  }

  /** Returns true if field userID is set (has been assigned a value) and false otherwise */
  public boolean isSetUserID() {
    return this.userID != null;
  }

  public void setUserIDIsSet(boolean value) {
    if (!value) {
      this.userID = null;
    }
  }

  public String getUserRightType() {
    return this.userRightType;
  }

  public CThostFtdcUserRightField setUserRightType(String userRightType) {
    this.userRightType = userRightType;
    return this;
  }

  public void unsetUserRightType() {
    this.userRightType = null;
  }

  /** Returns true if field userRightType is set (has been assigned a value) and false otherwise */
  public boolean isSetUserRightType() {
    return this.userRightType != null;
  }

  public void setUserRightTypeIsSet(boolean value) {
    if (!value) {
      this.userRightType = null;
    }
  }

  public int getIsForbidden() {
    return this.isForbidden;
  }

  public CThostFtdcUserRightField setIsForbidden(int isForbidden) {
    this.isForbidden = isForbidden;
    setIsForbiddenIsSet(true);
    return this;
  }

  public void unsetIsForbidden() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISFORBIDDEN_ISSET_ID);
  }

  /** Returns true if field isForbidden is set (has been assigned a value) and false otherwise */
  public boolean isSetIsForbidden() {
    return EncodingUtils.testBit(__isset_bitfield, __ISFORBIDDEN_ISSET_ID);
  }

  public void setIsForbiddenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISFORBIDDEN_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserID();
      } else {
        setUserID((String)value);
      }
      break;

    case USER_RIGHT_TYPE:
      if (value == null) {
        unsetUserRightType();
      } else {
        setUserRightType((String)value);
      }
      break;

    case IS_FORBIDDEN:
      if (value == null) {
        unsetIsForbidden();
      } else {
        setIsForbidden((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BROKER_ID:
      return getBrokerID();

    case USER_ID:
      return getUserID();

    case USER_RIGHT_TYPE:
      return getUserRightType();

    case IS_FORBIDDEN:
      return Integer.valueOf(getIsForbidden());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BROKER_ID:
      return isSetBrokerID();
    case USER_ID:
      return isSetUserID();
    case USER_RIGHT_TYPE:
      return isSetUserRightType();
    case IS_FORBIDDEN:
      return isSetIsForbidden();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcUserRightField)
      return this.equals((CThostFtdcUserRightField)that);
    return false;
  }

  public boolean equals(CThostFtdcUserRightField that) {
    if (that == null)
      return false;

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_userID = true && this.isSetUserID();
    boolean that_present_userID = true && that.isSetUserID();
    if (this_present_userID || that_present_userID) {
      if (!(this_present_userID && that_present_userID))
        return false;
      if (!this.userID.equals(that.userID))
        return false;
    }

    boolean this_present_userRightType = true && this.isSetUserRightType();
    boolean that_present_userRightType = true && that.isSetUserRightType();
    if (this_present_userRightType || that_present_userRightType) {
      if (!(this_present_userRightType && that_present_userRightType))
        return false;
      if (!this.userRightType.equals(that.userRightType))
        return false;
    }

    boolean this_present_isForbidden = true;
    boolean that_present_isForbidden = true;
    if (this_present_isForbidden || that_present_isForbidden) {
      if (!(this_present_isForbidden && that_present_isForbidden))
        return false;
      if (this.isForbidden != that.isForbidden)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcUserRightField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserID()).compareTo(other.isSetUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, other.userID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserRightType()).compareTo(other.isSetUserRightType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserRightType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userRightType, other.userRightType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsForbidden()).compareTo(other.isSetIsForbidden());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsForbidden()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isForbidden, other.isForbidden);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcUserRightField(");
    boolean first = true;

    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userID:");
    if (this.userID == null) {
      sb.append("null");
    } else {
      sb.append(this.userID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userRightType:");
    if (this.userRightType == null) {
      sb.append("null");
    } else {
      sb.append(this.userRightType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isForbidden:");
    sb.append(this.isForbidden);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcUserRightFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcUserRightFieldStandardScheme getScheme() {
      return new CThostFtdcUserRightFieldStandardScheme();
    }
  }

  private static class CThostFtdcUserRightFieldStandardScheme extends StandardScheme<CThostFtdcUserRightField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcUserRightField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userID = iprot.readString();
              struct.setUserIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_RIGHT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userRightType = iprot.readString();
              struct.setUserRightTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_FORBIDDEN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isForbidden = iprot.readI32();
              struct.setIsForbiddenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcUserRightField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.userID != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userID);
        oprot.writeFieldEnd();
      }
      if (struct.userRightType != null) {
        oprot.writeFieldBegin(USER_RIGHT_TYPE_FIELD_DESC);
        oprot.writeString(struct.userRightType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_FORBIDDEN_FIELD_DESC);
      oprot.writeI32(struct.isForbidden);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcUserRightFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcUserRightFieldTupleScheme getScheme() {
      return new CThostFtdcUserRightFieldTupleScheme();
    }
  }

  private static class CThostFtdcUserRightFieldTupleScheme extends TupleScheme<CThostFtdcUserRightField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcUserRightField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBrokerID()) {
        optionals.set(0);
      }
      if (struct.isSetUserID()) {
        optionals.set(1);
      }
      if (struct.isSetUserRightType()) {
        optionals.set(2);
      }
      if (struct.isSetIsForbidden()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetUserID()) {
        oprot.writeString(struct.userID);
      }
      if (struct.isSetUserRightType()) {
        oprot.writeString(struct.userRightType);
      }
      if (struct.isSetIsForbidden()) {
        oprot.writeI32(struct.isForbidden);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcUserRightField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userID = iprot.readString();
        struct.setUserIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userRightType = iprot.readString();
        struct.setUserRightTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isForbidden = iprot.readI32();
        struct.setIsForbiddenIsSet(true);
      }
    }
  }

}

