/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcSyncDepositField implements org.apache.thrift.TBase<CThostFtdcSyncDepositField, CThostFtdcSyncDepositField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcSyncDepositField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcSyncDepositField");

  private static final org.apache.thrift.protocol.TField DEPOSIT_SEQ_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("depositSeqNo", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INVESTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("investorID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DEPOSIT_FIELD_DESC = new org.apache.thrift.protocol.TField("deposit", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField IS_FORCE_FIELD_DESC = new org.apache.thrift.protocol.TField("isForce", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CURRENCY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("currencyID", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcSyncDepositFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcSyncDepositFieldTupleSchemeFactory());
  }

  public String depositSeqNo; // required
  public String brokerID; // required
  public String investorID; // required
  public double deposit; // required
  public int isForce; // required
  public String currencyID; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEPOSIT_SEQ_NO((short)1, "depositSeqNo"),
    BROKER_ID((short)2, "brokerID"),
    INVESTOR_ID((short)3, "investorID"),
    DEPOSIT((short)4, "deposit"),
    IS_FORCE((short)5, "isForce"),
    CURRENCY_ID((short)6, "currencyID");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEPOSIT_SEQ_NO
          return DEPOSIT_SEQ_NO;
        case 2: // BROKER_ID
          return BROKER_ID;
        case 3: // INVESTOR_ID
          return INVESTOR_ID;
        case 4: // DEPOSIT
          return DEPOSIT;
        case 5: // IS_FORCE
          return IS_FORCE;
        case 6: // CURRENCY_ID
          return CURRENCY_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEPOSIT_ISSET_ID = 0;
  private static final int __ISFORCE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEPOSIT_SEQ_NO, new org.apache.thrift.meta_data.FieldMetaData("depositSeqNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDepositSeqNoType")));
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.INVESTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("investorID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInvestorIDType")));
    tmpMap.put(_Fields.DEPOSIT, new org.apache.thrift.meta_data.FieldMetaData("deposit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.IS_FORCE, new org.apache.thrift.meta_data.FieldMetaData("isForce", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcBoolType")));
    tmpMap.put(_Fields.CURRENCY_ID, new org.apache.thrift.meta_data.FieldMetaData("currencyID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcCurrencyIDType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcSyncDepositField.class, metaDataMap);
  }

  public CThostFtdcSyncDepositField() {
  }

  public CThostFtdcSyncDepositField(
    String depositSeqNo,
    String brokerID,
    String investorID,
    double deposit,
    int isForce,
    String currencyID)
  {
    this();
    this.depositSeqNo = depositSeqNo;
    this.brokerID = brokerID;
    this.investorID = investorID;
    this.deposit = deposit;
    setDepositIsSet(true);
    this.isForce = isForce;
    setIsForceIsSet(true);
    this.currencyID = currencyID;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcSyncDepositField(CThostFtdcSyncDepositField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDepositSeqNo()) {
      this.depositSeqNo = other.depositSeqNo;
    }
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetInvestorID()) {
      this.investorID = other.investorID;
    }
    this.deposit = other.deposit;
    this.isForce = other.isForce;
    if (other.isSetCurrencyID()) {
      this.currencyID = other.currencyID;
    }
  }

  public CThostFtdcSyncDepositField deepCopy() {
    return new CThostFtdcSyncDepositField(this);
  }

  @Override
  public void clear() {
    this.depositSeqNo = null;
    this.brokerID = null;
    this.investorID = null;
    setDepositIsSet(false);
    this.deposit = 0.0;
    setIsForceIsSet(false);
    this.isForce = 0;
    this.currencyID = null;
  }

  public String getDepositSeqNo() {
    return this.depositSeqNo;
  }

  public CThostFtdcSyncDepositField setDepositSeqNo(String depositSeqNo) {
    this.depositSeqNo = depositSeqNo;
    return this;
  }

  public void unsetDepositSeqNo() {
    this.depositSeqNo = null;
  }

  /** Returns true if field depositSeqNo is set (has been assigned a value) and false otherwise */
  public boolean isSetDepositSeqNo() {
    return this.depositSeqNo != null;
  }

  public void setDepositSeqNoIsSet(boolean value) {
    if (!value) {
      this.depositSeqNo = null;
    }
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcSyncDepositField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getInvestorID() {
    return this.investorID;
  }

  public CThostFtdcSyncDepositField setInvestorID(String investorID) {
    this.investorID = investorID;
    return this;
  }

  public void unsetInvestorID() {
    this.investorID = null;
  }

  /** Returns true if field investorID is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorID() {
    return this.investorID != null;
  }

  public void setInvestorIDIsSet(boolean value) {
    if (!value) {
      this.investorID = null;
    }
  }

  public double getDeposit() {
    return this.deposit;
  }

  public CThostFtdcSyncDepositField setDeposit(double deposit) {
    this.deposit = deposit;
    setDepositIsSet(true);
    return this;
  }

  public void unsetDeposit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPOSIT_ISSET_ID);
  }

  /** Returns true if field deposit is set (has been assigned a value) and false otherwise */
  public boolean isSetDeposit() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPOSIT_ISSET_ID);
  }

  public void setDepositIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPOSIT_ISSET_ID, value);
  }

  public int getIsForce() {
    return this.isForce;
  }

  public CThostFtdcSyncDepositField setIsForce(int isForce) {
    this.isForce = isForce;
    setIsForceIsSet(true);
    return this;
  }

  public void unsetIsForce() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISFORCE_ISSET_ID);
  }

  /** Returns true if field isForce is set (has been assigned a value) and false otherwise */
  public boolean isSetIsForce() {
    return EncodingUtils.testBit(__isset_bitfield, __ISFORCE_ISSET_ID);
  }

  public void setIsForceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISFORCE_ISSET_ID, value);
  }

  public String getCurrencyID() {
    return this.currencyID;
  }

  public CThostFtdcSyncDepositField setCurrencyID(String currencyID) {
    this.currencyID = currencyID;
    return this;
  }

  public void unsetCurrencyID() {
    this.currencyID = null;
  }

  /** Returns true if field currencyID is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencyID() {
    return this.currencyID != null;
  }

  public void setCurrencyIDIsSet(boolean value) {
    if (!value) {
      this.currencyID = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEPOSIT_SEQ_NO:
      if (value == null) {
        unsetDepositSeqNo();
      } else {
        setDepositSeqNo((String)value);
      }
      break;

    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case INVESTOR_ID:
      if (value == null) {
        unsetInvestorID();
      } else {
        setInvestorID((String)value);
      }
      break;

    case DEPOSIT:
      if (value == null) {
        unsetDeposit();
      } else {
        setDeposit((Double)value);
      }
      break;

    case IS_FORCE:
      if (value == null) {
        unsetIsForce();
      } else {
        setIsForce((Integer)value);
      }
      break;

    case CURRENCY_ID:
      if (value == null) {
        unsetCurrencyID();
      } else {
        setCurrencyID((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEPOSIT_SEQ_NO:
      return getDepositSeqNo();

    case BROKER_ID:
      return getBrokerID();

    case INVESTOR_ID:
      return getInvestorID();

    case DEPOSIT:
      return Double.valueOf(getDeposit());

    case IS_FORCE:
      return Integer.valueOf(getIsForce());

    case CURRENCY_ID:
      return getCurrencyID();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEPOSIT_SEQ_NO:
      return isSetDepositSeqNo();
    case BROKER_ID:
      return isSetBrokerID();
    case INVESTOR_ID:
      return isSetInvestorID();
    case DEPOSIT:
      return isSetDeposit();
    case IS_FORCE:
      return isSetIsForce();
    case CURRENCY_ID:
      return isSetCurrencyID();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcSyncDepositField)
      return this.equals((CThostFtdcSyncDepositField)that);
    return false;
  }

  public boolean equals(CThostFtdcSyncDepositField that) {
    if (that == null)
      return false;

    boolean this_present_depositSeqNo = true && this.isSetDepositSeqNo();
    boolean that_present_depositSeqNo = true && that.isSetDepositSeqNo();
    if (this_present_depositSeqNo || that_present_depositSeqNo) {
      if (!(this_present_depositSeqNo && that_present_depositSeqNo))
        return false;
      if (!this.depositSeqNo.equals(that.depositSeqNo))
        return false;
    }

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_investorID = true && this.isSetInvestorID();
    boolean that_present_investorID = true && that.isSetInvestorID();
    if (this_present_investorID || that_present_investorID) {
      if (!(this_present_investorID && that_present_investorID))
        return false;
      if (!this.investorID.equals(that.investorID))
        return false;
    }

    boolean this_present_deposit = true;
    boolean that_present_deposit = true;
    if (this_present_deposit || that_present_deposit) {
      if (!(this_present_deposit && that_present_deposit))
        return false;
      if (this.deposit != that.deposit)
        return false;
    }

    boolean this_present_isForce = true;
    boolean that_present_isForce = true;
    if (this_present_isForce || that_present_isForce) {
      if (!(this_present_isForce && that_present_isForce))
        return false;
      if (this.isForce != that.isForce)
        return false;
    }

    boolean this_present_currencyID = true && this.isSetCurrencyID();
    boolean that_present_currencyID = true && that.isSetCurrencyID();
    if (this_present_currencyID || that_present_currencyID) {
      if (!(this_present_currencyID && that_present_currencyID))
        return false;
      if (!this.currencyID.equals(that.currencyID))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcSyncDepositField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDepositSeqNo()).compareTo(other.isSetDepositSeqNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepositSeqNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depositSeqNo, other.depositSeqNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestorID()).compareTo(other.isSetInvestorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorID, other.investorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeposit()).compareTo(other.isSetDeposit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeposit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deposit, other.deposit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsForce()).compareTo(other.isSetIsForce());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsForce()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isForce, other.isForce);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrencyID()).compareTo(other.isSetCurrencyID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencyID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currencyID, other.currencyID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcSyncDepositField(");
    boolean first = true;

    sb.append("depositSeqNo:");
    if (this.depositSeqNo == null) {
      sb.append("null");
    } else {
      sb.append(this.depositSeqNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("investorID:");
    if (this.investorID == null) {
      sb.append("null");
    } else {
      sb.append(this.investorID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deposit:");
    sb.append(this.deposit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isForce:");
    sb.append(this.isForce);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currencyID:");
    if (this.currencyID == null) {
      sb.append("null");
    } else {
      sb.append(this.currencyID);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcSyncDepositFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcSyncDepositFieldStandardScheme getScheme() {
      return new CThostFtdcSyncDepositFieldStandardScheme();
    }
  }

  private static class CThostFtdcSyncDepositFieldStandardScheme extends StandardScheme<CThostFtdcSyncDepositField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcSyncDepositField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEPOSIT_SEQ_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.depositSeqNo = iprot.readString();
              struct.setDepositSeqNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INVESTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorID = iprot.readString();
              struct.setInvestorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEPOSIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.deposit = iprot.readDouble();
              struct.setDepositIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_FORCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isForce = iprot.readI32();
              struct.setIsForceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CURRENCY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currencyID = iprot.readString();
              struct.setCurrencyIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcSyncDepositField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.depositSeqNo != null) {
        oprot.writeFieldBegin(DEPOSIT_SEQ_NO_FIELD_DESC);
        oprot.writeString(struct.depositSeqNo);
        oprot.writeFieldEnd();
      }
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.investorID != null) {
        oprot.writeFieldBegin(INVESTOR_ID_FIELD_DESC);
        oprot.writeString(struct.investorID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DEPOSIT_FIELD_DESC);
      oprot.writeDouble(struct.deposit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_FORCE_FIELD_DESC);
      oprot.writeI32(struct.isForce);
      oprot.writeFieldEnd();
      if (struct.currencyID != null) {
        oprot.writeFieldBegin(CURRENCY_ID_FIELD_DESC);
        oprot.writeString(struct.currencyID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcSyncDepositFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcSyncDepositFieldTupleScheme getScheme() {
      return new CThostFtdcSyncDepositFieldTupleScheme();
    }
  }

  private static class CThostFtdcSyncDepositFieldTupleScheme extends TupleScheme<CThostFtdcSyncDepositField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcSyncDepositField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDepositSeqNo()) {
        optionals.set(0);
      }
      if (struct.isSetBrokerID()) {
        optionals.set(1);
      }
      if (struct.isSetInvestorID()) {
        optionals.set(2);
      }
      if (struct.isSetDeposit()) {
        optionals.set(3);
      }
      if (struct.isSetIsForce()) {
        optionals.set(4);
      }
      if (struct.isSetCurrencyID()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetDepositSeqNo()) {
        oprot.writeString(struct.depositSeqNo);
      }
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetInvestorID()) {
        oprot.writeString(struct.investorID);
      }
      if (struct.isSetDeposit()) {
        oprot.writeDouble(struct.deposit);
      }
      if (struct.isSetIsForce()) {
        oprot.writeI32(struct.isForce);
      }
      if (struct.isSetCurrencyID()) {
        oprot.writeString(struct.currencyID);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcSyncDepositField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.depositSeqNo = iprot.readString();
        struct.setDepositSeqNoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.investorID = iprot.readString();
        struct.setInvestorIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.deposit = iprot.readDouble();
        struct.setDepositIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isForce = iprot.readI32();
        struct.setIsForceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.currencyID = iprot.readString();
        struct.setCurrencyIDIsSet(true);
      }
    }
  }

}

