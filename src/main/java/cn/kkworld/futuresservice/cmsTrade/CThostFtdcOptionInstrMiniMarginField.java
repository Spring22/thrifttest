/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcOptionInstrMiniMarginField implements org.apache.thrift.TBase<CThostFtdcOptionInstrMiniMarginField, CThostFtdcOptionInstrMiniMarginField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcOptionInstrMiniMarginField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcOptionInstrMiniMarginField");

  private static final org.apache.thrift.protocol.TField INSTRUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instrumentID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INVESTOR_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("investorRange", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField INVESTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("investorID", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MIN_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("minMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField VALUE_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("valueMethod", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField IS_RELATIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("isRelative", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcOptionInstrMiniMarginFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcOptionInstrMiniMarginFieldTupleSchemeFactory());
  }

  public String instrumentID; // required
  public String investorRange; // required
  public String brokerID; // required
  public String investorID; // required
  public double minMargin; // required
  public String valueMethod; // required
  public int isRelative; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INSTRUMENT_ID((short)1, "instrumentID"),
    INVESTOR_RANGE((short)2, "investorRange"),
    BROKER_ID((short)3, "brokerID"),
    INVESTOR_ID((short)4, "investorID"),
    MIN_MARGIN((short)5, "minMargin"),
    VALUE_METHOD((short)6, "valueMethod"),
    IS_RELATIVE((short)7, "isRelative");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INSTRUMENT_ID
          return INSTRUMENT_ID;
        case 2: // INVESTOR_RANGE
          return INVESTOR_RANGE;
        case 3: // BROKER_ID
          return BROKER_ID;
        case 4: // INVESTOR_ID
          return INVESTOR_ID;
        case 5: // MIN_MARGIN
          return MIN_MARGIN;
        case 6: // VALUE_METHOD
          return VALUE_METHOD;
        case 7: // IS_RELATIVE
          return IS_RELATIVE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MINMARGIN_ISSET_ID = 0;
  private static final int __ISRELATIVE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INSTRUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("instrumentID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInstrumentIDType")));
    tmpMap.put(_Fields.INVESTOR_RANGE, new org.apache.thrift.meta_data.FieldMetaData("investorRange", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInvestorRangeType")));
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.INVESTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("investorID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInvestorIDType")));
    tmpMap.put(_Fields.MIN_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("minMargin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.VALUE_METHOD, new org.apache.thrift.meta_data.FieldMetaData("valueMethod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcValueMethodType")));
    tmpMap.put(_Fields.IS_RELATIVE, new org.apache.thrift.meta_data.FieldMetaData("isRelative", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcBoolType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcOptionInstrMiniMarginField.class, metaDataMap);
  }

  public CThostFtdcOptionInstrMiniMarginField() {
  }

  public CThostFtdcOptionInstrMiniMarginField(
    String instrumentID,
    String investorRange,
    String brokerID,
    String investorID,
    double minMargin,
    String valueMethod,
    int isRelative)
  {
    this();
    this.instrumentID = instrumentID;
    this.investorRange = investorRange;
    this.brokerID = brokerID;
    this.investorID = investorID;
    this.minMargin = minMargin;
    setMinMarginIsSet(true);
    this.valueMethod = valueMethod;
    this.isRelative = isRelative;
    setIsRelativeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcOptionInstrMiniMarginField(CThostFtdcOptionInstrMiniMarginField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetInstrumentID()) {
      this.instrumentID = other.instrumentID;
    }
    if (other.isSetInvestorRange()) {
      this.investorRange = other.investorRange;
    }
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetInvestorID()) {
      this.investorID = other.investorID;
    }
    this.minMargin = other.minMargin;
    if (other.isSetValueMethod()) {
      this.valueMethod = other.valueMethod;
    }
    this.isRelative = other.isRelative;
  }

  public CThostFtdcOptionInstrMiniMarginField deepCopy() {
    return new CThostFtdcOptionInstrMiniMarginField(this);
  }

  @Override
  public void clear() {
    this.instrumentID = null;
    this.investorRange = null;
    this.brokerID = null;
    this.investorID = null;
    setMinMarginIsSet(false);
    this.minMargin = 0.0;
    this.valueMethod = null;
    setIsRelativeIsSet(false);
    this.isRelative = 0;
  }

  public String getInstrumentID() {
    return this.instrumentID;
  }

  public CThostFtdcOptionInstrMiniMarginField setInstrumentID(String instrumentID) {
    this.instrumentID = instrumentID;
    return this;
  }

  public void unsetInstrumentID() {
    this.instrumentID = null;
  }

  /** Returns true if field instrumentID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstrumentID() {
    return this.instrumentID != null;
  }

  public void setInstrumentIDIsSet(boolean value) {
    if (!value) {
      this.instrumentID = null;
    }
  }

  public String getInvestorRange() {
    return this.investorRange;
  }

  public CThostFtdcOptionInstrMiniMarginField setInvestorRange(String investorRange) {
    this.investorRange = investorRange;
    return this;
  }

  public void unsetInvestorRange() {
    this.investorRange = null;
  }

  /** Returns true if field investorRange is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorRange() {
    return this.investorRange != null;
  }

  public void setInvestorRangeIsSet(boolean value) {
    if (!value) {
      this.investorRange = null;
    }
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcOptionInstrMiniMarginField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getInvestorID() {
    return this.investorID;
  }

  public CThostFtdcOptionInstrMiniMarginField setInvestorID(String investorID) {
    this.investorID = investorID;
    return this;
  }

  public void unsetInvestorID() {
    this.investorID = null;
  }

  /** Returns true if field investorID is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorID() {
    return this.investorID != null;
  }

  public void setInvestorIDIsSet(boolean value) {
    if (!value) {
      this.investorID = null;
    }
  }

  public double getMinMargin() {
    return this.minMargin;
  }

  public CThostFtdcOptionInstrMiniMarginField setMinMargin(double minMargin) {
    this.minMargin = minMargin;
    setMinMarginIsSet(true);
    return this;
  }

  public void unsetMinMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINMARGIN_ISSET_ID);
  }

  /** Returns true if field minMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetMinMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __MINMARGIN_ISSET_ID);
  }

  public void setMinMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINMARGIN_ISSET_ID, value);
  }

  public String getValueMethod() {
    return this.valueMethod;
  }

  public CThostFtdcOptionInstrMiniMarginField setValueMethod(String valueMethod) {
    this.valueMethod = valueMethod;
    return this;
  }

  public void unsetValueMethod() {
    this.valueMethod = null;
  }

  /** Returns true if field valueMethod is set (has been assigned a value) and false otherwise */
  public boolean isSetValueMethod() {
    return this.valueMethod != null;
  }

  public void setValueMethodIsSet(boolean value) {
    if (!value) {
      this.valueMethod = null;
    }
  }

  public int getIsRelative() {
    return this.isRelative;
  }

  public CThostFtdcOptionInstrMiniMarginField setIsRelative(int isRelative) {
    this.isRelative = isRelative;
    setIsRelativeIsSet(true);
    return this;
  }

  public void unsetIsRelative() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISRELATIVE_ISSET_ID);
  }

  /** Returns true if field isRelative is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRelative() {
    return EncodingUtils.testBit(__isset_bitfield, __ISRELATIVE_ISSET_ID);
  }

  public void setIsRelativeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISRELATIVE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INSTRUMENT_ID:
      if (value == null) {
        unsetInstrumentID();
      } else {
        setInstrumentID((String)value);
      }
      break;

    case INVESTOR_RANGE:
      if (value == null) {
        unsetInvestorRange();
      } else {
        setInvestorRange((String)value);
      }
      break;

    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case INVESTOR_ID:
      if (value == null) {
        unsetInvestorID();
      } else {
        setInvestorID((String)value);
      }
      break;

    case MIN_MARGIN:
      if (value == null) {
        unsetMinMargin();
      } else {
        setMinMargin((Double)value);
      }
      break;

    case VALUE_METHOD:
      if (value == null) {
        unsetValueMethod();
      } else {
        setValueMethod((String)value);
      }
      break;

    case IS_RELATIVE:
      if (value == null) {
        unsetIsRelative();
      } else {
        setIsRelative((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INSTRUMENT_ID:
      return getInstrumentID();

    case INVESTOR_RANGE:
      return getInvestorRange();

    case BROKER_ID:
      return getBrokerID();

    case INVESTOR_ID:
      return getInvestorID();

    case MIN_MARGIN:
      return Double.valueOf(getMinMargin());

    case VALUE_METHOD:
      return getValueMethod();

    case IS_RELATIVE:
      return Integer.valueOf(getIsRelative());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INSTRUMENT_ID:
      return isSetInstrumentID();
    case INVESTOR_RANGE:
      return isSetInvestorRange();
    case BROKER_ID:
      return isSetBrokerID();
    case INVESTOR_ID:
      return isSetInvestorID();
    case MIN_MARGIN:
      return isSetMinMargin();
    case VALUE_METHOD:
      return isSetValueMethod();
    case IS_RELATIVE:
      return isSetIsRelative();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcOptionInstrMiniMarginField)
      return this.equals((CThostFtdcOptionInstrMiniMarginField)that);
    return false;
  }

  public boolean equals(CThostFtdcOptionInstrMiniMarginField that) {
    if (that == null)
      return false;

    boolean this_present_instrumentID = true && this.isSetInstrumentID();
    boolean that_present_instrumentID = true && that.isSetInstrumentID();
    if (this_present_instrumentID || that_present_instrumentID) {
      if (!(this_present_instrumentID && that_present_instrumentID))
        return false;
      if (!this.instrumentID.equals(that.instrumentID))
        return false;
    }

    boolean this_present_investorRange = true && this.isSetInvestorRange();
    boolean that_present_investorRange = true && that.isSetInvestorRange();
    if (this_present_investorRange || that_present_investorRange) {
      if (!(this_present_investorRange && that_present_investorRange))
        return false;
      if (!this.investorRange.equals(that.investorRange))
        return false;
    }

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_investorID = true && this.isSetInvestorID();
    boolean that_present_investorID = true && that.isSetInvestorID();
    if (this_present_investorID || that_present_investorID) {
      if (!(this_present_investorID && that_present_investorID))
        return false;
      if (!this.investorID.equals(that.investorID))
        return false;
    }

    boolean this_present_minMargin = true;
    boolean that_present_minMargin = true;
    if (this_present_minMargin || that_present_minMargin) {
      if (!(this_present_minMargin && that_present_minMargin))
        return false;
      if (this.minMargin != that.minMargin)
        return false;
    }

    boolean this_present_valueMethod = true && this.isSetValueMethod();
    boolean that_present_valueMethod = true && that.isSetValueMethod();
    if (this_present_valueMethod || that_present_valueMethod) {
      if (!(this_present_valueMethod && that_present_valueMethod))
        return false;
      if (!this.valueMethod.equals(that.valueMethod))
        return false;
    }

    boolean this_present_isRelative = true;
    boolean that_present_isRelative = true;
    if (this_present_isRelative || that_present_isRelative) {
      if (!(this_present_isRelative && that_present_isRelative))
        return false;
      if (this.isRelative != that.isRelative)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcOptionInstrMiniMarginField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInstrumentID()).compareTo(other.isSetInstrumentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstrumentID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instrumentID, other.instrumentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestorRange()).compareTo(other.isSetInvestorRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorRange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorRange, other.investorRange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestorID()).compareTo(other.isSetInvestorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorID, other.investorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinMargin()).compareTo(other.isSetMinMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minMargin, other.minMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValueMethod()).compareTo(other.isSetValueMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValueMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valueMethod, other.valueMethod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsRelative()).compareTo(other.isSetIsRelative());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRelative()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRelative, other.isRelative);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcOptionInstrMiniMarginField(");
    boolean first = true;

    sb.append("instrumentID:");
    if (this.instrumentID == null) {
      sb.append("null");
    } else {
      sb.append(this.instrumentID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("investorRange:");
    if (this.investorRange == null) {
      sb.append("null");
    } else {
      sb.append(this.investorRange);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("investorID:");
    if (this.investorID == null) {
      sb.append("null");
    } else {
      sb.append(this.investorID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("minMargin:");
    sb.append(this.minMargin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("valueMethod:");
    if (this.valueMethod == null) {
      sb.append("null");
    } else {
      sb.append(this.valueMethod);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isRelative:");
    sb.append(this.isRelative);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcOptionInstrMiniMarginFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcOptionInstrMiniMarginFieldStandardScheme getScheme() {
      return new CThostFtdcOptionInstrMiniMarginFieldStandardScheme();
    }
  }

  private static class CThostFtdcOptionInstrMiniMarginFieldStandardScheme extends StandardScheme<CThostFtdcOptionInstrMiniMarginField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcOptionInstrMiniMarginField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INSTRUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instrumentID = iprot.readString();
              struct.setInstrumentIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INVESTOR_RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorRange = iprot.readString();
              struct.setInvestorRangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INVESTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorID = iprot.readString();
              struct.setInvestorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MIN_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.minMargin = iprot.readDouble();
              struct.setMinMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VALUE_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.valueMethod = iprot.readString();
              struct.setValueMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_RELATIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isRelative = iprot.readI32();
              struct.setIsRelativeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcOptionInstrMiniMarginField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.instrumentID != null) {
        oprot.writeFieldBegin(INSTRUMENT_ID_FIELD_DESC);
        oprot.writeString(struct.instrumentID);
        oprot.writeFieldEnd();
      }
      if (struct.investorRange != null) {
        oprot.writeFieldBegin(INVESTOR_RANGE_FIELD_DESC);
        oprot.writeString(struct.investorRange);
        oprot.writeFieldEnd();
      }
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.investorID != null) {
        oprot.writeFieldBegin(INVESTOR_ID_FIELD_DESC);
        oprot.writeString(struct.investorID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MIN_MARGIN_FIELD_DESC);
      oprot.writeDouble(struct.minMargin);
      oprot.writeFieldEnd();
      if (struct.valueMethod != null) {
        oprot.writeFieldBegin(VALUE_METHOD_FIELD_DESC);
        oprot.writeString(struct.valueMethod);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_RELATIVE_FIELD_DESC);
      oprot.writeI32(struct.isRelative);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcOptionInstrMiniMarginFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcOptionInstrMiniMarginFieldTupleScheme getScheme() {
      return new CThostFtdcOptionInstrMiniMarginFieldTupleScheme();
    }
  }

  private static class CThostFtdcOptionInstrMiniMarginFieldTupleScheme extends TupleScheme<CThostFtdcOptionInstrMiniMarginField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcOptionInstrMiniMarginField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInstrumentID()) {
        optionals.set(0);
      }
      if (struct.isSetInvestorRange()) {
        optionals.set(1);
      }
      if (struct.isSetBrokerID()) {
        optionals.set(2);
      }
      if (struct.isSetInvestorID()) {
        optionals.set(3);
      }
      if (struct.isSetMinMargin()) {
        optionals.set(4);
      }
      if (struct.isSetValueMethod()) {
        optionals.set(5);
      }
      if (struct.isSetIsRelative()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetInstrumentID()) {
        oprot.writeString(struct.instrumentID);
      }
      if (struct.isSetInvestorRange()) {
        oprot.writeString(struct.investorRange);
      }
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetInvestorID()) {
        oprot.writeString(struct.investorID);
      }
      if (struct.isSetMinMargin()) {
        oprot.writeDouble(struct.minMargin);
      }
      if (struct.isSetValueMethod()) {
        oprot.writeString(struct.valueMethod);
      }
      if (struct.isSetIsRelative()) {
        oprot.writeI32(struct.isRelative);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcOptionInstrMiniMarginField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.instrumentID = iprot.readString();
        struct.setInstrumentIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.investorRange = iprot.readString();
        struct.setInvestorRangeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.investorID = iprot.readString();
        struct.setInvestorIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.minMargin = iprot.readDouble();
        struct.setMinMarginIsSet(true);
      }
      if (incoming.get(5)) {
        struct.valueMethod = iprot.readString();
        struct.setValueMethodIsSet(true);
      }
      if (incoming.get(6)) {
        struct.isRelative = iprot.readI32();
        struct.setIsRelativeIsSet(true);
      }
    }
  }

}

