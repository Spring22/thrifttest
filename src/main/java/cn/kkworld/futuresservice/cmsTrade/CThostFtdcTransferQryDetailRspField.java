/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcTransferQryDetailRspField implements org.apache.thrift.TBase<CThostFtdcTransferQryDetailRspField, CThostFtdcTransferQryDetailRspField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcTransferQryDetailRspField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcTransferQryDetailRspField");

  private static final org.apache.thrift.protocol.TField TRADE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeDate", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TRADE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeTime", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TRADE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeCode", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FUTURE_SERIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("futureSerial", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FUTURE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("futureID", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FUTURE_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("futureAccount", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField BANK_SERIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("bankSerial", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField BANK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankID", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField BANK_BRCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankBrchID", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField BANK_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("bankAccount", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CERT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("certCode", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CURRENCY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("currencyCode", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField TX_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("txAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcTransferQryDetailRspFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcTransferQryDetailRspFieldTupleSchemeFactory());
  }

  public String tradeDate; // required
  public String tradeTime; // required
  public String tradeCode; // required
  public int futureSerial; // required
  public String futureID; // required
  public String futureAccount; // required
  public int bankSerial; // required
  public String bankID; // required
  public String bankBrchID; // required
  public String bankAccount; // required
  public String certCode; // required
  public String currencyCode; // required
  public double txAmount; // required
  public String flag; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRADE_DATE((short)1, "tradeDate"),
    TRADE_TIME((short)2, "tradeTime"),
    TRADE_CODE((short)3, "tradeCode"),
    FUTURE_SERIAL((short)4, "futureSerial"),
    FUTURE_ID((short)5, "futureID"),
    FUTURE_ACCOUNT((short)6, "futureAccount"),
    BANK_SERIAL((short)7, "bankSerial"),
    BANK_ID((short)8, "bankID"),
    BANK_BRCH_ID((short)9, "bankBrchID"),
    BANK_ACCOUNT((short)10, "bankAccount"),
    CERT_CODE((short)11, "certCode"),
    CURRENCY_CODE((short)12, "currencyCode"),
    TX_AMOUNT((short)13, "txAmount"),
    FLAG((short)14, "flag");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRADE_DATE
          return TRADE_DATE;
        case 2: // TRADE_TIME
          return TRADE_TIME;
        case 3: // TRADE_CODE
          return TRADE_CODE;
        case 4: // FUTURE_SERIAL
          return FUTURE_SERIAL;
        case 5: // FUTURE_ID
          return FUTURE_ID;
        case 6: // FUTURE_ACCOUNT
          return FUTURE_ACCOUNT;
        case 7: // BANK_SERIAL
          return BANK_SERIAL;
        case 8: // BANK_ID
          return BANK_ID;
        case 9: // BANK_BRCH_ID
          return BANK_BRCH_ID;
        case 10: // BANK_ACCOUNT
          return BANK_ACCOUNT;
        case 11: // CERT_CODE
          return CERT_CODE;
        case 12: // CURRENCY_CODE
          return CURRENCY_CODE;
        case 13: // TX_AMOUNT
          return TX_AMOUNT;
        case 14: // FLAG
          return FLAG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FUTURESERIAL_ISSET_ID = 0;
  private static final int __BANKSERIAL_ISSET_ID = 1;
  private static final int __TXAMOUNT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRADE_DATE, new org.apache.thrift.meta_data.FieldMetaData("tradeDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    tmpMap.put(_Fields.TRADE_TIME, new org.apache.thrift.meta_data.FieldMetaData("tradeTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeTimeType")));
    tmpMap.put(_Fields.TRADE_CODE, new org.apache.thrift.meta_data.FieldMetaData("tradeCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeCodeType")));
    tmpMap.put(_Fields.FUTURE_SERIAL, new org.apache.thrift.meta_data.FieldMetaData("futureSerial", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcTradeSerialNoType")));
    tmpMap.put(_Fields.FUTURE_ID, new org.apache.thrift.meta_data.FieldMetaData("futureID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcFutureIDType")));
    tmpMap.put(_Fields.FUTURE_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("futureAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcFutureAccountType")));
    tmpMap.put(_Fields.BANK_SERIAL, new org.apache.thrift.meta_data.FieldMetaData("bankSerial", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcTradeSerialNoType")));
    tmpMap.put(_Fields.BANK_ID, new org.apache.thrift.meta_data.FieldMetaData("bankID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankIDType")));
    tmpMap.put(_Fields.BANK_BRCH_ID, new org.apache.thrift.meta_data.FieldMetaData("bankBrchID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankBrchIDType")));
    tmpMap.put(_Fields.BANK_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("bankAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankAccountType")));
    tmpMap.put(_Fields.CERT_CODE, new org.apache.thrift.meta_data.FieldMetaData("certCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcCertCodeType")));
    tmpMap.put(_Fields.CURRENCY_CODE, new org.apache.thrift.meta_data.FieldMetaData("currencyCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcCurrencyCodeType")));
    tmpMap.put(_Fields.TX_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("txAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTransferValidFlagType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcTransferQryDetailRspField.class, metaDataMap);
  }

  public CThostFtdcTransferQryDetailRspField() {
  }

  public CThostFtdcTransferQryDetailRspField(
    String tradeDate,
    String tradeTime,
    String tradeCode,
    int futureSerial,
    String futureID,
    String futureAccount,
    int bankSerial,
    String bankID,
    String bankBrchID,
    String bankAccount,
    String certCode,
    String currencyCode,
    double txAmount,
    String flag)
  {
    this();
    this.tradeDate = tradeDate;
    this.tradeTime = tradeTime;
    this.tradeCode = tradeCode;
    this.futureSerial = futureSerial;
    setFutureSerialIsSet(true);
    this.futureID = futureID;
    this.futureAccount = futureAccount;
    this.bankSerial = bankSerial;
    setBankSerialIsSet(true);
    this.bankID = bankID;
    this.bankBrchID = bankBrchID;
    this.bankAccount = bankAccount;
    this.certCode = certCode;
    this.currencyCode = currencyCode;
    this.txAmount = txAmount;
    setTxAmountIsSet(true);
    this.flag = flag;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcTransferQryDetailRspField(CThostFtdcTransferQryDetailRspField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTradeDate()) {
      this.tradeDate = other.tradeDate;
    }
    if (other.isSetTradeTime()) {
      this.tradeTime = other.tradeTime;
    }
    if (other.isSetTradeCode()) {
      this.tradeCode = other.tradeCode;
    }
    this.futureSerial = other.futureSerial;
    if (other.isSetFutureID()) {
      this.futureID = other.futureID;
    }
    if (other.isSetFutureAccount()) {
      this.futureAccount = other.futureAccount;
    }
    this.bankSerial = other.bankSerial;
    if (other.isSetBankID()) {
      this.bankID = other.bankID;
    }
    if (other.isSetBankBrchID()) {
      this.bankBrchID = other.bankBrchID;
    }
    if (other.isSetBankAccount()) {
      this.bankAccount = other.bankAccount;
    }
    if (other.isSetCertCode()) {
      this.certCode = other.certCode;
    }
    if (other.isSetCurrencyCode()) {
      this.currencyCode = other.currencyCode;
    }
    this.txAmount = other.txAmount;
    if (other.isSetFlag()) {
      this.flag = other.flag;
    }
  }

  public CThostFtdcTransferQryDetailRspField deepCopy() {
    return new CThostFtdcTransferQryDetailRspField(this);
  }

  @Override
  public void clear() {
    this.tradeDate = null;
    this.tradeTime = null;
    this.tradeCode = null;
    setFutureSerialIsSet(false);
    this.futureSerial = 0;
    this.futureID = null;
    this.futureAccount = null;
    setBankSerialIsSet(false);
    this.bankSerial = 0;
    this.bankID = null;
    this.bankBrchID = null;
    this.bankAccount = null;
    this.certCode = null;
    this.currencyCode = null;
    setTxAmountIsSet(false);
    this.txAmount = 0.0;
    this.flag = null;
  }

  public String getTradeDate() {
    return this.tradeDate;
  }

  public CThostFtdcTransferQryDetailRspField setTradeDate(String tradeDate) {
    this.tradeDate = tradeDate;
    return this;
  }

  public void unsetTradeDate() {
    this.tradeDate = null;
  }

  /** Returns true if field tradeDate is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeDate() {
    return this.tradeDate != null;
  }

  public void setTradeDateIsSet(boolean value) {
    if (!value) {
      this.tradeDate = null;
    }
  }

  public String getTradeTime() {
    return this.tradeTime;
  }

  public CThostFtdcTransferQryDetailRspField setTradeTime(String tradeTime) {
    this.tradeTime = tradeTime;
    return this;
  }

  public void unsetTradeTime() {
    this.tradeTime = null;
  }

  /** Returns true if field tradeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeTime() {
    return this.tradeTime != null;
  }

  public void setTradeTimeIsSet(boolean value) {
    if (!value) {
      this.tradeTime = null;
    }
  }

  public String getTradeCode() {
    return this.tradeCode;
  }

  public CThostFtdcTransferQryDetailRspField setTradeCode(String tradeCode) {
    this.tradeCode = tradeCode;
    return this;
  }

  public void unsetTradeCode() {
    this.tradeCode = null;
  }

  /** Returns true if field tradeCode is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeCode() {
    return this.tradeCode != null;
  }

  public void setTradeCodeIsSet(boolean value) {
    if (!value) {
      this.tradeCode = null;
    }
  }

  public int getFutureSerial() {
    return this.futureSerial;
  }

  public CThostFtdcTransferQryDetailRspField setFutureSerial(int futureSerial) {
    this.futureSerial = futureSerial;
    setFutureSerialIsSet(true);
    return this;
  }

  public void unsetFutureSerial() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FUTURESERIAL_ISSET_ID);
  }

  /** Returns true if field futureSerial is set (has been assigned a value) and false otherwise */
  public boolean isSetFutureSerial() {
    return EncodingUtils.testBit(__isset_bitfield, __FUTURESERIAL_ISSET_ID);
  }

  public void setFutureSerialIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FUTURESERIAL_ISSET_ID, value);
  }

  public String getFutureID() {
    return this.futureID;
  }

  public CThostFtdcTransferQryDetailRspField setFutureID(String futureID) {
    this.futureID = futureID;
    return this;
  }

  public void unsetFutureID() {
    this.futureID = null;
  }

  /** Returns true if field futureID is set (has been assigned a value) and false otherwise */
  public boolean isSetFutureID() {
    return this.futureID != null;
  }

  public void setFutureIDIsSet(boolean value) {
    if (!value) {
      this.futureID = null;
    }
  }

  public String getFutureAccount() {
    return this.futureAccount;
  }

  public CThostFtdcTransferQryDetailRspField setFutureAccount(String futureAccount) {
    this.futureAccount = futureAccount;
    return this;
  }

  public void unsetFutureAccount() {
    this.futureAccount = null;
  }

  /** Returns true if field futureAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetFutureAccount() {
    return this.futureAccount != null;
  }

  public void setFutureAccountIsSet(boolean value) {
    if (!value) {
      this.futureAccount = null;
    }
  }

  public int getBankSerial() {
    return this.bankSerial;
  }

  public CThostFtdcTransferQryDetailRspField setBankSerial(int bankSerial) {
    this.bankSerial = bankSerial;
    setBankSerialIsSet(true);
    return this;
  }

  public void unsetBankSerial() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANKSERIAL_ISSET_ID);
  }

  /** Returns true if field bankSerial is set (has been assigned a value) and false otherwise */
  public boolean isSetBankSerial() {
    return EncodingUtils.testBit(__isset_bitfield, __BANKSERIAL_ISSET_ID);
  }

  public void setBankSerialIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANKSERIAL_ISSET_ID, value);
  }

  public String getBankID() {
    return this.bankID;
  }

  public CThostFtdcTransferQryDetailRspField setBankID(String bankID) {
    this.bankID = bankID;
    return this;
  }

  public void unsetBankID() {
    this.bankID = null;
  }

  /** Returns true if field bankID is set (has been assigned a value) and false otherwise */
  public boolean isSetBankID() {
    return this.bankID != null;
  }

  public void setBankIDIsSet(boolean value) {
    if (!value) {
      this.bankID = null;
    }
  }

  public String getBankBrchID() {
    return this.bankBrchID;
  }

  public CThostFtdcTransferQryDetailRspField setBankBrchID(String bankBrchID) {
    this.bankBrchID = bankBrchID;
    return this;
  }

  public void unsetBankBrchID() {
    this.bankBrchID = null;
  }

  /** Returns true if field bankBrchID is set (has been assigned a value) and false otherwise */
  public boolean isSetBankBrchID() {
    return this.bankBrchID != null;
  }

  public void setBankBrchIDIsSet(boolean value) {
    if (!value) {
      this.bankBrchID = null;
    }
  }

  public String getBankAccount() {
    return this.bankAccount;
  }

  public CThostFtdcTransferQryDetailRspField setBankAccount(String bankAccount) {
    this.bankAccount = bankAccount;
    return this;
  }

  public void unsetBankAccount() {
    this.bankAccount = null;
  }

  /** Returns true if field bankAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetBankAccount() {
    return this.bankAccount != null;
  }

  public void setBankAccountIsSet(boolean value) {
    if (!value) {
      this.bankAccount = null;
    }
  }

  public String getCertCode() {
    return this.certCode;
  }

  public CThostFtdcTransferQryDetailRspField setCertCode(String certCode) {
    this.certCode = certCode;
    return this;
  }

  public void unsetCertCode() {
    this.certCode = null;
  }

  /** Returns true if field certCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCertCode() {
    return this.certCode != null;
  }

  public void setCertCodeIsSet(boolean value) {
    if (!value) {
      this.certCode = null;
    }
  }

  public String getCurrencyCode() {
    return this.currencyCode;
  }

  public CThostFtdcTransferQryDetailRspField setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  public void unsetCurrencyCode() {
    this.currencyCode = null;
  }

  /** Returns true if field currencyCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencyCode() {
    return this.currencyCode != null;
  }

  public void setCurrencyCodeIsSet(boolean value) {
    if (!value) {
      this.currencyCode = null;
    }
  }

  public double getTxAmount() {
    return this.txAmount;
  }

  public CThostFtdcTransferQryDetailRspField setTxAmount(double txAmount) {
    this.txAmount = txAmount;
    setTxAmountIsSet(true);
    return this;
  }

  public void unsetTxAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TXAMOUNT_ISSET_ID);
  }

  /** Returns true if field txAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTxAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __TXAMOUNT_ISSET_ID);
  }

  public void setTxAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TXAMOUNT_ISSET_ID, value);
  }

  public String getFlag() {
    return this.flag;
  }

  public CThostFtdcTransferQryDetailRspField setFlag(String flag) {
    this.flag = flag;
    return this;
  }

  public void unsetFlag() {
    this.flag = null;
  }

  /** Returns true if field flag is set (has been assigned a value) and false otherwise */
  public boolean isSetFlag() {
    return this.flag != null;
  }

  public void setFlagIsSet(boolean value) {
    if (!value) {
      this.flag = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRADE_DATE:
      if (value == null) {
        unsetTradeDate();
      } else {
        setTradeDate((String)value);
      }
      break;

    case TRADE_TIME:
      if (value == null) {
        unsetTradeTime();
      } else {
        setTradeTime((String)value);
      }
      break;

    case TRADE_CODE:
      if (value == null) {
        unsetTradeCode();
      } else {
        setTradeCode((String)value);
      }
      break;

    case FUTURE_SERIAL:
      if (value == null) {
        unsetFutureSerial();
      } else {
        setFutureSerial((Integer)value);
      }
      break;

    case FUTURE_ID:
      if (value == null) {
        unsetFutureID();
      } else {
        setFutureID((String)value);
      }
      break;

    case FUTURE_ACCOUNT:
      if (value == null) {
        unsetFutureAccount();
      } else {
        setFutureAccount((String)value);
      }
      break;

    case BANK_SERIAL:
      if (value == null) {
        unsetBankSerial();
      } else {
        setBankSerial((Integer)value);
      }
      break;

    case BANK_ID:
      if (value == null) {
        unsetBankID();
      } else {
        setBankID((String)value);
      }
      break;

    case BANK_BRCH_ID:
      if (value == null) {
        unsetBankBrchID();
      } else {
        setBankBrchID((String)value);
      }
      break;

    case BANK_ACCOUNT:
      if (value == null) {
        unsetBankAccount();
      } else {
        setBankAccount((String)value);
      }
      break;

    case CERT_CODE:
      if (value == null) {
        unsetCertCode();
      } else {
        setCertCode((String)value);
      }
      break;

    case CURRENCY_CODE:
      if (value == null) {
        unsetCurrencyCode();
      } else {
        setCurrencyCode((String)value);
      }
      break;

    case TX_AMOUNT:
      if (value == null) {
        unsetTxAmount();
      } else {
        setTxAmount((Double)value);
      }
      break;

    case FLAG:
      if (value == null) {
        unsetFlag();
      } else {
        setFlag((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRADE_DATE:
      return getTradeDate();

    case TRADE_TIME:
      return getTradeTime();

    case TRADE_CODE:
      return getTradeCode();

    case FUTURE_SERIAL:
      return Integer.valueOf(getFutureSerial());

    case FUTURE_ID:
      return getFutureID();

    case FUTURE_ACCOUNT:
      return getFutureAccount();

    case BANK_SERIAL:
      return Integer.valueOf(getBankSerial());

    case BANK_ID:
      return getBankID();

    case BANK_BRCH_ID:
      return getBankBrchID();

    case BANK_ACCOUNT:
      return getBankAccount();

    case CERT_CODE:
      return getCertCode();

    case CURRENCY_CODE:
      return getCurrencyCode();

    case TX_AMOUNT:
      return Double.valueOf(getTxAmount());

    case FLAG:
      return getFlag();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRADE_DATE:
      return isSetTradeDate();
    case TRADE_TIME:
      return isSetTradeTime();
    case TRADE_CODE:
      return isSetTradeCode();
    case FUTURE_SERIAL:
      return isSetFutureSerial();
    case FUTURE_ID:
      return isSetFutureID();
    case FUTURE_ACCOUNT:
      return isSetFutureAccount();
    case BANK_SERIAL:
      return isSetBankSerial();
    case BANK_ID:
      return isSetBankID();
    case BANK_BRCH_ID:
      return isSetBankBrchID();
    case BANK_ACCOUNT:
      return isSetBankAccount();
    case CERT_CODE:
      return isSetCertCode();
    case CURRENCY_CODE:
      return isSetCurrencyCode();
    case TX_AMOUNT:
      return isSetTxAmount();
    case FLAG:
      return isSetFlag();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcTransferQryDetailRspField)
      return this.equals((CThostFtdcTransferQryDetailRspField)that);
    return false;
  }

  public boolean equals(CThostFtdcTransferQryDetailRspField that) {
    if (that == null)
      return false;

    boolean this_present_tradeDate = true && this.isSetTradeDate();
    boolean that_present_tradeDate = true && that.isSetTradeDate();
    if (this_present_tradeDate || that_present_tradeDate) {
      if (!(this_present_tradeDate && that_present_tradeDate))
        return false;
      if (!this.tradeDate.equals(that.tradeDate))
        return false;
    }

    boolean this_present_tradeTime = true && this.isSetTradeTime();
    boolean that_present_tradeTime = true && that.isSetTradeTime();
    if (this_present_tradeTime || that_present_tradeTime) {
      if (!(this_present_tradeTime && that_present_tradeTime))
        return false;
      if (!this.tradeTime.equals(that.tradeTime))
        return false;
    }

    boolean this_present_tradeCode = true && this.isSetTradeCode();
    boolean that_present_tradeCode = true && that.isSetTradeCode();
    if (this_present_tradeCode || that_present_tradeCode) {
      if (!(this_present_tradeCode && that_present_tradeCode))
        return false;
      if (!this.tradeCode.equals(that.tradeCode))
        return false;
    }

    boolean this_present_futureSerial = true;
    boolean that_present_futureSerial = true;
    if (this_present_futureSerial || that_present_futureSerial) {
      if (!(this_present_futureSerial && that_present_futureSerial))
        return false;
      if (this.futureSerial != that.futureSerial)
        return false;
    }

    boolean this_present_futureID = true && this.isSetFutureID();
    boolean that_present_futureID = true && that.isSetFutureID();
    if (this_present_futureID || that_present_futureID) {
      if (!(this_present_futureID && that_present_futureID))
        return false;
      if (!this.futureID.equals(that.futureID))
        return false;
    }

    boolean this_present_futureAccount = true && this.isSetFutureAccount();
    boolean that_present_futureAccount = true && that.isSetFutureAccount();
    if (this_present_futureAccount || that_present_futureAccount) {
      if (!(this_present_futureAccount && that_present_futureAccount))
        return false;
      if (!this.futureAccount.equals(that.futureAccount))
        return false;
    }

    boolean this_present_bankSerial = true;
    boolean that_present_bankSerial = true;
    if (this_present_bankSerial || that_present_bankSerial) {
      if (!(this_present_bankSerial && that_present_bankSerial))
        return false;
      if (this.bankSerial != that.bankSerial)
        return false;
    }

    boolean this_present_bankID = true && this.isSetBankID();
    boolean that_present_bankID = true && that.isSetBankID();
    if (this_present_bankID || that_present_bankID) {
      if (!(this_present_bankID && that_present_bankID))
        return false;
      if (!this.bankID.equals(that.bankID))
        return false;
    }

    boolean this_present_bankBrchID = true && this.isSetBankBrchID();
    boolean that_present_bankBrchID = true && that.isSetBankBrchID();
    if (this_present_bankBrchID || that_present_bankBrchID) {
      if (!(this_present_bankBrchID && that_present_bankBrchID))
        return false;
      if (!this.bankBrchID.equals(that.bankBrchID))
        return false;
    }

    boolean this_present_bankAccount = true && this.isSetBankAccount();
    boolean that_present_bankAccount = true && that.isSetBankAccount();
    if (this_present_bankAccount || that_present_bankAccount) {
      if (!(this_present_bankAccount && that_present_bankAccount))
        return false;
      if (!this.bankAccount.equals(that.bankAccount))
        return false;
    }

    boolean this_present_certCode = true && this.isSetCertCode();
    boolean that_present_certCode = true && that.isSetCertCode();
    if (this_present_certCode || that_present_certCode) {
      if (!(this_present_certCode && that_present_certCode))
        return false;
      if (!this.certCode.equals(that.certCode))
        return false;
    }

    boolean this_present_currencyCode = true && this.isSetCurrencyCode();
    boolean that_present_currencyCode = true && that.isSetCurrencyCode();
    if (this_present_currencyCode || that_present_currencyCode) {
      if (!(this_present_currencyCode && that_present_currencyCode))
        return false;
      if (!this.currencyCode.equals(that.currencyCode))
        return false;
    }

    boolean this_present_txAmount = true;
    boolean that_present_txAmount = true;
    if (this_present_txAmount || that_present_txAmount) {
      if (!(this_present_txAmount && that_present_txAmount))
        return false;
      if (this.txAmount != that.txAmount)
        return false;
    }

    boolean this_present_flag = true && this.isSetFlag();
    boolean that_present_flag = true && that.isSetFlag();
    if (this_present_flag || that_present_flag) {
      if (!(this_present_flag && that_present_flag))
        return false;
      if (!this.flag.equals(that.flag))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcTransferQryDetailRspField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTradeDate()).compareTo(other.isSetTradeDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeDate, other.tradeDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeTime()).compareTo(other.isSetTradeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeTime, other.tradeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeCode()).compareTo(other.isSetTradeCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeCode, other.tradeCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFutureSerial()).compareTo(other.isSetFutureSerial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFutureSerial()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.futureSerial, other.futureSerial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFutureID()).compareTo(other.isSetFutureID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFutureID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.futureID, other.futureID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFutureAccount()).compareTo(other.isSetFutureAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFutureAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.futureAccount, other.futureAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankSerial()).compareTo(other.isSetBankSerial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankSerial()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankSerial, other.bankSerial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankID()).compareTo(other.isSetBankID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankID, other.bankID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankBrchID()).compareTo(other.isSetBankBrchID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankBrchID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankBrchID, other.bankBrchID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankAccount()).compareTo(other.isSetBankAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankAccount, other.bankAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertCode()).compareTo(other.isSetCertCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certCode, other.certCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrencyCode()).compareTo(other.isSetCurrencyCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencyCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currencyCode, other.currencyCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTxAmount()).compareTo(other.isSetTxAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txAmount, other.txAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcTransferQryDetailRspField(");
    boolean first = true;

    sb.append("tradeDate:");
    if (this.tradeDate == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeTime:");
    if (this.tradeTime == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeCode:");
    if (this.tradeCode == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("futureSerial:");
    sb.append(this.futureSerial);
    first = false;
    if (!first) sb.append(", ");
    sb.append("futureID:");
    if (this.futureID == null) {
      sb.append("null");
    } else {
      sb.append(this.futureID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("futureAccount:");
    if (this.futureAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.futureAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankSerial:");
    sb.append(this.bankSerial);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankID:");
    if (this.bankID == null) {
      sb.append("null");
    } else {
      sb.append(this.bankID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankBrchID:");
    if (this.bankBrchID == null) {
      sb.append("null");
    } else {
      sb.append(this.bankBrchID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankAccount:");
    if (this.bankAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.bankAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("certCode:");
    if (this.certCode == null) {
      sb.append("null");
    } else {
      sb.append(this.certCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currencyCode:");
    if (this.currencyCode == null) {
      sb.append("null");
    } else {
      sb.append(this.currencyCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("txAmount:");
    sb.append(this.txAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("flag:");
    if (this.flag == null) {
      sb.append("null");
    } else {
      sb.append(this.flag);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcTransferQryDetailRspFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcTransferQryDetailRspFieldStandardScheme getScheme() {
      return new CThostFtdcTransferQryDetailRspFieldStandardScheme();
    }
  }

  private static class CThostFtdcTransferQryDetailRspFieldStandardScheme extends StandardScheme<CThostFtdcTransferQryDetailRspField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcTransferQryDetailRspField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRADE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeDate = iprot.readString();
              struct.setTradeDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRADE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeTime = iprot.readString();
              struct.setTradeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRADE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeCode = iprot.readString();
              struct.setTradeCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FUTURE_SERIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.futureSerial = iprot.readI32();
              struct.setFutureSerialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FUTURE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.futureID = iprot.readString();
              struct.setFutureIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FUTURE_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.futureAccount = iprot.readString();
              struct.setFutureAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BANK_SERIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bankSerial = iprot.readI32();
              struct.setBankSerialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BANK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankID = iprot.readString();
              struct.setBankIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BANK_BRCH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankBrchID = iprot.readString();
              struct.setBankBrchIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BANK_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankAccount = iprot.readString();
              struct.setBankAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CERT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certCode = iprot.readString();
              struct.setCertCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CURRENCY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currencyCode = iprot.readString();
              struct.setCurrencyCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TX_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.txAmount = iprot.readDouble();
              struct.setTxAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flag = iprot.readString();
              struct.setFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcTransferQryDetailRspField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tradeDate != null) {
        oprot.writeFieldBegin(TRADE_DATE_FIELD_DESC);
        oprot.writeString(struct.tradeDate);
        oprot.writeFieldEnd();
      }
      if (struct.tradeTime != null) {
        oprot.writeFieldBegin(TRADE_TIME_FIELD_DESC);
        oprot.writeString(struct.tradeTime);
        oprot.writeFieldEnd();
      }
      if (struct.tradeCode != null) {
        oprot.writeFieldBegin(TRADE_CODE_FIELD_DESC);
        oprot.writeString(struct.tradeCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FUTURE_SERIAL_FIELD_DESC);
      oprot.writeI32(struct.futureSerial);
      oprot.writeFieldEnd();
      if (struct.futureID != null) {
        oprot.writeFieldBegin(FUTURE_ID_FIELD_DESC);
        oprot.writeString(struct.futureID);
        oprot.writeFieldEnd();
      }
      if (struct.futureAccount != null) {
        oprot.writeFieldBegin(FUTURE_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.futureAccount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BANK_SERIAL_FIELD_DESC);
      oprot.writeI32(struct.bankSerial);
      oprot.writeFieldEnd();
      if (struct.bankID != null) {
        oprot.writeFieldBegin(BANK_ID_FIELD_DESC);
        oprot.writeString(struct.bankID);
        oprot.writeFieldEnd();
      }
      if (struct.bankBrchID != null) {
        oprot.writeFieldBegin(BANK_BRCH_ID_FIELD_DESC);
        oprot.writeString(struct.bankBrchID);
        oprot.writeFieldEnd();
      }
      if (struct.bankAccount != null) {
        oprot.writeFieldBegin(BANK_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.bankAccount);
        oprot.writeFieldEnd();
      }
      if (struct.certCode != null) {
        oprot.writeFieldBegin(CERT_CODE_FIELD_DESC);
        oprot.writeString(struct.certCode);
        oprot.writeFieldEnd();
      }
      if (struct.currencyCode != null) {
        oprot.writeFieldBegin(CURRENCY_CODE_FIELD_DESC);
        oprot.writeString(struct.currencyCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TX_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.txAmount);
      oprot.writeFieldEnd();
      if (struct.flag != null) {
        oprot.writeFieldBegin(FLAG_FIELD_DESC);
        oprot.writeString(struct.flag);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcTransferQryDetailRspFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcTransferQryDetailRspFieldTupleScheme getScheme() {
      return new CThostFtdcTransferQryDetailRspFieldTupleScheme();
    }
  }

  private static class CThostFtdcTransferQryDetailRspFieldTupleScheme extends TupleScheme<CThostFtdcTransferQryDetailRspField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcTransferQryDetailRspField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTradeDate()) {
        optionals.set(0);
      }
      if (struct.isSetTradeTime()) {
        optionals.set(1);
      }
      if (struct.isSetTradeCode()) {
        optionals.set(2);
      }
      if (struct.isSetFutureSerial()) {
        optionals.set(3);
      }
      if (struct.isSetFutureID()) {
        optionals.set(4);
      }
      if (struct.isSetFutureAccount()) {
        optionals.set(5);
      }
      if (struct.isSetBankSerial()) {
        optionals.set(6);
      }
      if (struct.isSetBankID()) {
        optionals.set(7);
      }
      if (struct.isSetBankBrchID()) {
        optionals.set(8);
      }
      if (struct.isSetBankAccount()) {
        optionals.set(9);
      }
      if (struct.isSetCertCode()) {
        optionals.set(10);
      }
      if (struct.isSetCurrencyCode()) {
        optionals.set(11);
      }
      if (struct.isSetTxAmount()) {
        optionals.set(12);
      }
      if (struct.isSetFlag()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetTradeDate()) {
        oprot.writeString(struct.tradeDate);
      }
      if (struct.isSetTradeTime()) {
        oprot.writeString(struct.tradeTime);
      }
      if (struct.isSetTradeCode()) {
        oprot.writeString(struct.tradeCode);
      }
      if (struct.isSetFutureSerial()) {
        oprot.writeI32(struct.futureSerial);
      }
      if (struct.isSetFutureID()) {
        oprot.writeString(struct.futureID);
      }
      if (struct.isSetFutureAccount()) {
        oprot.writeString(struct.futureAccount);
      }
      if (struct.isSetBankSerial()) {
        oprot.writeI32(struct.bankSerial);
      }
      if (struct.isSetBankID()) {
        oprot.writeString(struct.bankID);
      }
      if (struct.isSetBankBrchID()) {
        oprot.writeString(struct.bankBrchID);
      }
      if (struct.isSetBankAccount()) {
        oprot.writeString(struct.bankAccount);
      }
      if (struct.isSetCertCode()) {
        oprot.writeString(struct.certCode);
      }
      if (struct.isSetCurrencyCode()) {
        oprot.writeString(struct.currencyCode);
      }
      if (struct.isSetTxAmount()) {
        oprot.writeDouble(struct.txAmount);
      }
      if (struct.isSetFlag()) {
        oprot.writeString(struct.flag);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcTransferQryDetailRspField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.tradeDate = iprot.readString();
        struct.setTradeDateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tradeTime = iprot.readString();
        struct.setTradeTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tradeCode = iprot.readString();
        struct.setTradeCodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.futureSerial = iprot.readI32();
        struct.setFutureSerialIsSet(true);
      }
      if (incoming.get(4)) {
        struct.futureID = iprot.readString();
        struct.setFutureIDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.futureAccount = iprot.readString();
        struct.setFutureAccountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.bankSerial = iprot.readI32();
        struct.setBankSerialIsSet(true);
      }
      if (incoming.get(7)) {
        struct.bankID = iprot.readString();
        struct.setBankIDIsSet(true);
      }
      if (incoming.get(8)) {
        struct.bankBrchID = iprot.readString();
        struct.setBankBrchIDIsSet(true);
      }
      if (incoming.get(9)) {
        struct.bankAccount = iprot.readString();
        struct.setBankAccountIsSet(true);
      }
      if (incoming.get(10)) {
        struct.certCode = iprot.readString();
        struct.setCertCodeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.currencyCode = iprot.readString();
        struct.setCurrencyCodeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.txAmount = iprot.readDouble();
        struct.setTxAmountIsSet(true);
      }
      if (incoming.get(13)) {
        struct.flag = iprot.readString();
        struct.setFlagIsSet(true);
      }
    }
  }

}

