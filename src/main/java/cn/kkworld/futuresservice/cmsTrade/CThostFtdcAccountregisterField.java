/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcAccountregisterField implements org.apache.thrift.TBase<CThostFtdcAccountregisterField, CThostFtdcAccountregisterField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcAccountregisterField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcAccountregisterField");

  private static final org.apache.thrift.protocol.TField TRADE_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeDay", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BANK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BANK_BRANCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankBranchID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BANK_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("bankAccount", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField BROKER_BRANCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerBranchID", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountID", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ID_CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("idCardType", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField IDENTIFIED_CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("identifiedCardNo", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CUSTOMER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("customerName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CURRENCY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("currencyID", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField OPEN_OR_DESTROY_FIELD_DESC = new org.apache.thrift.protocol.TField("openOrDestroy", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField REG_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("regDate", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField OUT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("outDate", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField T_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tID", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField CUST_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("custType", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField BANK_ACC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankAccType", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcAccountregisterFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcAccountregisterFieldTupleSchemeFactory());
  }

  public String tradeDay; // required
  public String bankID; // required
  public String bankBranchID; // required
  public String bankAccount; // required
  public String brokerID; // required
  public String brokerBranchID; // required
  public String accountID; // required
  public String idCardType; // required
  public String identifiedCardNo; // required
  public String customerName; // required
  public String currencyID; // required
  public String openOrDestroy; // required
  public String regDate; // required
  public String outDate; // required
  public int tID; // required
  public String custType; // required
  public String bankAccType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRADE_DAY((short)1, "tradeDay"),
    BANK_ID((short)2, "bankID"),
    BANK_BRANCH_ID((short)3, "bankBranchID"),
    BANK_ACCOUNT((short)4, "bankAccount"),
    BROKER_ID((short)5, "brokerID"),
    BROKER_BRANCH_ID((short)6, "brokerBranchID"),
    ACCOUNT_ID((short)7, "accountID"),
    ID_CARD_TYPE((short)8, "idCardType"),
    IDENTIFIED_CARD_NO((short)9, "identifiedCardNo"),
    CUSTOMER_NAME((short)10, "customerName"),
    CURRENCY_ID((short)11, "currencyID"),
    OPEN_OR_DESTROY((short)12, "openOrDestroy"),
    REG_DATE((short)13, "regDate"),
    OUT_DATE((short)14, "outDate"),
    T_ID((short)15, "tID"),
    CUST_TYPE((short)16, "custType"),
    BANK_ACC_TYPE((short)17, "bankAccType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRADE_DAY
          return TRADE_DAY;
        case 2: // BANK_ID
          return BANK_ID;
        case 3: // BANK_BRANCH_ID
          return BANK_BRANCH_ID;
        case 4: // BANK_ACCOUNT
          return BANK_ACCOUNT;
        case 5: // BROKER_ID
          return BROKER_ID;
        case 6: // BROKER_BRANCH_ID
          return BROKER_BRANCH_ID;
        case 7: // ACCOUNT_ID
          return ACCOUNT_ID;
        case 8: // ID_CARD_TYPE
          return ID_CARD_TYPE;
        case 9: // IDENTIFIED_CARD_NO
          return IDENTIFIED_CARD_NO;
        case 10: // CUSTOMER_NAME
          return CUSTOMER_NAME;
        case 11: // CURRENCY_ID
          return CURRENCY_ID;
        case 12: // OPEN_OR_DESTROY
          return OPEN_OR_DESTROY;
        case 13: // REG_DATE
          return REG_DATE;
        case 14: // OUT_DATE
          return OUT_DATE;
        case 15: // T_ID
          return T_ID;
        case 16: // CUST_TYPE
          return CUST_TYPE;
        case 17: // BANK_ACC_TYPE
          return BANK_ACC_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRADE_DAY, new org.apache.thrift.meta_data.FieldMetaData("tradeDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeDateType")));
    tmpMap.put(_Fields.BANK_ID, new org.apache.thrift.meta_data.FieldMetaData("bankID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankIDType")));
    tmpMap.put(_Fields.BANK_BRANCH_ID, new org.apache.thrift.meta_data.FieldMetaData("bankBranchID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankBrchIDType")));
    tmpMap.put(_Fields.BANK_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("bankAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankAccountType")));
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.BROKER_BRANCH_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerBranchID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcFutureBranchIDType")));
    tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcAccountIDType")));
    tmpMap.put(_Fields.ID_CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("idCardType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcIdCardTypeType")));
    tmpMap.put(_Fields.IDENTIFIED_CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("identifiedCardNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcIdentifiedCardNoType")));
    tmpMap.put(_Fields.CUSTOMER_NAME, new org.apache.thrift.meta_data.FieldMetaData("customerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcIndividualNameType")));
    tmpMap.put(_Fields.CURRENCY_ID, new org.apache.thrift.meta_data.FieldMetaData("currencyID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcCurrencyIDType")));
    tmpMap.put(_Fields.OPEN_OR_DESTROY, new org.apache.thrift.meta_data.FieldMetaData("openOrDestroy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOpenOrDestroyType")));
    tmpMap.put(_Fields.REG_DATE, new org.apache.thrift.meta_data.FieldMetaData("regDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeDateType")));
    tmpMap.put(_Fields.OUT_DATE, new org.apache.thrift.meta_data.FieldMetaData("outDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTradeDateType")));
    tmpMap.put(_Fields.T_ID, new org.apache.thrift.meta_data.FieldMetaData("tID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcTIDType")));
    tmpMap.put(_Fields.CUST_TYPE, new org.apache.thrift.meta_data.FieldMetaData("custType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcCustTypeType")));
    tmpMap.put(_Fields.BANK_ACC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bankAccType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBankAccTypeType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcAccountregisterField.class, metaDataMap);
  }

  public CThostFtdcAccountregisterField() {
  }

  public CThostFtdcAccountregisterField(
    String tradeDay,
    String bankID,
    String bankBranchID,
    String bankAccount,
    String brokerID,
    String brokerBranchID,
    String accountID,
    String idCardType,
    String identifiedCardNo,
    String customerName,
    String currencyID,
    String openOrDestroy,
    String regDate,
    String outDate,
    int tID,
    String custType,
    String bankAccType)
  {
    this();
    this.tradeDay = tradeDay;
    this.bankID = bankID;
    this.bankBranchID = bankBranchID;
    this.bankAccount = bankAccount;
    this.brokerID = brokerID;
    this.brokerBranchID = brokerBranchID;
    this.accountID = accountID;
    this.idCardType = idCardType;
    this.identifiedCardNo = identifiedCardNo;
    this.customerName = customerName;
    this.currencyID = currencyID;
    this.openOrDestroy = openOrDestroy;
    this.regDate = regDate;
    this.outDate = outDate;
    this.tID = tID;
    setTIDIsSet(true);
    this.custType = custType;
    this.bankAccType = bankAccType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcAccountregisterField(CThostFtdcAccountregisterField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTradeDay()) {
      this.tradeDay = other.tradeDay;
    }
    if (other.isSetBankID()) {
      this.bankID = other.bankID;
    }
    if (other.isSetBankBranchID()) {
      this.bankBranchID = other.bankBranchID;
    }
    if (other.isSetBankAccount()) {
      this.bankAccount = other.bankAccount;
    }
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetBrokerBranchID()) {
      this.brokerBranchID = other.brokerBranchID;
    }
    if (other.isSetAccountID()) {
      this.accountID = other.accountID;
    }
    if (other.isSetIdCardType()) {
      this.idCardType = other.idCardType;
    }
    if (other.isSetIdentifiedCardNo()) {
      this.identifiedCardNo = other.identifiedCardNo;
    }
    if (other.isSetCustomerName()) {
      this.customerName = other.customerName;
    }
    if (other.isSetCurrencyID()) {
      this.currencyID = other.currencyID;
    }
    if (other.isSetOpenOrDestroy()) {
      this.openOrDestroy = other.openOrDestroy;
    }
    if (other.isSetRegDate()) {
      this.regDate = other.regDate;
    }
    if (other.isSetOutDate()) {
      this.outDate = other.outDate;
    }
    this.tID = other.tID;
    if (other.isSetCustType()) {
      this.custType = other.custType;
    }
    if (other.isSetBankAccType()) {
      this.bankAccType = other.bankAccType;
    }
  }

  public CThostFtdcAccountregisterField deepCopy() {
    return new CThostFtdcAccountregisterField(this);
  }

  @Override
  public void clear() {
    this.tradeDay = null;
    this.bankID = null;
    this.bankBranchID = null;
    this.bankAccount = null;
    this.brokerID = null;
    this.brokerBranchID = null;
    this.accountID = null;
    this.idCardType = null;
    this.identifiedCardNo = null;
    this.customerName = null;
    this.currencyID = null;
    this.openOrDestroy = null;
    this.regDate = null;
    this.outDate = null;
    setTIDIsSet(false);
    this.tID = 0;
    this.custType = null;
    this.bankAccType = null;
  }

  public String getTradeDay() {
    return this.tradeDay;
  }

  public CThostFtdcAccountregisterField setTradeDay(String tradeDay) {
    this.tradeDay = tradeDay;
    return this;
  }

  public void unsetTradeDay() {
    this.tradeDay = null;
  }

  /** Returns true if field tradeDay is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeDay() {
    return this.tradeDay != null;
  }

  public void setTradeDayIsSet(boolean value) {
    if (!value) {
      this.tradeDay = null;
    }
  }

  public String getBankID() {
    return this.bankID;
  }

  public CThostFtdcAccountregisterField setBankID(String bankID) {
    this.bankID = bankID;
    return this;
  }

  public void unsetBankID() {
    this.bankID = null;
  }

  /** Returns true if field bankID is set (has been assigned a value) and false otherwise */
  public boolean isSetBankID() {
    return this.bankID != null;
  }

  public void setBankIDIsSet(boolean value) {
    if (!value) {
      this.bankID = null;
    }
  }

  public String getBankBranchID() {
    return this.bankBranchID;
  }

  public CThostFtdcAccountregisterField setBankBranchID(String bankBranchID) {
    this.bankBranchID = bankBranchID;
    return this;
  }

  public void unsetBankBranchID() {
    this.bankBranchID = null;
  }

  /** Returns true if field bankBranchID is set (has been assigned a value) and false otherwise */
  public boolean isSetBankBranchID() {
    return this.bankBranchID != null;
  }

  public void setBankBranchIDIsSet(boolean value) {
    if (!value) {
      this.bankBranchID = null;
    }
  }

  public String getBankAccount() {
    return this.bankAccount;
  }

  public CThostFtdcAccountregisterField setBankAccount(String bankAccount) {
    this.bankAccount = bankAccount;
    return this;
  }

  public void unsetBankAccount() {
    this.bankAccount = null;
  }

  /** Returns true if field bankAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetBankAccount() {
    return this.bankAccount != null;
  }

  public void setBankAccountIsSet(boolean value) {
    if (!value) {
      this.bankAccount = null;
    }
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcAccountregisterField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getBrokerBranchID() {
    return this.brokerBranchID;
  }

  public CThostFtdcAccountregisterField setBrokerBranchID(String brokerBranchID) {
    this.brokerBranchID = brokerBranchID;
    return this;
  }

  public void unsetBrokerBranchID() {
    this.brokerBranchID = null;
  }

  /** Returns true if field brokerBranchID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerBranchID() {
    return this.brokerBranchID != null;
  }

  public void setBrokerBranchIDIsSet(boolean value) {
    if (!value) {
      this.brokerBranchID = null;
    }
  }

  public String getAccountID() {
    return this.accountID;
  }

  public CThostFtdcAccountregisterField setAccountID(String accountID) {
    this.accountID = accountID;
    return this;
  }

  public void unsetAccountID() {
    this.accountID = null;
  }

  /** Returns true if field accountID is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountID() {
    return this.accountID != null;
  }

  public void setAccountIDIsSet(boolean value) {
    if (!value) {
      this.accountID = null;
    }
  }

  public String getIdCardType() {
    return this.idCardType;
  }

  public CThostFtdcAccountregisterField setIdCardType(String idCardType) {
    this.idCardType = idCardType;
    return this;
  }

  public void unsetIdCardType() {
    this.idCardType = null;
  }

  /** Returns true if field idCardType is set (has been assigned a value) and false otherwise */
  public boolean isSetIdCardType() {
    return this.idCardType != null;
  }

  public void setIdCardTypeIsSet(boolean value) {
    if (!value) {
      this.idCardType = null;
    }
  }

  public String getIdentifiedCardNo() {
    return this.identifiedCardNo;
  }

  public CThostFtdcAccountregisterField setIdentifiedCardNo(String identifiedCardNo) {
    this.identifiedCardNo = identifiedCardNo;
    return this;
  }

  public void unsetIdentifiedCardNo() {
    this.identifiedCardNo = null;
  }

  /** Returns true if field identifiedCardNo is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentifiedCardNo() {
    return this.identifiedCardNo != null;
  }

  public void setIdentifiedCardNoIsSet(boolean value) {
    if (!value) {
      this.identifiedCardNo = null;
    }
  }

  public String getCustomerName() {
    return this.customerName;
  }

  public CThostFtdcAccountregisterField setCustomerName(String customerName) {
    this.customerName = customerName;
    return this;
  }

  public void unsetCustomerName() {
    this.customerName = null;
  }

  /** Returns true if field customerName is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomerName() {
    return this.customerName != null;
  }

  public void setCustomerNameIsSet(boolean value) {
    if (!value) {
      this.customerName = null;
    }
  }

  public String getCurrencyID() {
    return this.currencyID;
  }

  public CThostFtdcAccountregisterField setCurrencyID(String currencyID) {
    this.currencyID = currencyID;
    return this;
  }

  public void unsetCurrencyID() {
    this.currencyID = null;
  }

  /** Returns true if field currencyID is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencyID() {
    return this.currencyID != null;
  }

  public void setCurrencyIDIsSet(boolean value) {
    if (!value) {
      this.currencyID = null;
    }
  }

  public String getOpenOrDestroy() {
    return this.openOrDestroy;
  }

  public CThostFtdcAccountregisterField setOpenOrDestroy(String openOrDestroy) {
    this.openOrDestroy = openOrDestroy;
    return this;
  }

  public void unsetOpenOrDestroy() {
    this.openOrDestroy = null;
  }

  /** Returns true if field openOrDestroy is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenOrDestroy() {
    return this.openOrDestroy != null;
  }

  public void setOpenOrDestroyIsSet(boolean value) {
    if (!value) {
      this.openOrDestroy = null;
    }
  }

  public String getRegDate() {
    return this.regDate;
  }

  public CThostFtdcAccountregisterField setRegDate(String regDate) {
    this.regDate = regDate;
    return this;
  }

  public void unsetRegDate() {
    this.regDate = null;
  }

  /** Returns true if field regDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRegDate() {
    return this.regDate != null;
  }

  public void setRegDateIsSet(boolean value) {
    if (!value) {
      this.regDate = null;
    }
  }

  public String getOutDate() {
    return this.outDate;
  }

  public CThostFtdcAccountregisterField setOutDate(String outDate) {
    this.outDate = outDate;
    return this;
  }

  public void unsetOutDate() {
    this.outDate = null;
  }

  /** Returns true if field outDate is set (has been assigned a value) and false otherwise */
  public boolean isSetOutDate() {
    return this.outDate != null;
  }

  public void setOutDateIsSet(boolean value) {
    if (!value) {
      this.outDate = null;
    }
  }

  public int getTID() {
    return this.tID;
  }

  public CThostFtdcAccountregisterField setTID(int tID) {
    this.tID = tID;
    setTIDIsSet(true);
    return this;
  }

  public void unsetTID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TID_ISSET_ID);
  }

  /** Returns true if field tID is set (has been assigned a value) and false otherwise */
  public boolean isSetTID() {
    return EncodingUtils.testBit(__isset_bitfield, __TID_ISSET_ID);
  }

  public void setTIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TID_ISSET_ID, value);
  }

  public String getCustType() {
    return this.custType;
  }

  public CThostFtdcAccountregisterField setCustType(String custType) {
    this.custType = custType;
    return this;
  }

  public void unsetCustType() {
    this.custType = null;
  }

  /** Returns true if field custType is set (has been assigned a value) and false otherwise */
  public boolean isSetCustType() {
    return this.custType != null;
  }

  public void setCustTypeIsSet(boolean value) {
    if (!value) {
      this.custType = null;
    }
  }

  public String getBankAccType() {
    return this.bankAccType;
  }

  public CThostFtdcAccountregisterField setBankAccType(String bankAccType) {
    this.bankAccType = bankAccType;
    return this;
  }

  public void unsetBankAccType() {
    this.bankAccType = null;
  }

  /** Returns true if field bankAccType is set (has been assigned a value) and false otherwise */
  public boolean isSetBankAccType() {
    return this.bankAccType != null;
  }

  public void setBankAccTypeIsSet(boolean value) {
    if (!value) {
      this.bankAccType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRADE_DAY:
      if (value == null) {
        unsetTradeDay();
      } else {
        setTradeDay((String)value);
      }
      break;

    case BANK_ID:
      if (value == null) {
        unsetBankID();
      } else {
        setBankID((String)value);
      }
      break;

    case BANK_BRANCH_ID:
      if (value == null) {
        unsetBankBranchID();
      } else {
        setBankBranchID((String)value);
      }
      break;

    case BANK_ACCOUNT:
      if (value == null) {
        unsetBankAccount();
      } else {
        setBankAccount((String)value);
      }
      break;

    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case BROKER_BRANCH_ID:
      if (value == null) {
        unsetBrokerBranchID();
      } else {
        setBrokerBranchID((String)value);
      }
      break;

    case ACCOUNT_ID:
      if (value == null) {
        unsetAccountID();
      } else {
        setAccountID((String)value);
      }
      break;

    case ID_CARD_TYPE:
      if (value == null) {
        unsetIdCardType();
      } else {
        setIdCardType((String)value);
      }
      break;

    case IDENTIFIED_CARD_NO:
      if (value == null) {
        unsetIdentifiedCardNo();
      } else {
        setIdentifiedCardNo((String)value);
      }
      break;

    case CUSTOMER_NAME:
      if (value == null) {
        unsetCustomerName();
      } else {
        setCustomerName((String)value);
      }
      break;

    case CURRENCY_ID:
      if (value == null) {
        unsetCurrencyID();
      } else {
        setCurrencyID((String)value);
      }
      break;

    case OPEN_OR_DESTROY:
      if (value == null) {
        unsetOpenOrDestroy();
      } else {
        setOpenOrDestroy((String)value);
      }
      break;

    case REG_DATE:
      if (value == null) {
        unsetRegDate();
      } else {
        setRegDate((String)value);
      }
      break;

    case OUT_DATE:
      if (value == null) {
        unsetOutDate();
      } else {
        setOutDate((String)value);
      }
      break;

    case T_ID:
      if (value == null) {
        unsetTID();
      } else {
        setTID((Integer)value);
      }
      break;

    case CUST_TYPE:
      if (value == null) {
        unsetCustType();
      } else {
        setCustType((String)value);
      }
      break;

    case BANK_ACC_TYPE:
      if (value == null) {
        unsetBankAccType();
      } else {
        setBankAccType((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRADE_DAY:
      return getTradeDay();

    case BANK_ID:
      return getBankID();

    case BANK_BRANCH_ID:
      return getBankBranchID();

    case BANK_ACCOUNT:
      return getBankAccount();

    case BROKER_ID:
      return getBrokerID();

    case BROKER_BRANCH_ID:
      return getBrokerBranchID();

    case ACCOUNT_ID:
      return getAccountID();

    case ID_CARD_TYPE:
      return getIdCardType();

    case IDENTIFIED_CARD_NO:
      return getIdentifiedCardNo();

    case CUSTOMER_NAME:
      return getCustomerName();

    case CURRENCY_ID:
      return getCurrencyID();

    case OPEN_OR_DESTROY:
      return getOpenOrDestroy();

    case REG_DATE:
      return getRegDate();

    case OUT_DATE:
      return getOutDate();

    case T_ID:
      return Integer.valueOf(getTID());

    case CUST_TYPE:
      return getCustType();

    case BANK_ACC_TYPE:
      return getBankAccType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRADE_DAY:
      return isSetTradeDay();
    case BANK_ID:
      return isSetBankID();
    case BANK_BRANCH_ID:
      return isSetBankBranchID();
    case BANK_ACCOUNT:
      return isSetBankAccount();
    case BROKER_ID:
      return isSetBrokerID();
    case BROKER_BRANCH_ID:
      return isSetBrokerBranchID();
    case ACCOUNT_ID:
      return isSetAccountID();
    case ID_CARD_TYPE:
      return isSetIdCardType();
    case IDENTIFIED_CARD_NO:
      return isSetIdentifiedCardNo();
    case CUSTOMER_NAME:
      return isSetCustomerName();
    case CURRENCY_ID:
      return isSetCurrencyID();
    case OPEN_OR_DESTROY:
      return isSetOpenOrDestroy();
    case REG_DATE:
      return isSetRegDate();
    case OUT_DATE:
      return isSetOutDate();
    case T_ID:
      return isSetTID();
    case CUST_TYPE:
      return isSetCustType();
    case BANK_ACC_TYPE:
      return isSetBankAccType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcAccountregisterField)
      return this.equals((CThostFtdcAccountregisterField)that);
    return false;
  }

  public boolean equals(CThostFtdcAccountregisterField that) {
    if (that == null)
      return false;

    boolean this_present_tradeDay = true && this.isSetTradeDay();
    boolean that_present_tradeDay = true && that.isSetTradeDay();
    if (this_present_tradeDay || that_present_tradeDay) {
      if (!(this_present_tradeDay && that_present_tradeDay))
        return false;
      if (!this.tradeDay.equals(that.tradeDay))
        return false;
    }

    boolean this_present_bankID = true && this.isSetBankID();
    boolean that_present_bankID = true && that.isSetBankID();
    if (this_present_bankID || that_present_bankID) {
      if (!(this_present_bankID && that_present_bankID))
        return false;
      if (!this.bankID.equals(that.bankID))
        return false;
    }

    boolean this_present_bankBranchID = true && this.isSetBankBranchID();
    boolean that_present_bankBranchID = true && that.isSetBankBranchID();
    if (this_present_bankBranchID || that_present_bankBranchID) {
      if (!(this_present_bankBranchID && that_present_bankBranchID))
        return false;
      if (!this.bankBranchID.equals(that.bankBranchID))
        return false;
    }

    boolean this_present_bankAccount = true && this.isSetBankAccount();
    boolean that_present_bankAccount = true && that.isSetBankAccount();
    if (this_present_bankAccount || that_present_bankAccount) {
      if (!(this_present_bankAccount && that_present_bankAccount))
        return false;
      if (!this.bankAccount.equals(that.bankAccount))
        return false;
    }

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_brokerBranchID = true && this.isSetBrokerBranchID();
    boolean that_present_brokerBranchID = true && that.isSetBrokerBranchID();
    if (this_present_brokerBranchID || that_present_brokerBranchID) {
      if (!(this_present_brokerBranchID && that_present_brokerBranchID))
        return false;
      if (!this.brokerBranchID.equals(that.brokerBranchID))
        return false;
    }

    boolean this_present_accountID = true && this.isSetAccountID();
    boolean that_present_accountID = true && that.isSetAccountID();
    if (this_present_accountID || that_present_accountID) {
      if (!(this_present_accountID && that_present_accountID))
        return false;
      if (!this.accountID.equals(that.accountID))
        return false;
    }

    boolean this_present_idCardType = true && this.isSetIdCardType();
    boolean that_present_idCardType = true && that.isSetIdCardType();
    if (this_present_idCardType || that_present_idCardType) {
      if (!(this_present_idCardType && that_present_idCardType))
        return false;
      if (!this.idCardType.equals(that.idCardType))
        return false;
    }

    boolean this_present_identifiedCardNo = true && this.isSetIdentifiedCardNo();
    boolean that_present_identifiedCardNo = true && that.isSetIdentifiedCardNo();
    if (this_present_identifiedCardNo || that_present_identifiedCardNo) {
      if (!(this_present_identifiedCardNo && that_present_identifiedCardNo))
        return false;
      if (!this.identifiedCardNo.equals(that.identifiedCardNo))
        return false;
    }

    boolean this_present_customerName = true && this.isSetCustomerName();
    boolean that_present_customerName = true && that.isSetCustomerName();
    if (this_present_customerName || that_present_customerName) {
      if (!(this_present_customerName && that_present_customerName))
        return false;
      if (!this.customerName.equals(that.customerName))
        return false;
    }

    boolean this_present_currencyID = true && this.isSetCurrencyID();
    boolean that_present_currencyID = true && that.isSetCurrencyID();
    if (this_present_currencyID || that_present_currencyID) {
      if (!(this_present_currencyID && that_present_currencyID))
        return false;
      if (!this.currencyID.equals(that.currencyID))
        return false;
    }

    boolean this_present_openOrDestroy = true && this.isSetOpenOrDestroy();
    boolean that_present_openOrDestroy = true && that.isSetOpenOrDestroy();
    if (this_present_openOrDestroy || that_present_openOrDestroy) {
      if (!(this_present_openOrDestroy && that_present_openOrDestroy))
        return false;
      if (!this.openOrDestroy.equals(that.openOrDestroy))
        return false;
    }

    boolean this_present_regDate = true && this.isSetRegDate();
    boolean that_present_regDate = true && that.isSetRegDate();
    if (this_present_regDate || that_present_regDate) {
      if (!(this_present_regDate && that_present_regDate))
        return false;
      if (!this.regDate.equals(that.regDate))
        return false;
    }

    boolean this_present_outDate = true && this.isSetOutDate();
    boolean that_present_outDate = true && that.isSetOutDate();
    if (this_present_outDate || that_present_outDate) {
      if (!(this_present_outDate && that_present_outDate))
        return false;
      if (!this.outDate.equals(that.outDate))
        return false;
    }

    boolean this_present_tID = true;
    boolean that_present_tID = true;
    if (this_present_tID || that_present_tID) {
      if (!(this_present_tID && that_present_tID))
        return false;
      if (this.tID != that.tID)
        return false;
    }

    boolean this_present_custType = true && this.isSetCustType();
    boolean that_present_custType = true && that.isSetCustType();
    if (this_present_custType || that_present_custType) {
      if (!(this_present_custType && that_present_custType))
        return false;
      if (!this.custType.equals(that.custType))
        return false;
    }

    boolean this_present_bankAccType = true && this.isSetBankAccType();
    boolean that_present_bankAccType = true && that.isSetBankAccType();
    if (this_present_bankAccType || that_present_bankAccType) {
      if (!(this_present_bankAccType && that_present_bankAccType))
        return false;
      if (!this.bankAccType.equals(that.bankAccType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcAccountregisterField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTradeDay()).compareTo(other.isSetTradeDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeDay, other.tradeDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankID()).compareTo(other.isSetBankID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankID, other.bankID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankBranchID()).compareTo(other.isSetBankBranchID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankBranchID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankBranchID, other.bankBranchID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankAccount()).compareTo(other.isSetBankAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankAccount, other.bankAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerBranchID()).compareTo(other.isSetBrokerBranchID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerBranchID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerBranchID, other.brokerBranchID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountID()).compareTo(other.isSetAccountID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountID, other.accountID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdCardType()).compareTo(other.isSetIdCardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdCardType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idCardType, other.idCardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentifiedCardNo()).compareTo(other.isSetIdentifiedCardNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentifiedCardNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identifiedCardNo, other.identifiedCardNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomerName()).compareTo(other.isSetCustomerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customerName, other.customerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrencyID()).compareTo(other.isSetCurrencyID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencyID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currencyID, other.currencyID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenOrDestroy()).compareTo(other.isSetOpenOrDestroy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenOrDestroy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openOrDestroy, other.openOrDestroy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegDate()).compareTo(other.isSetRegDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regDate, other.regDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutDate()).compareTo(other.isSetOutDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outDate, other.outDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTID()).compareTo(other.isSetTID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tID, other.tID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustType()).compareTo(other.isSetCustType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.custType, other.custType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankAccType()).compareTo(other.isSetBankAccType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankAccType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankAccType, other.bankAccType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcAccountregisterField(");
    boolean first = true;

    sb.append("tradeDay:");
    if (this.tradeDay == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeDay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankID:");
    if (this.bankID == null) {
      sb.append("null");
    } else {
      sb.append(this.bankID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankBranchID:");
    if (this.bankBranchID == null) {
      sb.append("null");
    } else {
      sb.append(this.bankBranchID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankAccount:");
    if (this.bankAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.bankAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerBranchID:");
    if (this.brokerBranchID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerBranchID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountID:");
    if (this.accountID == null) {
      sb.append("null");
    } else {
      sb.append(this.accountID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("idCardType:");
    if (this.idCardType == null) {
      sb.append("null");
    } else {
      sb.append(this.idCardType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identifiedCardNo:");
    if (this.identifiedCardNo == null) {
      sb.append("null");
    } else {
      sb.append(this.identifiedCardNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("customerName:");
    if (this.customerName == null) {
      sb.append("null");
    } else {
      sb.append(this.customerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currencyID:");
    if (this.currencyID == null) {
      sb.append("null");
    } else {
      sb.append(this.currencyID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("openOrDestroy:");
    if (this.openOrDestroy == null) {
      sb.append("null");
    } else {
      sb.append(this.openOrDestroy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regDate:");
    if (this.regDate == null) {
      sb.append("null");
    } else {
      sb.append(this.regDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outDate:");
    if (this.outDate == null) {
      sb.append("null");
    } else {
      sb.append(this.outDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tID:");
    sb.append(this.tID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("custType:");
    if (this.custType == null) {
      sb.append("null");
    } else {
      sb.append(this.custType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankAccType:");
    if (this.bankAccType == null) {
      sb.append("null");
    } else {
      sb.append(this.bankAccType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcAccountregisterFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcAccountregisterFieldStandardScheme getScheme() {
      return new CThostFtdcAccountregisterFieldStandardScheme();
    }
  }

  private static class CThostFtdcAccountregisterFieldStandardScheme extends StandardScheme<CThostFtdcAccountregisterField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcAccountregisterField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRADE_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeDay = iprot.readString();
              struct.setTradeDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BANK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankID = iprot.readString();
              struct.setBankIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BANK_BRANCH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankBranchID = iprot.readString();
              struct.setBankBranchIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BANK_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankAccount = iprot.readString();
              struct.setBankAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BROKER_BRANCH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerBranchID = iprot.readString();
              struct.setBrokerBranchIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountID = iprot.readString();
              struct.setAccountIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ID_CARD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.idCardType = iprot.readString();
              struct.setIdCardTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IDENTIFIED_CARD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identifiedCardNo = iprot.readString();
              struct.setIdentifiedCardNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CUSTOMER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.customerName = iprot.readString();
              struct.setCustomerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CURRENCY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currencyID = iprot.readString();
              struct.setCurrencyIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // OPEN_OR_DESTROY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.openOrDestroy = iprot.readString();
              struct.setOpenOrDestroyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REG_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regDate = iprot.readString();
              struct.setRegDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // OUT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outDate = iprot.readString();
              struct.setOutDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // T_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tID = iprot.readI32();
              struct.setTIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CUST_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.custType = iprot.readString();
              struct.setCustTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // BANK_ACC_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankAccType = iprot.readString();
              struct.setBankAccTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcAccountregisterField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tradeDay != null) {
        oprot.writeFieldBegin(TRADE_DAY_FIELD_DESC);
        oprot.writeString(struct.tradeDay);
        oprot.writeFieldEnd();
      }
      if (struct.bankID != null) {
        oprot.writeFieldBegin(BANK_ID_FIELD_DESC);
        oprot.writeString(struct.bankID);
        oprot.writeFieldEnd();
      }
      if (struct.bankBranchID != null) {
        oprot.writeFieldBegin(BANK_BRANCH_ID_FIELD_DESC);
        oprot.writeString(struct.bankBranchID);
        oprot.writeFieldEnd();
      }
      if (struct.bankAccount != null) {
        oprot.writeFieldBegin(BANK_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.bankAccount);
        oprot.writeFieldEnd();
      }
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.brokerBranchID != null) {
        oprot.writeFieldBegin(BROKER_BRANCH_ID_FIELD_DESC);
        oprot.writeString(struct.brokerBranchID);
        oprot.writeFieldEnd();
      }
      if (struct.accountID != null) {
        oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
        oprot.writeString(struct.accountID);
        oprot.writeFieldEnd();
      }
      if (struct.idCardType != null) {
        oprot.writeFieldBegin(ID_CARD_TYPE_FIELD_DESC);
        oprot.writeString(struct.idCardType);
        oprot.writeFieldEnd();
      }
      if (struct.identifiedCardNo != null) {
        oprot.writeFieldBegin(IDENTIFIED_CARD_NO_FIELD_DESC);
        oprot.writeString(struct.identifiedCardNo);
        oprot.writeFieldEnd();
      }
      if (struct.customerName != null) {
        oprot.writeFieldBegin(CUSTOMER_NAME_FIELD_DESC);
        oprot.writeString(struct.customerName);
        oprot.writeFieldEnd();
      }
      if (struct.currencyID != null) {
        oprot.writeFieldBegin(CURRENCY_ID_FIELD_DESC);
        oprot.writeString(struct.currencyID);
        oprot.writeFieldEnd();
      }
      if (struct.openOrDestroy != null) {
        oprot.writeFieldBegin(OPEN_OR_DESTROY_FIELD_DESC);
        oprot.writeString(struct.openOrDestroy);
        oprot.writeFieldEnd();
      }
      if (struct.regDate != null) {
        oprot.writeFieldBegin(REG_DATE_FIELD_DESC);
        oprot.writeString(struct.regDate);
        oprot.writeFieldEnd();
      }
      if (struct.outDate != null) {
        oprot.writeFieldBegin(OUT_DATE_FIELD_DESC);
        oprot.writeString(struct.outDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(T_ID_FIELD_DESC);
      oprot.writeI32(struct.tID);
      oprot.writeFieldEnd();
      if (struct.custType != null) {
        oprot.writeFieldBegin(CUST_TYPE_FIELD_DESC);
        oprot.writeString(struct.custType);
        oprot.writeFieldEnd();
      }
      if (struct.bankAccType != null) {
        oprot.writeFieldBegin(BANK_ACC_TYPE_FIELD_DESC);
        oprot.writeString(struct.bankAccType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcAccountregisterFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcAccountregisterFieldTupleScheme getScheme() {
      return new CThostFtdcAccountregisterFieldTupleScheme();
    }
  }

  private static class CThostFtdcAccountregisterFieldTupleScheme extends TupleScheme<CThostFtdcAccountregisterField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcAccountregisterField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTradeDay()) {
        optionals.set(0);
      }
      if (struct.isSetBankID()) {
        optionals.set(1);
      }
      if (struct.isSetBankBranchID()) {
        optionals.set(2);
      }
      if (struct.isSetBankAccount()) {
        optionals.set(3);
      }
      if (struct.isSetBrokerID()) {
        optionals.set(4);
      }
      if (struct.isSetBrokerBranchID()) {
        optionals.set(5);
      }
      if (struct.isSetAccountID()) {
        optionals.set(6);
      }
      if (struct.isSetIdCardType()) {
        optionals.set(7);
      }
      if (struct.isSetIdentifiedCardNo()) {
        optionals.set(8);
      }
      if (struct.isSetCustomerName()) {
        optionals.set(9);
      }
      if (struct.isSetCurrencyID()) {
        optionals.set(10);
      }
      if (struct.isSetOpenOrDestroy()) {
        optionals.set(11);
      }
      if (struct.isSetRegDate()) {
        optionals.set(12);
      }
      if (struct.isSetOutDate()) {
        optionals.set(13);
      }
      if (struct.isSetTID()) {
        optionals.set(14);
      }
      if (struct.isSetCustType()) {
        optionals.set(15);
      }
      if (struct.isSetBankAccType()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetTradeDay()) {
        oprot.writeString(struct.tradeDay);
      }
      if (struct.isSetBankID()) {
        oprot.writeString(struct.bankID);
      }
      if (struct.isSetBankBranchID()) {
        oprot.writeString(struct.bankBranchID);
      }
      if (struct.isSetBankAccount()) {
        oprot.writeString(struct.bankAccount);
      }
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetBrokerBranchID()) {
        oprot.writeString(struct.brokerBranchID);
      }
      if (struct.isSetAccountID()) {
        oprot.writeString(struct.accountID);
      }
      if (struct.isSetIdCardType()) {
        oprot.writeString(struct.idCardType);
      }
      if (struct.isSetIdentifiedCardNo()) {
        oprot.writeString(struct.identifiedCardNo);
      }
      if (struct.isSetCustomerName()) {
        oprot.writeString(struct.customerName);
      }
      if (struct.isSetCurrencyID()) {
        oprot.writeString(struct.currencyID);
      }
      if (struct.isSetOpenOrDestroy()) {
        oprot.writeString(struct.openOrDestroy);
      }
      if (struct.isSetRegDate()) {
        oprot.writeString(struct.regDate);
      }
      if (struct.isSetOutDate()) {
        oprot.writeString(struct.outDate);
      }
      if (struct.isSetTID()) {
        oprot.writeI32(struct.tID);
      }
      if (struct.isSetCustType()) {
        oprot.writeString(struct.custType);
      }
      if (struct.isSetBankAccType()) {
        oprot.writeString(struct.bankAccType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcAccountregisterField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.tradeDay = iprot.readString();
        struct.setTradeDayIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bankID = iprot.readString();
        struct.setBankIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bankBranchID = iprot.readString();
        struct.setBankBranchIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.bankAccount = iprot.readString();
        struct.setBankAccountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.brokerBranchID = iprot.readString();
        struct.setBrokerBranchIDIsSet(true);
      }
      if (incoming.get(6)) {
        struct.accountID = iprot.readString();
        struct.setAccountIDIsSet(true);
      }
      if (incoming.get(7)) {
        struct.idCardType = iprot.readString();
        struct.setIdCardTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.identifiedCardNo = iprot.readString();
        struct.setIdentifiedCardNoIsSet(true);
      }
      if (incoming.get(9)) {
        struct.customerName = iprot.readString();
        struct.setCustomerNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.currencyID = iprot.readString();
        struct.setCurrencyIDIsSet(true);
      }
      if (incoming.get(11)) {
        struct.openOrDestroy = iprot.readString();
        struct.setOpenOrDestroyIsSet(true);
      }
      if (incoming.get(12)) {
        struct.regDate = iprot.readString();
        struct.setRegDateIsSet(true);
      }
      if (incoming.get(13)) {
        struct.outDate = iprot.readString();
        struct.setOutDateIsSet(true);
      }
      if (incoming.get(14)) {
        struct.tID = iprot.readI32();
        struct.setTIDIsSet(true);
      }
      if (incoming.get(15)) {
        struct.custType = iprot.readString();
        struct.setCustTypeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.bankAccType = iprot.readString();
        struct.setBankAccTypeIsSet(true);
      }
    }
  }

}

