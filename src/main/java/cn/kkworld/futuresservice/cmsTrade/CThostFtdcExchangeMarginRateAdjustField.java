/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcExchangeMarginRateAdjustField implements org.apache.thrift.TBase<CThostFtdcExchangeMarginRateAdjustField, CThostFtdcExchangeMarginRateAdjustField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcExchangeMarginRateAdjustField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcExchangeMarginRateAdjustField");

  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INSTRUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instrumentID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField HEDGE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("hedgeFlag", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LONG_MARGIN_RATIO_BY_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("longMarginRatioByMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField LONG_MARGIN_RATIO_BY_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("longMarginRatioByVolume", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField SHORT_MARGIN_RATIO_BY_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("shortMarginRatioByMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField SHORT_MARGIN_RATIO_BY_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("shortMarginRatioByVolume", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField EXCH_LONG_MARGIN_RATIO_BY_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("exchLongMarginRatioByMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField EXCH_LONG_MARGIN_RATIO_BY_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("exchLongMarginRatioByVolume", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField EXCH_SHORT_MARGIN_RATIO_BY_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("exchShortMarginRatioByMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField EXCH_SHORT_MARGIN_RATIO_BY_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("exchShortMarginRatioByVolume", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField NO_LONG_MARGIN_RATIO_BY_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("noLongMarginRatioByMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField NO_LONG_MARGIN_RATIO_BY_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("noLongMarginRatioByVolume", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField NO_SHORT_MARGIN_RATIO_BY_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("noShortMarginRatioByMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField NO_SHORT_MARGIN_RATIO_BY_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("noShortMarginRatioByVolume", org.apache.thrift.protocol.TType.DOUBLE, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcExchangeMarginRateAdjustFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcExchangeMarginRateAdjustFieldTupleSchemeFactory());
  }

  public String brokerID; // required
  public String instrumentID; // required
  public String hedgeFlag; // required
  public double longMarginRatioByMoney; // required
  public double longMarginRatioByVolume; // required
  public double shortMarginRatioByMoney; // required
  public double shortMarginRatioByVolume; // required
  public double exchLongMarginRatioByMoney; // required
  public double exchLongMarginRatioByVolume; // required
  public double exchShortMarginRatioByMoney; // required
  public double exchShortMarginRatioByVolume; // required
  public double noLongMarginRatioByMoney; // required
  public double noLongMarginRatioByVolume; // required
  public double noShortMarginRatioByMoney; // required
  public double noShortMarginRatioByVolume; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BROKER_ID((short)1, "brokerID"),
    INSTRUMENT_ID((short)2, "instrumentID"),
    HEDGE_FLAG((short)3, "hedgeFlag"),
    LONG_MARGIN_RATIO_BY_MONEY((short)4, "longMarginRatioByMoney"),
    LONG_MARGIN_RATIO_BY_VOLUME((short)5, "longMarginRatioByVolume"),
    SHORT_MARGIN_RATIO_BY_MONEY((short)6, "shortMarginRatioByMoney"),
    SHORT_MARGIN_RATIO_BY_VOLUME((short)7, "shortMarginRatioByVolume"),
    EXCH_LONG_MARGIN_RATIO_BY_MONEY((short)8, "exchLongMarginRatioByMoney"),
    EXCH_LONG_MARGIN_RATIO_BY_VOLUME((short)9, "exchLongMarginRatioByVolume"),
    EXCH_SHORT_MARGIN_RATIO_BY_MONEY((short)10, "exchShortMarginRatioByMoney"),
    EXCH_SHORT_MARGIN_RATIO_BY_VOLUME((short)11, "exchShortMarginRatioByVolume"),
    NO_LONG_MARGIN_RATIO_BY_MONEY((short)12, "noLongMarginRatioByMoney"),
    NO_LONG_MARGIN_RATIO_BY_VOLUME((short)13, "noLongMarginRatioByVolume"),
    NO_SHORT_MARGIN_RATIO_BY_MONEY((short)14, "noShortMarginRatioByMoney"),
    NO_SHORT_MARGIN_RATIO_BY_VOLUME((short)15, "noShortMarginRatioByVolume");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BROKER_ID
          return BROKER_ID;
        case 2: // INSTRUMENT_ID
          return INSTRUMENT_ID;
        case 3: // HEDGE_FLAG
          return HEDGE_FLAG;
        case 4: // LONG_MARGIN_RATIO_BY_MONEY
          return LONG_MARGIN_RATIO_BY_MONEY;
        case 5: // LONG_MARGIN_RATIO_BY_VOLUME
          return LONG_MARGIN_RATIO_BY_VOLUME;
        case 6: // SHORT_MARGIN_RATIO_BY_MONEY
          return SHORT_MARGIN_RATIO_BY_MONEY;
        case 7: // SHORT_MARGIN_RATIO_BY_VOLUME
          return SHORT_MARGIN_RATIO_BY_VOLUME;
        case 8: // EXCH_LONG_MARGIN_RATIO_BY_MONEY
          return EXCH_LONG_MARGIN_RATIO_BY_MONEY;
        case 9: // EXCH_LONG_MARGIN_RATIO_BY_VOLUME
          return EXCH_LONG_MARGIN_RATIO_BY_VOLUME;
        case 10: // EXCH_SHORT_MARGIN_RATIO_BY_MONEY
          return EXCH_SHORT_MARGIN_RATIO_BY_MONEY;
        case 11: // EXCH_SHORT_MARGIN_RATIO_BY_VOLUME
          return EXCH_SHORT_MARGIN_RATIO_BY_VOLUME;
        case 12: // NO_LONG_MARGIN_RATIO_BY_MONEY
          return NO_LONG_MARGIN_RATIO_BY_MONEY;
        case 13: // NO_LONG_MARGIN_RATIO_BY_VOLUME
          return NO_LONG_MARGIN_RATIO_BY_VOLUME;
        case 14: // NO_SHORT_MARGIN_RATIO_BY_MONEY
          return NO_SHORT_MARGIN_RATIO_BY_MONEY;
        case 15: // NO_SHORT_MARGIN_RATIO_BY_VOLUME
          return NO_SHORT_MARGIN_RATIO_BY_VOLUME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LONGMARGINRATIOBYMONEY_ISSET_ID = 0;
  private static final int __LONGMARGINRATIOBYVOLUME_ISSET_ID = 1;
  private static final int __SHORTMARGINRATIOBYMONEY_ISSET_ID = 2;
  private static final int __SHORTMARGINRATIOBYVOLUME_ISSET_ID = 3;
  private static final int __EXCHLONGMARGINRATIOBYMONEY_ISSET_ID = 4;
  private static final int __EXCHLONGMARGINRATIOBYVOLUME_ISSET_ID = 5;
  private static final int __EXCHSHORTMARGINRATIOBYMONEY_ISSET_ID = 6;
  private static final int __EXCHSHORTMARGINRATIOBYVOLUME_ISSET_ID = 7;
  private static final int __NOLONGMARGINRATIOBYMONEY_ISSET_ID = 8;
  private static final int __NOLONGMARGINRATIOBYVOLUME_ISSET_ID = 9;
  private static final int __NOSHORTMARGINRATIOBYMONEY_ISSET_ID = 10;
  private static final int __NOSHORTMARGINRATIOBYVOLUME_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.INSTRUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("instrumentID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInstrumentIDType")));
    tmpMap.put(_Fields.HEDGE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("hedgeFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcHedgeFlagType")));
    tmpMap.put(_Fields.LONG_MARGIN_RATIO_BY_MONEY, new org.apache.thrift.meta_data.FieldMetaData("longMarginRatioByMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcRatioType")));
    tmpMap.put(_Fields.LONG_MARGIN_RATIO_BY_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("longMarginRatioByVolume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.SHORT_MARGIN_RATIO_BY_MONEY, new org.apache.thrift.meta_data.FieldMetaData("shortMarginRatioByMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcRatioType")));
    tmpMap.put(_Fields.SHORT_MARGIN_RATIO_BY_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("shortMarginRatioByVolume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.EXCH_LONG_MARGIN_RATIO_BY_MONEY, new org.apache.thrift.meta_data.FieldMetaData("exchLongMarginRatioByMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcRatioType")));
    tmpMap.put(_Fields.EXCH_LONG_MARGIN_RATIO_BY_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("exchLongMarginRatioByVolume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.EXCH_SHORT_MARGIN_RATIO_BY_MONEY, new org.apache.thrift.meta_data.FieldMetaData("exchShortMarginRatioByMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcRatioType")));
    tmpMap.put(_Fields.EXCH_SHORT_MARGIN_RATIO_BY_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("exchShortMarginRatioByVolume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.NO_LONG_MARGIN_RATIO_BY_MONEY, new org.apache.thrift.meta_data.FieldMetaData("noLongMarginRatioByMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcRatioType")));
    tmpMap.put(_Fields.NO_LONG_MARGIN_RATIO_BY_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("noLongMarginRatioByVolume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    tmpMap.put(_Fields.NO_SHORT_MARGIN_RATIO_BY_MONEY, new org.apache.thrift.meta_data.FieldMetaData("noShortMarginRatioByMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcRatioType")));
    tmpMap.put(_Fields.NO_SHORT_MARGIN_RATIO_BY_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("noShortMarginRatioByVolume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE        , "TThostFtdcMoneyType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcExchangeMarginRateAdjustField.class, metaDataMap);
  }

  public CThostFtdcExchangeMarginRateAdjustField() {
  }

  public CThostFtdcExchangeMarginRateAdjustField(
    String brokerID,
    String instrumentID,
    String hedgeFlag,
    double longMarginRatioByMoney,
    double longMarginRatioByVolume,
    double shortMarginRatioByMoney,
    double shortMarginRatioByVolume,
    double exchLongMarginRatioByMoney,
    double exchLongMarginRatioByVolume,
    double exchShortMarginRatioByMoney,
    double exchShortMarginRatioByVolume,
    double noLongMarginRatioByMoney,
    double noLongMarginRatioByVolume,
    double noShortMarginRatioByMoney,
    double noShortMarginRatioByVolume)
  {
    this();
    this.brokerID = brokerID;
    this.instrumentID = instrumentID;
    this.hedgeFlag = hedgeFlag;
    this.longMarginRatioByMoney = longMarginRatioByMoney;
    setLongMarginRatioByMoneyIsSet(true);
    this.longMarginRatioByVolume = longMarginRatioByVolume;
    setLongMarginRatioByVolumeIsSet(true);
    this.shortMarginRatioByMoney = shortMarginRatioByMoney;
    setShortMarginRatioByMoneyIsSet(true);
    this.shortMarginRatioByVolume = shortMarginRatioByVolume;
    setShortMarginRatioByVolumeIsSet(true);
    this.exchLongMarginRatioByMoney = exchLongMarginRatioByMoney;
    setExchLongMarginRatioByMoneyIsSet(true);
    this.exchLongMarginRatioByVolume = exchLongMarginRatioByVolume;
    setExchLongMarginRatioByVolumeIsSet(true);
    this.exchShortMarginRatioByMoney = exchShortMarginRatioByMoney;
    setExchShortMarginRatioByMoneyIsSet(true);
    this.exchShortMarginRatioByVolume = exchShortMarginRatioByVolume;
    setExchShortMarginRatioByVolumeIsSet(true);
    this.noLongMarginRatioByMoney = noLongMarginRatioByMoney;
    setNoLongMarginRatioByMoneyIsSet(true);
    this.noLongMarginRatioByVolume = noLongMarginRatioByVolume;
    setNoLongMarginRatioByVolumeIsSet(true);
    this.noShortMarginRatioByMoney = noShortMarginRatioByMoney;
    setNoShortMarginRatioByMoneyIsSet(true);
    this.noShortMarginRatioByVolume = noShortMarginRatioByVolume;
    setNoShortMarginRatioByVolumeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcExchangeMarginRateAdjustField(CThostFtdcExchangeMarginRateAdjustField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetInstrumentID()) {
      this.instrumentID = other.instrumentID;
    }
    if (other.isSetHedgeFlag()) {
      this.hedgeFlag = other.hedgeFlag;
    }
    this.longMarginRatioByMoney = other.longMarginRatioByMoney;
    this.longMarginRatioByVolume = other.longMarginRatioByVolume;
    this.shortMarginRatioByMoney = other.shortMarginRatioByMoney;
    this.shortMarginRatioByVolume = other.shortMarginRatioByVolume;
    this.exchLongMarginRatioByMoney = other.exchLongMarginRatioByMoney;
    this.exchLongMarginRatioByVolume = other.exchLongMarginRatioByVolume;
    this.exchShortMarginRatioByMoney = other.exchShortMarginRatioByMoney;
    this.exchShortMarginRatioByVolume = other.exchShortMarginRatioByVolume;
    this.noLongMarginRatioByMoney = other.noLongMarginRatioByMoney;
    this.noLongMarginRatioByVolume = other.noLongMarginRatioByVolume;
    this.noShortMarginRatioByMoney = other.noShortMarginRatioByMoney;
    this.noShortMarginRatioByVolume = other.noShortMarginRatioByVolume;
  }

  public CThostFtdcExchangeMarginRateAdjustField deepCopy() {
    return new CThostFtdcExchangeMarginRateAdjustField(this);
  }

  @Override
  public void clear() {
    this.brokerID = null;
    this.instrumentID = null;
    this.hedgeFlag = null;
    setLongMarginRatioByMoneyIsSet(false);
    this.longMarginRatioByMoney = 0.0;
    setLongMarginRatioByVolumeIsSet(false);
    this.longMarginRatioByVolume = 0.0;
    setShortMarginRatioByMoneyIsSet(false);
    this.shortMarginRatioByMoney = 0.0;
    setShortMarginRatioByVolumeIsSet(false);
    this.shortMarginRatioByVolume = 0.0;
    setExchLongMarginRatioByMoneyIsSet(false);
    this.exchLongMarginRatioByMoney = 0.0;
    setExchLongMarginRatioByVolumeIsSet(false);
    this.exchLongMarginRatioByVolume = 0.0;
    setExchShortMarginRatioByMoneyIsSet(false);
    this.exchShortMarginRatioByMoney = 0.0;
    setExchShortMarginRatioByVolumeIsSet(false);
    this.exchShortMarginRatioByVolume = 0.0;
    setNoLongMarginRatioByMoneyIsSet(false);
    this.noLongMarginRatioByMoney = 0.0;
    setNoLongMarginRatioByVolumeIsSet(false);
    this.noLongMarginRatioByVolume = 0.0;
    setNoShortMarginRatioByMoneyIsSet(false);
    this.noShortMarginRatioByMoney = 0.0;
    setNoShortMarginRatioByVolumeIsSet(false);
    this.noShortMarginRatioByVolume = 0.0;
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcExchangeMarginRateAdjustField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getInstrumentID() {
    return this.instrumentID;
  }

  public CThostFtdcExchangeMarginRateAdjustField setInstrumentID(String instrumentID) {
    this.instrumentID = instrumentID;
    return this;
  }

  public void unsetInstrumentID() {
    this.instrumentID = null;
  }

  /** Returns true if field instrumentID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstrumentID() {
    return this.instrumentID != null;
  }

  public void setInstrumentIDIsSet(boolean value) {
    if (!value) {
      this.instrumentID = null;
    }
  }

  public String getHedgeFlag() {
    return this.hedgeFlag;
  }

  public CThostFtdcExchangeMarginRateAdjustField setHedgeFlag(String hedgeFlag) {
    this.hedgeFlag = hedgeFlag;
    return this;
  }

  public void unsetHedgeFlag() {
    this.hedgeFlag = null;
  }

  /** Returns true if field hedgeFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetHedgeFlag() {
    return this.hedgeFlag != null;
  }

  public void setHedgeFlagIsSet(boolean value) {
    if (!value) {
      this.hedgeFlag = null;
    }
  }

  public double getLongMarginRatioByMoney() {
    return this.longMarginRatioByMoney;
  }

  public CThostFtdcExchangeMarginRateAdjustField setLongMarginRatioByMoney(double longMarginRatioByMoney) {
    this.longMarginRatioByMoney = longMarginRatioByMoney;
    setLongMarginRatioByMoneyIsSet(true);
    return this;
  }

  public void unsetLongMarginRatioByMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGMARGINRATIOBYMONEY_ISSET_ID);
  }

  /** Returns true if field longMarginRatioByMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetLongMarginRatioByMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGMARGINRATIOBYMONEY_ISSET_ID);
  }

  public void setLongMarginRatioByMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGMARGINRATIOBYMONEY_ISSET_ID, value);
  }

  public double getLongMarginRatioByVolume() {
    return this.longMarginRatioByVolume;
  }

  public CThostFtdcExchangeMarginRateAdjustField setLongMarginRatioByVolume(double longMarginRatioByVolume) {
    this.longMarginRatioByVolume = longMarginRatioByVolume;
    setLongMarginRatioByVolumeIsSet(true);
    return this;
  }

  public void unsetLongMarginRatioByVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGMARGINRATIOBYVOLUME_ISSET_ID);
  }

  /** Returns true if field longMarginRatioByVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetLongMarginRatioByVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGMARGINRATIOBYVOLUME_ISSET_ID);
  }

  public void setLongMarginRatioByVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGMARGINRATIOBYVOLUME_ISSET_ID, value);
  }

  public double getShortMarginRatioByMoney() {
    return this.shortMarginRatioByMoney;
  }

  public CThostFtdcExchangeMarginRateAdjustField setShortMarginRatioByMoney(double shortMarginRatioByMoney) {
    this.shortMarginRatioByMoney = shortMarginRatioByMoney;
    setShortMarginRatioByMoneyIsSet(true);
    return this;
  }

  public void unsetShortMarginRatioByMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHORTMARGINRATIOBYMONEY_ISSET_ID);
  }

  /** Returns true if field shortMarginRatioByMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetShortMarginRatioByMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __SHORTMARGINRATIOBYMONEY_ISSET_ID);
  }

  public void setShortMarginRatioByMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHORTMARGINRATIOBYMONEY_ISSET_ID, value);
  }

  public double getShortMarginRatioByVolume() {
    return this.shortMarginRatioByVolume;
  }

  public CThostFtdcExchangeMarginRateAdjustField setShortMarginRatioByVolume(double shortMarginRatioByVolume) {
    this.shortMarginRatioByVolume = shortMarginRatioByVolume;
    setShortMarginRatioByVolumeIsSet(true);
    return this;
  }

  public void unsetShortMarginRatioByVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHORTMARGINRATIOBYVOLUME_ISSET_ID);
  }

  /** Returns true if field shortMarginRatioByVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetShortMarginRatioByVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __SHORTMARGINRATIOBYVOLUME_ISSET_ID);
  }

  public void setShortMarginRatioByVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHORTMARGINRATIOBYVOLUME_ISSET_ID, value);
  }

  public double getExchLongMarginRatioByMoney() {
    return this.exchLongMarginRatioByMoney;
  }

  public CThostFtdcExchangeMarginRateAdjustField setExchLongMarginRatioByMoney(double exchLongMarginRatioByMoney) {
    this.exchLongMarginRatioByMoney = exchLongMarginRatioByMoney;
    setExchLongMarginRatioByMoneyIsSet(true);
    return this;
  }

  public void unsetExchLongMarginRatioByMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXCHLONGMARGINRATIOBYMONEY_ISSET_ID);
  }

  /** Returns true if field exchLongMarginRatioByMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetExchLongMarginRatioByMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __EXCHLONGMARGINRATIOBYMONEY_ISSET_ID);
  }

  public void setExchLongMarginRatioByMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXCHLONGMARGINRATIOBYMONEY_ISSET_ID, value);
  }

  public double getExchLongMarginRatioByVolume() {
    return this.exchLongMarginRatioByVolume;
  }

  public CThostFtdcExchangeMarginRateAdjustField setExchLongMarginRatioByVolume(double exchLongMarginRatioByVolume) {
    this.exchLongMarginRatioByVolume = exchLongMarginRatioByVolume;
    setExchLongMarginRatioByVolumeIsSet(true);
    return this;
  }

  public void unsetExchLongMarginRatioByVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXCHLONGMARGINRATIOBYVOLUME_ISSET_ID);
  }

  /** Returns true if field exchLongMarginRatioByVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetExchLongMarginRatioByVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __EXCHLONGMARGINRATIOBYVOLUME_ISSET_ID);
  }

  public void setExchLongMarginRatioByVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXCHLONGMARGINRATIOBYVOLUME_ISSET_ID, value);
  }

  public double getExchShortMarginRatioByMoney() {
    return this.exchShortMarginRatioByMoney;
  }

  public CThostFtdcExchangeMarginRateAdjustField setExchShortMarginRatioByMoney(double exchShortMarginRatioByMoney) {
    this.exchShortMarginRatioByMoney = exchShortMarginRatioByMoney;
    setExchShortMarginRatioByMoneyIsSet(true);
    return this;
  }

  public void unsetExchShortMarginRatioByMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXCHSHORTMARGINRATIOBYMONEY_ISSET_ID);
  }

  /** Returns true if field exchShortMarginRatioByMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetExchShortMarginRatioByMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __EXCHSHORTMARGINRATIOBYMONEY_ISSET_ID);
  }

  public void setExchShortMarginRatioByMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXCHSHORTMARGINRATIOBYMONEY_ISSET_ID, value);
  }

  public double getExchShortMarginRatioByVolume() {
    return this.exchShortMarginRatioByVolume;
  }

  public CThostFtdcExchangeMarginRateAdjustField setExchShortMarginRatioByVolume(double exchShortMarginRatioByVolume) {
    this.exchShortMarginRatioByVolume = exchShortMarginRatioByVolume;
    setExchShortMarginRatioByVolumeIsSet(true);
    return this;
  }

  public void unsetExchShortMarginRatioByVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXCHSHORTMARGINRATIOBYVOLUME_ISSET_ID);
  }

  /** Returns true if field exchShortMarginRatioByVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetExchShortMarginRatioByVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __EXCHSHORTMARGINRATIOBYVOLUME_ISSET_ID);
  }

  public void setExchShortMarginRatioByVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXCHSHORTMARGINRATIOBYVOLUME_ISSET_ID, value);
  }

  public double getNoLongMarginRatioByMoney() {
    return this.noLongMarginRatioByMoney;
  }

  public CThostFtdcExchangeMarginRateAdjustField setNoLongMarginRatioByMoney(double noLongMarginRatioByMoney) {
    this.noLongMarginRatioByMoney = noLongMarginRatioByMoney;
    setNoLongMarginRatioByMoneyIsSet(true);
    return this;
  }

  public void unsetNoLongMarginRatioByMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOLONGMARGINRATIOBYMONEY_ISSET_ID);
  }

  /** Returns true if field noLongMarginRatioByMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetNoLongMarginRatioByMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __NOLONGMARGINRATIOBYMONEY_ISSET_ID);
  }

  public void setNoLongMarginRatioByMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOLONGMARGINRATIOBYMONEY_ISSET_ID, value);
  }

  public double getNoLongMarginRatioByVolume() {
    return this.noLongMarginRatioByVolume;
  }

  public CThostFtdcExchangeMarginRateAdjustField setNoLongMarginRatioByVolume(double noLongMarginRatioByVolume) {
    this.noLongMarginRatioByVolume = noLongMarginRatioByVolume;
    setNoLongMarginRatioByVolumeIsSet(true);
    return this;
  }

  public void unsetNoLongMarginRatioByVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOLONGMARGINRATIOBYVOLUME_ISSET_ID);
  }

  /** Returns true if field noLongMarginRatioByVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetNoLongMarginRatioByVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __NOLONGMARGINRATIOBYVOLUME_ISSET_ID);
  }

  public void setNoLongMarginRatioByVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOLONGMARGINRATIOBYVOLUME_ISSET_ID, value);
  }

  public double getNoShortMarginRatioByMoney() {
    return this.noShortMarginRatioByMoney;
  }

  public CThostFtdcExchangeMarginRateAdjustField setNoShortMarginRatioByMoney(double noShortMarginRatioByMoney) {
    this.noShortMarginRatioByMoney = noShortMarginRatioByMoney;
    setNoShortMarginRatioByMoneyIsSet(true);
    return this;
  }

  public void unsetNoShortMarginRatioByMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOSHORTMARGINRATIOBYMONEY_ISSET_ID);
  }

  /** Returns true if field noShortMarginRatioByMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetNoShortMarginRatioByMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __NOSHORTMARGINRATIOBYMONEY_ISSET_ID);
  }

  public void setNoShortMarginRatioByMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOSHORTMARGINRATIOBYMONEY_ISSET_ID, value);
  }

  public double getNoShortMarginRatioByVolume() {
    return this.noShortMarginRatioByVolume;
  }

  public CThostFtdcExchangeMarginRateAdjustField setNoShortMarginRatioByVolume(double noShortMarginRatioByVolume) {
    this.noShortMarginRatioByVolume = noShortMarginRatioByVolume;
    setNoShortMarginRatioByVolumeIsSet(true);
    return this;
  }

  public void unsetNoShortMarginRatioByVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOSHORTMARGINRATIOBYVOLUME_ISSET_ID);
  }

  /** Returns true if field noShortMarginRatioByVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetNoShortMarginRatioByVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __NOSHORTMARGINRATIOBYVOLUME_ISSET_ID);
  }

  public void setNoShortMarginRatioByVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOSHORTMARGINRATIOBYVOLUME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case INSTRUMENT_ID:
      if (value == null) {
        unsetInstrumentID();
      } else {
        setInstrumentID((String)value);
      }
      break;

    case HEDGE_FLAG:
      if (value == null) {
        unsetHedgeFlag();
      } else {
        setHedgeFlag((String)value);
      }
      break;

    case LONG_MARGIN_RATIO_BY_MONEY:
      if (value == null) {
        unsetLongMarginRatioByMoney();
      } else {
        setLongMarginRatioByMoney((Double)value);
      }
      break;

    case LONG_MARGIN_RATIO_BY_VOLUME:
      if (value == null) {
        unsetLongMarginRatioByVolume();
      } else {
        setLongMarginRatioByVolume((Double)value);
      }
      break;

    case SHORT_MARGIN_RATIO_BY_MONEY:
      if (value == null) {
        unsetShortMarginRatioByMoney();
      } else {
        setShortMarginRatioByMoney((Double)value);
      }
      break;

    case SHORT_MARGIN_RATIO_BY_VOLUME:
      if (value == null) {
        unsetShortMarginRatioByVolume();
      } else {
        setShortMarginRatioByVolume((Double)value);
      }
      break;

    case EXCH_LONG_MARGIN_RATIO_BY_MONEY:
      if (value == null) {
        unsetExchLongMarginRatioByMoney();
      } else {
        setExchLongMarginRatioByMoney((Double)value);
      }
      break;

    case EXCH_LONG_MARGIN_RATIO_BY_VOLUME:
      if (value == null) {
        unsetExchLongMarginRatioByVolume();
      } else {
        setExchLongMarginRatioByVolume((Double)value);
      }
      break;

    case EXCH_SHORT_MARGIN_RATIO_BY_MONEY:
      if (value == null) {
        unsetExchShortMarginRatioByMoney();
      } else {
        setExchShortMarginRatioByMoney((Double)value);
      }
      break;

    case EXCH_SHORT_MARGIN_RATIO_BY_VOLUME:
      if (value == null) {
        unsetExchShortMarginRatioByVolume();
      } else {
        setExchShortMarginRatioByVolume((Double)value);
      }
      break;

    case NO_LONG_MARGIN_RATIO_BY_MONEY:
      if (value == null) {
        unsetNoLongMarginRatioByMoney();
      } else {
        setNoLongMarginRatioByMoney((Double)value);
      }
      break;

    case NO_LONG_MARGIN_RATIO_BY_VOLUME:
      if (value == null) {
        unsetNoLongMarginRatioByVolume();
      } else {
        setNoLongMarginRatioByVolume((Double)value);
      }
      break;

    case NO_SHORT_MARGIN_RATIO_BY_MONEY:
      if (value == null) {
        unsetNoShortMarginRatioByMoney();
      } else {
        setNoShortMarginRatioByMoney((Double)value);
      }
      break;

    case NO_SHORT_MARGIN_RATIO_BY_VOLUME:
      if (value == null) {
        unsetNoShortMarginRatioByVolume();
      } else {
        setNoShortMarginRatioByVolume((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BROKER_ID:
      return getBrokerID();

    case INSTRUMENT_ID:
      return getInstrumentID();

    case HEDGE_FLAG:
      return getHedgeFlag();

    case LONG_MARGIN_RATIO_BY_MONEY:
      return Double.valueOf(getLongMarginRatioByMoney());

    case LONG_MARGIN_RATIO_BY_VOLUME:
      return Double.valueOf(getLongMarginRatioByVolume());

    case SHORT_MARGIN_RATIO_BY_MONEY:
      return Double.valueOf(getShortMarginRatioByMoney());

    case SHORT_MARGIN_RATIO_BY_VOLUME:
      return Double.valueOf(getShortMarginRatioByVolume());

    case EXCH_LONG_MARGIN_RATIO_BY_MONEY:
      return Double.valueOf(getExchLongMarginRatioByMoney());

    case EXCH_LONG_MARGIN_RATIO_BY_VOLUME:
      return Double.valueOf(getExchLongMarginRatioByVolume());

    case EXCH_SHORT_MARGIN_RATIO_BY_MONEY:
      return Double.valueOf(getExchShortMarginRatioByMoney());

    case EXCH_SHORT_MARGIN_RATIO_BY_VOLUME:
      return Double.valueOf(getExchShortMarginRatioByVolume());

    case NO_LONG_MARGIN_RATIO_BY_MONEY:
      return Double.valueOf(getNoLongMarginRatioByMoney());

    case NO_LONG_MARGIN_RATIO_BY_VOLUME:
      return Double.valueOf(getNoLongMarginRatioByVolume());

    case NO_SHORT_MARGIN_RATIO_BY_MONEY:
      return Double.valueOf(getNoShortMarginRatioByMoney());

    case NO_SHORT_MARGIN_RATIO_BY_VOLUME:
      return Double.valueOf(getNoShortMarginRatioByVolume());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BROKER_ID:
      return isSetBrokerID();
    case INSTRUMENT_ID:
      return isSetInstrumentID();
    case HEDGE_FLAG:
      return isSetHedgeFlag();
    case LONG_MARGIN_RATIO_BY_MONEY:
      return isSetLongMarginRatioByMoney();
    case LONG_MARGIN_RATIO_BY_VOLUME:
      return isSetLongMarginRatioByVolume();
    case SHORT_MARGIN_RATIO_BY_MONEY:
      return isSetShortMarginRatioByMoney();
    case SHORT_MARGIN_RATIO_BY_VOLUME:
      return isSetShortMarginRatioByVolume();
    case EXCH_LONG_MARGIN_RATIO_BY_MONEY:
      return isSetExchLongMarginRatioByMoney();
    case EXCH_LONG_MARGIN_RATIO_BY_VOLUME:
      return isSetExchLongMarginRatioByVolume();
    case EXCH_SHORT_MARGIN_RATIO_BY_MONEY:
      return isSetExchShortMarginRatioByMoney();
    case EXCH_SHORT_MARGIN_RATIO_BY_VOLUME:
      return isSetExchShortMarginRatioByVolume();
    case NO_LONG_MARGIN_RATIO_BY_MONEY:
      return isSetNoLongMarginRatioByMoney();
    case NO_LONG_MARGIN_RATIO_BY_VOLUME:
      return isSetNoLongMarginRatioByVolume();
    case NO_SHORT_MARGIN_RATIO_BY_MONEY:
      return isSetNoShortMarginRatioByMoney();
    case NO_SHORT_MARGIN_RATIO_BY_VOLUME:
      return isSetNoShortMarginRatioByVolume();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcExchangeMarginRateAdjustField)
      return this.equals((CThostFtdcExchangeMarginRateAdjustField)that);
    return false;
  }

  public boolean equals(CThostFtdcExchangeMarginRateAdjustField that) {
    if (that == null)
      return false;

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_instrumentID = true && this.isSetInstrumentID();
    boolean that_present_instrumentID = true && that.isSetInstrumentID();
    if (this_present_instrumentID || that_present_instrumentID) {
      if (!(this_present_instrumentID && that_present_instrumentID))
        return false;
      if (!this.instrumentID.equals(that.instrumentID))
        return false;
    }

    boolean this_present_hedgeFlag = true && this.isSetHedgeFlag();
    boolean that_present_hedgeFlag = true && that.isSetHedgeFlag();
    if (this_present_hedgeFlag || that_present_hedgeFlag) {
      if (!(this_present_hedgeFlag && that_present_hedgeFlag))
        return false;
      if (!this.hedgeFlag.equals(that.hedgeFlag))
        return false;
    }

    boolean this_present_longMarginRatioByMoney = true;
    boolean that_present_longMarginRatioByMoney = true;
    if (this_present_longMarginRatioByMoney || that_present_longMarginRatioByMoney) {
      if (!(this_present_longMarginRatioByMoney && that_present_longMarginRatioByMoney))
        return false;
      if (this.longMarginRatioByMoney != that.longMarginRatioByMoney)
        return false;
    }

    boolean this_present_longMarginRatioByVolume = true;
    boolean that_present_longMarginRatioByVolume = true;
    if (this_present_longMarginRatioByVolume || that_present_longMarginRatioByVolume) {
      if (!(this_present_longMarginRatioByVolume && that_present_longMarginRatioByVolume))
        return false;
      if (this.longMarginRatioByVolume != that.longMarginRatioByVolume)
        return false;
    }

    boolean this_present_shortMarginRatioByMoney = true;
    boolean that_present_shortMarginRatioByMoney = true;
    if (this_present_shortMarginRatioByMoney || that_present_shortMarginRatioByMoney) {
      if (!(this_present_shortMarginRatioByMoney && that_present_shortMarginRatioByMoney))
        return false;
      if (this.shortMarginRatioByMoney != that.shortMarginRatioByMoney)
        return false;
    }

    boolean this_present_shortMarginRatioByVolume = true;
    boolean that_present_shortMarginRatioByVolume = true;
    if (this_present_shortMarginRatioByVolume || that_present_shortMarginRatioByVolume) {
      if (!(this_present_shortMarginRatioByVolume && that_present_shortMarginRatioByVolume))
        return false;
      if (this.shortMarginRatioByVolume != that.shortMarginRatioByVolume)
        return false;
    }

    boolean this_present_exchLongMarginRatioByMoney = true;
    boolean that_present_exchLongMarginRatioByMoney = true;
    if (this_present_exchLongMarginRatioByMoney || that_present_exchLongMarginRatioByMoney) {
      if (!(this_present_exchLongMarginRatioByMoney && that_present_exchLongMarginRatioByMoney))
        return false;
      if (this.exchLongMarginRatioByMoney != that.exchLongMarginRatioByMoney)
        return false;
    }

    boolean this_present_exchLongMarginRatioByVolume = true;
    boolean that_present_exchLongMarginRatioByVolume = true;
    if (this_present_exchLongMarginRatioByVolume || that_present_exchLongMarginRatioByVolume) {
      if (!(this_present_exchLongMarginRatioByVolume && that_present_exchLongMarginRatioByVolume))
        return false;
      if (this.exchLongMarginRatioByVolume != that.exchLongMarginRatioByVolume)
        return false;
    }

    boolean this_present_exchShortMarginRatioByMoney = true;
    boolean that_present_exchShortMarginRatioByMoney = true;
    if (this_present_exchShortMarginRatioByMoney || that_present_exchShortMarginRatioByMoney) {
      if (!(this_present_exchShortMarginRatioByMoney && that_present_exchShortMarginRatioByMoney))
        return false;
      if (this.exchShortMarginRatioByMoney != that.exchShortMarginRatioByMoney)
        return false;
    }

    boolean this_present_exchShortMarginRatioByVolume = true;
    boolean that_present_exchShortMarginRatioByVolume = true;
    if (this_present_exchShortMarginRatioByVolume || that_present_exchShortMarginRatioByVolume) {
      if (!(this_present_exchShortMarginRatioByVolume && that_present_exchShortMarginRatioByVolume))
        return false;
      if (this.exchShortMarginRatioByVolume != that.exchShortMarginRatioByVolume)
        return false;
    }

    boolean this_present_noLongMarginRatioByMoney = true;
    boolean that_present_noLongMarginRatioByMoney = true;
    if (this_present_noLongMarginRatioByMoney || that_present_noLongMarginRatioByMoney) {
      if (!(this_present_noLongMarginRatioByMoney && that_present_noLongMarginRatioByMoney))
        return false;
      if (this.noLongMarginRatioByMoney != that.noLongMarginRatioByMoney)
        return false;
    }

    boolean this_present_noLongMarginRatioByVolume = true;
    boolean that_present_noLongMarginRatioByVolume = true;
    if (this_present_noLongMarginRatioByVolume || that_present_noLongMarginRatioByVolume) {
      if (!(this_present_noLongMarginRatioByVolume && that_present_noLongMarginRatioByVolume))
        return false;
      if (this.noLongMarginRatioByVolume != that.noLongMarginRatioByVolume)
        return false;
    }

    boolean this_present_noShortMarginRatioByMoney = true;
    boolean that_present_noShortMarginRatioByMoney = true;
    if (this_present_noShortMarginRatioByMoney || that_present_noShortMarginRatioByMoney) {
      if (!(this_present_noShortMarginRatioByMoney && that_present_noShortMarginRatioByMoney))
        return false;
      if (this.noShortMarginRatioByMoney != that.noShortMarginRatioByMoney)
        return false;
    }

    boolean this_present_noShortMarginRatioByVolume = true;
    boolean that_present_noShortMarginRatioByVolume = true;
    if (this_present_noShortMarginRatioByVolume || that_present_noShortMarginRatioByVolume) {
      if (!(this_present_noShortMarginRatioByVolume && that_present_noShortMarginRatioByVolume))
        return false;
      if (this.noShortMarginRatioByVolume != that.noShortMarginRatioByVolume)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcExchangeMarginRateAdjustField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstrumentID()).compareTo(other.isSetInstrumentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstrumentID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instrumentID, other.instrumentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHedgeFlag()).compareTo(other.isSetHedgeFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHedgeFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hedgeFlag, other.hedgeFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongMarginRatioByMoney()).compareTo(other.isSetLongMarginRatioByMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongMarginRatioByMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longMarginRatioByMoney, other.longMarginRatioByMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongMarginRatioByVolume()).compareTo(other.isSetLongMarginRatioByVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongMarginRatioByVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longMarginRatioByVolume, other.longMarginRatioByVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortMarginRatioByMoney()).compareTo(other.isSetShortMarginRatioByMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortMarginRatioByMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortMarginRatioByMoney, other.shortMarginRatioByMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortMarginRatioByVolume()).compareTo(other.isSetShortMarginRatioByVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortMarginRatioByVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortMarginRatioByVolume, other.shortMarginRatioByVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchLongMarginRatioByMoney()).compareTo(other.isSetExchLongMarginRatioByMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchLongMarginRatioByMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchLongMarginRatioByMoney, other.exchLongMarginRatioByMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchLongMarginRatioByVolume()).compareTo(other.isSetExchLongMarginRatioByVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchLongMarginRatioByVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchLongMarginRatioByVolume, other.exchLongMarginRatioByVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchShortMarginRatioByMoney()).compareTo(other.isSetExchShortMarginRatioByMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchShortMarginRatioByMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchShortMarginRatioByMoney, other.exchShortMarginRatioByMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchShortMarginRatioByVolume()).compareTo(other.isSetExchShortMarginRatioByVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchShortMarginRatioByVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchShortMarginRatioByVolume, other.exchShortMarginRatioByVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoLongMarginRatioByMoney()).compareTo(other.isSetNoLongMarginRatioByMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoLongMarginRatioByMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noLongMarginRatioByMoney, other.noLongMarginRatioByMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoLongMarginRatioByVolume()).compareTo(other.isSetNoLongMarginRatioByVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoLongMarginRatioByVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noLongMarginRatioByVolume, other.noLongMarginRatioByVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoShortMarginRatioByMoney()).compareTo(other.isSetNoShortMarginRatioByMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoShortMarginRatioByMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noShortMarginRatioByMoney, other.noShortMarginRatioByMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoShortMarginRatioByVolume()).compareTo(other.isSetNoShortMarginRatioByVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoShortMarginRatioByVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noShortMarginRatioByVolume, other.noShortMarginRatioByVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcExchangeMarginRateAdjustField(");
    boolean first = true;

    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("instrumentID:");
    if (this.instrumentID == null) {
      sb.append("null");
    } else {
      sb.append(this.instrumentID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hedgeFlag:");
    if (this.hedgeFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.hedgeFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("longMarginRatioByMoney:");
    sb.append(this.longMarginRatioByMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("longMarginRatioByVolume:");
    sb.append(this.longMarginRatioByVolume);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shortMarginRatioByMoney:");
    sb.append(this.shortMarginRatioByMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shortMarginRatioByVolume:");
    sb.append(this.shortMarginRatioByVolume);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchLongMarginRatioByMoney:");
    sb.append(this.exchLongMarginRatioByMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchLongMarginRatioByVolume:");
    sb.append(this.exchLongMarginRatioByVolume);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchShortMarginRatioByMoney:");
    sb.append(this.exchShortMarginRatioByMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchShortMarginRatioByVolume:");
    sb.append(this.exchShortMarginRatioByVolume);
    first = false;
    if (!first) sb.append(", ");
    sb.append("noLongMarginRatioByMoney:");
    sb.append(this.noLongMarginRatioByMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("noLongMarginRatioByVolume:");
    sb.append(this.noLongMarginRatioByVolume);
    first = false;
    if (!first) sb.append(", ");
    sb.append("noShortMarginRatioByMoney:");
    sb.append(this.noShortMarginRatioByMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("noShortMarginRatioByVolume:");
    sb.append(this.noShortMarginRatioByVolume);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcExchangeMarginRateAdjustFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcExchangeMarginRateAdjustFieldStandardScheme getScheme() {
      return new CThostFtdcExchangeMarginRateAdjustFieldStandardScheme();
    }
  }

  private static class CThostFtdcExchangeMarginRateAdjustFieldStandardScheme extends StandardScheme<CThostFtdcExchangeMarginRateAdjustField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcExchangeMarginRateAdjustField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INSTRUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instrumentID = iprot.readString();
              struct.setInstrumentIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HEDGE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hedgeFlag = iprot.readString();
              struct.setHedgeFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LONG_MARGIN_RATIO_BY_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.longMarginRatioByMoney = iprot.readDouble();
              struct.setLongMarginRatioByMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LONG_MARGIN_RATIO_BY_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.longMarginRatioByVolume = iprot.readDouble();
              struct.setLongMarginRatioByVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SHORT_MARGIN_RATIO_BY_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shortMarginRatioByMoney = iprot.readDouble();
              struct.setShortMarginRatioByMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SHORT_MARGIN_RATIO_BY_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shortMarginRatioByVolume = iprot.readDouble();
              struct.setShortMarginRatioByVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXCH_LONG_MARGIN_RATIO_BY_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.exchLongMarginRatioByMoney = iprot.readDouble();
              struct.setExchLongMarginRatioByMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXCH_LONG_MARGIN_RATIO_BY_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.exchLongMarginRatioByVolume = iprot.readDouble();
              struct.setExchLongMarginRatioByVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EXCH_SHORT_MARGIN_RATIO_BY_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.exchShortMarginRatioByMoney = iprot.readDouble();
              struct.setExchShortMarginRatioByMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // EXCH_SHORT_MARGIN_RATIO_BY_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.exchShortMarginRatioByVolume = iprot.readDouble();
              struct.setExchShortMarginRatioByVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // NO_LONG_MARGIN_RATIO_BY_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.noLongMarginRatioByMoney = iprot.readDouble();
              struct.setNoLongMarginRatioByMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NO_LONG_MARGIN_RATIO_BY_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.noLongMarginRatioByVolume = iprot.readDouble();
              struct.setNoLongMarginRatioByVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // NO_SHORT_MARGIN_RATIO_BY_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.noShortMarginRatioByMoney = iprot.readDouble();
              struct.setNoShortMarginRatioByMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // NO_SHORT_MARGIN_RATIO_BY_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.noShortMarginRatioByVolume = iprot.readDouble();
              struct.setNoShortMarginRatioByVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcExchangeMarginRateAdjustField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.instrumentID != null) {
        oprot.writeFieldBegin(INSTRUMENT_ID_FIELD_DESC);
        oprot.writeString(struct.instrumentID);
        oprot.writeFieldEnd();
      }
      if (struct.hedgeFlag != null) {
        oprot.writeFieldBegin(HEDGE_FLAG_FIELD_DESC);
        oprot.writeString(struct.hedgeFlag);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LONG_MARGIN_RATIO_BY_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.longMarginRatioByMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONG_MARGIN_RATIO_BY_VOLUME_FIELD_DESC);
      oprot.writeDouble(struct.longMarginRatioByVolume);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHORT_MARGIN_RATIO_BY_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.shortMarginRatioByMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHORT_MARGIN_RATIO_BY_VOLUME_FIELD_DESC);
      oprot.writeDouble(struct.shortMarginRatioByVolume);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXCH_LONG_MARGIN_RATIO_BY_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.exchLongMarginRatioByMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXCH_LONG_MARGIN_RATIO_BY_VOLUME_FIELD_DESC);
      oprot.writeDouble(struct.exchLongMarginRatioByVolume);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXCH_SHORT_MARGIN_RATIO_BY_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.exchShortMarginRatioByMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXCH_SHORT_MARGIN_RATIO_BY_VOLUME_FIELD_DESC);
      oprot.writeDouble(struct.exchShortMarginRatioByVolume);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NO_LONG_MARGIN_RATIO_BY_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.noLongMarginRatioByMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NO_LONG_MARGIN_RATIO_BY_VOLUME_FIELD_DESC);
      oprot.writeDouble(struct.noLongMarginRatioByVolume);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NO_SHORT_MARGIN_RATIO_BY_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.noShortMarginRatioByMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NO_SHORT_MARGIN_RATIO_BY_VOLUME_FIELD_DESC);
      oprot.writeDouble(struct.noShortMarginRatioByVolume);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcExchangeMarginRateAdjustFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcExchangeMarginRateAdjustFieldTupleScheme getScheme() {
      return new CThostFtdcExchangeMarginRateAdjustFieldTupleScheme();
    }
  }

  private static class CThostFtdcExchangeMarginRateAdjustFieldTupleScheme extends TupleScheme<CThostFtdcExchangeMarginRateAdjustField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcExchangeMarginRateAdjustField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBrokerID()) {
        optionals.set(0);
      }
      if (struct.isSetInstrumentID()) {
        optionals.set(1);
      }
      if (struct.isSetHedgeFlag()) {
        optionals.set(2);
      }
      if (struct.isSetLongMarginRatioByMoney()) {
        optionals.set(3);
      }
      if (struct.isSetLongMarginRatioByVolume()) {
        optionals.set(4);
      }
      if (struct.isSetShortMarginRatioByMoney()) {
        optionals.set(5);
      }
      if (struct.isSetShortMarginRatioByVolume()) {
        optionals.set(6);
      }
      if (struct.isSetExchLongMarginRatioByMoney()) {
        optionals.set(7);
      }
      if (struct.isSetExchLongMarginRatioByVolume()) {
        optionals.set(8);
      }
      if (struct.isSetExchShortMarginRatioByMoney()) {
        optionals.set(9);
      }
      if (struct.isSetExchShortMarginRatioByVolume()) {
        optionals.set(10);
      }
      if (struct.isSetNoLongMarginRatioByMoney()) {
        optionals.set(11);
      }
      if (struct.isSetNoLongMarginRatioByVolume()) {
        optionals.set(12);
      }
      if (struct.isSetNoShortMarginRatioByMoney()) {
        optionals.set(13);
      }
      if (struct.isSetNoShortMarginRatioByVolume()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetInstrumentID()) {
        oprot.writeString(struct.instrumentID);
      }
      if (struct.isSetHedgeFlag()) {
        oprot.writeString(struct.hedgeFlag);
      }
      if (struct.isSetLongMarginRatioByMoney()) {
        oprot.writeDouble(struct.longMarginRatioByMoney);
      }
      if (struct.isSetLongMarginRatioByVolume()) {
        oprot.writeDouble(struct.longMarginRatioByVolume);
      }
      if (struct.isSetShortMarginRatioByMoney()) {
        oprot.writeDouble(struct.shortMarginRatioByMoney);
      }
      if (struct.isSetShortMarginRatioByVolume()) {
        oprot.writeDouble(struct.shortMarginRatioByVolume);
      }
      if (struct.isSetExchLongMarginRatioByMoney()) {
        oprot.writeDouble(struct.exchLongMarginRatioByMoney);
      }
      if (struct.isSetExchLongMarginRatioByVolume()) {
        oprot.writeDouble(struct.exchLongMarginRatioByVolume);
      }
      if (struct.isSetExchShortMarginRatioByMoney()) {
        oprot.writeDouble(struct.exchShortMarginRatioByMoney);
      }
      if (struct.isSetExchShortMarginRatioByVolume()) {
        oprot.writeDouble(struct.exchShortMarginRatioByVolume);
      }
      if (struct.isSetNoLongMarginRatioByMoney()) {
        oprot.writeDouble(struct.noLongMarginRatioByMoney);
      }
      if (struct.isSetNoLongMarginRatioByVolume()) {
        oprot.writeDouble(struct.noLongMarginRatioByVolume);
      }
      if (struct.isSetNoShortMarginRatioByMoney()) {
        oprot.writeDouble(struct.noShortMarginRatioByMoney);
      }
      if (struct.isSetNoShortMarginRatioByVolume()) {
        oprot.writeDouble(struct.noShortMarginRatioByVolume);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcExchangeMarginRateAdjustField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.instrumentID = iprot.readString();
        struct.setInstrumentIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.hedgeFlag = iprot.readString();
        struct.setHedgeFlagIsSet(true);
      }
      if (incoming.get(3)) {
        struct.longMarginRatioByMoney = iprot.readDouble();
        struct.setLongMarginRatioByMoneyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.longMarginRatioByVolume = iprot.readDouble();
        struct.setLongMarginRatioByVolumeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.shortMarginRatioByMoney = iprot.readDouble();
        struct.setShortMarginRatioByMoneyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.shortMarginRatioByVolume = iprot.readDouble();
        struct.setShortMarginRatioByVolumeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.exchLongMarginRatioByMoney = iprot.readDouble();
        struct.setExchLongMarginRatioByMoneyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.exchLongMarginRatioByVolume = iprot.readDouble();
        struct.setExchLongMarginRatioByVolumeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.exchShortMarginRatioByMoney = iprot.readDouble();
        struct.setExchShortMarginRatioByMoneyIsSet(true);
      }
      if (incoming.get(10)) {
        struct.exchShortMarginRatioByVolume = iprot.readDouble();
        struct.setExchShortMarginRatioByVolumeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.noLongMarginRatioByMoney = iprot.readDouble();
        struct.setNoLongMarginRatioByMoneyIsSet(true);
      }
      if (incoming.get(12)) {
        struct.noLongMarginRatioByVolume = iprot.readDouble();
        struct.setNoLongMarginRatioByVolumeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.noShortMarginRatioByMoney = iprot.readDouble();
        struct.setNoShortMarginRatioByMoneyIsSet(true);
      }
      if (incoming.get(14)) {
        struct.noShortMarginRatioByVolume = iprot.readDouble();
        struct.setNoShortMarginRatioByVolumeIsSet(true);
      }
    }
  }

}

