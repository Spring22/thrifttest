/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcErrExecOrderField implements org.apache.thrift.TBase<CThostFtdcErrExecOrderField, CThostFtdcErrExecOrderField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcErrExecOrderField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcErrExecOrderField");

  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INVESTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("investorID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INSTRUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instrumentID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EXEC_ORDER_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("execOrderRef", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("volume", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestID", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField BUSINESS_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("businessUnit", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField OFFSET_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("offsetFlag", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField HEDGE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("hedgeFlag", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ACTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("actionType", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField POSI_DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("posiDirection", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField RESERVE_POSITION_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("reservePositionFlag", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField CLOSE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("closeFlag", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField ERROR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("errorID", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField ERROR_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("errorMsg", org.apache.thrift.protocol.TType.STRING, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcErrExecOrderFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcErrExecOrderFieldTupleSchemeFactory());
  }

  public String brokerID; // required
  public String investorID; // required
  public String instrumentID; // required
  public String execOrderRef; // required
  public String userID; // required
  public int volume; // required
  public int requestID; // required
  public String businessUnit; // required
  public String offsetFlag; // required
  public String hedgeFlag; // required
  public String actionType; // required
  public String posiDirection; // required
  public String reservePositionFlag; // required
  public String closeFlag; // required
  public int errorID; // required
  public String errorMsg; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BROKER_ID((short)1, "brokerID"),
    INVESTOR_ID((short)2, "investorID"),
    INSTRUMENT_ID((short)3, "instrumentID"),
    EXEC_ORDER_REF((short)4, "execOrderRef"),
    USER_ID((short)5, "userID"),
    VOLUME((short)6, "volume"),
    REQUEST_ID((short)7, "requestID"),
    BUSINESS_UNIT((short)8, "businessUnit"),
    OFFSET_FLAG((short)9, "offsetFlag"),
    HEDGE_FLAG((short)10, "hedgeFlag"),
    ACTION_TYPE((short)11, "actionType"),
    POSI_DIRECTION((short)12, "posiDirection"),
    RESERVE_POSITION_FLAG((short)13, "reservePositionFlag"),
    CLOSE_FLAG((short)14, "closeFlag"),
    ERROR_ID((short)15, "errorID"),
    ERROR_MSG((short)16, "errorMsg");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BROKER_ID
          return BROKER_ID;
        case 2: // INVESTOR_ID
          return INVESTOR_ID;
        case 3: // INSTRUMENT_ID
          return INSTRUMENT_ID;
        case 4: // EXEC_ORDER_REF
          return EXEC_ORDER_REF;
        case 5: // USER_ID
          return USER_ID;
        case 6: // VOLUME
          return VOLUME;
        case 7: // REQUEST_ID
          return REQUEST_ID;
        case 8: // BUSINESS_UNIT
          return BUSINESS_UNIT;
        case 9: // OFFSET_FLAG
          return OFFSET_FLAG;
        case 10: // HEDGE_FLAG
          return HEDGE_FLAG;
        case 11: // ACTION_TYPE
          return ACTION_TYPE;
        case 12: // POSI_DIRECTION
          return POSI_DIRECTION;
        case 13: // RESERVE_POSITION_FLAG
          return RESERVE_POSITION_FLAG;
        case 14: // CLOSE_FLAG
          return CLOSE_FLAG;
        case 15: // ERROR_ID
          return ERROR_ID;
        case 16: // ERROR_MSG
          return ERROR_MSG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VOLUME_ISSET_ID = 0;
  private static final int __REQUESTID_ISSET_ID = 1;
  private static final int __ERRORID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBrokerIDType")));
    tmpMap.put(_Fields.INVESTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("investorID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInvestorIDType")));
    tmpMap.put(_Fields.INSTRUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("instrumentID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcInstrumentIDType")));
    tmpMap.put(_Fields.EXEC_ORDER_REF, new org.apache.thrift.meta_data.FieldMetaData("execOrderRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderRefType")));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcUserIDType")));
    tmpMap.put(_Fields.VOLUME, new org.apache.thrift.meta_data.FieldMetaData("volume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcVolumeType")));
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcRequestIDType")));
    tmpMap.put(_Fields.BUSINESS_UNIT, new org.apache.thrift.meta_data.FieldMetaData("businessUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBusinessUnitType")));
    tmpMap.put(_Fields.OFFSET_FLAG, new org.apache.thrift.meta_data.FieldMetaData("offsetFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOffsetFlagType")));
    tmpMap.put(_Fields.HEDGE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("hedgeFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcHedgeFlagType")));
    tmpMap.put(_Fields.ACTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("actionType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcActionTypeType")));
    tmpMap.put(_Fields.POSI_DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("posiDirection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcPosiDirectionType")));
    tmpMap.put(_Fields.RESERVE_POSITION_FLAG, new org.apache.thrift.meta_data.FieldMetaData("reservePositionFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcExecOrderPositionFlagType")));
    tmpMap.put(_Fields.CLOSE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("closeFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcExecOrderCloseFlagType")));
    tmpMap.put(_Fields.ERROR_ID, new org.apache.thrift.meta_data.FieldMetaData("errorID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcErrorIDType")));
    tmpMap.put(_Fields.ERROR_MSG, new org.apache.thrift.meta_data.FieldMetaData("errorMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcErrorMsgType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcErrExecOrderField.class, metaDataMap);
  }

  public CThostFtdcErrExecOrderField() {
  }

  public CThostFtdcErrExecOrderField(
    String brokerID,
    String investorID,
    String instrumentID,
    String execOrderRef,
    String userID,
    int volume,
    int requestID,
    String businessUnit,
    String offsetFlag,
    String hedgeFlag,
    String actionType,
    String posiDirection,
    String reservePositionFlag,
    String closeFlag,
    int errorID,
    String errorMsg)
  {
    this();
    this.brokerID = brokerID;
    this.investorID = investorID;
    this.instrumentID = instrumentID;
    this.execOrderRef = execOrderRef;
    this.userID = userID;
    this.volume = volume;
    setVolumeIsSet(true);
    this.requestID = requestID;
    setRequestIDIsSet(true);
    this.businessUnit = businessUnit;
    this.offsetFlag = offsetFlag;
    this.hedgeFlag = hedgeFlag;
    this.actionType = actionType;
    this.posiDirection = posiDirection;
    this.reservePositionFlag = reservePositionFlag;
    this.closeFlag = closeFlag;
    this.errorID = errorID;
    setErrorIDIsSet(true);
    this.errorMsg = errorMsg;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcErrExecOrderField(CThostFtdcErrExecOrderField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetInvestorID()) {
      this.investorID = other.investorID;
    }
    if (other.isSetInstrumentID()) {
      this.instrumentID = other.instrumentID;
    }
    if (other.isSetExecOrderRef()) {
      this.execOrderRef = other.execOrderRef;
    }
    if (other.isSetUserID()) {
      this.userID = other.userID;
    }
    this.volume = other.volume;
    this.requestID = other.requestID;
    if (other.isSetBusinessUnit()) {
      this.businessUnit = other.businessUnit;
    }
    if (other.isSetOffsetFlag()) {
      this.offsetFlag = other.offsetFlag;
    }
    if (other.isSetHedgeFlag()) {
      this.hedgeFlag = other.hedgeFlag;
    }
    if (other.isSetActionType()) {
      this.actionType = other.actionType;
    }
    if (other.isSetPosiDirection()) {
      this.posiDirection = other.posiDirection;
    }
    if (other.isSetReservePositionFlag()) {
      this.reservePositionFlag = other.reservePositionFlag;
    }
    if (other.isSetCloseFlag()) {
      this.closeFlag = other.closeFlag;
    }
    this.errorID = other.errorID;
    if (other.isSetErrorMsg()) {
      this.errorMsg = other.errorMsg;
    }
  }

  public CThostFtdcErrExecOrderField deepCopy() {
    return new CThostFtdcErrExecOrderField(this);
  }

  @Override
  public void clear() {
    this.brokerID = null;
    this.investorID = null;
    this.instrumentID = null;
    this.execOrderRef = null;
    this.userID = null;
    setVolumeIsSet(false);
    this.volume = 0;
    setRequestIDIsSet(false);
    this.requestID = 0;
    this.businessUnit = null;
    this.offsetFlag = null;
    this.hedgeFlag = null;
    this.actionType = null;
    this.posiDirection = null;
    this.reservePositionFlag = null;
    this.closeFlag = null;
    setErrorIDIsSet(false);
    this.errorID = 0;
    this.errorMsg = null;
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CThostFtdcErrExecOrderField setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getInvestorID() {
    return this.investorID;
  }

  public CThostFtdcErrExecOrderField setInvestorID(String investorID) {
    this.investorID = investorID;
    return this;
  }

  public void unsetInvestorID() {
    this.investorID = null;
  }

  /** Returns true if field investorID is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorID() {
    return this.investorID != null;
  }

  public void setInvestorIDIsSet(boolean value) {
    if (!value) {
      this.investorID = null;
    }
  }

  public String getInstrumentID() {
    return this.instrumentID;
  }

  public CThostFtdcErrExecOrderField setInstrumentID(String instrumentID) {
    this.instrumentID = instrumentID;
    return this;
  }

  public void unsetInstrumentID() {
    this.instrumentID = null;
  }

  /** Returns true if field instrumentID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstrumentID() {
    return this.instrumentID != null;
  }

  public void setInstrumentIDIsSet(boolean value) {
    if (!value) {
      this.instrumentID = null;
    }
  }

  public String getExecOrderRef() {
    return this.execOrderRef;
  }

  public CThostFtdcErrExecOrderField setExecOrderRef(String execOrderRef) {
    this.execOrderRef = execOrderRef;
    return this;
  }

  public void unsetExecOrderRef() {
    this.execOrderRef = null;
  }

  /** Returns true if field execOrderRef is set (has been assigned a value) and false otherwise */
  public boolean isSetExecOrderRef() {
    return this.execOrderRef != null;
  }

  public void setExecOrderRefIsSet(boolean value) {
    if (!value) {
      this.execOrderRef = null;
    }
  }

  public String getUserID() {
    return this.userID;
  }

  public CThostFtdcErrExecOrderField setUserID(String userID) {
    this.userID = userID;
    return this;
  }

  public void unsetUserID() {
    this.userID = null;
  }

  /** Returns true if field userID is set (has been assigned a value) and false otherwise */
  public boolean isSetUserID() {
    return this.userID != null;
  }

  public void setUserIDIsSet(boolean value) {
    if (!value) {
      this.userID = null;
    }
  }

  public int getVolume() {
    return this.volume;
  }

  public CThostFtdcErrExecOrderField setVolume(int volume) {
    this.volume = volume;
    setVolumeIsSet(true);
    return this;
  }

  public void unsetVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLUME_ISSET_ID);
  }

  /** Returns true if field volume is set (has been assigned a value) and false otherwise */
  public boolean isSetVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __VOLUME_ISSET_ID);
  }

  public void setVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLUME_ISSET_ID, value);
  }

  public int getRequestID() {
    return this.requestID;
  }

  public CThostFtdcErrExecOrderField setRequestID(int requestID) {
    this.requestID = requestID;
    setRequestIDIsSet(true);
    return this;
  }

  public void unsetRequestID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  /** Returns true if field requestID is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestID() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  public void setRequestIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
  }

  public String getBusinessUnit() {
    return this.businessUnit;
  }

  public CThostFtdcErrExecOrderField setBusinessUnit(String businessUnit) {
    this.businessUnit = businessUnit;
    return this;
  }

  public void unsetBusinessUnit() {
    this.businessUnit = null;
  }

  /** Returns true if field businessUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessUnit() {
    return this.businessUnit != null;
  }

  public void setBusinessUnitIsSet(boolean value) {
    if (!value) {
      this.businessUnit = null;
    }
  }

  public String getOffsetFlag() {
    return this.offsetFlag;
  }

  public CThostFtdcErrExecOrderField setOffsetFlag(String offsetFlag) {
    this.offsetFlag = offsetFlag;
    return this;
  }

  public void unsetOffsetFlag() {
    this.offsetFlag = null;
  }

  /** Returns true if field offsetFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetOffsetFlag() {
    return this.offsetFlag != null;
  }

  public void setOffsetFlagIsSet(boolean value) {
    if (!value) {
      this.offsetFlag = null;
    }
  }

  public String getHedgeFlag() {
    return this.hedgeFlag;
  }

  public CThostFtdcErrExecOrderField setHedgeFlag(String hedgeFlag) {
    this.hedgeFlag = hedgeFlag;
    return this;
  }

  public void unsetHedgeFlag() {
    this.hedgeFlag = null;
  }

  /** Returns true if field hedgeFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetHedgeFlag() {
    return this.hedgeFlag != null;
  }

  public void setHedgeFlagIsSet(boolean value) {
    if (!value) {
      this.hedgeFlag = null;
    }
  }

  public String getActionType() {
    return this.actionType;
  }

  public CThostFtdcErrExecOrderField setActionType(String actionType) {
    this.actionType = actionType;
    return this;
  }

  public void unsetActionType() {
    this.actionType = null;
  }

  /** Returns true if field actionType is set (has been assigned a value) and false otherwise */
  public boolean isSetActionType() {
    return this.actionType != null;
  }

  public void setActionTypeIsSet(boolean value) {
    if (!value) {
      this.actionType = null;
    }
  }

  public String getPosiDirection() {
    return this.posiDirection;
  }

  public CThostFtdcErrExecOrderField setPosiDirection(String posiDirection) {
    this.posiDirection = posiDirection;
    return this;
  }

  public void unsetPosiDirection() {
    this.posiDirection = null;
  }

  /** Returns true if field posiDirection is set (has been assigned a value) and false otherwise */
  public boolean isSetPosiDirection() {
    return this.posiDirection != null;
  }

  public void setPosiDirectionIsSet(boolean value) {
    if (!value) {
      this.posiDirection = null;
    }
  }

  public String getReservePositionFlag() {
    return this.reservePositionFlag;
  }

  public CThostFtdcErrExecOrderField setReservePositionFlag(String reservePositionFlag) {
    this.reservePositionFlag = reservePositionFlag;
    return this;
  }

  public void unsetReservePositionFlag() {
    this.reservePositionFlag = null;
  }

  /** Returns true if field reservePositionFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetReservePositionFlag() {
    return this.reservePositionFlag != null;
  }

  public void setReservePositionFlagIsSet(boolean value) {
    if (!value) {
      this.reservePositionFlag = null;
    }
  }

  public String getCloseFlag() {
    return this.closeFlag;
  }

  public CThostFtdcErrExecOrderField setCloseFlag(String closeFlag) {
    this.closeFlag = closeFlag;
    return this;
  }

  public void unsetCloseFlag() {
    this.closeFlag = null;
  }

  /** Returns true if field closeFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseFlag() {
    return this.closeFlag != null;
  }

  public void setCloseFlagIsSet(boolean value) {
    if (!value) {
      this.closeFlag = null;
    }
  }

  public int getErrorID() {
    return this.errorID;
  }

  public CThostFtdcErrExecOrderField setErrorID(int errorID) {
    this.errorID = errorID;
    setErrorIDIsSet(true);
    return this;
  }

  public void unsetErrorID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ERRORID_ISSET_ID);
  }

  /** Returns true if field errorID is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorID() {
    return EncodingUtils.testBit(__isset_bitfield, __ERRORID_ISSET_ID);
  }

  public void setErrorIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ERRORID_ISSET_ID, value);
  }

  public String getErrorMsg() {
    return this.errorMsg;
  }

  public CThostFtdcErrExecOrderField setErrorMsg(String errorMsg) {
    this.errorMsg = errorMsg;
    return this;
  }

  public void unsetErrorMsg() {
    this.errorMsg = null;
  }

  /** Returns true if field errorMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorMsg() {
    return this.errorMsg != null;
  }

  public void setErrorMsgIsSet(boolean value) {
    if (!value) {
      this.errorMsg = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case INVESTOR_ID:
      if (value == null) {
        unsetInvestorID();
      } else {
        setInvestorID((String)value);
      }
      break;

    case INSTRUMENT_ID:
      if (value == null) {
        unsetInstrumentID();
      } else {
        setInstrumentID((String)value);
      }
      break;

    case EXEC_ORDER_REF:
      if (value == null) {
        unsetExecOrderRef();
      } else {
        setExecOrderRef((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserID();
      } else {
        setUserID((String)value);
      }
      break;

    case VOLUME:
      if (value == null) {
        unsetVolume();
      } else {
        setVolume((Integer)value);
      }
      break;

    case REQUEST_ID:
      if (value == null) {
        unsetRequestID();
      } else {
        setRequestID((Integer)value);
      }
      break;

    case BUSINESS_UNIT:
      if (value == null) {
        unsetBusinessUnit();
      } else {
        setBusinessUnit((String)value);
      }
      break;

    case OFFSET_FLAG:
      if (value == null) {
        unsetOffsetFlag();
      } else {
        setOffsetFlag((String)value);
      }
      break;

    case HEDGE_FLAG:
      if (value == null) {
        unsetHedgeFlag();
      } else {
        setHedgeFlag((String)value);
      }
      break;

    case ACTION_TYPE:
      if (value == null) {
        unsetActionType();
      } else {
        setActionType((String)value);
      }
      break;

    case POSI_DIRECTION:
      if (value == null) {
        unsetPosiDirection();
      } else {
        setPosiDirection((String)value);
      }
      break;

    case RESERVE_POSITION_FLAG:
      if (value == null) {
        unsetReservePositionFlag();
      } else {
        setReservePositionFlag((String)value);
      }
      break;

    case CLOSE_FLAG:
      if (value == null) {
        unsetCloseFlag();
      } else {
        setCloseFlag((String)value);
      }
      break;

    case ERROR_ID:
      if (value == null) {
        unsetErrorID();
      } else {
        setErrorID((Integer)value);
      }
      break;

    case ERROR_MSG:
      if (value == null) {
        unsetErrorMsg();
      } else {
        setErrorMsg((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BROKER_ID:
      return getBrokerID();

    case INVESTOR_ID:
      return getInvestorID();

    case INSTRUMENT_ID:
      return getInstrumentID();

    case EXEC_ORDER_REF:
      return getExecOrderRef();

    case USER_ID:
      return getUserID();

    case VOLUME:
      return Integer.valueOf(getVolume());

    case REQUEST_ID:
      return Integer.valueOf(getRequestID());

    case BUSINESS_UNIT:
      return getBusinessUnit();

    case OFFSET_FLAG:
      return getOffsetFlag();

    case HEDGE_FLAG:
      return getHedgeFlag();

    case ACTION_TYPE:
      return getActionType();

    case POSI_DIRECTION:
      return getPosiDirection();

    case RESERVE_POSITION_FLAG:
      return getReservePositionFlag();

    case CLOSE_FLAG:
      return getCloseFlag();

    case ERROR_ID:
      return Integer.valueOf(getErrorID());

    case ERROR_MSG:
      return getErrorMsg();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BROKER_ID:
      return isSetBrokerID();
    case INVESTOR_ID:
      return isSetInvestorID();
    case INSTRUMENT_ID:
      return isSetInstrumentID();
    case EXEC_ORDER_REF:
      return isSetExecOrderRef();
    case USER_ID:
      return isSetUserID();
    case VOLUME:
      return isSetVolume();
    case REQUEST_ID:
      return isSetRequestID();
    case BUSINESS_UNIT:
      return isSetBusinessUnit();
    case OFFSET_FLAG:
      return isSetOffsetFlag();
    case HEDGE_FLAG:
      return isSetHedgeFlag();
    case ACTION_TYPE:
      return isSetActionType();
    case POSI_DIRECTION:
      return isSetPosiDirection();
    case RESERVE_POSITION_FLAG:
      return isSetReservePositionFlag();
    case CLOSE_FLAG:
      return isSetCloseFlag();
    case ERROR_ID:
      return isSetErrorID();
    case ERROR_MSG:
      return isSetErrorMsg();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcErrExecOrderField)
      return this.equals((CThostFtdcErrExecOrderField)that);
    return false;
  }

  public boolean equals(CThostFtdcErrExecOrderField that) {
    if (that == null)
      return false;

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_investorID = true && this.isSetInvestorID();
    boolean that_present_investorID = true && that.isSetInvestorID();
    if (this_present_investorID || that_present_investorID) {
      if (!(this_present_investorID && that_present_investorID))
        return false;
      if (!this.investorID.equals(that.investorID))
        return false;
    }

    boolean this_present_instrumentID = true && this.isSetInstrumentID();
    boolean that_present_instrumentID = true && that.isSetInstrumentID();
    if (this_present_instrumentID || that_present_instrumentID) {
      if (!(this_present_instrumentID && that_present_instrumentID))
        return false;
      if (!this.instrumentID.equals(that.instrumentID))
        return false;
    }

    boolean this_present_execOrderRef = true && this.isSetExecOrderRef();
    boolean that_present_execOrderRef = true && that.isSetExecOrderRef();
    if (this_present_execOrderRef || that_present_execOrderRef) {
      if (!(this_present_execOrderRef && that_present_execOrderRef))
        return false;
      if (!this.execOrderRef.equals(that.execOrderRef))
        return false;
    }

    boolean this_present_userID = true && this.isSetUserID();
    boolean that_present_userID = true && that.isSetUserID();
    if (this_present_userID || that_present_userID) {
      if (!(this_present_userID && that_present_userID))
        return false;
      if (!this.userID.equals(that.userID))
        return false;
    }

    boolean this_present_volume = true;
    boolean that_present_volume = true;
    if (this_present_volume || that_present_volume) {
      if (!(this_present_volume && that_present_volume))
        return false;
      if (this.volume != that.volume)
        return false;
    }

    boolean this_present_requestID = true;
    boolean that_present_requestID = true;
    if (this_present_requestID || that_present_requestID) {
      if (!(this_present_requestID && that_present_requestID))
        return false;
      if (this.requestID != that.requestID)
        return false;
    }

    boolean this_present_businessUnit = true && this.isSetBusinessUnit();
    boolean that_present_businessUnit = true && that.isSetBusinessUnit();
    if (this_present_businessUnit || that_present_businessUnit) {
      if (!(this_present_businessUnit && that_present_businessUnit))
        return false;
      if (!this.businessUnit.equals(that.businessUnit))
        return false;
    }

    boolean this_present_offsetFlag = true && this.isSetOffsetFlag();
    boolean that_present_offsetFlag = true && that.isSetOffsetFlag();
    if (this_present_offsetFlag || that_present_offsetFlag) {
      if (!(this_present_offsetFlag && that_present_offsetFlag))
        return false;
      if (!this.offsetFlag.equals(that.offsetFlag))
        return false;
    }

    boolean this_present_hedgeFlag = true && this.isSetHedgeFlag();
    boolean that_present_hedgeFlag = true && that.isSetHedgeFlag();
    if (this_present_hedgeFlag || that_present_hedgeFlag) {
      if (!(this_present_hedgeFlag && that_present_hedgeFlag))
        return false;
      if (!this.hedgeFlag.equals(that.hedgeFlag))
        return false;
    }

    boolean this_present_actionType = true && this.isSetActionType();
    boolean that_present_actionType = true && that.isSetActionType();
    if (this_present_actionType || that_present_actionType) {
      if (!(this_present_actionType && that_present_actionType))
        return false;
      if (!this.actionType.equals(that.actionType))
        return false;
    }

    boolean this_present_posiDirection = true && this.isSetPosiDirection();
    boolean that_present_posiDirection = true && that.isSetPosiDirection();
    if (this_present_posiDirection || that_present_posiDirection) {
      if (!(this_present_posiDirection && that_present_posiDirection))
        return false;
      if (!this.posiDirection.equals(that.posiDirection))
        return false;
    }

    boolean this_present_reservePositionFlag = true && this.isSetReservePositionFlag();
    boolean that_present_reservePositionFlag = true && that.isSetReservePositionFlag();
    if (this_present_reservePositionFlag || that_present_reservePositionFlag) {
      if (!(this_present_reservePositionFlag && that_present_reservePositionFlag))
        return false;
      if (!this.reservePositionFlag.equals(that.reservePositionFlag))
        return false;
    }

    boolean this_present_closeFlag = true && this.isSetCloseFlag();
    boolean that_present_closeFlag = true && that.isSetCloseFlag();
    if (this_present_closeFlag || that_present_closeFlag) {
      if (!(this_present_closeFlag && that_present_closeFlag))
        return false;
      if (!this.closeFlag.equals(that.closeFlag))
        return false;
    }

    boolean this_present_errorID = true;
    boolean that_present_errorID = true;
    if (this_present_errorID || that_present_errorID) {
      if (!(this_present_errorID && that_present_errorID))
        return false;
      if (this.errorID != that.errorID)
        return false;
    }

    boolean this_present_errorMsg = true && this.isSetErrorMsg();
    boolean that_present_errorMsg = true && that.isSetErrorMsg();
    if (this_present_errorMsg || that_present_errorMsg) {
      if (!(this_present_errorMsg && that_present_errorMsg))
        return false;
      if (!this.errorMsg.equals(that.errorMsg))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcErrExecOrderField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestorID()).compareTo(other.isSetInvestorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorID, other.investorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstrumentID()).compareTo(other.isSetInstrumentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstrumentID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instrumentID, other.instrumentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecOrderRef()).compareTo(other.isSetExecOrderRef());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecOrderRef()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execOrderRef, other.execOrderRef);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserID()).compareTo(other.isSetUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, other.userID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolume()).compareTo(other.isSetVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volume, other.volume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestID()).compareTo(other.isSetRequestID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestID, other.requestID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessUnit()).compareTo(other.isSetBusinessUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessUnit, other.businessUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffsetFlag()).compareTo(other.isSetOffsetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffsetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offsetFlag, other.offsetFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHedgeFlag()).compareTo(other.isSetHedgeFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHedgeFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hedgeFlag, other.hedgeFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionType()).compareTo(other.isSetActionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionType, other.actionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosiDirection()).compareTo(other.isSetPosiDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosiDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.posiDirection, other.posiDirection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReservePositionFlag()).compareTo(other.isSetReservePositionFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReservePositionFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reservePositionFlag, other.reservePositionFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseFlag()).compareTo(other.isSetCloseFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeFlag, other.closeFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrorID()).compareTo(other.isSetErrorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorID, other.errorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrorMsg()).compareTo(other.isSetErrorMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorMsg, other.errorMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcErrExecOrderField(");
    boolean first = true;

    sb.append("brokerID:");
    if (this.brokerID == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("investorID:");
    if (this.investorID == null) {
      sb.append("null");
    } else {
      sb.append(this.investorID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("instrumentID:");
    if (this.instrumentID == null) {
      sb.append("null");
    } else {
      sb.append(this.instrumentID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("execOrderRef:");
    if (this.execOrderRef == null) {
      sb.append("null");
    } else {
      sb.append(this.execOrderRef);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userID:");
    if (this.userID == null) {
      sb.append("null");
    } else {
      sb.append(this.userID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("volume:");
    sb.append(this.volume);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestID:");
    sb.append(this.requestID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessUnit:");
    if (this.businessUnit == null) {
      sb.append("null");
    } else {
      sb.append(this.businessUnit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("offsetFlag:");
    if (this.offsetFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.offsetFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hedgeFlag:");
    if (this.hedgeFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.hedgeFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actionType:");
    if (this.actionType == null) {
      sb.append("null");
    } else {
      sb.append(this.actionType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("posiDirection:");
    if (this.posiDirection == null) {
      sb.append("null");
    } else {
      sb.append(this.posiDirection);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reservePositionFlag:");
    if (this.reservePositionFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.reservePositionFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("closeFlag:");
    if (this.closeFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.closeFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("errorID:");
    sb.append(this.errorID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errorMsg:");
    if (this.errorMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.errorMsg);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcErrExecOrderFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcErrExecOrderFieldStandardScheme getScheme() {
      return new CThostFtdcErrExecOrderFieldStandardScheme();
    }
  }

  private static class CThostFtdcErrExecOrderFieldStandardScheme extends StandardScheme<CThostFtdcErrExecOrderField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcErrExecOrderField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INVESTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorID = iprot.readString();
              struct.setInvestorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INSTRUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instrumentID = iprot.readString();
              struct.setInstrumentIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXEC_ORDER_REF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.execOrderRef = iprot.readString();
              struct.setExecOrderRefIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userID = iprot.readString();
              struct.setUserIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.volume = iprot.readI32();
              struct.setVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestID = iprot.readI32();
              struct.setRequestIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BUSINESS_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessUnit = iprot.readString();
              struct.setBusinessUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OFFSET_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.offsetFlag = iprot.readString();
              struct.setOffsetFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // HEDGE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hedgeFlag = iprot.readString();
              struct.setHedgeFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ACTION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actionType = iprot.readString();
              struct.setActionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // POSI_DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.posiDirection = iprot.readString();
              struct.setPosiDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // RESERVE_POSITION_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reservePositionFlag = iprot.readString();
              struct.setReservePositionFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CLOSE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.closeFlag = iprot.readString();
              struct.setCloseFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ERROR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.errorID = iprot.readI32();
              struct.setErrorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ERROR_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorMsg = iprot.readString();
              struct.setErrorMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcErrExecOrderField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.brokerID != null) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerID);
        oprot.writeFieldEnd();
      }
      if (struct.investorID != null) {
        oprot.writeFieldBegin(INVESTOR_ID_FIELD_DESC);
        oprot.writeString(struct.investorID);
        oprot.writeFieldEnd();
      }
      if (struct.instrumentID != null) {
        oprot.writeFieldBegin(INSTRUMENT_ID_FIELD_DESC);
        oprot.writeString(struct.instrumentID);
        oprot.writeFieldEnd();
      }
      if (struct.execOrderRef != null) {
        oprot.writeFieldBegin(EXEC_ORDER_REF_FIELD_DESC);
        oprot.writeString(struct.execOrderRef);
        oprot.writeFieldEnd();
      }
      if (struct.userID != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VOLUME_FIELD_DESC);
      oprot.writeI32(struct.volume);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
      oprot.writeI32(struct.requestID);
      oprot.writeFieldEnd();
      if (struct.businessUnit != null) {
        oprot.writeFieldBegin(BUSINESS_UNIT_FIELD_DESC);
        oprot.writeString(struct.businessUnit);
        oprot.writeFieldEnd();
      }
      if (struct.offsetFlag != null) {
        oprot.writeFieldBegin(OFFSET_FLAG_FIELD_DESC);
        oprot.writeString(struct.offsetFlag);
        oprot.writeFieldEnd();
      }
      if (struct.hedgeFlag != null) {
        oprot.writeFieldBegin(HEDGE_FLAG_FIELD_DESC);
        oprot.writeString(struct.hedgeFlag);
        oprot.writeFieldEnd();
      }
      if (struct.actionType != null) {
        oprot.writeFieldBegin(ACTION_TYPE_FIELD_DESC);
        oprot.writeString(struct.actionType);
        oprot.writeFieldEnd();
      }
      if (struct.posiDirection != null) {
        oprot.writeFieldBegin(POSI_DIRECTION_FIELD_DESC);
        oprot.writeString(struct.posiDirection);
        oprot.writeFieldEnd();
      }
      if (struct.reservePositionFlag != null) {
        oprot.writeFieldBegin(RESERVE_POSITION_FLAG_FIELD_DESC);
        oprot.writeString(struct.reservePositionFlag);
        oprot.writeFieldEnd();
      }
      if (struct.closeFlag != null) {
        oprot.writeFieldBegin(CLOSE_FLAG_FIELD_DESC);
        oprot.writeString(struct.closeFlag);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ERROR_ID_FIELD_DESC);
      oprot.writeI32(struct.errorID);
      oprot.writeFieldEnd();
      if (struct.errorMsg != null) {
        oprot.writeFieldBegin(ERROR_MSG_FIELD_DESC);
        oprot.writeString(struct.errorMsg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcErrExecOrderFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcErrExecOrderFieldTupleScheme getScheme() {
      return new CThostFtdcErrExecOrderFieldTupleScheme();
    }
  }

  private static class CThostFtdcErrExecOrderFieldTupleScheme extends TupleScheme<CThostFtdcErrExecOrderField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcErrExecOrderField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBrokerID()) {
        optionals.set(0);
      }
      if (struct.isSetInvestorID()) {
        optionals.set(1);
      }
      if (struct.isSetInstrumentID()) {
        optionals.set(2);
      }
      if (struct.isSetExecOrderRef()) {
        optionals.set(3);
      }
      if (struct.isSetUserID()) {
        optionals.set(4);
      }
      if (struct.isSetVolume()) {
        optionals.set(5);
      }
      if (struct.isSetRequestID()) {
        optionals.set(6);
      }
      if (struct.isSetBusinessUnit()) {
        optionals.set(7);
      }
      if (struct.isSetOffsetFlag()) {
        optionals.set(8);
      }
      if (struct.isSetHedgeFlag()) {
        optionals.set(9);
      }
      if (struct.isSetActionType()) {
        optionals.set(10);
      }
      if (struct.isSetPosiDirection()) {
        optionals.set(11);
      }
      if (struct.isSetReservePositionFlag()) {
        optionals.set(12);
      }
      if (struct.isSetCloseFlag()) {
        optionals.set(13);
      }
      if (struct.isSetErrorID()) {
        optionals.set(14);
      }
      if (struct.isSetErrorMsg()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetInvestorID()) {
        oprot.writeString(struct.investorID);
      }
      if (struct.isSetInstrumentID()) {
        oprot.writeString(struct.instrumentID);
      }
      if (struct.isSetExecOrderRef()) {
        oprot.writeString(struct.execOrderRef);
      }
      if (struct.isSetUserID()) {
        oprot.writeString(struct.userID);
      }
      if (struct.isSetVolume()) {
        oprot.writeI32(struct.volume);
      }
      if (struct.isSetRequestID()) {
        oprot.writeI32(struct.requestID);
      }
      if (struct.isSetBusinessUnit()) {
        oprot.writeString(struct.businessUnit);
      }
      if (struct.isSetOffsetFlag()) {
        oprot.writeString(struct.offsetFlag);
      }
      if (struct.isSetHedgeFlag()) {
        oprot.writeString(struct.hedgeFlag);
      }
      if (struct.isSetActionType()) {
        oprot.writeString(struct.actionType);
      }
      if (struct.isSetPosiDirection()) {
        oprot.writeString(struct.posiDirection);
      }
      if (struct.isSetReservePositionFlag()) {
        oprot.writeString(struct.reservePositionFlag);
      }
      if (struct.isSetCloseFlag()) {
        oprot.writeString(struct.closeFlag);
      }
      if (struct.isSetErrorID()) {
        oprot.writeI32(struct.errorID);
      }
      if (struct.isSetErrorMsg()) {
        oprot.writeString(struct.errorMsg);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcErrExecOrderField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.investorID = iprot.readString();
        struct.setInvestorIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.instrumentID = iprot.readString();
        struct.setInstrumentIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.execOrderRef = iprot.readString();
        struct.setExecOrderRefIsSet(true);
      }
      if (incoming.get(4)) {
        struct.userID = iprot.readString();
        struct.setUserIDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.volume = iprot.readI32();
        struct.setVolumeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.requestID = iprot.readI32();
        struct.setRequestIDIsSet(true);
      }
      if (incoming.get(7)) {
        struct.businessUnit = iprot.readString();
        struct.setBusinessUnitIsSet(true);
      }
      if (incoming.get(8)) {
        struct.offsetFlag = iprot.readString();
        struct.setOffsetFlagIsSet(true);
      }
      if (incoming.get(9)) {
        struct.hedgeFlag = iprot.readString();
        struct.setHedgeFlagIsSet(true);
      }
      if (incoming.get(10)) {
        struct.actionType = iprot.readString();
        struct.setActionTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.posiDirection = iprot.readString();
        struct.setPosiDirectionIsSet(true);
      }
      if (incoming.get(12)) {
        struct.reservePositionFlag = iprot.readString();
        struct.setReservePositionFlagIsSet(true);
      }
      if (incoming.get(13)) {
        struct.closeFlag = iprot.readString();
        struct.setCloseFlagIsSet(true);
      }
      if (incoming.get(14)) {
        struct.errorID = iprot.readI32();
        struct.setErrorIDIsSet(true);
      }
      if (incoming.get(15)) {
        struct.errorMsg = iprot.readString();
        struct.setErrorMsgIsSet(true);
      }
    }
  }

}

