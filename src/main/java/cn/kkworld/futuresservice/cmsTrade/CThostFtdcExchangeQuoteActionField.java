/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kkworld.futuresservice.cmsTrade;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CThostFtdcExchangeQuoteActionField implements org.apache.thrift.TBase<CThostFtdcExchangeQuoteActionField, CThostFtdcExchangeQuoteActionField._Fields>, java.io.Serializable, Cloneable, Comparable<CThostFtdcExchangeQuoteActionField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CThostFtdcExchangeQuoteActionField");

  private static final org.apache.thrift.protocol.TField EXCHANGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField QUOTE_SYS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("quoteSysID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ACTION_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("actionFlag", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ACTION_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("actionDate", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ACTION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("actionTime", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TRADER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("traderID", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField INSTALL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("installID", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField QUOTE_LOCAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("quoteLocalID", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ACTION_LOCAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("actionLocalID", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PARTICIPANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("participantID", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientID", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField BUSINESS_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("businessUnit", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField ORDER_ACTION_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("orderActionStatus", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CThostFtdcExchangeQuoteActionFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CThostFtdcExchangeQuoteActionFieldTupleSchemeFactory());
  }

  public String exchangeID; // required
  public String quoteSysID; // required
  public String actionFlag; // required
  public String actionDate; // required
  public String actionTime; // required
  public String traderID; // required
  public int installID; // required
  public String quoteLocalID; // required
  public String actionLocalID; // required
  public String participantID; // required
  public String clientID; // required
  public String businessUnit; // required
  public String orderActionStatus; // required
  public String userID; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXCHANGE_ID((short)1, "exchangeID"),
    QUOTE_SYS_ID((short)2, "quoteSysID"),
    ACTION_FLAG((short)3, "actionFlag"),
    ACTION_DATE((short)4, "actionDate"),
    ACTION_TIME((short)5, "actionTime"),
    TRADER_ID((short)6, "traderID"),
    INSTALL_ID((short)7, "installID"),
    QUOTE_LOCAL_ID((short)8, "quoteLocalID"),
    ACTION_LOCAL_ID((short)9, "actionLocalID"),
    PARTICIPANT_ID((short)10, "participantID"),
    CLIENT_ID((short)11, "clientID"),
    BUSINESS_UNIT((short)12, "businessUnit"),
    ORDER_ACTION_STATUS((short)13, "orderActionStatus"),
    USER_ID((short)14, "userID");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXCHANGE_ID
          return EXCHANGE_ID;
        case 2: // QUOTE_SYS_ID
          return QUOTE_SYS_ID;
        case 3: // ACTION_FLAG
          return ACTION_FLAG;
        case 4: // ACTION_DATE
          return ACTION_DATE;
        case 5: // ACTION_TIME
          return ACTION_TIME;
        case 6: // TRADER_ID
          return TRADER_ID;
        case 7: // INSTALL_ID
          return INSTALL_ID;
        case 8: // QUOTE_LOCAL_ID
          return QUOTE_LOCAL_ID;
        case 9: // ACTION_LOCAL_ID
          return ACTION_LOCAL_ID;
        case 10: // PARTICIPANT_ID
          return PARTICIPANT_ID;
        case 11: // CLIENT_ID
          return CLIENT_ID;
        case 12: // BUSINESS_UNIT
          return BUSINESS_UNIT;
        case 13: // ORDER_ACTION_STATUS
          return ORDER_ACTION_STATUS;
        case 14: // USER_ID
          return USER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INSTALLID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXCHANGE_ID, new org.apache.thrift.meta_data.FieldMetaData("exchangeID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcExchangeIDType")));
    tmpMap.put(_Fields.QUOTE_SYS_ID, new org.apache.thrift.meta_data.FieldMetaData("quoteSysID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderSysIDType")));
    tmpMap.put(_Fields.ACTION_FLAG, new org.apache.thrift.meta_data.FieldMetaData("actionFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcActionFlagType")));
    tmpMap.put(_Fields.ACTION_DATE, new org.apache.thrift.meta_data.FieldMetaData("actionDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcDateType")));
    tmpMap.put(_Fields.ACTION_TIME, new org.apache.thrift.meta_data.FieldMetaData("actionTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTimeType")));
    tmpMap.put(_Fields.TRADER_ID, new org.apache.thrift.meta_data.FieldMetaData("traderID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcTraderIDType")));
    tmpMap.put(_Fields.INSTALL_ID, new org.apache.thrift.meta_data.FieldMetaData("installID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TThostFtdcInstallIDType")));
    tmpMap.put(_Fields.QUOTE_LOCAL_ID, new org.apache.thrift.meta_data.FieldMetaData("quoteLocalID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderLocalIDType")));
    tmpMap.put(_Fields.ACTION_LOCAL_ID, new org.apache.thrift.meta_data.FieldMetaData("actionLocalID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderLocalIDType")));
    tmpMap.put(_Fields.PARTICIPANT_ID, new org.apache.thrift.meta_data.FieldMetaData("participantID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcParticipantIDType")));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcClientIDType")));
    tmpMap.put(_Fields.BUSINESS_UNIT, new org.apache.thrift.meta_data.FieldMetaData("businessUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcBusinessUnitType")));
    tmpMap.put(_Fields.ORDER_ACTION_STATUS, new org.apache.thrift.meta_data.FieldMetaData("orderActionStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcOrderActionStatusType")));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TThostFtdcUserIDType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CThostFtdcExchangeQuoteActionField.class, metaDataMap);
  }

  public CThostFtdcExchangeQuoteActionField() {
  }

  public CThostFtdcExchangeQuoteActionField(
    String exchangeID,
    String quoteSysID,
    String actionFlag,
    String actionDate,
    String actionTime,
    String traderID,
    int installID,
    String quoteLocalID,
    String actionLocalID,
    String participantID,
    String clientID,
    String businessUnit,
    String orderActionStatus,
    String userID)
  {
    this();
    this.exchangeID = exchangeID;
    this.quoteSysID = quoteSysID;
    this.actionFlag = actionFlag;
    this.actionDate = actionDate;
    this.actionTime = actionTime;
    this.traderID = traderID;
    this.installID = installID;
    setInstallIDIsSet(true);
    this.quoteLocalID = quoteLocalID;
    this.actionLocalID = actionLocalID;
    this.participantID = participantID;
    this.clientID = clientID;
    this.businessUnit = businessUnit;
    this.orderActionStatus = orderActionStatus;
    this.userID = userID;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CThostFtdcExchangeQuoteActionField(CThostFtdcExchangeQuoteActionField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetExchangeID()) {
      this.exchangeID = other.exchangeID;
    }
    if (other.isSetQuoteSysID()) {
      this.quoteSysID = other.quoteSysID;
    }
    if (other.isSetActionFlag()) {
      this.actionFlag = other.actionFlag;
    }
    if (other.isSetActionDate()) {
      this.actionDate = other.actionDate;
    }
    if (other.isSetActionTime()) {
      this.actionTime = other.actionTime;
    }
    if (other.isSetTraderID()) {
      this.traderID = other.traderID;
    }
    this.installID = other.installID;
    if (other.isSetQuoteLocalID()) {
      this.quoteLocalID = other.quoteLocalID;
    }
    if (other.isSetActionLocalID()) {
      this.actionLocalID = other.actionLocalID;
    }
    if (other.isSetParticipantID()) {
      this.participantID = other.participantID;
    }
    if (other.isSetClientID()) {
      this.clientID = other.clientID;
    }
    if (other.isSetBusinessUnit()) {
      this.businessUnit = other.businessUnit;
    }
    if (other.isSetOrderActionStatus()) {
      this.orderActionStatus = other.orderActionStatus;
    }
    if (other.isSetUserID()) {
      this.userID = other.userID;
    }
  }

  public CThostFtdcExchangeQuoteActionField deepCopy() {
    return new CThostFtdcExchangeQuoteActionField(this);
  }

  @Override
  public void clear() {
    this.exchangeID = null;
    this.quoteSysID = null;
    this.actionFlag = null;
    this.actionDate = null;
    this.actionTime = null;
    this.traderID = null;
    setInstallIDIsSet(false);
    this.installID = 0;
    this.quoteLocalID = null;
    this.actionLocalID = null;
    this.participantID = null;
    this.clientID = null;
    this.businessUnit = null;
    this.orderActionStatus = null;
    this.userID = null;
  }

  public String getExchangeID() {
    return this.exchangeID;
  }

  public CThostFtdcExchangeQuoteActionField setExchangeID(String exchangeID) {
    this.exchangeID = exchangeID;
    return this;
  }

  public void unsetExchangeID() {
    this.exchangeID = null;
  }

  /** Returns true if field exchangeID is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeID() {
    return this.exchangeID != null;
  }

  public void setExchangeIDIsSet(boolean value) {
    if (!value) {
      this.exchangeID = null;
    }
  }

  public String getQuoteSysID() {
    return this.quoteSysID;
  }

  public CThostFtdcExchangeQuoteActionField setQuoteSysID(String quoteSysID) {
    this.quoteSysID = quoteSysID;
    return this;
  }

  public void unsetQuoteSysID() {
    this.quoteSysID = null;
  }

  /** Returns true if field quoteSysID is set (has been assigned a value) and false otherwise */
  public boolean isSetQuoteSysID() {
    return this.quoteSysID != null;
  }

  public void setQuoteSysIDIsSet(boolean value) {
    if (!value) {
      this.quoteSysID = null;
    }
  }

  public String getActionFlag() {
    return this.actionFlag;
  }

  public CThostFtdcExchangeQuoteActionField setActionFlag(String actionFlag) {
    this.actionFlag = actionFlag;
    return this;
  }

  public void unsetActionFlag() {
    this.actionFlag = null;
  }

  /** Returns true if field actionFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetActionFlag() {
    return this.actionFlag != null;
  }

  public void setActionFlagIsSet(boolean value) {
    if (!value) {
      this.actionFlag = null;
    }
  }

  public String getActionDate() {
    return this.actionDate;
  }

  public CThostFtdcExchangeQuoteActionField setActionDate(String actionDate) {
    this.actionDate = actionDate;
    return this;
  }

  public void unsetActionDate() {
    this.actionDate = null;
  }

  /** Returns true if field actionDate is set (has been assigned a value) and false otherwise */
  public boolean isSetActionDate() {
    return this.actionDate != null;
  }

  public void setActionDateIsSet(boolean value) {
    if (!value) {
      this.actionDate = null;
    }
  }

  public String getActionTime() {
    return this.actionTime;
  }

  public CThostFtdcExchangeQuoteActionField setActionTime(String actionTime) {
    this.actionTime = actionTime;
    return this;
  }

  public void unsetActionTime() {
    this.actionTime = null;
  }

  /** Returns true if field actionTime is set (has been assigned a value) and false otherwise */
  public boolean isSetActionTime() {
    return this.actionTime != null;
  }

  public void setActionTimeIsSet(boolean value) {
    if (!value) {
      this.actionTime = null;
    }
  }

  public String getTraderID() {
    return this.traderID;
  }

  public CThostFtdcExchangeQuoteActionField setTraderID(String traderID) {
    this.traderID = traderID;
    return this;
  }

  public void unsetTraderID() {
    this.traderID = null;
  }

  /** Returns true if field traderID is set (has been assigned a value) and false otherwise */
  public boolean isSetTraderID() {
    return this.traderID != null;
  }

  public void setTraderIDIsSet(boolean value) {
    if (!value) {
      this.traderID = null;
    }
  }

  public int getInstallID() {
    return this.installID;
  }

  public CThostFtdcExchangeQuoteActionField setInstallID(int installID) {
    this.installID = installID;
    setInstallIDIsSet(true);
    return this;
  }

  public void unsetInstallID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSTALLID_ISSET_ID);
  }

  /** Returns true if field installID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstallID() {
    return EncodingUtils.testBit(__isset_bitfield, __INSTALLID_ISSET_ID);
  }

  public void setInstallIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSTALLID_ISSET_ID, value);
  }

  public String getQuoteLocalID() {
    return this.quoteLocalID;
  }

  public CThostFtdcExchangeQuoteActionField setQuoteLocalID(String quoteLocalID) {
    this.quoteLocalID = quoteLocalID;
    return this;
  }

  public void unsetQuoteLocalID() {
    this.quoteLocalID = null;
  }

  /** Returns true if field quoteLocalID is set (has been assigned a value) and false otherwise */
  public boolean isSetQuoteLocalID() {
    return this.quoteLocalID != null;
  }

  public void setQuoteLocalIDIsSet(boolean value) {
    if (!value) {
      this.quoteLocalID = null;
    }
  }

  public String getActionLocalID() {
    return this.actionLocalID;
  }

  public CThostFtdcExchangeQuoteActionField setActionLocalID(String actionLocalID) {
    this.actionLocalID = actionLocalID;
    return this;
  }

  public void unsetActionLocalID() {
    this.actionLocalID = null;
  }

  /** Returns true if field actionLocalID is set (has been assigned a value) and false otherwise */
  public boolean isSetActionLocalID() {
    return this.actionLocalID != null;
  }

  public void setActionLocalIDIsSet(boolean value) {
    if (!value) {
      this.actionLocalID = null;
    }
  }

  public String getParticipantID() {
    return this.participantID;
  }

  public CThostFtdcExchangeQuoteActionField setParticipantID(String participantID) {
    this.participantID = participantID;
    return this;
  }

  public void unsetParticipantID() {
    this.participantID = null;
  }

  /** Returns true if field participantID is set (has been assigned a value) and false otherwise */
  public boolean isSetParticipantID() {
    return this.participantID != null;
  }

  public void setParticipantIDIsSet(boolean value) {
    if (!value) {
      this.participantID = null;
    }
  }

  public String getClientID() {
    return this.clientID;
  }

  public CThostFtdcExchangeQuoteActionField setClientID(String clientID) {
    this.clientID = clientID;
    return this;
  }

  public void unsetClientID() {
    this.clientID = null;
  }

  /** Returns true if field clientID is set (has been assigned a value) and false otherwise */
  public boolean isSetClientID() {
    return this.clientID != null;
  }

  public void setClientIDIsSet(boolean value) {
    if (!value) {
      this.clientID = null;
    }
  }

  public String getBusinessUnit() {
    return this.businessUnit;
  }

  public CThostFtdcExchangeQuoteActionField setBusinessUnit(String businessUnit) {
    this.businessUnit = businessUnit;
    return this;
  }

  public void unsetBusinessUnit() {
    this.businessUnit = null;
  }

  /** Returns true if field businessUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessUnit() {
    return this.businessUnit != null;
  }

  public void setBusinessUnitIsSet(boolean value) {
    if (!value) {
      this.businessUnit = null;
    }
  }

  public String getOrderActionStatus() {
    return this.orderActionStatus;
  }

  public CThostFtdcExchangeQuoteActionField setOrderActionStatus(String orderActionStatus) {
    this.orderActionStatus = orderActionStatus;
    return this;
  }

  public void unsetOrderActionStatus() {
    this.orderActionStatus = null;
  }

  /** Returns true if field orderActionStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderActionStatus() {
    return this.orderActionStatus != null;
  }

  public void setOrderActionStatusIsSet(boolean value) {
    if (!value) {
      this.orderActionStatus = null;
    }
  }

  public String getUserID() {
    return this.userID;
  }

  public CThostFtdcExchangeQuoteActionField setUserID(String userID) {
    this.userID = userID;
    return this;
  }

  public void unsetUserID() {
    this.userID = null;
  }

  /** Returns true if field userID is set (has been assigned a value) and false otherwise */
  public boolean isSetUserID() {
    return this.userID != null;
  }

  public void setUserIDIsSet(boolean value) {
    if (!value) {
      this.userID = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXCHANGE_ID:
      if (value == null) {
        unsetExchangeID();
      } else {
        setExchangeID((String)value);
      }
      break;

    case QUOTE_SYS_ID:
      if (value == null) {
        unsetQuoteSysID();
      } else {
        setQuoteSysID((String)value);
      }
      break;

    case ACTION_FLAG:
      if (value == null) {
        unsetActionFlag();
      } else {
        setActionFlag((String)value);
      }
      break;

    case ACTION_DATE:
      if (value == null) {
        unsetActionDate();
      } else {
        setActionDate((String)value);
      }
      break;

    case ACTION_TIME:
      if (value == null) {
        unsetActionTime();
      } else {
        setActionTime((String)value);
      }
      break;

    case TRADER_ID:
      if (value == null) {
        unsetTraderID();
      } else {
        setTraderID((String)value);
      }
      break;

    case INSTALL_ID:
      if (value == null) {
        unsetInstallID();
      } else {
        setInstallID((Integer)value);
      }
      break;

    case QUOTE_LOCAL_ID:
      if (value == null) {
        unsetQuoteLocalID();
      } else {
        setQuoteLocalID((String)value);
      }
      break;

    case ACTION_LOCAL_ID:
      if (value == null) {
        unsetActionLocalID();
      } else {
        setActionLocalID((String)value);
      }
      break;

    case PARTICIPANT_ID:
      if (value == null) {
        unsetParticipantID();
      } else {
        setParticipantID((String)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientID();
      } else {
        setClientID((String)value);
      }
      break;

    case BUSINESS_UNIT:
      if (value == null) {
        unsetBusinessUnit();
      } else {
        setBusinessUnit((String)value);
      }
      break;

    case ORDER_ACTION_STATUS:
      if (value == null) {
        unsetOrderActionStatus();
      } else {
        setOrderActionStatus((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserID();
      } else {
        setUserID((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXCHANGE_ID:
      return getExchangeID();

    case QUOTE_SYS_ID:
      return getQuoteSysID();

    case ACTION_FLAG:
      return getActionFlag();

    case ACTION_DATE:
      return getActionDate();

    case ACTION_TIME:
      return getActionTime();

    case TRADER_ID:
      return getTraderID();

    case INSTALL_ID:
      return Integer.valueOf(getInstallID());

    case QUOTE_LOCAL_ID:
      return getQuoteLocalID();

    case ACTION_LOCAL_ID:
      return getActionLocalID();

    case PARTICIPANT_ID:
      return getParticipantID();

    case CLIENT_ID:
      return getClientID();

    case BUSINESS_UNIT:
      return getBusinessUnit();

    case ORDER_ACTION_STATUS:
      return getOrderActionStatus();

    case USER_ID:
      return getUserID();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXCHANGE_ID:
      return isSetExchangeID();
    case QUOTE_SYS_ID:
      return isSetQuoteSysID();
    case ACTION_FLAG:
      return isSetActionFlag();
    case ACTION_DATE:
      return isSetActionDate();
    case ACTION_TIME:
      return isSetActionTime();
    case TRADER_ID:
      return isSetTraderID();
    case INSTALL_ID:
      return isSetInstallID();
    case QUOTE_LOCAL_ID:
      return isSetQuoteLocalID();
    case ACTION_LOCAL_ID:
      return isSetActionLocalID();
    case PARTICIPANT_ID:
      return isSetParticipantID();
    case CLIENT_ID:
      return isSetClientID();
    case BUSINESS_UNIT:
      return isSetBusinessUnit();
    case ORDER_ACTION_STATUS:
      return isSetOrderActionStatus();
    case USER_ID:
      return isSetUserID();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CThostFtdcExchangeQuoteActionField)
      return this.equals((CThostFtdcExchangeQuoteActionField)that);
    return false;
  }

  public boolean equals(CThostFtdcExchangeQuoteActionField that) {
    if (that == null)
      return false;

    boolean this_present_exchangeID = true && this.isSetExchangeID();
    boolean that_present_exchangeID = true && that.isSetExchangeID();
    if (this_present_exchangeID || that_present_exchangeID) {
      if (!(this_present_exchangeID && that_present_exchangeID))
        return false;
      if (!this.exchangeID.equals(that.exchangeID))
        return false;
    }

    boolean this_present_quoteSysID = true && this.isSetQuoteSysID();
    boolean that_present_quoteSysID = true && that.isSetQuoteSysID();
    if (this_present_quoteSysID || that_present_quoteSysID) {
      if (!(this_present_quoteSysID && that_present_quoteSysID))
        return false;
      if (!this.quoteSysID.equals(that.quoteSysID))
        return false;
    }

    boolean this_present_actionFlag = true && this.isSetActionFlag();
    boolean that_present_actionFlag = true && that.isSetActionFlag();
    if (this_present_actionFlag || that_present_actionFlag) {
      if (!(this_present_actionFlag && that_present_actionFlag))
        return false;
      if (!this.actionFlag.equals(that.actionFlag))
        return false;
    }

    boolean this_present_actionDate = true && this.isSetActionDate();
    boolean that_present_actionDate = true && that.isSetActionDate();
    if (this_present_actionDate || that_present_actionDate) {
      if (!(this_present_actionDate && that_present_actionDate))
        return false;
      if (!this.actionDate.equals(that.actionDate))
        return false;
    }

    boolean this_present_actionTime = true && this.isSetActionTime();
    boolean that_present_actionTime = true && that.isSetActionTime();
    if (this_present_actionTime || that_present_actionTime) {
      if (!(this_present_actionTime && that_present_actionTime))
        return false;
      if (!this.actionTime.equals(that.actionTime))
        return false;
    }

    boolean this_present_traderID = true && this.isSetTraderID();
    boolean that_present_traderID = true && that.isSetTraderID();
    if (this_present_traderID || that_present_traderID) {
      if (!(this_present_traderID && that_present_traderID))
        return false;
      if (!this.traderID.equals(that.traderID))
        return false;
    }

    boolean this_present_installID = true;
    boolean that_present_installID = true;
    if (this_present_installID || that_present_installID) {
      if (!(this_present_installID && that_present_installID))
        return false;
      if (this.installID != that.installID)
        return false;
    }

    boolean this_present_quoteLocalID = true && this.isSetQuoteLocalID();
    boolean that_present_quoteLocalID = true && that.isSetQuoteLocalID();
    if (this_present_quoteLocalID || that_present_quoteLocalID) {
      if (!(this_present_quoteLocalID && that_present_quoteLocalID))
        return false;
      if (!this.quoteLocalID.equals(that.quoteLocalID))
        return false;
    }

    boolean this_present_actionLocalID = true && this.isSetActionLocalID();
    boolean that_present_actionLocalID = true && that.isSetActionLocalID();
    if (this_present_actionLocalID || that_present_actionLocalID) {
      if (!(this_present_actionLocalID && that_present_actionLocalID))
        return false;
      if (!this.actionLocalID.equals(that.actionLocalID))
        return false;
    }

    boolean this_present_participantID = true && this.isSetParticipantID();
    boolean that_present_participantID = true && that.isSetParticipantID();
    if (this_present_participantID || that_present_participantID) {
      if (!(this_present_participantID && that_present_participantID))
        return false;
      if (!this.participantID.equals(that.participantID))
        return false;
    }

    boolean this_present_clientID = true && this.isSetClientID();
    boolean that_present_clientID = true && that.isSetClientID();
    if (this_present_clientID || that_present_clientID) {
      if (!(this_present_clientID && that_present_clientID))
        return false;
      if (!this.clientID.equals(that.clientID))
        return false;
    }

    boolean this_present_businessUnit = true && this.isSetBusinessUnit();
    boolean that_present_businessUnit = true && that.isSetBusinessUnit();
    if (this_present_businessUnit || that_present_businessUnit) {
      if (!(this_present_businessUnit && that_present_businessUnit))
        return false;
      if (!this.businessUnit.equals(that.businessUnit))
        return false;
    }

    boolean this_present_orderActionStatus = true && this.isSetOrderActionStatus();
    boolean that_present_orderActionStatus = true && that.isSetOrderActionStatus();
    if (this_present_orderActionStatus || that_present_orderActionStatus) {
      if (!(this_present_orderActionStatus && that_present_orderActionStatus))
        return false;
      if (!this.orderActionStatus.equals(that.orderActionStatus))
        return false;
    }

    boolean this_present_userID = true && this.isSetUserID();
    boolean that_present_userID = true && that.isSetUserID();
    if (this_present_userID || that_present_userID) {
      if (!(this_present_userID && that_present_userID))
        return false;
      if (!this.userID.equals(that.userID))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CThostFtdcExchangeQuoteActionField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExchangeID()).compareTo(other.isSetExchangeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeID, other.exchangeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuoteSysID()).compareTo(other.isSetQuoteSysID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuoteSysID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quoteSysID, other.quoteSysID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionFlag()).compareTo(other.isSetActionFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionFlag, other.actionFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionDate()).compareTo(other.isSetActionDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionDate, other.actionDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionTime()).compareTo(other.isSetActionTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionTime, other.actionTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraderID()).compareTo(other.isSetTraderID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraderID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traderID, other.traderID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstallID()).compareTo(other.isSetInstallID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstallID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.installID, other.installID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuoteLocalID()).compareTo(other.isSetQuoteLocalID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuoteLocalID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quoteLocalID, other.quoteLocalID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionLocalID()).compareTo(other.isSetActionLocalID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionLocalID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionLocalID, other.actionLocalID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParticipantID()).compareTo(other.isSetParticipantID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParticipantID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.participantID, other.participantID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientID()).compareTo(other.isSetClientID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientID, other.clientID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessUnit()).compareTo(other.isSetBusinessUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessUnit, other.businessUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderActionStatus()).compareTo(other.isSetOrderActionStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderActionStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderActionStatus, other.orderActionStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserID()).compareTo(other.isSetUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, other.userID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CThostFtdcExchangeQuoteActionField(");
    boolean first = true;

    sb.append("exchangeID:");
    if (this.exchangeID == null) {
      sb.append("null");
    } else {
      sb.append(this.exchangeID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("quoteSysID:");
    if (this.quoteSysID == null) {
      sb.append("null");
    } else {
      sb.append(this.quoteSysID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actionFlag:");
    if (this.actionFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.actionFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actionDate:");
    if (this.actionDate == null) {
      sb.append("null");
    } else {
      sb.append(this.actionDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actionTime:");
    if (this.actionTime == null) {
      sb.append("null");
    } else {
      sb.append(this.actionTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("traderID:");
    if (this.traderID == null) {
      sb.append("null");
    } else {
      sb.append(this.traderID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("installID:");
    sb.append(this.installID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("quoteLocalID:");
    if (this.quoteLocalID == null) {
      sb.append("null");
    } else {
      sb.append(this.quoteLocalID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actionLocalID:");
    if (this.actionLocalID == null) {
      sb.append("null");
    } else {
      sb.append(this.actionLocalID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("participantID:");
    if (this.participantID == null) {
      sb.append("null");
    } else {
      sb.append(this.participantID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientID:");
    if (this.clientID == null) {
      sb.append("null");
    } else {
      sb.append(this.clientID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessUnit:");
    if (this.businessUnit == null) {
      sb.append("null");
    } else {
      sb.append(this.businessUnit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderActionStatus:");
    if (this.orderActionStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.orderActionStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userID:");
    if (this.userID == null) {
      sb.append("null");
    } else {
      sb.append(this.userID);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CThostFtdcExchangeQuoteActionFieldStandardSchemeFactory implements SchemeFactory {
    public CThostFtdcExchangeQuoteActionFieldStandardScheme getScheme() {
      return new CThostFtdcExchangeQuoteActionFieldStandardScheme();
    }
  }

  private static class CThostFtdcExchangeQuoteActionFieldStandardScheme extends StandardScheme<CThostFtdcExchangeQuoteActionField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CThostFtdcExchangeQuoteActionField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXCHANGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeID = iprot.readString();
              struct.setExchangeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUOTE_SYS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.quoteSysID = iprot.readString();
              struct.setQuoteSysIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACTION_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actionFlag = iprot.readString();
              struct.setActionFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACTION_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actionDate = iprot.readString();
              struct.setActionDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACTION_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actionTime = iprot.readString();
              struct.setActionTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRADER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traderID = iprot.readString();
              struct.setTraderIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INSTALL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.installID = iprot.readI32();
              struct.setInstallIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // QUOTE_LOCAL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.quoteLocalID = iprot.readString();
              struct.setQuoteLocalIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ACTION_LOCAL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actionLocalID = iprot.readString();
              struct.setActionLocalIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PARTICIPANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.participantID = iprot.readString();
              struct.setParticipantIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientID = iprot.readString();
              struct.setClientIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BUSINESS_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessUnit = iprot.readString();
              struct.setBusinessUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ORDER_ACTION_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderActionStatus = iprot.readString();
              struct.setOrderActionStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userID = iprot.readString();
              struct.setUserIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CThostFtdcExchangeQuoteActionField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.exchangeID != null) {
        oprot.writeFieldBegin(EXCHANGE_ID_FIELD_DESC);
        oprot.writeString(struct.exchangeID);
        oprot.writeFieldEnd();
      }
      if (struct.quoteSysID != null) {
        oprot.writeFieldBegin(QUOTE_SYS_ID_FIELD_DESC);
        oprot.writeString(struct.quoteSysID);
        oprot.writeFieldEnd();
      }
      if (struct.actionFlag != null) {
        oprot.writeFieldBegin(ACTION_FLAG_FIELD_DESC);
        oprot.writeString(struct.actionFlag);
        oprot.writeFieldEnd();
      }
      if (struct.actionDate != null) {
        oprot.writeFieldBegin(ACTION_DATE_FIELD_DESC);
        oprot.writeString(struct.actionDate);
        oprot.writeFieldEnd();
      }
      if (struct.actionTime != null) {
        oprot.writeFieldBegin(ACTION_TIME_FIELD_DESC);
        oprot.writeString(struct.actionTime);
        oprot.writeFieldEnd();
      }
      if (struct.traderID != null) {
        oprot.writeFieldBegin(TRADER_ID_FIELD_DESC);
        oprot.writeString(struct.traderID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INSTALL_ID_FIELD_DESC);
      oprot.writeI32(struct.installID);
      oprot.writeFieldEnd();
      if (struct.quoteLocalID != null) {
        oprot.writeFieldBegin(QUOTE_LOCAL_ID_FIELD_DESC);
        oprot.writeString(struct.quoteLocalID);
        oprot.writeFieldEnd();
      }
      if (struct.actionLocalID != null) {
        oprot.writeFieldBegin(ACTION_LOCAL_ID_FIELD_DESC);
        oprot.writeString(struct.actionLocalID);
        oprot.writeFieldEnd();
      }
      if (struct.participantID != null) {
        oprot.writeFieldBegin(PARTICIPANT_ID_FIELD_DESC);
        oprot.writeString(struct.participantID);
        oprot.writeFieldEnd();
      }
      if (struct.clientID != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientID);
        oprot.writeFieldEnd();
      }
      if (struct.businessUnit != null) {
        oprot.writeFieldBegin(BUSINESS_UNIT_FIELD_DESC);
        oprot.writeString(struct.businessUnit);
        oprot.writeFieldEnd();
      }
      if (struct.orderActionStatus != null) {
        oprot.writeFieldBegin(ORDER_ACTION_STATUS_FIELD_DESC);
        oprot.writeString(struct.orderActionStatus);
        oprot.writeFieldEnd();
      }
      if (struct.userID != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CThostFtdcExchangeQuoteActionFieldTupleSchemeFactory implements SchemeFactory {
    public CThostFtdcExchangeQuoteActionFieldTupleScheme getScheme() {
      return new CThostFtdcExchangeQuoteActionFieldTupleScheme();
    }
  }

  private static class CThostFtdcExchangeQuoteActionFieldTupleScheme extends TupleScheme<CThostFtdcExchangeQuoteActionField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CThostFtdcExchangeQuoteActionField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetExchangeID()) {
        optionals.set(0);
      }
      if (struct.isSetQuoteSysID()) {
        optionals.set(1);
      }
      if (struct.isSetActionFlag()) {
        optionals.set(2);
      }
      if (struct.isSetActionDate()) {
        optionals.set(3);
      }
      if (struct.isSetActionTime()) {
        optionals.set(4);
      }
      if (struct.isSetTraderID()) {
        optionals.set(5);
      }
      if (struct.isSetInstallID()) {
        optionals.set(6);
      }
      if (struct.isSetQuoteLocalID()) {
        optionals.set(7);
      }
      if (struct.isSetActionLocalID()) {
        optionals.set(8);
      }
      if (struct.isSetParticipantID()) {
        optionals.set(9);
      }
      if (struct.isSetClientID()) {
        optionals.set(10);
      }
      if (struct.isSetBusinessUnit()) {
        optionals.set(11);
      }
      if (struct.isSetOrderActionStatus()) {
        optionals.set(12);
      }
      if (struct.isSetUserID()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetExchangeID()) {
        oprot.writeString(struct.exchangeID);
      }
      if (struct.isSetQuoteSysID()) {
        oprot.writeString(struct.quoteSysID);
      }
      if (struct.isSetActionFlag()) {
        oprot.writeString(struct.actionFlag);
      }
      if (struct.isSetActionDate()) {
        oprot.writeString(struct.actionDate);
      }
      if (struct.isSetActionTime()) {
        oprot.writeString(struct.actionTime);
      }
      if (struct.isSetTraderID()) {
        oprot.writeString(struct.traderID);
      }
      if (struct.isSetInstallID()) {
        oprot.writeI32(struct.installID);
      }
      if (struct.isSetQuoteLocalID()) {
        oprot.writeString(struct.quoteLocalID);
      }
      if (struct.isSetActionLocalID()) {
        oprot.writeString(struct.actionLocalID);
      }
      if (struct.isSetParticipantID()) {
        oprot.writeString(struct.participantID);
      }
      if (struct.isSetClientID()) {
        oprot.writeString(struct.clientID);
      }
      if (struct.isSetBusinessUnit()) {
        oprot.writeString(struct.businessUnit);
      }
      if (struct.isSetOrderActionStatus()) {
        oprot.writeString(struct.orderActionStatus);
      }
      if (struct.isSetUserID()) {
        oprot.writeString(struct.userID);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CThostFtdcExchangeQuoteActionField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.exchangeID = iprot.readString();
        struct.setExchangeIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.quoteSysID = iprot.readString();
        struct.setQuoteSysIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.actionFlag = iprot.readString();
        struct.setActionFlagIsSet(true);
      }
      if (incoming.get(3)) {
        struct.actionDate = iprot.readString();
        struct.setActionDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.actionTime = iprot.readString();
        struct.setActionTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.traderID = iprot.readString();
        struct.setTraderIDIsSet(true);
      }
      if (incoming.get(6)) {
        struct.installID = iprot.readI32();
        struct.setInstallIDIsSet(true);
      }
      if (incoming.get(7)) {
        struct.quoteLocalID = iprot.readString();
        struct.setQuoteLocalIDIsSet(true);
      }
      if (incoming.get(8)) {
        struct.actionLocalID = iprot.readString();
        struct.setActionLocalIDIsSet(true);
      }
      if (incoming.get(9)) {
        struct.participantID = iprot.readString();
        struct.setParticipantIDIsSet(true);
      }
      if (incoming.get(10)) {
        struct.clientID = iprot.readString();
        struct.setClientIDIsSet(true);
      }
      if (incoming.get(11)) {
        struct.businessUnit = iprot.readString();
        struct.setBusinessUnitIsSet(true);
      }
      if (incoming.get(12)) {
        struct.orderActionStatus = iprot.readString();
        struct.setOrderActionStatusIsSet(true);
      }
      if (incoming.get(13)) {
        struct.userID = iprot.readString();
        struct.setUserIDIsSet(true);
      }
    }
  }

}

